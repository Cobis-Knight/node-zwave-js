import { createRequire } from 'module'; var require = require || createRequire(import.meta.url);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb2, mod) => function __require2() {
  return mod || (0, cb2[__getOwnPropNames(cb2)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key2 of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key2) && key2 !== except)
        __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// ../shared/build/docker.js
var require_docker = __commonJS({
  "../shared/build/docker.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isDocker = void 0;
    var fs_1 = __importDefault(__require("fs"));
    function hasDockerEnv() {
      try {
        fs_1.default.statSync("/.dockerenv");
        return true;
      } catch {
        return false;
      }
    }
    function hasDockerCGroup() {
      try {
        return fs_1.default.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
      } catch {
        return false;
      }
    }
    var _isDocker;
    function isDocker() {
      if (_isDocker === void 0) {
        _isDocker = hasDockerEnv() || hasDockerCGroup();
      }
      return _isDocker;
    }
    exports2.isDocker = isDocker;
  }
});

// ../shared/build/errors.js
var require_errors = __commonJS({
  "../shared/build/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorMessage = void 0;
    function getErrorMessage5(e, includeStack) {
      if (e instanceof Error)
        return includeStack && e.stack ? e.stack : e.message;
      return String(e);
    }
    exports2.getErrorMessage = getErrorMessage5;
  }
});

// ../shared/build/inheritance.js
var require_inheritance = __commonJS({
  "../shared/build/inheritance.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.staticExtends = exports2.AllOf = exports2.applyMixin = exports2.Mixin = void 0;
    function Mixin(baseCtors) {
      return function(derivedCtor) {
        for (const baseCtor of baseCtors) {
          applyMixin(derivedCtor, baseCtor);
        }
      };
    }
    exports2.Mixin = Mixin;
    function applyMixin(target, mixin, includeConstructor = false) {
      const inheritanceChain = [mixin];
      while (true) {
        const current = inheritanceChain[0];
        const base = Object.getPrototypeOf(current);
        if (base == null ? void 0 : base.prototype) {
          inheritanceChain.unshift(base);
        } else {
          break;
        }
      }
      for (const ctor of inheritanceChain) {
        for (const prop of Object.getOwnPropertyNames(ctor.prototype)) {
          if (includeConstructor || prop !== "constructor") {
            Object.defineProperty(target.prototype, prop, Object.getOwnPropertyDescriptor(ctor.prototype, prop) ?? /* @__PURE__ */ Object.create(null));
          }
        }
      }
    }
    exports2.applyMixin = applyMixin;
    function AllOf(...BaseClasses) {
      const [First, ...Others] = BaseClasses;
      const ret = class AllOf extends First {
      };
      for (const base of Others) {
        applyMixin(ret, base);
      }
      return ret;
    }
    exports2.AllOf = AllOf;
    function staticExtends(constructor, base) {
      while (constructor) {
        if (constructor === base)
          return true;
        constructor = Object.getPrototypeOf(constructor);
      }
      return false;
    }
    exports2.staticExtends = staticExtends;
  }
});

// ../shared/build/EventEmitter.js
var require_EventEmitter = __commonJS({
  "../shared/build/EventEmitter.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypedEventEmitter = void 0;
    var events_1 = __importDefault(__require("events"));
    var inheritance_1 = require_inheritance();
    var TypedEventEmitter2 = class {
    };
    exports2.TypedEventEmitter = TypedEventEmitter2;
    (0, inheritance_1.applyMixin)(TypedEventEmitter2, events_1.default);
  }
});

// ../../node_modules/.store/universalify-npm-2.0.0-03b8b418a8/node_modules/universalify/index.js
var require_universalify = __commonJS({
  "../../node_modules/.store/universalify-npm-2.0.0-03b8b418a8/node_modules/universalify/index.js"(exports2) {
    "use strict";
    exports2.fromCallback = function(fn) {
      return Object.defineProperty(function(...args) {
        if (typeof args[args.length - 1] === "function")
          fn.apply(this, args);
        else {
          return new Promise((resolve, reject) => {
            fn.call(
              this,
              ...args,
              (err2, res) => err2 != null ? reject(err2) : resolve(res)
            );
          });
        }
      }, "name", { value: fn.name });
    };
    exports2.fromPromise = function(fn) {
      return Object.defineProperty(function(...args) {
        const cb2 = args[args.length - 1];
        if (typeof cb2 !== "function")
          return fn.apply(this, args);
        else
          fn.apply(this, args.slice(0, -1)).then((r) => cb2(null, r), cb2);
      }, "name", { value: fn.name });
    };
  }
});

// ../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
  "../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/polyfills.js"(exports2, module2) {
    var constants = __require("constants");
    var origCwd = process.cwd;
    var cwd2 = null;
    var platform2 = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd2)
        cwd2 = origCwd.call(process);
      return cwd2;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd2 = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module2.exports = patch;
    function patch(fs2) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs2);
      }
      if (!fs2.lutimes) {
        patchLutimes(fs2);
      }
      fs2.chown = chownFix(fs2.chown);
      fs2.fchown = chownFix(fs2.fchown);
      fs2.lchown = chownFix(fs2.lchown);
      fs2.chmod = chmodFix(fs2.chmod);
      fs2.fchmod = chmodFix(fs2.fchmod);
      fs2.lchmod = chmodFix(fs2.lchmod);
      fs2.chownSync = chownFixSync(fs2.chownSync);
      fs2.fchownSync = chownFixSync(fs2.fchownSync);
      fs2.lchownSync = chownFixSync(fs2.lchownSync);
      fs2.chmodSync = chmodFixSync(fs2.chmodSync);
      fs2.fchmodSync = chmodFixSync(fs2.fchmodSync);
      fs2.lchmodSync = chmodFixSync(fs2.lchmodSync);
      fs2.stat = statFix(fs2.stat);
      fs2.fstat = statFix(fs2.fstat);
      fs2.lstat = statFix(fs2.lstat);
      fs2.statSync = statFixSync(fs2.statSync);
      fs2.fstatSync = statFixSync(fs2.fstatSync);
      fs2.lstatSync = statFixSync(fs2.lstatSync);
      if (!fs2.lchmod) {
        fs2.lchmod = function(path2, mode, cb2) {
          if (cb2)
            process.nextTick(cb2);
        };
        fs2.lchmodSync = function() {
        };
      }
      if (!fs2.lchown) {
        fs2.lchown = function(path2, uid, gid, cb2) {
          if (cb2)
            process.nextTick(cb2);
        };
        fs2.lchownSync = function() {
        };
      }
      if (platform2 === "win32") {
        fs2.rename = function(fs$rename) {
          return function(from, to, cb2) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs2.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb2(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb2)
                cb2(er);
            });
          };
        }(fs2.rename);
      }
      fs2.read = function(fs$read) {
        function read2(fd, buffer2, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs2, fd, buffer2, offset, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs2, fd, buffer2, offset, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read2, fs$read);
        return read2;
      }(fs2.read);
      fs2.readSync = function(fs$readSync) {
        return function(fd, buffer2, offset, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs2, fd, buffer2, offset, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs2.readSync);
      function patchLchmod(fs3) {
        fs3.lchmod = function(path2, mode, callback) {
          fs3.open(
            path2,
            constants.O_WRONLY | constants.O_SYMLINK,
            mode,
            function(err2, fd) {
              if (err2) {
                if (callback)
                  callback(err2);
                return;
              }
              fs3.fchmod(fd, mode, function(err3) {
                fs3.close(fd, function(err22) {
                  if (callback)
                    callback(err3 || err22);
                });
              });
            }
          );
        };
        fs3.lchmodSync = function(path2, mode) {
          var fd = fs3.openSync(path2, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs3.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs3.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs3.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs3) {
        if (constants.hasOwnProperty("O_SYMLINK")) {
          fs3.lutimes = function(path2, at, mt, cb2) {
            fs3.open(path2, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb2)
                  cb2(er);
                return;
              }
              fs3.futimes(fd, at, mt, function(er2) {
                fs3.close(fd, function(er22) {
                  if (cb2)
                    cb2(er2 || er22);
                });
              });
            });
          };
          fs3.lutimesSync = function(path2, at, mt) {
            var fd = fs3.openSync(path2, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs3.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs3.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs3.closeSync(fd);
              }
            }
            return ret;
          };
        } else {
          fs3.lutimes = function(_a2, _b, _c, cb2) {
            if (cb2)
              process.nextTick(cb2);
          };
          fs3.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb2) {
          return orig.call(fs2, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb2)
              cb2.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs2, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb2) {
          return orig.call(fs2, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb2)
              cb2.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs2, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb2) {
          if (typeof options === "function") {
            cb2 = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb2)
              cb2.apply(this, arguments);
          }
          return options ? orig.call(fs2, target, options, callback) : orig.call(fs2, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs2, target, options) : orig.call(fs2, target);
          if (stats.uid < 0)
            stats.uid += 4294967296;
          if (stats.gid < 0)
            stats.gid += 4294967296;
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// ../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
  "../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/legacy-streams.js"(exports2, module2) {
    var Stream2 = __require("stream").Stream;
    module2.exports = legacy;
    function legacy(fs2) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path2, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path2, options);
        Stream2.call(this);
        var self2 = this;
        this.path = path2;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key2 = keys[index];
          this[key2] = options[key2];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if ("number" !== typeof this.end) {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self2._read();
          });
          return;
        }
        fs2.open(this.path, this.flags, this.mode, function(err2, fd) {
          if (err2) {
            self2.emit("error", err2);
            self2.readable = false;
            return;
          }
          self2.fd = fd;
          self2.emit("open", fd);
          self2._read();
        });
      }
      function WriteStream(path2, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path2, options);
        Stream2.call(this);
        this.path = path2;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key2 = keys[index];
          this[key2] = options[key2];
        }
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs2.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// ../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
  "../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/clone.js"(exports2, module2) {
    "use strict";
    module2.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = /* @__PURE__ */ Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key2) {
        Object.defineProperty(copy, key2, Object.getOwnPropertyDescriptor(obj, key2));
      });
      return copy;
    }
  }
});

// ../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
  "../../node_modules/.store/graceful-fs-npm-4.2.6-535b2234f1/node_modules/graceful-fs/graceful-fs.js"(exports2, module2) {
    var fs2 = __require("fs");
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = __require("util");
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop2() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop2;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs2[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs2, queue);
      fs2.close = function(fs$close) {
        function close(fd, cb2) {
          return fs$close.call(fs2, fd, function(err2) {
            if (!err2) {
              retry();
            }
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs2.close);
      fs2.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs2, arguments);
          retry();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs2.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs2[gracefulQueue]);
          __require("assert").equal(fs2[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs2[gracefulQueue]);
    }
    module2.exports = patch(clone(fs2));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs2.__patched) {
      module2.exports = patch(fs2);
      fs2.__patched = true;
    }
    function patch(fs3) {
      polyfills(fs3);
      fs3.gracefulify = patch;
      fs3.createReadStream = createReadStream;
      fs3.createWriteStream = createWriteStream;
      var fs$readFile = fs3.readFile;
      fs3.readFile = readFile;
      function readFile(path2, options, cb2) {
        if (typeof options === "function")
          cb2 = options, options = null;
        return go$readFile(path2, options, cb2);
        function go$readFile(path3, options2, cb3) {
          return fs$readFile(path3, options2, function(err2) {
            if (err2 && (err2.code === "EMFILE" || err2.code === "ENFILE"))
              enqueue([go$readFile, [path3, options2, cb3]]);
            else {
              if (typeof cb3 === "function")
                cb3.apply(this, arguments);
              retry();
            }
          });
        }
      }
      var fs$writeFile = fs3.writeFile;
      fs3.writeFile = writeFile;
      function writeFile(path2, data, options, cb2) {
        if (typeof options === "function")
          cb2 = options, options = null;
        return go$writeFile(path2, data, options, cb2);
        function go$writeFile(path3, data2, options2, cb3) {
          return fs$writeFile(path3, data2, options2, function(err2) {
            if (err2 && (err2.code === "EMFILE" || err2.code === "ENFILE"))
              enqueue([go$writeFile, [path3, data2, options2, cb3]]);
            else {
              if (typeof cb3 === "function")
                cb3.apply(this, arguments);
              retry();
            }
          });
        }
      }
      var fs$appendFile = fs3.appendFile;
      if (fs$appendFile)
        fs3.appendFile = appendFile;
      function appendFile(path2, data, options, cb2) {
        if (typeof options === "function")
          cb2 = options, options = null;
        return go$appendFile(path2, data, options, cb2);
        function go$appendFile(path3, data2, options2, cb3) {
          return fs$appendFile(path3, data2, options2, function(err2) {
            if (err2 && (err2.code === "EMFILE" || err2.code === "ENFILE"))
              enqueue([go$appendFile, [path3, data2, options2, cb3]]);
            else {
              if (typeof cb3 === "function")
                cb3.apply(this, arguments);
              retry();
            }
          });
        }
      }
      var fs$copyFile = fs3.copyFile;
      if (fs$copyFile)
        fs3.copyFile = copyFile;
      function copyFile(src, dest, flags, cb2) {
        if (typeof flags === "function") {
          cb2 = flags;
          flags = 0;
        }
        return fs$copyFile(src, dest, flags, function(err2) {
          if (err2 && (err2.code === "EMFILE" || err2.code === "ENFILE"))
            enqueue([fs$copyFile, [src, dest, flags, cb2]]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
            retry();
          }
        });
      }
      var fs$readdir = fs3.readdir;
      fs3.readdir = readdir;
      function readdir(path2, options, cb2) {
        var args = [path2];
        if (typeof options !== "function") {
          args.push(options);
        } else {
          cb2 = options;
        }
        args.push(go$readdir$cb);
        return go$readdir(args);
        function go$readdir$cb(err2, files) {
          if (files && files.sort)
            files.sort();
          if (err2 && (err2.code === "EMFILE" || err2.code === "ENFILE"))
            enqueue([go$readdir, [args]]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
            retry();
          }
        }
      }
      function go$readdir(args) {
        return fs$readdir.apply(fs3, args);
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs3);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs3.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs3.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs3, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs3, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs3, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs3, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path2, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err2, fd) {
          if (err2) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err2);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path2, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err2, fd) {
          if (err2) {
            that.destroy();
            that.emit("error", err2);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path2, options) {
        return new fs3.ReadStream(path2, options);
      }
      function createWriteStream(path2, options) {
        return new fs3.WriteStream(path2, options);
      }
      var fs$open = fs3.open;
      fs3.open = open;
      function open(path2, flags, mode, cb2) {
        if (typeof mode === "function")
          cb2 = mode, mode = null;
        return go$open(path2, flags, mode, cb2);
        function go$open(path3, flags2, mode2, cb3) {
          return fs$open(path3, flags2, mode2, function(err2, fd) {
            if (err2 && (err2.code === "EMFILE" || err2.code === "ENFILE"))
              enqueue([go$open, [path3, flags2, mode2, cb3]]);
            else {
              if (typeof cb3 === "function")
                cb3.apply(this, arguments);
              retry();
            }
          });
        }
      }
      return fs3;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs2[gracefulQueue].push(elem);
    }
    function retry() {
      var elem = fs2[gracefulQueue].shift();
      if (elem) {
        debug("RETRY", elem[0].name, elem[1]);
        elem[0].apply(null, elem[1]);
      }
    }
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/fs/index.js
var require_fs = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/fs/index.js"(exports2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs2 = require_graceful_fs();
    var api = [
      "access",
      "appendFile",
      "chmod",
      "chown",
      "close",
      "copyFile",
      "fchmod",
      "fchown",
      "fdatasync",
      "fstat",
      "fsync",
      "ftruncate",
      "futimes",
      "lchmod",
      "lchown",
      "link",
      "lstat",
      "mkdir",
      "mkdtemp",
      "open",
      "opendir",
      "readdir",
      "readFile",
      "readlink",
      "realpath",
      "rename",
      "rm",
      "rmdir",
      "stat",
      "symlink",
      "truncate",
      "unlink",
      "utimes",
      "writeFile"
    ].filter((key2) => {
      return typeof fs2[key2] === "function";
    });
    Object.assign(exports2, fs2);
    api.forEach((method) => {
      exports2[method] = u(fs2[method]);
    });
    exports2.exists = function(filename, callback) {
      if (typeof callback === "function") {
        return fs2.exists(filename, callback);
      }
      return new Promise((resolve) => {
        return fs2.exists(filename, resolve);
      });
    };
    exports2.read = function(fd, buffer2, offset, length, position, callback) {
      if (typeof callback === "function") {
        return fs2.read(fd, buffer2, offset, length, position, callback);
      }
      return new Promise((resolve, reject) => {
        fs2.read(fd, buffer2, offset, length, position, (err2, bytesRead, buffer3) => {
          if (err2)
            return reject(err2);
          resolve({ bytesRead, buffer: buffer3 });
        });
      });
    };
    exports2.write = function(fd, buffer2, ...args) {
      if (typeof args[args.length - 1] === "function") {
        return fs2.write(fd, buffer2, ...args);
      }
      return new Promise((resolve, reject) => {
        fs2.write(fd, buffer2, ...args, (err2, bytesWritten, buffer3) => {
          if (err2)
            return reject(err2);
          resolve({ bytesWritten, buffer: buffer3 });
        });
      });
    };
    if (typeof fs2.writev === "function") {
      exports2.writev = function(fd, buffers, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs2.writev(fd, buffers, ...args);
        }
        return new Promise((resolve, reject) => {
          fs2.writev(fd, buffers, ...args, (err2, bytesWritten, buffers2) => {
            if (err2)
              return reject(err2);
            resolve({ bytesWritten, buffers: buffers2 });
          });
        });
      };
    }
    if (typeof fs2.realpath.native === "function") {
      exports2.realpath.native = u(fs2.realpath.native);
    } else {
      process.emitWarning(
        "fs.realpath.native is not a function. Is fs being monkey-patched?",
        "Warning",
        "fs-extra-WARN0003"
      );
    }
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/mkdirs/utils.js
var require_utils = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/mkdirs/utils.js"(exports2, module2) {
    "use strict";
    var path2 = __require("path");
    module2.exports.checkPath = function checkPath(pth) {
      if (process.platform === "win32") {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path2.parse(pth).root, ""));
        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = "EINVAL";
          throw error;
        }
      }
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports2, module2) {
    "use strict";
    var fs2 = require_fs();
    var { checkPath } = require_utils();
    var getMode = (options) => {
      const defaults = { mode: 511 };
      if (typeof options === "number")
        return options;
      return { ...defaults, ...options }.mode;
    };
    module2.exports.makeDir = async (dir, options) => {
      checkPath(dir);
      return fs2.mkdir(dir, {
        mode: getMode(options),
        recursive: true
      });
    };
    module2.exports.makeDirSync = (dir, options) => {
      checkPath(dir);
      return fs2.mkdirSync(dir, {
        mode: getMode(options),
        recursive: true
      });
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/mkdirs/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var { makeDir: _makeDir, makeDirSync } = require_make_dir();
    var makeDir = u(_makeDir);
    module2.exports = {
      mkdirs: makeDir,
      mkdirsSync: makeDirSync,
      mkdirp: makeDir,
      mkdirpSync: makeDirSync,
      ensureDir: makeDir,
      ensureDirSync: makeDirSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/path-exists/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs2 = require_fs();
    function pathExists(path2) {
      return fs2.access(path2).then(() => true).catch(() => false);
    }
    module2.exports = {
      pathExists: u(pathExists),
      pathExistsSync: fs2.existsSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/util/utimes.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    function utimesMillis(path2, atime, mtime, callback) {
      fs2.open(path2, "r+", (err2, fd) => {
        if (err2)
          return callback(err2);
        fs2.futimes(fd, atime, mtime, (futimesErr) => {
          fs2.close(fd, (closeErr) => {
            if (callback)
              callback(futimesErr || closeErr);
          });
        });
      });
    }
    function utimesMillisSync(path2, atime, mtime) {
      const fd = fs2.openSync(path2, "r+");
      fs2.futimesSync(fd, atime, mtime);
      return fs2.closeSync(fd);
    }
    module2.exports = {
      utimesMillis,
      utimesMillisSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/util/stat.js"(exports2, module2) {
    "use strict";
    var fs2 = require_fs();
    var path2 = __require("path");
    var util = __require("util");
    function getStats(src, dest, opts) {
      const statFunc = opts.dereference ? (file) => fs2.stat(file, { bigint: true }) : (file) => fs2.lstat(file, { bigint: true });
      return Promise.all([
        statFunc(src),
        statFunc(dest).catch((err2) => {
          if (err2.code === "ENOENT")
            return null;
          throw err2;
        })
      ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
    }
    function getStatsSync(src, dest, opts) {
      let destStat;
      const statFunc = opts.dereference ? (file) => fs2.statSync(file, { bigint: true }) : (file) => fs2.lstatSync(file, { bigint: true });
      const srcStat = statFunc(src);
      try {
        destStat = statFunc(dest);
      } catch (err2) {
        if (err2.code === "ENOENT")
          return { srcStat, destStat: null };
        throw err2;
      }
      return { srcStat, destStat };
    }
    function checkPaths(src, dest, funcName, opts, cb2) {
      util.callbackify(getStats)(src, dest, opts, (err2, stats) => {
        if (err2)
          return cb2(err2);
        const { srcStat, destStat } = stats;
        if (destStat) {
          if (areIdentical(srcStat, destStat)) {
            const srcBaseName = path2.basename(src);
            const destBaseName = path2.basename(dest);
            if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
              return cb2(null, { srcStat, destStat, isChangingCase: true });
            }
            return cb2(new Error("Source and destination must not be the same."));
          }
          if (srcStat.isDirectory() && !destStat.isDirectory()) {
            return cb2(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`));
          }
          if (!srcStat.isDirectory() && destStat.isDirectory()) {
            return cb2(new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`));
          }
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          return cb2(new Error(errMsg(src, dest, funcName)));
        }
        return cb2(null, { srcStat, destStat });
      });
    }
    function checkPathsSync(src, dest, funcName, opts) {
      const { srcStat, destStat } = getStatsSync(src, dest, opts);
      if (destStat) {
        if (areIdentical(srcStat, destStat)) {
          const srcBaseName = path2.basename(src);
          const destBaseName = path2.basename(dest);
          if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
            return { srcStat, destStat, isChangingCase: true };
          }
          throw new Error("Source and destination must not be the same.");
        }
        if (srcStat.isDirectory() && !destStat.isDirectory()) {
          throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
        }
        if (!srcStat.isDirectory() && destStat.isDirectory()) {
          throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
        }
      }
      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return { srcStat, destStat };
    }
    function checkParentPaths(src, srcStat, dest, funcName, cb2) {
      const srcParent = path2.resolve(path2.dirname(src));
      const destParent = path2.resolve(path2.dirname(dest));
      if (destParent === srcParent || destParent === path2.parse(destParent).root)
        return cb2();
      fs2.stat(destParent, { bigint: true }, (err2, destStat) => {
        if (err2) {
          if (err2.code === "ENOENT")
            return cb2();
          return cb2(err2);
        }
        if (areIdentical(srcStat, destStat)) {
          return cb2(new Error(errMsg(src, dest, funcName)));
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb2);
      });
    }
    function checkParentPathsSync(src, srcStat, dest, funcName) {
      const srcParent = path2.resolve(path2.dirname(src));
      const destParent = path2.resolve(path2.dirname(dest));
      if (destParent === srcParent || destParent === path2.parse(destParent).root)
        return;
      let destStat;
      try {
        destStat = fs2.statSync(destParent, { bigint: true });
      } catch (err2) {
        if (err2.code === "ENOENT")
          return;
        throw err2;
      }
      if (areIdentical(srcStat, destStat)) {
        throw new Error(errMsg(src, dest, funcName));
      }
      return checkParentPathsSync(src, srcStat, destParent, funcName);
    }
    function areIdentical(srcStat, destStat) {
      return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
    }
    function isSrcSubdir(src, dest) {
      const srcArr = path2.resolve(src).split(path2.sep).filter((i2) => i2);
      const destArr = path2.resolve(dest).split(path2.sep).filter((i2) => i2);
      return srcArr.reduce((acc, cur, i2) => acc && destArr[i2] === cur, true);
    }
    function errMsg(src, dest, funcName) {
      return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
    }
    module2.exports = {
      checkPaths,
      checkPathsSync,
      checkParentPaths,
      checkParentPathsSync,
      isSrcSubdir,
      areIdentical
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/copy/copy.js
var require_copy = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/copy/copy.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    var path2 = __require("path");
    var mkdirs = require_mkdirs().mkdirs;
    var pathExists = require_path_exists().pathExists;
    var utimesMillis = require_utimes().utimesMillis;
    var stat = require_stat();
    function copy(src, dest, opts, cb2) {
      if (typeof opts === "function" && !cb2) {
        cb2 = opts;
        opts = {};
      } else if (typeof opts === "function") {
        opts = { filter: opts };
      }
      cb2 = cb2 || function() {
      };
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        process.emitWarning(
          "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
          "Warning",
          "fs-extra-WARN0001"
        );
      }
      stat.checkPaths(src, dest, "copy", opts, (err2, stats) => {
        if (err2)
          return cb2(err2);
        const { srcStat, destStat } = stats;
        stat.checkParentPaths(src, srcStat, dest, "copy", (err3) => {
          if (err3)
            return cb2(err3);
          if (opts.filter)
            return handleFilter(checkParentDir, destStat, src, dest, opts, cb2);
          return checkParentDir(destStat, src, dest, opts, cb2);
        });
      });
    }
    function checkParentDir(destStat, src, dest, opts, cb2) {
      const destParent = path2.dirname(dest);
      pathExists(destParent, (err2, dirExists) => {
        if (err2)
          return cb2(err2);
        if (dirExists)
          return getStats(destStat, src, dest, opts, cb2);
        mkdirs(destParent, (err3) => {
          if (err3)
            return cb2(err3);
          return getStats(destStat, src, dest, opts, cb2);
        });
      });
    }
    function handleFilter(onInclude, destStat, src, dest, opts, cb2) {
      Promise.resolve(opts.filter(src, dest)).then((include) => {
        if (include)
          return onInclude(destStat, src, dest, opts, cb2);
        return cb2();
      }, (error) => cb2(error));
    }
    function startCopy(destStat, src, dest, opts, cb2) {
      if (opts.filter)
        return handleFilter(getStats, destStat, src, dest, opts, cb2);
      return getStats(destStat, src, dest, opts, cb2);
    }
    function getStats(destStat, src, dest, opts, cb2) {
      const stat2 = opts.dereference ? fs2.stat : fs2.lstat;
      stat2(src, (err2, srcStat) => {
        if (err2)
          return cb2(err2);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts, cb2);
        else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
          return onFile(srcStat, destStat, src, dest, opts, cb2);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts, cb2);
        else if (srcStat.isSocket())
          return cb2(new Error(`Cannot copy a socket file: ${src}`));
        else if (srcStat.isFIFO())
          return cb2(new Error(`Cannot copy a FIFO pipe: ${src}`));
        return cb2(new Error(`Unknown file: ${src}`));
      });
    }
    function onFile(srcStat, destStat, src, dest, opts, cb2) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts, cb2);
      return mayCopyFile(srcStat, src, dest, opts, cb2);
    }
    function mayCopyFile(srcStat, src, dest, opts, cb2) {
      if (opts.overwrite) {
        fs2.unlink(dest, (err2) => {
          if (err2)
            return cb2(err2);
          return copyFile(srcStat, src, dest, opts, cb2);
        });
      } else if (opts.errorOnExist) {
        return cb2(new Error(`'${dest}' already exists`));
      } else
        return cb2();
    }
    function copyFile(srcStat, src, dest, opts, cb2) {
      fs2.copyFile(src, dest, (err2) => {
        if (err2)
          return cb2(err2);
        if (opts.preserveTimestamps)
          return handleTimestampsAndMode(srcStat.mode, src, dest, cb2);
        return setDestMode(dest, srcStat.mode, cb2);
      });
    }
    function handleTimestampsAndMode(srcMode, src, dest, cb2) {
      if (fileIsNotWritable(srcMode)) {
        return makeFileWritable(dest, srcMode, (err2) => {
          if (err2)
            return cb2(err2);
          return setDestTimestampsAndMode(srcMode, src, dest, cb2);
        });
      }
      return setDestTimestampsAndMode(srcMode, src, dest, cb2);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode, cb2) {
      return setDestMode(dest, srcMode | 128, cb2);
    }
    function setDestTimestampsAndMode(srcMode, src, dest, cb2) {
      setDestTimestamps(src, dest, (err2) => {
        if (err2)
          return cb2(err2);
        return setDestMode(dest, srcMode, cb2);
      });
    }
    function setDestMode(dest, srcMode, cb2) {
      return fs2.chmod(dest, srcMode, cb2);
    }
    function setDestTimestamps(src, dest, cb2) {
      fs2.stat(src, (err2, updatedSrcStat) => {
        if (err2)
          return cb2(err2);
        return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb2);
      });
    }
    function onDir(srcStat, destStat, src, dest, opts, cb2) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts, cb2);
      return copyDir(src, dest, opts, cb2);
    }
    function mkDirAndCopy(srcMode, src, dest, opts, cb2) {
      fs2.mkdir(dest, (err2) => {
        if (err2)
          return cb2(err2);
        copyDir(src, dest, opts, (err3) => {
          if (err3)
            return cb2(err3);
          return setDestMode(dest, srcMode, cb2);
        });
      });
    }
    function copyDir(src, dest, opts, cb2) {
      fs2.readdir(src, (err2, items) => {
        if (err2)
          return cb2(err2);
        return copyDirItems(items, src, dest, opts, cb2);
      });
    }
    function copyDirItems(items, src, dest, opts, cb2) {
      const item = items.pop();
      if (!item)
        return cb2();
      return copyDirItem(items, item, src, dest, opts, cb2);
    }
    function copyDirItem(items, item, src, dest, opts, cb2) {
      const srcItem = path2.join(src, item);
      const destItem = path2.join(dest, item);
      stat.checkPaths(srcItem, destItem, "copy", opts, (err2, stats) => {
        if (err2)
          return cb2(err2);
        const { destStat } = stats;
        startCopy(destStat, srcItem, destItem, opts, (err3) => {
          if (err3)
            return cb2(err3);
          return copyDirItems(items, src, dest, opts, cb2);
        });
      });
    }
    function onLink(destStat, src, dest, opts, cb2) {
      fs2.readlink(src, (err2, resolvedSrc) => {
        if (err2)
          return cb2(err2);
        if (opts.dereference) {
          resolvedSrc = path2.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs2.symlink(resolvedSrc, dest, cb2);
        } else {
          fs2.readlink(dest, (err3, resolvedDest) => {
            if (err3) {
              if (err3.code === "EINVAL" || err3.code === "UNKNOWN")
                return fs2.symlink(resolvedSrc, dest, cb2);
              return cb2(err3);
            }
            if (opts.dereference) {
              resolvedDest = path2.resolve(process.cwd(), resolvedDest);
            }
            if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
              return cb2(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`));
            }
            if (destStat.isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
              return cb2(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`));
            }
            return copyLink(resolvedSrc, dest, cb2);
          });
        }
      });
    }
    function copyLink(resolvedSrc, dest, cb2) {
      fs2.unlink(dest, (err2) => {
        if (err2)
          return cb2(err2);
        return fs2.symlink(resolvedSrc, dest, cb2);
      });
    }
    module2.exports = copy;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/copy/copy-sync.js
var require_copy_sync = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/copy/copy-sync.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    var path2 = __require("path");
    var mkdirsSync = require_mkdirs().mkdirsSync;
    var utimesMillisSync = require_utimes().utimesMillisSync;
    var stat = require_stat();
    function copySync(src, dest, opts) {
      if (typeof opts === "function") {
        opts = { filter: opts };
      }
      opts = opts || {};
      opts.clobber = "clobber" in opts ? !!opts.clobber : true;
      opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
      if (opts.preserveTimestamps && process.arch === "ia32") {
        process.emitWarning(
          "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
          "Warning",
          "fs-extra-WARN0002"
        );
      }
      const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy", opts);
      stat.checkParentPathsSync(src, srcStat, dest, "copy");
      return handleFilterAndCopy(destStat, src, dest, opts);
    }
    function handleFilterAndCopy(destStat, src, dest, opts) {
      if (opts.filter && !opts.filter(src, dest))
        return;
      const destParent = path2.dirname(dest);
      if (!fs2.existsSync(destParent))
        mkdirsSync(destParent);
      return getStats(destStat, src, dest, opts);
    }
    function startCopy(destStat, src, dest, opts) {
      if (opts.filter && !opts.filter(src, dest))
        return;
      return getStats(destStat, src, dest, opts);
    }
    function getStats(destStat, src, dest, opts) {
      const statSync = opts.dereference ? fs2.statSync : fs2.lstatSync;
      const srcStat = statSync(src);
      if (srcStat.isDirectory())
        return onDir(srcStat, destStat, src, dest, opts);
      else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
        return onFile(srcStat, destStat, src, dest, opts);
      else if (srcStat.isSymbolicLink())
        return onLink(destStat, src, dest, opts);
      else if (srcStat.isSocket())
        throw new Error(`Cannot copy a socket file: ${src}`);
      else if (srcStat.isFIFO())
        throw new Error(`Cannot copy a FIFO pipe: ${src}`);
      throw new Error(`Unknown file: ${src}`);
    }
    function onFile(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return copyFile(srcStat, src, dest, opts);
      return mayCopyFile(srcStat, src, dest, opts);
    }
    function mayCopyFile(srcStat, src, dest, opts) {
      if (opts.overwrite) {
        fs2.unlinkSync(dest);
        return copyFile(srcStat, src, dest, opts);
      } else if (opts.errorOnExist) {
        throw new Error(`'${dest}' already exists`);
      }
    }
    function copyFile(srcStat, src, dest, opts) {
      fs2.copyFileSync(src, dest);
      if (opts.preserveTimestamps)
        handleTimestamps(srcStat.mode, src, dest);
      return setDestMode(dest, srcStat.mode);
    }
    function handleTimestamps(srcMode, src, dest) {
      if (fileIsNotWritable(srcMode))
        makeFileWritable(dest, srcMode);
      return setDestTimestamps(src, dest);
    }
    function fileIsNotWritable(srcMode) {
      return (srcMode & 128) === 0;
    }
    function makeFileWritable(dest, srcMode) {
      return setDestMode(dest, srcMode | 128);
    }
    function setDestMode(dest, srcMode) {
      return fs2.chmodSync(dest, srcMode);
    }
    function setDestTimestamps(src, dest) {
      const updatedSrcStat = fs2.statSync(src);
      return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
    }
    function onDir(srcStat, destStat, src, dest, opts) {
      if (!destStat)
        return mkDirAndCopy(srcStat.mode, src, dest, opts);
      return copyDir(src, dest, opts);
    }
    function mkDirAndCopy(srcMode, src, dest, opts) {
      fs2.mkdirSync(dest);
      copyDir(src, dest, opts);
      return setDestMode(dest, srcMode);
    }
    function copyDir(src, dest, opts) {
      fs2.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
    }
    function copyDirItem(item, src, dest, opts) {
      const srcItem = path2.join(src, item);
      const destItem = path2.join(dest, item);
      const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy", opts);
      return startCopy(destStat, srcItem, destItem, opts);
    }
    function onLink(destStat, src, dest, opts) {
      let resolvedSrc = fs2.readlinkSync(src);
      if (opts.dereference) {
        resolvedSrc = path2.resolve(process.cwd(), resolvedSrc);
      }
      if (!destStat) {
        return fs2.symlinkSync(resolvedSrc, dest);
      } else {
        let resolvedDest;
        try {
          resolvedDest = fs2.readlinkSync(dest);
        } catch (err2) {
          if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
            return fs2.symlinkSync(resolvedSrc, dest);
          throw err2;
        }
        if (opts.dereference) {
          resolvedDest = path2.resolve(process.cwd(), resolvedDest);
        }
        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
          throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
        }
        if (fs2.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
          throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
        }
        return copyLink(resolvedSrc, dest);
      }
    }
    function copyLink(resolvedSrc, dest) {
      fs2.unlinkSync(dest);
      return fs2.symlinkSync(resolvedSrc, dest);
    }
    module2.exports = copySync;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/copy/index.js
var require_copy2 = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/copy/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    module2.exports = {
      copy: u(require_copy()),
      copySync: require_copy_sync()
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/remove/rimraf.js
var require_rimraf = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/remove/rimraf.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    var path2 = __require("path");
    var assert2 = __require("assert");
    var isWindows = process.platform === "win32";
    function defaults(options) {
      const methods = [
        "unlink",
        "chmod",
        "stat",
        "lstat",
        "rmdir",
        "readdir"
      ];
      methods.forEach((m) => {
        options[m] = options[m] || fs2[m];
        m = m + "Sync";
        options[m] = options[m] || fs2[m];
      });
      options.maxBusyTries = options.maxBusyTries || 3;
    }
    function rimraf(p, options, cb2) {
      let busyTries = 0;
      if (typeof options === "function") {
        cb2 = options;
        options = {};
      }
      assert2(p, "rimraf: missing path");
      assert2.strictEqual(typeof p, "string", "rimraf: path should be a string");
      assert2.strictEqual(typeof cb2, "function", "rimraf: callback function required");
      assert2(options, "rimraf: invalid options argument provided");
      assert2.strictEqual(typeof options, "object", "rimraf: options should be object");
      defaults(options);
      rimraf_(p, options, function CB(er) {
        if (er) {
          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
            busyTries++;
            const time = busyTries * 100;
            return setTimeout(() => rimraf_(p, options, CB), time);
          }
          if (er.code === "ENOENT")
            er = null;
        }
        cb2(er);
      });
    }
    function rimraf_(p, options, cb2) {
      assert2(p);
      assert2(options);
      assert2(typeof cb2 === "function");
      options.lstat(p, (er, st) => {
        if (er && er.code === "ENOENT") {
          return cb2(null);
        }
        if (er && er.code === "EPERM" && isWindows) {
          return fixWinEPERM(p, options, er, cb2);
        }
        if (st && st.isDirectory()) {
          return rmdir(p, options, er, cb2);
        }
        options.unlink(p, (er2) => {
          if (er2) {
            if (er2.code === "ENOENT") {
              return cb2(null);
            }
            if (er2.code === "EPERM") {
              return isWindows ? fixWinEPERM(p, options, er2, cb2) : rmdir(p, options, er2, cb2);
            }
            if (er2.code === "EISDIR") {
              return rmdir(p, options, er2, cb2);
            }
          }
          return cb2(er2);
        });
      });
    }
    function fixWinEPERM(p, options, er, cb2) {
      assert2(p);
      assert2(options);
      assert2(typeof cb2 === "function");
      options.chmod(p, 438, (er2) => {
        if (er2) {
          cb2(er2.code === "ENOENT" ? null : er);
        } else {
          options.stat(p, (er3, stats) => {
            if (er3) {
              cb2(er3.code === "ENOENT" ? null : er);
            } else if (stats.isDirectory()) {
              rmdir(p, options, er, cb2);
            } else {
              options.unlink(p, cb2);
            }
          });
        }
      });
    }
    function fixWinEPERMSync(p, options, er) {
      let stats;
      assert2(p);
      assert2(options);
      try {
        options.chmodSync(p, 438);
      } catch (er2) {
        if (er2.code === "ENOENT") {
          return;
        } else {
          throw er;
        }
      }
      try {
        stats = options.statSync(p);
      } catch (er3) {
        if (er3.code === "ENOENT") {
          return;
        } else {
          throw er;
        }
      }
      if (stats.isDirectory()) {
        rmdirSync(p, options, er);
      } else {
        options.unlinkSync(p);
      }
    }
    function rmdir(p, options, originalEr, cb2) {
      assert2(p);
      assert2(options);
      assert2(typeof cb2 === "function");
      options.rmdir(p, (er) => {
        if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) {
          rmkids(p, options, cb2);
        } else if (er && er.code === "ENOTDIR") {
          cb2(originalEr);
        } else {
          cb2(er);
        }
      });
    }
    function rmkids(p, options, cb2) {
      assert2(p);
      assert2(options);
      assert2(typeof cb2 === "function");
      options.readdir(p, (er, files) => {
        if (er)
          return cb2(er);
        let n = files.length;
        let errState;
        if (n === 0)
          return options.rmdir(p, cb2);
        files.forEach((f) => {
          rimraf(path2.join(p, f), options, (er2) => {
            if (errState) {
              return;
            }
            if (er2)
              return cb2(errState = er2);
            if (--n === 0) {
              options.rmdir(p, cb2);
            }
          });
        });
      });
    }
    function rimrafSync(p, options) {
      let st;
      options = options || {};
      defaults(options);
      assert2(p, "rimraf: missing path");
      assert2.strictEqual(typeof p, "string", "rimraf: path should be a string");
      assert2(options, "rimraf: missing options");
      assert2.strictEqual(typeof options, "object", "rimraf: options should be object");
      try {
        st = options.lstatSync(p);
      } catch (er) {
        if (er.code === "ENOENT") {
          return;
        }
        if (er.code === "EPERM" && isWindows) {
          fixWinEPERMSync(p, options, er);
        }
      }
      try {
        if (st && st.isDirectory()) {
          rmdirSync(p, options, null);
        } else {
          options.unlinkSync(p);
        }
      } catch (er) {
        if (er.code === "ENOENT") {
          return;
        } else if (er.code === "EPERM") {
          return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
        } else if (er.code !== "EISDIR") {
          throw er;
        }
        rmdirSync(p, options, er);
      }
    }
    function rmdirSync(p, options, originalEr) {
      assert2(p);
      assert2(options);
      try {
        options.rmdirSync(p);
      } catch (er) {
        if (er.code === "ENOTDIR") {
          throw originalEr;
        } else if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") {
          rmkidsSync(p, options);
        } else if (er.code !== "ENOENT") {
          throw er;
        }
      }
    }
    function rmkidsSync(p, options) {
      assert2(p);
      assert2(options);
      options.readdirSync(p).forEach((f) => rimrafSync(path2.join(p, f), options));
      if (isWindows) {
        const startTime = Date.now();
        do {
          try {
            const ret = options.rmdirSync(p, options);
            return ret;
          } catch {
          }
        } while (Date.now() - startTime < 500);
      } else {
        const ret = options.rmdirSync(p, options);
        return ret;
      }
    }
    module2.exports = rimraf;
    rimraf.sync = rimrafSync;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/remove/index.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    var u = require_universalify().fromCallback;
    var rimraf = require_rimraf();
    function remove(path2, callback) {
      if (fs2.rm)
        return fs2.rm(path2, { recursive: true, force: true }, callback);
      rimraf(path2, callback);
    }
    function removeSync(path2) {
      if (fs2.rmSync)
        return fs2.rmSync(path2, { recursive: true, force: true });
      rimraf.sync(path2);
    }
    module2.exports = {
      remove: u(remove),
      removeSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/empty/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var fs2 = require_fs();
    var path2 = __require("path");
    var mkdir = require_mkdirs();
    var remove = require_remove();
    var emptyDir = u(async function emptyDir2(dir) {
      let items;
      try {
        items = await fs2.readdir(dir);
      } catch {
        return mkdir.mkdirs(dir);
      }
      return Promise.all(items.map((item) => remove.remove(path2.join(dir, item))));
    });
    function emptyDirSync(dir) {
      let items;
      try {
        items = fs2.readdirSync(dir);
      } catch {
        return mkdir.mkdirsSync(dir);
      }
      items.forEach((item) => {
        item = path2.join(dir, item);
        remove.removeSync(item);
      });
    }
    module2.exports = {
      emptyDirSync,
      emptydirSync: emptyDirSync,
      emptyDir,
      emptydir: emptyDir
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/file.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path2 = __require("path");
    var fs2 = require_graceful_fs();
    var mkdir = require_mkdirs();
    function createFile(file, callback) {
      function makeFile() {
        fs2.writeFile(file, "", (err2) => {
          if (err2)
            return callback(err2);
          callback();
        });
      }
      fs2.stat(file, (err2, stats) => {
        if (!err2 && stats.isFile())
          return callback();
        const dir = path2.dirname(file);
        fs2.stat(dir, (err3, stats2) => {
          if (err3) {
            if (err3.code === "ENOENT") {
              return mkdir.mkdirs(dir, (err4) => {
                if (err4)
                  return callback(err4);
                makeFile();
              });
            }
            return callback(err3);
          }
          if (stats2.isDirectory())
            makeFile();
          else {
            fs2.readdir(dir, (err4) => {
              if (err4)
                return callback(err4);
            });
          }
        });
      });
    }
    function createFileSync(file) {
      let stats;
      try {
        stats = fs2.statSync(file);
      } catch {
      }
      if (stats && stats.isFile())
        return;
      const dir = path2.dirname(file);
      try {
        if (!fs2.statSync(dir).isDirectory()) {
          fs2.readdirSync(dir);
        }
      } catch (err2) {
        if (err2 && err2.code === "ENOENT")
          mkdir.mkdirsSync(dir);
        else
          throw err2;
      }
      fs2.writeFileSync(file, "");
    }
    module2.exports = {
      createFile: u(createFile),
      createFileSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/link.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path2 = __require("path");
    var fs2 = require_graceful_fs();
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    var { areIdentical } = require_stat();
    function createLink(srcpath, dstpath, callback) {
      function makeLink(srcpath2, dstpath2) {
        fs2.link(srcpath2, dstpath2, (err2) => {
          if (err2)
            return callback(err2);
          callback(null);
        });
      }
      fs2.lstat(dstpath, (_, dstStat) => {
        fs2.lstat(srcpath, (err2, srcStat) => {
          if (err2) {
            err2.message = err2.message.replace("lstat", "ensureLink");
            return callback(err2);
          }
          if (dstStat && areIdentical(srcStat, dstStat))
            return callback(null);
          const dir = path2.dirname(dstpath);
          pathExists(dir, (err3, dirExists) => {
            if (err3)
              return callback(err3);
            if (dirExists)
              return makeLink(srcpath, dstpath);
            mkdir.mkdirs(dir, (err4) => {
              if (err4)
                return callback(err4);
              makeLink(srcpath, dstpath);
            });
          });
        });
      });
    }
    function createLinkSync(srcpath, dstpath) {
      let dstStat;
      try {
        dstStat = fs2.lstatSync(dstpath);
      } catch {
      }
      try {
        const srcStat = fs2.lstatSync(srcpath);
        if (dstStat && areIdentical(srcStat, dstStat))
          return;
      } catch (err2) {
        err2.message = err2.message.replace("lstat", "ensureLink");
        throw err2;
      }
      const dir = path2.dirname(dstpath);
      const dirExists = fs2.existsSync(dir);
      if (dirExists)
        return fs2.linkSync(srcpath, dstpath);
      mkdir.mkdirsSync(dir);
      return fs2.linkSync(srcpath, dstpath);
    }
    module2.exports = {
      createLink: u(createLink),
      createLinkSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports2, module2) {
    "use strict";
    var path2 = __require("path");
    var fs2 = require_graceful_fs();
    var pathExists = require_path_exists().pathExists;
    function symlinkPaths(srcpath, dstpath, callback) {
      if (path2.isAbsolute(srcpath)) {
        return fs2.lstat(srcpath, (err2) => {
          if (err2) {
            err2.message = err2.message.replace("lstat", "ensureSymlink");
            return callback(err2);
          }
          return callback(null, {
            toCwd: srcpath,
            toDst: srcpath
          });
        });
      } else {
        const dstdir = path2.dirname(dstpath);
        const relativeToDst = path2.join(dstdir, srcpath);
        return pathExists(relativeToDst, (err2, exists) => {
          if (err2)
            return callback(err2);
          if (exists) {
            return callback(null, {
              toCwd: relativeToDst,
              toDst: srcpath
            });
          } else {
            return fs2.lstat(srcpath, (err3) => {
              if (err3) {
                err3.message = err3.message.replace("lstat", "ensureSymlink");
                return callback(err3);
              }
              return callback(null, {
                toCwd: srcpath,
                toDst: path2.relative(dstdir, srcpath)
              });
            });
          }
        });
      }
    }
    function symlinkPathsSync(srcpath, dstpath) {
      let exists;
      if (path2.isAbsolute(srcpath)) {
        exists = fs2.existsSync(srcpath);
        if (!exists)
          throw new Error("absolute srcpath does not exist");
        return {
          toCwd: srcpath,
          toDst: srcpath
        };
      } else {
        const dstdir = path2.dirname(dstpath);
        const relativeToDst = path2.join(dstdir, srcpath);
        exists = fs2.existsSync(relativeToDst);
        if (exists) {
          return {
            toCwd: relativeToDst,
            toDst: srcpath
          };
        } else {
          exists = fs2.existsSync(srcpath);
          if (!exists)
            throw new Error("relative srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: path2.relative(dstdir, srcpath)
          };
        }
      }
    }
    module2.exports = {
      symlinkPaths,
      symlinkPathsSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/symlink-type.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    function symlinkType(srcpath, type2, callback) {
      callback = typeof type2 === "function" ? type2 : callback;
      type2 = typeof type2 === "function" ? false : type2;
      if (type2)
        return callback(null, type2);
      fs2.lstat(srcpath, (err2, stats) => {
        if (err2)
          return callback(null, "file");
        type2 = stats && stats.isDirectory() ? "dir" : "file";
        callback(null, type2);
      });
    }
    function symlinkTypeSync(srcpath, type2) {
      let stats;
      if (type2)
        return type2;
      try {
        stats = fs2.lstatSync(srcpath);
      } catch {
        return "file";
      }
      return stats && stats.isDirectory() ? "dir" : "file";
    }
    module2.exports = {
      symlinkType,
      symlinkTypeSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/symlink.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var path2 = __require("path");
    var fs2 = require_fs();
    var _mkdirs = require_mkdirs();
    var mkdirs = _mkdirs.mkdirs;
    var mkdirsSync = _mkdirs.mkdirsSync;
    var _symlinkPaths = require_symlink_paths();
    var symlinkPaths = _symlinkPaths.symlinkPaths;
    var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
    var _symlinkType = require_symlink_type();
    var symlinkType = _symlinkType.symlinkType;
    var symlinkTypeSync = _symlinkType.symlinkTypeSync;
    var pathExists = require_path_exists().pathExists;
    var { areIdentical } = require_stat();
    function createSymlink(srcpath, dstpath, type2, callback) {
      callback = typeof type2 === "function" ? type2 : callback;
      type2 = typeof type2 === "function" ? false : type2;
      fs2.lstat(dstpath, (err2, stats) => {
        if (!err2 && stats.isSymbolicLink()) {
          Promise.all([
            fs2.stat(srcpath),
            fs2.stat(dstpath)
          ]).then(([srcStat, dstStat]) => {
            if (areIdentical(srcStat, dstStat))
              return callback(null);
            _createSymlink(srcpath, dstpath, type2, callback);
          });
        } else
          _createSymlink(srcpath, dstpath, type2, callback);
      });
    }
    function _createSymlink(srcpath, dstpath, type2, callback) {
      symlinkPaths(srcpath, dstpath, (err2, relative) => {
        if (err2)
          return callback(err2);
        srcpath = relative.toDst;
        symlinkType(relative.toCwd, type2, (err3, type3) => {
          if (err3)
            return callback(err3);
          const dir = path2.dirname(dstpath);
          pathExists(dir, (err4, dirExists) => {
            if (err4)
              return callback(err4);
            if (dirExists)
              return fs2.symlink(srcpath, dstpath, type3, callback);
            mkdirs(dir, (err5) => {
              if (err5)
                return callback(err5);
              fs2.symlink(srcpath, dstpath, type3, callback);
            });
          });
        });
      });
    }
    function createSymlinkSync(srcpath, dstpath, type2) {
      let stats;
      try {
        stats = fs2.lstatSync(dstpath);
      } catch {
      }
      if (stats && stats.isSymbolicLink()) {
        const srcStat = fs2.statSync(srcpath);
        const dstStat = fs2.statSync(dstpath);
        if (areIdentical(srcStat, dstStat))
          return;
      }
      const relative = symlinkPathsSync(srcpath, dstpath);
      srcpath = relative.toDst;
      type2 = symlinkTypeSync(relative.toCwd, type2);
      const dir = path2.dirname(dstpath);
      const exists = fs2.existsSync(dir);
      if (exists)
        return fs2.symlinkSync(srcpath, dstpath, type2);
      mkdirsSync(dir);
      return fs2.symlinkSync(srcpath, dstpath, type2);
    }
    module2.exports = {
      createSymlink: u(createSymlink),
      createSymlinkSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/ensure/index.js"(exports2, module2) {
    "use strict";
    var { createFile, createFileSync } = require_file();
    var { createLink, createLinkSync } = require_link();
    var { createSymlink, createSymlinkSync } = require_symlink();
    module2.exports = {
      createFile,
      createFileSync,
      ensureFile: createFile,
      ensureFileSync: createFileSync,
      createLink,
      createLinkSync,
      ensureLink: createLink,
      ensureLinkSync: createLinkSync,
      createSymlink,
      createSymlinkSync,
      ensureSymlink: createSymlink,
      ensureSymlinkSync: createSymlinkSync
    };
  }
});

// ../../node_modules/.store/jsonfile-npm-6.1.0-20a4796cee/node_modules/jsonfile/utils.js
var require_utils2 = __commonJS({
  "../../node_modules/.store/jsonfile-npm-6.1.0-20a4796cee/node_modules/jsonfile/utils.js"(exports2, module2) {
    function stringify(obj, { EOL = "\n", finalEOL = true, replacer = null, spaces } = {}) {
      const EOF = finalEOL ? EOL : "";
      const str = JSON.stringify(obj, replacer, spaces);
      return str.replace(/\n/g, EOL) + EOF;
    }
    function stripBom(content) {
      if (Buffer.isBuffer(content))
        content = content.toString("utf8");
      return content.replace(/^\uFEFF/, "");
    }
    module2.exports = { stringify, stripBom };
  }
});

// ../../node_modules/.store/jsonfile-npm-6.1.0-20a4796cee/node_modules/jsonfile/index.js
var require_jsonfile = __commonJS({
  "../../node_modules/.store/jsonfile-npm-6.1.0-20a4796cee/node_modules/jsonfile/index.js"(exports2, module2) {
    var _fs;
    try {
      _fs = require_graceful_fs();
    } catch (_) {
      _fs = __require("fs");
    }
    var universalify = require_universalify();
    var { stringify, stripBom } = require_utils2();
    async function _readFile(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs2 = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      let data = await universalify.fromCallback(fs2.readFile)(file, options);
      data = stripBom(data);
      let obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err2) {
        if (shouldThrow) {
          err2.message = `${file}: ${err2.message}`;
          throw err2;
        } else {
          return null;
        }
      }
      return obj;
    }
    var readFile = universalify.fromPromise(_readFile);
    function readFileSync2(file, options = {}) {
      if (typeof options === "string") {
        options = { encoding: options };
      }
      const fs2 = options.fs || _fs;
      const shouldThrow = "throws" in options ? options.throws : true;
      try {
        let content = fs2.readFileSync(file, options);
        content = stripBom(content);
        return JSON.parse(content, options.reviver);
      } catch (err2) {
        if (shouldThrow) {
          err2.message = `${file}: ${err2.message}`;
          throw err2;
        } else {
          return null;
        }
      }
    }
    async function _writeFile(file, obj, options = {}) {
      const fs2 = options.fs || _fs;
      const str = stringify(obj, options);
      await universalify.fromCallback(fs2.writeFile)(file, str, options);
    }
    var writeFile = universalify.fromPromise(_writeFile);
    function writeFileSync(file, obj, options = {}) {
      const fs2 = options.fs || _fs;
      const str = stringify(obj, options);
      return fs2.writeFileSync(file, str, options);
    }
    var jsonfile = {
      readFile,
      readFileSync: readFileSync2,
      writeFile,
      writeFileSync
    };
    module2.exports = jsonfile;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile2 = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/jsonfile.js"(exports2, module2) {
    "use strict";
    var jsonFile = require_jsonfile();
    module2.exports = {
      readJson: jsonFile.readFile,
      readJsonSync: jsonFile.readFileSync,
      writeJson: jsonFile.writeFile,
      writeJsonSync: jsonFile.writeFileSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/output-file/index.js
var require_output_file = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/output-file/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    var fs2 = require_graceful_fs();
    var path2 = __require("path");
    var mkdir = require_mkdirs();
    var pathExists = require_path_exists().pathExists;
    function outputFile(file, data, encoding, callback) {
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = "utf8";
      }
      const dir = path2.dirname(file);
      pathExists(dir, (err2, itDoes) => {
        if (err2)
          return callback(err2);
        if (itDoes)
          return fs2.writeFile(file, data, encoding, callback);
        mkdir.mkdirs(dir, (err3) => {
          if (err3)
            return callback(err3);
          fs2.writeFile(file, data, encoding, callback);
        });
      });
    }
    function outputFileSync(file, ...args) {
      const dir = path2.dirname(file);
      if (fs2.existsSync(dir)) {
        return fs2.writeFileSync(file, ...args);
      }
      mkdir.mkdirsSync(dir);
      fs2.writeFileSync(file, ...args);
    }
    module2.exports = {
      outputFile: u(outputFile),
      outputFileSync
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/output-json.js"(exports2, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFile } = require_output_file();
    async function outputJson(file, data, options = {}) {
      const str = stringify(data, options);
      await outputFile(file, str, options);
    }
    module2.exports = outputJson;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/output-json-sync.js"(exports2, module2) {
    "use strict";
    var { stringify } = require_utils2();
    var { outputFileSync } = require_output_file();
    function outputJsonSync(file, data, options) {
      const str = stringify(data, options);
      outputFileSync(file, str, options);
    }
    module2.exports = outputJsonSync;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/json/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromPromise;
    var jsonFile = require_jsonfile2();
    jsonFile.outputJson = u(require_output_json());
    jsonFile.outputJsonSync = require_output_json_sync();
    jsonFile.outputJSON = jsonFile.outputJson;
    jsonFile.outputJSONSync = jsonFile.outputJsonSync;
    jsonFile.writeJSON = jsonFile.writeJson;
    jsonFile.writeJSONSync = jsonFile.writeJsonSync;
    jsonFile.readJSON = jsonFile.readJson;
    jsonFile.readJSONSync = jsonFile.readJsonSync;
    module2.exports = jsonFile;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/move/move.js
var require_move = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/move/move.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    var path2 = __require("path");
    var copy = require_copy2().copy;
    var remove = require_remove().remove;
    var mkdirp = require_mkdirs().mkdirp;
    var pathExists = require_path_exists().pathExists;
    var stat = require_stat();
    function move(src, dest, opts, cb2) {
      if (typeof opts === "function") {
        cb2 = opts;
        opts = {};
      }
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;
      stat.checkPaths(src, dest, "move", opts, (err2, stats) => {
        if (err2)
          return cb2(err2);
        const { srcStat, isChangingCase = false } = stats;
        stat.checkParentPaths(src, srcStat, dest, "move", (err3) => {
          if (err3)
            return cb2(err3);
          if (isParentRoot(dest))
            return doRename(src, dest, overwrite, isChangingCase, cb2);
          mkdirp(path2.dirname(dest), (err4) => {
            if (err4)
              return cb2(err4);
            return doRename(src, dest, overwrite, isChangingCase, cb2);
          });
        });
      });
    }
    function isParentRoot(dest) {
      const parent = path2.dirname(dest);
      const parsedPath = path2.parse(parent);
      return parsedPath.root === parent;
    }
    function doRename(src, dest, overwrite, isChangingCase, cb2) {
      if (isChangingCase)
        return rename(src, dest, overwrite, cb2);
      if (overwrite) {
        return remove(dest, (err2) => {
          if (err2)
            return cb2(err2);
          return rename(src, dest, overwrite, cb2);
        });
      }
      pathExists(dest, (err2, destExists) => {
        if (err2)
          return cb2(err2);
        if (destExists)
          return cb2(new Error("dest already exists."));
        return rename(src, dest, overwrite, cb2);
      });
    }
    function rename(src, dest, overwrite, cb2) {
      fs2.rename(src, dest, (err2) => {
        if (!err2)
          return cb2();
        if (err2.code !== "EXDEV")
          return cb2(err2);
        return moveAcrossDevice(src, dest, overwrite, cb2);
      });
    }
    function moveAcrossDevice(src, dest, overwrite, cb2) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copy(src, dest, opts, (err2) => {
        if (err2)
          return cb2(err2);
        return remove(src, cb2);
      });
    }
    module2.exports = move;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/move/move-sync.js
var require_move_sync = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/move/move-sync.js"(exports2, module2) {
    "use strict";
    var fs2 = require_graceful_fs();
    var path2 = __require("path");
    var copySync = require_copy2().copySync;
    var removeSync = require_remove().removeSync;
    var mkdirpSync = require_mkdirs().mkdirpSync;
    var stat = require_stat();
    function moveSync(src, dest, opts) {
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;
      const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, "move", opts);
      stat.checkParentPathsSync(src, srcStat, dest, "move");
      if (!isParentRoot(dest))
        mkdirpSync(path2.dirname(dest));
      return doRename(src, dest, overwrite, isChangingCase);
    }
    function isParentRoot(dest) {
      const parent = path2.dirname(dest);
      const parsedPath = path2.parse(parent);
      return parsedPath.root === parent;
    }
    function doRename(src, dest, overwrite, isChangingCase) {
      if (isChangingCase)
        return rename(src, dest, overwrite);
      if (overwrite) {
        removeSync(dest);
        return rename(src, dest, overwrite);
      }
      if (fs2.existsSync(dest))
        throw new Error("dest already exists.");
      return rename(src, dest, overwrite);
    }
    function rename(src, dest, overwrite) {
      try {
        fs2.renameSync(src, dest);
      } catch (err2) {
        if (err2.code !== "EXDEV")
          throw err2;
        return moveAcrossDevice(src, dest, overwrite);
      }
    }
    function moveAcrossDevice(src, dest, overwrite) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copySync(src, dest, opts);
      return removeSync(src);
    }
    module2.exports = moveSync;
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/move/index.js
var require_move2 = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/move/index.js"(exports2, module2) {
    "use strict";
    var u = require_universalify().fromCallback;
    module2.exports = {
      move: u(require_move()),
      moveSync: require_move_sync()
    };
  }
});

// ../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/.store/fs-extra-npm-10.1.0-86573680ed/node_modules/fs-extra/lib/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      ...require_fs(),
      ...require_copy2(),
      ...require_empty(),
      ...require_ensure(),
      ...require_json(),
      ...require_mkdirs(),
      ...require_move2(),
      ...require_output_file(),
      ...require_path_exists(),
      ...require_remove()
    };
  }
});

// ../shared/build/fs.js
var require_fs2 = __commonJS({
  "../shared/build/fs.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.enumFilesRecursive = void 0;
    var fs2 = __importStar(require_lib());
    var path_1 = __importDefault(__require("path"));
    var _1 = require_build();
    async function enumFilesRecursive(rootDir, predicate) {
      const ret = [];
      try {
        const filesAndDirs = await fs2.readdir(rootDir);
        for (const f of filesAndDirs) {
          const fullPath = path_1.default.join(rootDir, f);
          if (fs2.statSync(fullPath).isDirectory()) {
            ret.push(...await enumFilesRecursive(fullPath, predicate));
          } else if (predicate == null ? void 0 : predicate(fullPath)) {
            ret.push(fullPath);
          }
        }
      } catch (e) {
        console.error(`Cannot read directory: "${rootDir}": ${(0, _1.getErrorMessage)(e, true)}`);
      }
      return ret;
    }
    exports2.enumFilesRecursive = enumFilesRecursive;
  }
});

// ../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/objects/index.js
var require_objects = __commonJS({
  "../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/objects/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extend = exports2.composeObject = exports2.filter = exports2.values = exports2.entries = void 0;
    function entries(obj) {
      return Object.keys(obj).map((key2) => [key2, obj[key2]]);
    }
    exports2.entries = entries;
    function values(obj) {
      return Object.keys(obj).map((key2) => obj[key2]);
    }
    exports2.values = values;
    function filter(obj, predicate) {
      return composeObject(entries(obj).filter(([key2, value]) => predicate(value, key2)));
    }
    exports2.filter = filter;
    function composeObject(properties) {
      return properties.reduce((acc, [key2, value]) => {
        acc[key2] = value;
        return acc;
      }, {});
    }
    exports2.composeObject = composeObject;
    function extend(target, ...sources) {
      if (target == null)
        target = {};
      for (const source of sources) {
        for (const [prop, val] of entries(source)) {
          if (val === null) {
            target[prop] = val;
          } else if (typeof target[prop] === "object" && typeof val === "object") {
            target[prop] = extend(target[prop], val);
          } else if (typeof val === "object") {
            target[prop] = extend({}, val);
          } else {
            target[prop] = val;
          }
        }
      }
      return target;
    }
    exports2.extend = extend;
  }
});

// ../shared/build/ObjectKeyMap.js
var require_ObjectKeyMap = __commonJS({
  "../shared/build/ObjectKeyMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ObjectKeyMap = void 0;
    var objects_1 = require_objects();
    var ObjectKeyMap = class {
      constructor(entries, defaultKeyProps) {
        this._map = /* @__PURE__ */ new Map();
        if (entries == null ? void 0 : entries.length) {
          for (const [key2, value] of entries) {
            this.set(key2, value);
          }
        }
        this.defaultKeyProps = defaultKeyProps;
      }
      has(key2) {
        return this._map.has(this.keyToString(key2));
      }
      get(key2) {
        return this._map.get(this.keyToString(key2));
      }
      set(key2, value) {
        this._map.set(this.keyToString(key2), value);
      }
      delete(key2) {
        return this._map.delete(this.keyToString(key2));
      }
      clear() {
        this._map.clear();
      }
      get size() {
        return this._map.size;
      }
      forEach(callbackfn) {
        this._map.forEach((value, keyAsString) => {
          callbackfn(value, JSON.parse(keyAsString), this);
        });
      }
      entries() {
        const map = this._map;
        return function* () {
          const _entries = map.entries();
          let entry = _entries.next();
          while (!entry.done) {
            const objKey = JSON.parse(entry.value[0]);
            yield [objKey, entry.value[1]];
            entry = _entries.next();
          }
        }();
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      keys() {
        const map = this._map;
        return function* () {
          const _keys = map.entries();
          let key2 = _keys.next();
          while (!key2.done) {
            const objKey = JSON.parse(key2.value[0]);
            yield objKey;
            key2 = _keys.next();
          }
        }();
      }
      values() {
        return this._map.values();
      }
      keyToString(key2) {
        const filledKey = { ...key2 };
        if (this.defaultKeyProps) {
          for (const [required, def] of Object.entries(this.defaultKeyProps)) {
            if (!(required in filledKey))
              filledKey[required] = def;
          }
        }
        const _key = (0, objects_1.composeObject)((0, objects_1.entries)(filledKey).filter(([, value]) => value != void 0).sort(([keyA], [keyB]) => keyA > keyB ? 1 : keyA < keyB ? -1 : 0));
        return JSON.stringify(_key);
      }
    };
    exports2.ObjectKeyMap = ObjectKeyMap;
  }
});

// ../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/strings/index.js
var require_strings = __commonJS({
  "../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/strings/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.padStart = void 0;
    function padStart(str, targetLen, fill = " ") {
      if (str != null && str.length >= targetLen)
        return str;
      if (fill == null || fill.length < 1)
        throw new Error("fill must be at least one char");
      const missingLength = targetLen - str.length;
      const repeats = Math.ceil(missingLength / fill.length);
      return fill.repeat(repeats).substr(0, missingLength) + str;
    }
    exports2.padStart = padStart;
  }
});

// ../shared/build/strings.js
var require_strings2 = __commonJS({
  "../shared/build/strings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatDate = exports2.formatTime = exports2.compareStrings = exports2.isPrintableASCIIWithNewlines = exports2.isPrintableASCII = exports2.buffer2hex = exports2.stringify = exports2.formatId = exports2.num2hex = exports2.cpp2js = void 0;
    var strings_1 = require_strings();
    function cpp2js(str) {
      const nullIndex = str.indexOf("\0");
      if (nullIndex === -1)
        return str;
      return str.substr(0, nullIndex);
    }
    exports2.cpp2js = cpp2js;
    function num2hex(val, uppercase = false) {
      if (val == null)
        return "undefined";
      let ret = val.toString(16);
      if (uppercase)
        ret = ret.toUpperCase();
      if (ret.length % 2 !== 0)
        ret = "0" + ret;
      return "0x" + ret;
    }
    exports2.num2hex = num2hex;
    function formatId(id) {
      id = typeof id === "number" ? id.toString(16) : id;
      return "0x" + (0, strings_1.padStart)(id, 4, "0").toLowerCase();
    }
    exports2.formatId = formatId;
    function stringify(arg2, space = 4) {
      return JSON.stringify(arg2, null, space);
    }
    exports2.stringify = stringify;
    function buffer2hex(buffer2, uppercase = false) {
      if (buffer2.length === 0)
        return "(empty)";
      let ret = buffer2.toString("hex");
      if (uppercase)
        ret = ret.toUpperCase();
      return "0x" + ret;
    }
    exports2.buffer2hex = buffer2hex;
    function isPrintableASCII(text) {
      return /^[\u0020-\u007e]*$/.test(text);
    }
    exports2.isPrintableASCII = isPrintableASCII;
    function isPrintableASCIIWithNewlines(text) {
      text = text.replace(/^[\r\n]*/g, "").replace(/[\r\n]*/g, "");
      return isPrintableASCII(text);
    }
    exports2.isPrintableASCIIWithNewlines = isPrintableASCIIWithNewlines;
    function compareStrings(a, b) {
      if (a > b)
        return 1;
      if (b > a)
        return -1;
      return 0;
    }
    exports2.compareStrings = compareStrings;
    function formatTime(hour, minute) {
      return `${(0, strings_1.padStart)(hour.toString(), 2, "0")}:${(0, strings_1.padStart)(minute.toString(), 2, "0")}`;
    }
    exports2.formatTime = formatTime;
    function formatDate(year, month, day) {
      return `${(0, strings_1.padStart)(year.toString(), 4, "0")}-${(0, strings_1.padStart)(month.toString(), 2, "0")}-${(0, strings_1.padStart)(day.toString(), 2, "0")}`;
    }
    exports2.formatDate = formatDate;
  }
});

// ../shared/build/ThrowingMap.js
var require_ThrowingMap = __commonJS({
  "../shared/build/ThrowingMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createThrowingMap = void 0;
    function createThrowingMap(throwKeyNotFound) {
      const map = /* @__PURE__ */ new Map();
      map.getOrThrow = function(key2) {
        if (!this.has(key2)) {
          if (typeof throwKeyNotFound === "function") {
            throwKeyNotFound(key2);
          } else {
            throw new Error(`Tried to access non-existent key ${String(key2)}`);
          }
        }
        return this.get(key2);
      }.bind(map);
      return map;
    }
    exports2.createThrowingMap = createThrowingMap;
  }
});

// ../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/deferred-promise/index.js
var require_deferred_promise = __commonJS({
  "../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/deferred-promise/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createDeferredPromise = void 0;
    function createDeferredPromise() {
      let res;
      let rej;
      const promise = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    }
    exports2.createDeferredPromise = createDeferredPromise;
  }
});

// ../shared/build/TimedExpectation.js
var require_TimedExpectation = __commonJS({
  "../shared/build/TimedExpectation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimedExpectation = void 0;
    var deferred_promise_1 = require_deferred_promise();
    var TimedExpectation = class {
      constructor(timeoutMs, predicate, timeoutErrorMessage = "Expectation was not fulfilled within the timeout") {
        this.predicate = predicate;
        this.timeoutErrorMessage = timeoutErrorMessage;
        this._done = false;
        this.promise = (0, deferred_promise_1.createDeferredPromise)();
        this.timeout = setTimeout(() => this.reject(), timeoutMs);
        const tmp = { message: "" };
        Error.captureStackTrace(tmp, TimedExpectation);
        this.stack = tmp.stack.replace(/^Error:?\s*\n/, "");
      }
      resolve(result) {
        if (this._done)
          return;
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        this.promise.resolve(result);
      }
      reject() {
        if (this._done)
          return;
        if (this.timeout) {
          clearTimeout(this.timeout);
        }
        const err2 = new Error(this.timeoutErrorMessage);
        err2.stack = this.stack;
        this.promise.reject(err2);
      }
      then(onfulfilled, onrejected) {
        return this.promise.then(onfulfilled, onrejected);
      }
    };
    exports2.TimedExpectation = TimedExpectation;
  }
});

// ../shared/build/types.js
var require_types = __commonJS({
  "../shared/build/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/typeguards/index.js
var require_typeguards = __commonJS({
  "../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/typeguards/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArray = exports2.isObject = void 0;
    function isObject(it) {
      return Object.prototype.toString.call(it) === "[object Object]";
    }
    exports2.isObject = isObject;
    function isArray(it) {
      if (Array.isArray != null)
        return Array.isArray(it);
      return Object.prototype.toString.call(it) === "[object Array]";
    }
    exports2.isArray = isArray;
  }
});

// ../shared/build/utils.js
var require_utils3 = __commonJS({
  "../shared/build/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sum = exports2.discreteLinearSearch = exports2.discreteBinarySearch = exports2.padVersion = exports2.cloneDeep = exports2.mergeDeep = exports2.throttle = exports2.skipBytes = exports2.isEnumMember = exports2.getEnumMemberName = exports2.flatMap = exports2.pickDeep = exports2.pick = exports2.keysOf = void 0;
    var typeguards_1 = require_typeguards();
    var strings_1 = require_strings2();
    function keysOf(obj) {
      return Object.keys(obj);
    }
    exports2.keysOf = keysOf;
    function pick2(obj, keys) {
      const ret = {};
      for (const key2 of keys) {
        if (key2 in obj)
          ret[key2] = obj[key2];
      }
      return ret;
    }
    exports2.pick = pick2;
    function pickDeep(object, path2) {
      function _pickDeep(obj, pathArr) {
        if (!pathArr.length)
          return obj;
        if (!(0, typeguards_1.isObject)(obj) && !(0, typeguards_1.isArray)(obj))
          return void 0;
        const propName = pathArr.shift();
        return _pickDeep(obj[propName], pathArr);
      }
      return _pickDeep(object, path2.split("."));
    }
    exports2.pickDeep = pickDeep;
    function flatMap(array, callbackfn) {
      const mapped = array.map(callbackfn);
      return mapped.reduce((acc, cur) => [...acc, ...cur], []);
    }
    exports2.flatMap = flatMap;
    function getEnumMemberName4(enumeration, value) {
      return enumeration[value] || `unknown (${(0, strings_1.num2hex)(value)})`;
    }
    exports2.getEnumMemberName = getEnumMemberName4;
    function isEnumMember(enumeration, value) {
      return typeof enumeration[value] === "string";
    }
    exports2.isEnumMember = isEnumMember;
    function skipBytes(buf, n) {
      return Buffer.from(buf.slice(n));
    }
    exports2.skipBytes = skipBytes;
    function throttle2(fn, intervalMs, trailing = false) {
      let lastCall = 0;
      let timeout;
      return (...args) => {
        const now = Date.now();
        if (now >= lastCall + intervalMs) {
          lastCall = now;
          fn(...args);
        } else if (trailing) {
          if (timeout)
            clearTimeout(timeout);
          const delay = lastCall + intervalMs - now;
          timeout = setTimeout(() => {
            lastCall = now;
            fn(...args);
          }, delay);
        }
      };
    }
    exports2.throttle = throttle2;
    function mergeDeep(target, source, overwrite) {
      target = target || {};
      for (const [key2, value] of Object.entries(source)) {
        if (key2 in target) {
          if (value === void 0) {
            if (overwrite)
              delete target[key2];
          } else if (typeof value === "object") {
            target[key2] = mergeDeep(target[key2], value, overwrite);
          } else if (overwrite || typeof target[key2] === "undefined") {
            target[key2] = value;
          }
        } else if (value !== void 0) {
          target[key2] = value;
        }
      }
      return target;
    }
    exports2.mergeDeep = mergeDeep;
    function cloneDeep(source) {
      if ((0, typeguards_1.isArray)(source)) {
        return source.map((i2) => cloneDeep(i2));
      } else if ((0, typeguards_1.isObject)(source)) {
        const target = {};
        for (const [key2, value] of Object.entries(source)) {
          target[key2] = cloneDeep(value);
        }
        return target;
      } else {
        return source;
      }
    }
    exports2.cloneDeep = cloneDeep;
    function padVersion(version) {
      if (version.split(".").length === 3)
        return version;
      return version + ".0";
    }
    exports2.padVersion = padVersion;
    async function discreteBinarySearch(rangeMin, rangeMax, executor) {
      let min = rangeMin;
      let max = rangeMax;
      while (min < max) {
        const mid = min + Math.floor((max - min + 1) / 2);
        const result = await executor(mid);
        if (result) {
          min = mid;
        } else {
          max = mid - 1;
        }
      }
      if (min === rangeMin) {
        const result = await executor(min);
        if (!result)
          return void 0;
      }
      return min;
    }
    exports2.discreteBinarySearch = discreteBinarySearch;
    async function discreteLinearSearch(rangeMin, rangeMax, executor) {
      for (let val = rangeMin; val <= rangeMax; val++) {
        const result = await executor(val);
        if (!result) {
          if (val === rangeMin) {
            break;
          } else {
            return val - 1;
          }
        } else {
          if (val === rangeMax) {
            return rangeMax;
          }
        }
      }
    }
    exports2.discreteLinearSearch = discreteLinearSearch;
    function sum(values) {
      return values.reduce((acc, cur) => acc + cur, 0);
    }
    exports2.sum = sum;
  }
});

// ../shared/build/wrappingCounter.js
var require_wrappingCounter = __commonJS({
  "../shared/build/wrappingCounter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWrappingCounter = void 0;
    function createWrappingCounter(maxValue, randomSeed = false) {
      const ret = () => {
        ret.value = ret.value + 1 & maxValue;
        if (ret.value === 0)
          ret.value = 1;
        return ret.value;
      };
      ret.value = randomSeed ? Math.round(Math.random() * maxValue) : 0;
      return ret;
    }
    exports2.createWrappingCounter = createWrappingCounter;
  }
});

// ../shared/build/index.js
var require_build = __commonJS({
  "../shared/build/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ObjectKeyMap = void 0;
    __exportStar(require_docker(), exports2);
    __exportStar(require_errors(), exports2);
    __exportStar(require_EventEmitter(), exports2);
    __exportStar(require_fs2(), exports2);
    __exportStar(require_inheritance(), exports2);
    var ObjectKeyMap_1 = require_ObjectKeyMap();
    Object.defineProperty(exports2, "ObjectKeyMap", { enumerable: true, get: function() {
      return ObjectKeyMap_1.ObjectKeyMap;
    } });
    __exportStar(require_strings2(), exports2);
    __exportStar(require_ThrowingMap(), exports2);
    __exportStar(require_TimedExpectation(), exports2);
    __exportStar(require_types(), exports2);
    __exportStar(require_utils3(), exports2);
    __exportStar(require_wrappingCounter(), exports2);
  }
});

// ../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react.production.min.js"(exports2) {
    "use strict";
    var l = Symbol.for("react.element");
    var n = Symbol.for("react.portal");
    var p = Symbol.for("react.fragment");
    var q = Symbol.for("react.strict_mode");
    var r = Symbol.for("react.profiler");
    var t = Symbol.for("react.provider");
    var u = Symbol.for("react.context");
    var v = Symbol.for("react.forward_ref");
    var w = Symbol.for("react.suspense");
    var x = Symbol.for("react.memo");
    var y = Symbol.for("react.lazy");
    var z = Symbol.iterator;
    function A(a) {
      if (null === a || "object" !== typeof a)
        return null;
      a = z && a[z] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var B = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var C = Object.assign;
    var D = {};
    function E(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D;
      this.updater = e || B;
    }
    E.prototype.isReactComponent = {};
    E.prototype.setState = function(a, b) {
      if ("object" !== typeof a && "function" !== typeof a && null != a)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    E.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E.prototype;
    function G(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D;
      this.updater = e || B;
    }
    var H = G.prototype = new F();
    H.constructor = G;
    C(H, E.prototype);
    H.isPureReactComponent = true;
    var I = Array.isArray;
    var J = Object.prototype.hasOwnProperty;
    var K = { current: null };
    var L = { key: true, ref: true, __self: true, __source: true };
    function M(a, b, e) {
      var d, c = {}, k = null, h = null;
      if (null != b)
        for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b)
          J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
      var g = arguments.length - 2;
      if (1 === g)
        c.children = e;
      else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++)
          f[m] = arguments[m + 2];
        c.children = f;
      }
      if (a && a.defaultProps)
        for (d in g = a.defaultProps, g)
          void 0 === c[d] && (c[d] = g[d]);
      return { $$typeof: l, type: a, key: k, ref: h, props: c, _owner: K.current };
    }
    function N(a, b) {
      return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l;
    }
    function escape2(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var P = /\/+/g;
    function Q(a, b) {
      return "object" === typeof a && null !== a && null != a.key ? escape2("" + a.key) : b.toString(36);
    }
    function R(a, b, e, d, c) {
      var k = typeof a;
      if ("undefined" === k || "boolean" === k)
        a = null;
      var h = false;
      if (null === a)
        h = true;
      else
        switch (k) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case l:
              case n:
                h = true;
            }
        }
      if (h)
        return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function(a2) {
          return a2;
        })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
      h = 0;
      d = "" === d ? "." : d + ":";
      if (I(a))
        for (var g = 0; g < a.length; g++) {
          k = a[g];
          var f = d + Q(k, g);
          h += R(k, b, e, f, c);
        }
      else if (f = A(a), "function" === typeof f)
        for (a = f.call(a), g = 0; !(k = a.next()).done; )
          k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
      else if ("object" === k)
        throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
      return h;
    }
    function S(a, b, e) {
      if (null == a)
        return a;
      var d = [], c = 0;
      R(a, d, "", "", function(a2) {
        return b.call(e, a2, c++);
      });
      return d;
    }
    function T(a) {
      if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(b2) {
          if (0 === a._status || -1 === a._status)
            a._status = 1, a._result = b2;
        }, function(b2) {
          if (0 === a._status || -1 === a._status)
            a._status = 2, a._result = b2;
        });
        -1 === a._status && (a._status = 0, a._result = b);
      }
      if (1 === a._status)
        return a._result.default;
      throw a._result;
    }
    var U = { current: null };
    var V = { transition: null };
    var W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
    exports2.Children = { map: S, forEach: function(a, b, e) {
      S(a, function() {
        b.apply(this, arguments);
      }, e);
    }, count: function(a) {
      var b = 0;
      S(a, function() {
        b++;
      });
      return b;
    }, toArray: function(a) {
      return S(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!O(a))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    exports2.Component = E;
    exports2.Fragment = p;
    exports2.Profiler = r;
    exports2.PureComponent = G;
    exports2.StrictMode = q;
    exports2.Suspense = w;
    exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
    exports2.cloneElement = function(a, b, e) {
      if (null === a || void 0 === a)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d = C({}, a.props), c = a.key, k = a.ref, h = a._owner;
      if (null != b) {
        void 0 !== b.ref && (k = b.ref, h = K.current);
        void 0 !== b.key && (c = "" + b.key);
        if (a.type && a.type.defaultProps)
          var g = a.type.defaultProps;
        for (f in b)
          J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
      }
      var f = arguments.length - 2;
      if (1 === f)
        d.children = e;
      else if (1 < f) {
        g = Array(f);
        for (var m = 0; m < f; m++)
          g[m] = arguments[m + 2];
        d.children = g;
      }
      return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
    };
    exports2.createContext = function(a) {
      a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a.Provider = { $$typeof: t, _context: a };
      return a.Consumer = a;
    };
    exports2.createElement = M;
    exports2.createFactory = function(a) {
      var b = M.bind(null, a);
      b.type = a;
      return b;
    };
    exports2.createRef = function() {
      return { current: null };
    };
    exports2.forwardRef = function(a) {
      return { $$typeof: v, render: a };
    };
    exports2.isValidElement = O;
    exports2.lazy = function(a) {
      return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
    };
    exports2.memo = function(a, b) {
      return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
    };
    exports2.startTransition = function(a) {
      var b = V.transition;
      V.transition = {};
      try {
        a();
      } finally {
        V.transition = b;
      }
    };
    exports2.unstable_act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    exports2.useCallback = function(a, b) {
      return U.current.useCallback(a, b);
    };
    exports2.useContext = function(a) {
      return U.current.useContext(a);
    };
    exports2.useDebugValue = function() {
    };
    exports2.useDeferredValue = function(a) {
      return U.current.useDeferredValue(a);
    };
    exports2.useEffect = function(a, b) {
      return U.current.useEffect(a, b);
    };
    exports2.useId = function() {
      return U.current.useId();
    };
    exports2.useImperativeHandle = function(a, b, e) {
      return U.current.useImperativeHandle(a, b, e);
    };
    exports2.useInsertionEffect = function(a, b) {
      return U.current.useInsertionEffect(a, b);
    };
    exports2.useLayoutEffect = function(a, b) {
      return U.current.useLayoutEffect(a, b);
    };
    exports2.useMemo = function(a, b) {
      return U.current.useMemo(a, b);
    };
    exports2.useReducer = function(a, b, e) {
      return U.current.useReducer(a, b, e);
    };
    exports2.useRef = function(a) {
      return U.current.useRef(a);
    };
    exports2.useState = function(a) {
      return U.current.useState(a);
    };
    exports2.useSyncExternalStore = function(a, b, e) {
      return U.current.useSyncExternalStore(a, b, e);
    };
    exports2.useTransition = function() {
      return U.current.useTransition();
    };
    exports2.version = "18.2.0";
  }
});

// ../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react.development.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.2.0";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent2(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent2;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type2;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromType(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type2.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type2.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type2, key2, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type2,
            key: key2,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement2(type2, config, children) {
          var propName;
          var props = {};
          var key2 = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key2 = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type2 && type2.defaultProps) {
            var defaultProps = type2.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key2 || ref) {
              var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
              if (key2) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type2, key2, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key2 = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key2 = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key2, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape2(key2) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key2.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape2("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type2 = typeof children;
          if (type2 === "undefined" || type2 === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type2) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type2 === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func2, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func2.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext6(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef3(render2) {
          {
            if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render2 !== "function") {
              error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
            } else {
              if (render2.length !== 0 && render2.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render2 != null) {
              if (render2.defaultProps != null || render2.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render2
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render2.name && !render2.displayName) {
                  render2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type2) {
          if (typeof type2 === "string" || typeof type2 === "function") {
            return true;
          }
          if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type2 === "object" && type2 !== null) {
            if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type2, compare) {
          {
            if (!isValidElementType(type2)) {
              error("memo: The first argument must be a component. Instead received: %s", type2 === null ? "null" : typeof type2);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type2,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type2.name && !type2.displayName) {
                  type2.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext7(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState17(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef4(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect17(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create2, deps);
        }
        function useInsertionEffect(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create2, deps);
        }
        function useLayoutEffect2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create2, deps);
        }
        function useCallback8(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo3(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create2, deps);
        }
        function useImperativeHandle(ref, create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create2, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err2 = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err2.name = "Invariant Violation";
                    throw err2;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type2 = element.type;
            if (type2 === null || type2 === void 0 || typeof type2 === "string") {
              return;
            }
            var propTypes;
            if (typeof type2 === "function") {
              propTypes = type2.propTypes;
            } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type2.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type2);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type2);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key2 = keys[i2];
              if (key2 !== "children" && key2 !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type2, props, children) {
          var validType = isValidElementType(type2);
          if (!validType) {
            var info = "";
            if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type2 === null) {
              typeString = "null";
            } else if (isArray(type2)) {
              typeString = "array";
            } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type2;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement2.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type2);
            }
          }
          if (type2 === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type2) {
          var validatedFactory = createElementWithValidation.bind(null, type2);
          validatedFactory.type = type2;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type2
                });
                return type2;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i2 = 0;
              try {
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i2 + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.PureComponent = PureComponent2;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports2.cloneElement = cloneElement$1;
        exports2.createContext = createContext6;
        exports2.createElement = createElement$1;
        exports2.createFactory = createFactory;
        exports2.createRef = createRef;
        exports2.forwardRef = forwardRef3;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.startTransition = startTransition;
        exports2.unstable_act = act;
        exports2.useCallback = useCallback8;
        exports2.useContext = useContext7;
        exports2.useDebugValue = useDebugValue;
        exports2.useDeferredValue = useDeferredValue;
        exports2.useEffect = useEffect17;
        exports2.useId = useId;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useInsertionEffect = useInsertionEffect;
        exports2.useLayoutEffect = useLayoutEffect2;
        exports2.useMemo = useMemo3;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef4;
        exports2.useState = useState17;
        exports2.useSyncExternalStore = useSyncExternalStore;
        exports2.useTransition = useTransition;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// ../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/index.js
var require_react = __commonJS({
  "../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/isObject.js"(exports2, module2) {
    function isObject(value) {
      var type2 = typeof value;
      return value != null && (type2 == "object" || type2 == "function");
    }
    module2.exports = isObject;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_freeGlobal.js"(exports2, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_root.js
var require_root = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_root.js"(exports2, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/now.js
var require_now = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/now.js"(exports2, module2) {
    var root = require_root();
    var now = function() {
      return root.Date.now();
    };
    module2.exports = now;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_trimmedEndIndex.js"(exports2, module2) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module2.exports = trimmedEndIndex;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_baseTrim.js"(exports2, module2) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module2.exports = baseTrim;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_Symbol.js"(exports2, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_getRawTag.js"(exports2, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_objectToString.js"(exports2, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/_baseGetTag.js"(exports2, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/isObjectLike.js"(exports2, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/isSymbol.js"(exports2, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module2.exports = isSymbol;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/toNumber.js"(exports2, module2) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = toNumber;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/debounce.js
var require_debounce = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/debounce.js"(exports2, module2) {
    var isObject = require_isObject();
    var now = require_now();
    var toNumber = require_toNumber();
    var FUNC_ERROR_TEXT = "Expected a function";
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    function debounce2(func2, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func2 != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func2.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    module2.exports = debounce2;
  }
});

// ../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "../../node_modules/.store/lodash-npm-4.17.21-6382451519/node_modules/lodash/throttle.js"(exports2, module2) {
    var debounce2 = require_debounce();
    var isObject = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle2(func2, wait, options) {
      var leading = true, trailing = true;
      if (typeof func2 != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce2(func2, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module2.exports = throttle2;
  }
});

// ../../node_modules/.store/ci-info-npm-3.8.0-d56a0b67d6/node_modules/ci-info/vendors.json
var require_vendors = __commonJS({
  "../../node_modules/.store/ci-info-npm-3.8.0-d56a0b67d6/node_modules/ci-info/vendors.json"(exports2, module2) {
    module2.exports = [
      {
        name: "Appcircle",
        constant: "APPCIRCLE",
        env: "AC_APPCIRCLE"
      },
      {
        name: "AppVeyor",
        constant: "APPVEYOR",
        env: "APPVEYOR",
        pr: "APPVEYOR_PULL_REQUEST_NUMBER"
      },
      {
        name: "AWS CodeBuild",
        constant: "CODEBUILD",
        env: "CODEBUILD_BUILD_ARN"
      },
      {
        name: "Azure Pipelines",
        constant: "AZURE_PIPELINES",
        env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
        pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
      },
      {
        name: "Bamboo",
        constant: "BAMBOO",
        env: "bamboo_planKey"
      },
      {
        name: "Bitbucket Pipelines",
        constant: "BITBUCKET",
        env: "BITBUCKET_COMMIT",
        pr: "BITBUCKET_PR_ID"
      },
      {
        name: "Bitrise",
        constant: "BITRISE",
        env: "BITRISE_IO",
        pr: "BITRISE_PULL_REQUEST"
      },
      {
        name: "Buddy",
        constant: "BUDDY",
        env: "BUDDY_WORKSPACE_ID",
        pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
      },
      {
        name: "Buildkite",
        constant: "BUILDKITE",
        env: "BUILDKITE",
        pr: {
          env: "BUILDKITE_PULL_REQUEST",
          ne: "false"
        }
      },
      {
        name: "CircleCI",
        constant: "CIRCLE",
        env: "CIRCLECI",
        pr: "CIRCLE_PULL_REQUEST"
      },
      {
        name: "Cirrus CI",
        constant: "CIRRUS",
        env: "CIRRUS_CI",
        pr: "CIRRUS_PR"
      },
      {
        name: "Codefresh",
        constant: "CODEFRESH",
        env: "CF_BUILD_ID",
        pr: {
          any: [
            "CF_PULL_REQUEST_NUMBER",
            "CF_PULL_REQUEST_ID"
          ]
        }
      },
      {
        name: "Codemagic",
        constant: "CODEMAGIC",
        env: "CM_BUILD_ID",
        pr: "CM_PULL_REQUEST"
      },
      {
        name: "Codeship",
        constant: "CODESHIP",
        env: {
          CI_NAME: "codeship"
        }
      },
      {
        name: "Drone",
        constant: "DRONE",
        env: "DRONE",
        pr: {
          DRONE_BUILD_EVENT: "pull_request"
        }
      },
      {
        name: "dsari",
        constant: "DSARI",
        env: "DSARI"
      },
      {
        name: "Expo Application Services",
        constant: "EAS",
        env: "EAS_BUILD"
      },
      {
        name: "Gerrit",
        constant: "GERRIT",
        env: "GERRIT_PROJECT"
      },
      {
        name: "GitHub Actions",
        constant: "GITHUB_ACTIONS",
        env: "GITHUB_ACTIONS",
        pr: {
          GITHUB_EVENT_NAME: "pull_request"
        }
      },
      {
        name: "GitLab CI",
        constant: "GITLAB",
        env: "GITLAB_CI",
        pr: "CI_MERGE_REQUEST_ID"
      },
      {
        name: "GoCD",
        constant: "GOCD",
        env: "GO_PIPELINE_LABEL"
      },
      {
        name: "Google Cloud Build",
        constant: "GOOGLE_CLOUD_BUILD",
        env: "BUILDER_OUTPUT"
      },
      {
        name: "Harness CI",
        constant: "HARNESS",
        env: "HARNESS_BUILD_ID"
      },
      {
        name: "Heroku",
        constant: "HEROKU",
        env: {
          env: "NODE",
          includes: "/app/.heroku/node/bin/node"
        }
      },
      {
        name: "Hudson",
        constant: "HUDSON",
        env: "HUDSON_URL"
      },
      {
        name: "Jenkins",
        constant: "JENKINS",
        env: [
          "JENKINS_URL",
          "BUILD_ID"
        ],
        pr: {
          any: [
            "ghprbPullId",
            "CHANGE_ID"
          ]
        }
      },
      {
        name: "LayerCI",
        constant: "LAYERCI",
        env: "LAYERCI",
        pr: "LAYERCI_PULL_REQUEST"
      },
      {
        name: "Magnum CI",
        constant: "MAGNUM",
        env: "MAGNUM"
      },
      {
        name: "Netlify CI",
        constant: "NETLIFY",
        env: "NETLIFY",
        pr: {
          env: "PULL_REQUEST",
          ne: "false"
        }
      },
      {
        name: "Nevercode",
        constant: "NEVERCODE",
        env: "NEVERCODE",
        pr: {
          env: "NEVERCODE_PULL_REQUEST",
          ne: "false"
        }
      },
      {
        name: "ReleaseHub",
        constant: "RELEASEHUB",
        env: "RELEASE_BUILD_ID"
      },
      {
        name: "Render",
        constant: "RENDER",
        env: "RENDER",
        pr: {
          IS_PULL_REQUEST: "true"
        }
      },
      {
        name: "Sail CI",
        constant: "SAIL",
        env: "SAILCI",
        pr: "SAIL_PULL_REQUEST_NUMBER"
      },
      {
        name: "Screwdriver",
        constant: "SCREWDRIVER",
        env: "SCREWDRIVER",
        pr: {
          env: "SD_PULL_REQUEST",
          ne: "false"
        }
      },
      {
        name: "Semaphore",
        constant: "SEMAPHORE",
        env: "SEMAPHORE",
        pr: "PULL_REQUEST_NUMBER"
      },
      {
        name: "Shippable",
        constant: "SHIPPABLE",
        env: "SHIPPABLE",
        pr: {
          IS_PULL_REQUEST: "true"
        }
      },
      {
        name: "Solano CI",
        constant: "SOLANO",
        env: "TDDIUM",
        pr: "TDDIUM_PR_ID"
      },
      {
        name: "Sourcehut",
        constant: "SOURCEHUT",
        env: {
          CI_NAME: "sourcehut"
        }
      },
      {
        name: "Strider CD",
        constant: "STRIDER",
        env: "STRIDER"
      },
      {
        name: "TaskCluster",
        constant: "TASKCLUSTER",
        env: [
          "TASK_ID",
          "RUN_ID"
        ]
      },
      {
        name: "TeamCity",
        constant: "TEAMCITY",
        env: "TEAMCITY_VERSION"
      },
      {
        name: "Travis CI",
        constant: "TRAVIS",
        env: "TRAVIS",
        pr: {
          env: "TRAVIS_PULL_REQUEST",
          ne: "false"
        }
      },
      {
        name: "Vercel",
        constant: "VERCEL",
        env: {
          any: [
            "NOW_BUILDER",
            "VERCEL"
          ]
        }
      },
      {
        name: "Visual Studio App Center",
        constant: "APPCENTER",
        env: "APPCENTER_BUILD_ID"
      },
      {
        name: "Woodpecker",
        constant: "WOODPECKER",
        env: {
          CI: "woodpecker"
        },
        pr: {
          CI_BUILD_EVENT: "pull_request"
        }
      },
      {
        name: "Xcode Cloud",
        constant: "XCODE_CLOUD",
        env: "CI_XCODE_PROJECT",
        pr: "CI_PULL_REQUEST_NUMBER"
      },
      {
        name: "Xcode Server",
        constant: "XCODE_SERVER",
        env: "XCS"
      }
    ];
  }
});

// ../../node_modules/.store/ci-info-npm-3.8.0-d56a0b67d6/node_modules/ci-info/index.js
var require_ci_info = __commonJS({
  "../../node_modules/.store/ci-info-npm-3.8.0-d56a0b67d6/node_modules/ci-info/index.js"(exports2) {
    "use strict";
    var vendors = require_vendors();
    var env2 = process.env;
    Object.defineProperty(exports2, "_vendors", {
      value: vendors.map(function(v) {
        return v.constant;
      })
    });
    exports2.name = null;
    exports2.isPR = null;
    vendors.forEach(function(vendor) {
      const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
      const isCI = envs.every(function(obj) {
        return checkEnv(obj);
      });
      exports2[vendor.constant] = isCI;
      if (!isCI) {
        return;
      }
      exports2.name = vendor.name;
      switch (typeof vendor.pr) {
        case "string":
          exports2.isPR = !!env2[vendor.pr];
          break;
        case "object":
          if ("env" in vendor.pr) {
            exports2.isPR = vendor.pr.env in env2 && env2[vendor.pr.env] !== vendor.pr.ne;
          } else if ("any" in vendor.pr) {
            exports2.isPR = vendor.pr.any.some(function(key2) {
              return !!env2[key2];
            });
          } else {
            exports2.isPR = checkEnv(vendor.pr);
          }
          break;
        default:
          exports2.isPR = null;
      }
    });
    exports2.isCI = !!(env2.CI !== "false" && (env2.BUILD_ID || env2.BUILD_NUMBER || env2.CI || env2.CI_APP_ID || env2.CI_BUILD_ID || env2.CI_BUILD_NUMBER || env2.CI_NAME || env2.CONTINUOUS_INTEGRATION || env2.RUN_ID || exports2.name || false));
    function checkEnv(obj) {
      if (typeof obj === "string")
        return !!env2[obj];
      if ("env" in obj) {
        return env2[obj.env] && env2[obj.env].includes(obj.includes);
      }
      if ("any" in obj) {
        return obj.any.some(function(k) {
          return !!env2[k];
        });
      }
      return Object.keys(obj).every(function(k) {
        return env2[k] === obj[k];
      });
    }
  }
});

// ../../node_modules/.store/is-ci-npm-3.0.1-d9aea361e1/node_modules/is-ci/index.js
var require_is_ci = __commonJS({
  "../../node_modules/.store/is-ci-npm-3.0.1-d9aea361e1/node_modules/is-ci/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_ci_info().isCI;
  }
});

// ../../node_modules/.store/signal-exit-npm-3.0.7-bd270458a3/node_modules/signal-exit/signals.js
var require_signals = __commonJS({
  "../../node_modules/.store/signal-exit-npm-3.0.7-bd270458a3/node_modules/signal-exit/signals.js"(exports2, module2) {
    module2.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module2.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
      );
    }
    if (process.platform === "linux") {
      module2.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  }
});

// ../../node_modules/.store/signal-exit-npm-3.0.7-bd270458a3/node_modules/signal-exit/index.js
var require_signal_exit = __commonJS({
  "../../node_modules/.store/signal-exit-npm-3.0.7-bd270458a3/node_modules/signal-exit/index.js"(exports2, module2) {
    var process15 = global.process;
    var processOk = function(process16) {
      return process16 && typeof process16 === "object" && typeof process16.removeListener === "function" && typeof process16.emit === "function" && typeof process16.reallyExit === "function" && typeof process16.listeners === "function" && typeof process16.kill === "function" && typeof process16.pid === "number" && typeof process16.on === "function";
    };
    if (!processOk(process15)) {
      module2.exports = function() {
        return function() {
        };
      };
    } else {
      assert2 = __require("assert");
      signals = require_signals();
      isWin = /^win/i.test(process15.platform);
      EE = __require("events");
      if (typeof EE !== "function") {
        EE = EE.EventEmitter;
      }
      if (process15.__signal_exit_emitter__) {
        emitter = process15.__signal_exit_emitter__;
      } else {
        emitter = process15.__signal_exit_emitter__ = new EE();
        emitter.count = 0;
        emitter.emitted = {};
      }
      if (!emitter.infinite) {
        emitter.setMaxListeners(Infinity);
        emitter.infinite = true;
      }
      module2.exports = function(cb2, opts) {
        if (!processOk(global.process)) {
          return function() {
          };
        }
        assert2.equal(typeof cb2, "function", "a callback must be provided for exit handler");
        if (loaded === false) {
          load();
        }
        var ev = "exit";
        if (opts && opts.alwaysLast) {
          ev = "afterexit";
        }
        var remove = function() {
          emitter.removeListener(ev, cb2);
          if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
            unload();
          }
        };
        emitter.on(ev, cb2);
        return remove;
      };
      unload = function unload2() {
        if (!loaded || !processOk(global.process)) {
          return;
        }
        loaded = false;
        signals.forEach(function(sig) {
          try {
            process15.removeListener(sig, sigListeners[sig]);
          } catch (er) {
          }
        });
        process15.emit = originalProcessEmit;
        process15.reallyExit = originalProcessReallyExit;
        emitter.count -= 1;
      };
      module2.exports.unload = unload;
      emit = function emit2(event, code, signal) {
        if (emitter.emitted[event]) {
          return;
        }
        emitter.emitted[event] = true;
        emitter.emit(event, code, signal);
      };
      sigListeners = {};
      signals.forEach(function(sig) {
        sigListeners[sig] = function listener() {
          if (!processOk(global.process)) {
            return;
          }
          var listeners = process15.listeners(sig);
          if (listeners.length === emitter.count) {
            unload();
            emit("exit", null, sig);
            emit("afterexit", null, sig);
            if (isWin && sig === "SIGHUP") {
              sig = "SIGINT";
            }
            process15.kill(process15.pid, sig);
          }
        };
      });
      module2.exports.signals = function() {
        return signals;
      };
      loaded = false;
      load = function load2() {
        if (loaded || !processOk(global.process)) {
          return;
        }
        loaded = true;
        emitter.count += 1;
        signals = signals.filter(function(sig) {
          try {
            process15.on(sig, sigListeners[sig]);
            return true;
          } catch (er) {
            return false;
          }
        });
        process15.emit = processEmit;
        process15.reallyExit = processReallyExit;
      };
      module2.exports.load = load;
      originalProcessReallyExit = process15.reallyExit;
      processReallyExit = function processReallyExit2(code) {
        if (!processOk(global.process)) {
          return;
        }
        process15.exitCode = code || 0;
        emit("exit", process15.exitCode, null);
        emit("afterexit", process15.exitCode, null);
        originalProcessReallyExit.call(process15, process15.exitCode);
      };
      originalProcessEmit = process15.emit;
      processEmit = function processEmit2(ev, arg2) {
        if (ev === "exit" && processOk(global.process)) {
          if (arg2 !== void 0) {
            process15.exitCode = arg2;
          }
          var ret = originalProcessEmit.apply(this, arguments);
          emit("exit", process15.exitCode, null);
          emit("afterexit", process15.exitCode, null);
          return ret;
        } else {
          return originalProcessEmit.apply(this, arguments);
        }
      };
    }
    var assert2;
    var signals;
    var isWin;
    var EE;
    var emitter;
    var unload;
    var emit;
    var sigListeners;
    var loaded;
    var load;
    var originalProcessReallyExit;
    var processReallyExit;
    var originalProcessEmit;
    var processEmit;
  }
});

// ../../node_modules/.store/scheduler-npm-0.23.0-a379a6bc3b/node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "../../node_modules/.store/scheduler-npm-0.23.0-a379a6bc3b/node_modules/scheduler/cjs/scheduler.production.min.js"(exports2) {
    "use strict";
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b))
            a[d] = b, a[c] = e, c = d;
          else
            break a;
        }
    }
    function h(a) {
      return 0 === a.length ? null : a[0];
    }
    function k(a) {
      if (0 === a.length)
        return null;
      var b = a[0], c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
            var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
            if (0 > g(C, c))
              n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
            else if (n < e && 0 > g(x, c))
              a[d] = x, a[n] = c, d = n;
            else
              break a;
          }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    if ("object" === typeof performance && "function" === typeof performance.now) {
      l = performance;
      exports2.unstable_now = function() {
        return l.now();
      };
    } else {
      p = Date, q = p.now();
      exports2.unstable_now = function() {
        return p.now() - q;
      };
    }
    var l;
    var p;
    var q;
    var r = [];
    var t = [];
    var u = 1;
    var v = null;
    var y = 3;
    var z = false;
    var A = false;
    var B = false;
    var D = "function" === typeof setTimeout ? setTimeout : null;
    var E = "function" === typeof clearTimeout ? clearTimeout : null;
    var F = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G(a) {
      for (var b = h(t); null !== b; ) {
        if (null === b.callback)
          k(t);
        else if (b.startTime <= a)
          k(t), b.sortIndex = b.expirationTime, f(r, b);
        else
          break;
        b = h(t);
      }
    }
    function H(a) {
      B = false;
      G(a);
      if (!A)
        if (null !== h(r))
          A = true, I(J);
        else {
          var b = h(t);
          null !== b && K(H, b.startTime - a);
        }
    }
    function J(a, b) {
      A = false;
      B && (B = false, E(L), L = -1);
      z = true;
      var c = y;
      try {
        G(b);
        for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M()); ) {
          var d = v.callback;
          if ("function" === typeof d) {
            v.callback = null;
            y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports2.unstable_now();
            "function" === typeof e ? v.callback = e : v === h(r) && k(r);
            G(b);
          } else
            k(r);
          v = h(r);
        }
        if (null !== v)
          var w = true;
        else {
          var m = h(t);
          null !== m && K(H, m.startTime - b);
          w = false;
        }
        return w;
      } finally {
        v = null, y = c, z = false;
      }
    }
    var N = false;
    var O = null;
    var L = -1;
    var P = 5;
    var Q = -1;
    function M() {
      return exports2.unstable_now() - Q < P ? false : true;
    }
    function R() {
      if (null !== O) {
        var a = exports2.unstable_now();
        Q = a;
        var b = true;
        try {
          b = O(true, a);
        } finally {
          b ? S() : (N = false, O = null);
        }
      } else
        N = false;
    }
    var S;
    if ("function" === typeof F)
      S = function() {
        F(R);
      };
    else if ("undefined" !== typeof MessageChannel) {
      T = new MessageChannel(), U = T.port2;
      T.port1.onmessage = R;
      S = function() {
        U.postMessage(null);
      };
    } else
      S = function() {
        D(R, 0);
      };
    var T;
    var U;
    function I(a) {
      O = a;
      N || (N = true, S());
    }
    function K(a, b) {
      L = D(function() {
        a(exports2.unstable_now());
      }, b);
    }
    exports2.unstable_IdlePriority = 5;
    exports2.unstable_ImmediatePriority = 1;
    exports2.unstable_LowPriority = 4;
    exports2.unstable_NormalPriority = 3;
    exports2.unstable_Profiling = null;
    exports2.unstable_UserBlockingPriority = 2;
    exports2.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports2.unstable_continueExecution = function() {
      A || z || (A = true, I(J));
    };
    exports2.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    exports2.unstable_getCurrentPriorityLevel = function() {
      return y;
    };
    exports2.unstable_getFirstCallbackNode = function() {
      return h(r);
    };
    exports2.unstable_next = function(a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    };
    exports2.unstable_pauseExecution = function() {
    };
    exports2.unstable_requestPaint = function() {
    };
    exports2.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    };
    exports2.unstable_scheduleCallback = function(a, b, c) {
      var d = exports2.unstable_now();
      "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
      switch (a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c + e;
      a = { id: u++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
      c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = true, I(J)));
      return a;
    };
    exports2.unstable_shouldYield = M;
    exports2.unstable_wrapCallback = function(a) {
      var b = y;
      return function() {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  }
});

// ../../node_modules/.store/scheduler-npm-0.23.0-a379a6bc3b/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "../../node_modules/.store/scheduler-npm-0.23.0-a379a6bc3b/node_modules/scheduler/cjs/scheduler.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i2) {
          var index = i2;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i2) {
          var index = i2;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports2.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports2.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports2.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports2.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports2.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports2.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports2.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports2.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports2.unstable_IdlePriority = IdlePriority;
        exports2.unstable_ImmediatePriority = ImmediatePriority;
        exports2.unstable_LowPriority = LowPriority;
        exports2.unstable_NormalPriority = NormalPriority;
        exports2.unstable_Profiling = unstable_Profiling;
        exports2.unstable_UserBlockingPriority = UserBlockingPriority;
        exports2.unstable_cancelCallback = unstable_cancelCallback;
        exports2.unstable_continueExecution = unstable_continueExecution;
        exports2.unstable_forceFrameRate = forceFrameRate;
        exports2.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports2.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports2.unstable_next = unstable_next;
        exports2.unstable_pauseExecution = unstable_pauseExecution;
        exports2.unstable_requestPaint = unstable_requestPaint;
        exports2.unstable_runWithPriority = unstable_runWithPriority;
        exports2.unstable_scheduleCallback = unstable_scheduleCallback;
        exports2.unstable_shouldYield = shouldYieldToHost;
        exports2.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// ../../node_modules/.store/scheduler-npm-0.23.0-a379a6bc3b/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "../../node_modules/.store/scheduler-npm-0.23.0-a379a6bc3b/node_modules/scheduler/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_production_min();
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// ../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler.production.min.js
var require_react_reconciler_production_min = __commonJS({
  "../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler.production.min.js"(exports2, module2) {
    module2.exports = function $$$reconciler($$$hostConfig) {
      var exports3 = {};
      "use strict";
      var aa = require_react(), ba = require_scheduler(), ca = Object.assign;
      function m(a) {
        for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
          b += "&args[]=" + encodeURIComponent(arguments[c]);
        return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var da = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, ea = Symbol.for("react.element"), fa = Symbol.for("react.portal"), ha = Symbol.for("react.fragment"), ia = Symbol.for("react.strict_mode"), ja = Symbol.for("react.profiler"), ka = Symbol.for("react.provider"), la = Symbol.for("react.context"), ma = Symbol.for("react.forward_ref"), na = Symbol.for("react.suspense"), oa = Symbol.for("react.suspense_list"), pa = Symbol.for("react.memo"), qa = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var ra = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.cache");
      Symbol.for("react.tracing_marker");
      var sa = Symbol.iterator;
      function ta(a) {
        if (null === a || "object" !== typeof a)
          return null;
        a = sa && a[sa] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }
      function ua(a) {
        if (null == a)
          return null;
        if ("function" === typeof a)
          return a.displayName || a.name || null;
        if ("string" === typeof a)
          return a;
        switch (a) {
          case ha:
            return "Fragment";
          case fa:
            return "Portal";
          case ja:
            return "Profiler";
          case ia:
            return "StrictMode";
          case na:
            return "Suspense";
          case oa:
            return "SuspenseList";
        }
        if ("object" === typeof a)
          switch (a.$$typeof) {
            case la:
              return (a.displayName || "Context") + ".Consumer";
            case ka:
              return (a._context.displayName || "Context") + ".Provider";
            case ma:
              var b = a.render;
              a = a.displayName;
              a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
              return a;
            case pa:
              return b = a.displayName || null, null !== b ? b : ua(a.type) || "Memo";
            case qa:
              b = a._payload;
              a = a._init;
              try {
                return ua(a(b));
              } catch (c) {
              }
          }
        return null;
      }
      function va(a) {
        var b = a.type;
        switch (a.tag) {
          case 24:
            return "Cache";
          case 9:
            return (b.displayName || "Context") + ".Consumer";
          case 10:
            return (b._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return b;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return ua(b);
          case 8:
            return b === ia ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof b)
              return b.displayName || b.name || null;
            if ("string" === typeof b)
              return b;
        }
        return null;
      }
      function wa(a) {
        var b = a, c = a;
        if (a.alternate)
          for (; b.return; )
            b = b.return;
        else {
          a = b;
          do
            b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
          while (a);
        }
        return 3 === b.tag ? c : null;
      }
      function xa(a) {
        if (wa(a) !== a)
          throw Error(m(188));
      }
      function ya(a) {
        var b = a.alternate;
        if (!b) {
          b = wa(a);
          if (null === b)
            throw Error(m(188));
          return b !== a ? null : a;
        }
        for (var c = a, d = b; ; ) {
          var e = c.return;
          if (null === e)
            break;
          var f = e.alternate;
          if (null === f) {
            d = e.return;
            if (null !== d) {
              c = d;
              continue;
            }
            break;
          }
          if (e.child === f.child) {
            for (f = e.child; f; ) {
              if (f === c)
                return xa(e), a;
              if (f === d)
                return xa(e), b;
              f = f.sibling;
            }
            throw Error(m(188));
          }
          if (c.return !== d.return)
            c = e, d = f;
          else {
            for (var g = false, h = e.child; h; ) {
              if (h === c) {
                g = true;
                c = e;
                d = f;
                break;
              }
              if (h === d) {
                g = true;
                d = e;
                c = f;
                break;
              }
              h = h.sibling;
            }
            if (!g) {
              for (h = f.child; h; ) {
                if (h === c) {
                  g = true;
                  c = f;
                  d = e;
                  break;
                }
                if (h === d) {
                  g = true;
                  d = f;
                  c = e;
                  break;
                }
                h = h.sibling;
              }
              if (!g)
                throw Error(m(189));
            }
          }
          if (c.alternate !== d)
            throw Error(m(190));
        }
        if (3 !== c.tag)
          throw Error(m(188));
        return c.stateNode.current === c ? a : b;
      }
      function Aa(a) {
        a = ya(a);
        return null !== a ? Ba(a) : null;
      }
      function Ba(a) {
        if (5 === a.tag || 6 === a.tag)
          return a;
        for (a = a.child; null !== a; ) {
          var b = Ba(a);
          if (null !== b)
            return b;
          a = a.sibling;
        }
        return null;
      }
      function Ca(a) {
        if (5 === a.tag || 6 === a.tag)
          return a;
        for (a = a.child; null !== a; ) {
          if (4 !== a.tag) {
            var b = Ca(a);
            if (null !== b)
              return b;
          }
          a = a.sibling;
        }
        return null;
      }
      var Da = Array.isArray, Ea = $$$hostConfig.getPublicInstance, Fa = $$$hostConfig.getRootHostContext, Ga = $$$hostConfig.getChildHostContext, Ha = $$$hostConfig.prepareForCommit, Ia = $$$hostConfig.resetAfterCommit, Ja = $$$hostConfig.createInstance, Ka = $$$hostConfig.appendInitialChild, La = $$$hostConfig.finalizeInitialChildren, Ma = $$$hostConfig.prepareUpdate, Na = $$$hostConfig.shouldSetTextContent, Oa = $$$hostConfig.createTextInstance, Pa = $$$hostConfig.scheduleTimeout, Qa = $$$hostConfig.cancelTimeout, Ra = $$$hostConfig.noTimeout, Sa = $$$hostConfig.isPrimaryRenderer, Ta = $$$hostConfig.supportsMutation, Ua = $$$hostConfig.supportsPersistence, Va = $$$hostConfig.supportsHydration, Wa = $$$hostConfig.getInstanceFromNode, Xa = $$$hostConfig.preparePortalMount, Ya = $$$hostConfig.getCurrentEventPriority, Za = $$$hostConfig.detachDeletedInstance, $a = $$$hostConfig.supportsMicrotasks, ab = $$$hostConfig.scheduleMicrotask, bb = $$$hostConfig.supportsTestSelectors, cb2 = $$$hostConfig.findFiberRoot, db = $$$hostConfig.getBoundingRect, eb = $$$hostConfig.getTextContent, fb = $$$hostConfig.isHiddenSubtree, gb = $$$hostConfig.matchAccessibilityRole, hb = $$$hostConfig.setFocusIfFocusable, ib = $$$hostConfig.setupIntersectionObserver, jb = $$$hostConfig.appendChild, kb = $$$hostConfig.appendChildToContainer, lb = $$$hostConfig.commitTextUpdate, mb = $$$hostConfig.commitMount, nb = $$$hostConfig.commitUpdate, ob = $$$hostConfig.insertBefore, pb = $$$hostConfig.insertInContainerBefore, qb = $$$hostConfig.removeChild, rb = $$$hostConfig.removeChildFromContainer, sb = $$$hostConfig.resetTextContent, tb = $$$hostConfig.hideInstance, ub = $$$hostConfig.hideTextInstance, vb = $$$hostConfig.unhideInstance, wb = $$$hostConfig.unhideTextInstance, xb = $$$hostConfig.clearContainer, yb = $$$hostConfig.cloneInstance, zb = $$$hostConfig.createContainerChildSet, Ab = $$$hostConfig.appendChildToContainerChildSet, Bb = $$$hostConfig.finalizeContainerChildren, Cb = $$$hostConfig.replaceContainerChildren, Eb = $$$hostConfig.cloneHiddenInstance, Fb = $$$hostConfig.cloneHiddenTextInstance, Gb = $$$hostConfig.canHydrateInstance, Hb = $$$hostConfig.canHydrateTextInstance, Ib = $$$hostConfig.canHydrateSuspenseInstance, Jb = $$$hostConfig.isSuspenseInstancePending, Kb = $$$hostConfig.isSuspenseInstanceFallback, Lb = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails, Mb = $$$hostConfig.registerSuspenseInstanceRetry, Nb = $$$hostConfig.getNextHydratableSibling, Ob = $$$hostConfig.getFirstHydratableChild, Pb = $$$hostConfig.getFirstHydratableChildWithinContainer, Qb = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance, Rb = $$$hostConfig.hydrateInstance, Sb = $$$hostConfig.hydrateTextInstance, Tb = $$$hostConfig.hydrateSuspenseInstance, Ub = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance, Vb = $$$hostConfig.commitHydratedContainer, Wb = $$$hostConfig.commitHydratedSuspenseInstance, Xb = $$$hostConfig.clearSuspenseBoundary, Yb = $$$hostConfig.clearSuspenseBoundaryFromContainer, Zb = $$$hostConfig.shouldDeleteUnhydratedTailInstances, $b = $$$hostConfig.didNotMatchHydratedContainerTextInstance, ac = $$$hostConfig.didNotMatchHydratedTextInstance, bc;
      function cc(a) {
        if (void 0 === bc)
          try {
            throw Error();
          } catch (c) {
            var b = c.stack.trim().match(/\n( *(at )?)/);
            bc = b && b[1] || "";
          }
        return "\n" + bc + a;
      }
      var dc = false;
      function ec(a, b) {
        if (!a || dc)
          return "";
        dc = true;
        var c = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b)
            if (b = function() {
              throw Error();
            }, Object.defineProperty(b.prototype, "props", { set: function() {
              throw Error();
            } }), "object" === typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(b, []);
              } catch (l) {
                var d = l;
              }
              Reflect.construct(a, [], b);
            } else {
              try {
                b.call();
              } catch (l) {
                d = l;
              }
              a.call(b.prototype);
            }
          else {
            try {
              throw Error();
            } catch (l) {
              d = l;
            }
            a();
          }
        } catch (l) {
          if (l && d && "string" === typeof l.stack) {
            for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; )
              h--;
            for (; 1 <= g && 0 <= h; g--, h--)
              if (e[g] !== f[h]) {
                if (1 !== g || 1 !== h) {
                  do
                    if (g--, h--, 0 > h || e[g] !== f[h]) {
                      var k = "\n" + e[g].replace(" at new ", " at ");
                      a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                      return k;
                    }
                  while (1 <= g && 0 <= h);
                }
                break;
              }
          }
        } finally {
          dc = false, Error.prepareStackTrace = c;
        }
        return (a = a ? a.displayName || a.name : "") ? cc(a) : "";
      }
      var fc = Object.prototype.hasOwnProperty, gc = [], hc = -1;
      function ic(a) {
        return { current: a };
      }
      function q(a) {
        0 > hc || (a.current = gc[hc], gc[hc] = null, hc--);
      }
      function v(a, b) {
        hc++;
        gc[hc] = a.current;
        a.current = b;
      }
      var jc = {}, x = ic(jc), z = ic(false), kc = jc;
      function lc(a, b) {
        var c = a.type.contextTypes;
        if (!c)
          return jc;
        var d = a.stateNode;
        if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
          return d.__reactInternalMemoizedMaskedChildContext;
        var e = {}, f;
        for (f in c)
          e[f] = b[f];
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
        return e;
      }
      function A(a) {
        a = a.childContextTypes;
        return null !== a && void 0 !== a;
      }
      function mc() {
        q(z);
        q(x);
      }
      function nc(a, b, c) {
        if (x.current !== jc)
          throw Error(m(168));
        v(x, b);
        v(z, c);
      }
      function oc(a, b, c) {
        var d = a.stateNode;
        b = b.childContextTypes;
        if ("function" !== typeof d.getChildContext)
          return c;
        d = d.getChildContext();
        for (var e in d)
          if (!(e in b))
            throw Error(m(108, va(a) || "Unknown", e));
        return ca({}, c, d);
      }
      function pc(a) {
        a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || jc;
        kc = x.current;
        v(x, a);
        v(z, z.current);
        return true;
      }
      function rc(a, b, c) {
        var d = a.stateNode;
        if (!d)
          throw Error(m(169));
        c ? (a = oc(a, b, kc), d.__reactInternalMemoizedMergedChildContext = a, q(z), q(x), v(x, a)) : q(z);
        v(z, c);
      }
      var tc = Math.clz32 ? Math.clz32 : sc, uc = Math.log, vc = Math.LN2;
      function sc(a) {
        a >>>= 0;
        return 0 === a ? 32 : 31 - (uc(a) / vc | 0) | 0;
      }
      var wc = 64, xc = 4194304;
      function yc(a) {
        switch (a & -a) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return a & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return a;
        }
      }
      function zc(a, b) {
        var c = a.pendingLanes;
        if (0 === c)
          return 0;
        var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
        if (0 !== g) {
          var h = g & ~e;
          0 !== h ? d = yc(h) : (f &= g, 0 !== f && (d = yc(f)));
        } else
          g = c & ~e, 0 !== g ? d = yc(g) : 0 !== f && (d = yc(f));
        if (0 === d)
          return 0;
        if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240)))
          return b;
        0 !== (d & 4) && (d |= c & 16);
        b = a.entangledLanes;
        if (0 !== b)
          for (a = a.entanglements, b &= d; 0 < b; )
            c = 31 - tc(b), e = 1 << c, d |= a[c], b &= ~e;
        return d;
      }
      function Ac(a, b) {
        switch (a) {
          case 1:
          case 2:
          case 4:
            return b + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return b + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function Bc(a, b) {
        for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
          var g = 31 - tc(f), h = 1 << g, k = e[g];
          if (-1 === k) {
            if (0 === (h & c) || 0 !== (h & d))
              e[g] = Ac(h, b);
          } else
            k <= b && (a.expiredLanes |= h);
          f &= ~h;
        }
      }
      function Cc(a) {
        a = a.pendingLanes & -1073741825;
        return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
      }
      function Dc() {
        var a = wc;
        wc <<= 1;
        0 === (wc & 4194240) && (wc = 64);
        return a;
      }
      function Ec(a) {
        for (var b = [], c = 0; 31 > c; c++)
          b.push(a);
        return b;
      }
      function Fc(a, b, c) {
        a.pendingLanes |= b;
        536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
        a = a.eventTimes;
        b = 31 - tc(b);
        a[b] = c;
      }
      function Gc(a, b) {
        var c = a.pendingLanes & ~b;
        a.pendingLanes = b;
        a.suspendedLanes = 0;
        a.pingedLanes = 0;
        a.expiredLanes &= b;
        a.mutableReadLanes &= b;
        a.entangledLanes &= b;
        b = a.entanglements;
        var d = a.eventTimes;
        for (a = a.expirationTimes; 0 < c; ) {
          var e = 31 - tc(c), f = 1 << e;
          b[e] = 0;
          d[e] = -1;
          a[e] = -1;
          c &= ~f;
        }
      }
      function Hc(a, b) {
        var c = a.entangledLanes |= b;
        for (a = a.entanglements; c; ) {
          var d = 31 - tc(c), e = 1 << d;
          e & b | a[d] & b && (a[d] |= b);
          c &= ~e;
        }
      }
      var C = 0;
      function Ic(a) {
        a &= -a;
        return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
      }
      var Jc = ba.unstable_scheduleCallback, Kc = ba.unstable_cancelCallback, Lc = ba.unstable_shouldYield, Mc = ba.unstable_requestPaint, D = ba.unstable_now, Nc = ba.unstable_ImmediatePriority, Oc = ba.unstable_UserBlockingPriority, Pc = ba.unstable_NormalPriority, Qc = ba.unstable_IdlePriority, Rc = null, Sc = null;
      function Tc(a) {
        if (Sc && "function" === typeof Sc.onCommitFiberRoot)
          try {
            Sc.onCommitFiberRoot(Rc, a, void 0, 128 === (a.current.flags & 128));
          } catch (b) {
          }
      }
      function Uc(a, b) {
        return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
      }
      var Vc = "function" === typeof Object.is ? Object.is : Uc, Wc = null, Xc = false, Yc = false;
      function Zc(a) {
        null === Wc ? Wc = [a] : Wc.push(a);
      }
      function $c(a) {
        Xc = true;
        Zc(a);
      }
      function ad() {
        if (!Yc && null !== Wc) {
          Yc = true;
          var a = 0, b = C;
          try {
            var c = Wc;
            for (C = 1; a < c.length; a++) {
              var d = c[a];
              do
                d = d(true);
              while (null !== d);
            }
            Wc = null;
            Xc = false;
          } catch (e) {
            throw null !== Wc && (Wc = Wc.slice(a + 1)), Jc(Nc, ad), e;
          } finally {
            C = b, Yc = false;
          }
        }
        return null;
      }
      var bd = [], cd = 0, dd = null, ed = 0, fd = [], gd = 0, hd = null, id = 1, jd = "";
      function kd(a, b) {
        bd[cd++] = ed;
        bd[cd++] = dd;
        dd = a;
        ed = b;
      }
      function ld(a, b, c) {
        fd[gd++] = id;
        fd[gd++] = jd;
        fd[gd++] = hd;
        hd = a;
        var d = id;
        a = jd;
        var e = 32 - tc(d) - 1;
        d &= ~(1 << e);
        c += 1;
        var f = 32 - tc(b) + e;
        if (30 < f) {
          var g = e - e % 5;
          f = (d & (1 << g) - 1).toString(32);
          d >>= g;
          e -= g;
          id = 1 << 32 - tc(b) + e | c << e | d;
          jd = f + a;
        } else
          id = 1 << f | c << e | d, jd = a;
      }
      function md(a) {
        null !== a.return && (kd(a, 1), ld(a, 1, 0));
      }
      function nd(a) {
        for (; a === dd; )
          dd = bd[--cd], bd[cd] = null, ed = bd[--cd], bd[cd] = null;
        for (; a === hd; )
          hd = fd[--gd], fd[gd] = null, jd = fd[--gd], fd[gd] = null, id = fd[--gd], fd[gd] = null;
      }
      var od = null, pd = null, F = false, qd = false, rd = null;
      function sd(a, b) {
        var c = td(5, null, null, 0);
        c.elementType = "DELETED";
        c.stateNode = b;
        c.return = a;
        b = a.deletions;
        null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
      }
      function ud(a, b) {
        switch (a.tag) {
          case 5:
            return b = Gb(b, a.type, a.pendingProps), null !== b ? (a.stateNode = b, od = a, pd = Ob(b), true) : false;
          case 6:
            return b = Hb(b, a.pendingProps), null !== b ? (a.stateNode = b, od = a, pd = null, true) : false;
          case 13:
            b = Ib(b);
            if (null !== b) {
              var c = null !== hd ? { id, overflow: jd } : null;
              a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 };
              c = td(18, null, null, 0);
              c.stateNode = b;
              c.return = a;
              a.child = c;
              od = a;
              pd = null;
              return true;
            }
            return false;
          default:
            return false;
        }
      }
      function vd(a) {
        return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
      }
      function wd(a) {
        if (F) {
          var b = pd;
          if (b) {
            var c = b;
            if (!ud(a, b)) {
              if (vd(a))
                throw Error(m(418));
              b = Nb(c);
              var d = od;
              b && ud(a, b) ? sd(d, c) : (a.flags = a.flags & -4097 | 2, F = false, od = a);
            }
          } else {
            if (vd(a))
              throw Error(m(418));
            a.flags = a.flags & -4097 | 2;
            F = false;
            od = a;
          }
        }
      }
      function xd(a) {
        for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; )
          a = a.return;
        od = a;
      }
      function yd(a) {
        if (!Va || a !== od)
          return false;
        if (!F)
          return xd(a), F = true, false;
        if (3 !== a.tag && (5 !== a.tag || Zb(a.type) && !Na(a.type, a.memoizedProps))) {
          var b = pd;
          if (b) {
            if (vd(a))
              throw zd(), Error(m(418));
            for (; b; )
              sd(a, b), b = Nb(b);
          }
        }
        xd(a);
        if (13 === a.tag) {
          if (!Va)
            throw Error(m(316));
          a = a.memoizedState;
          a = null !== a ? a.dehydrated : null;
          if (!a)
            throw Error(m(317));
          pd = Ub(a);
        } else
          pd = od ? Nb(a.stateNode) : null;
        return true;
      }
      function zd() {
        for (var a = pd; a; )
          a = Nb(a);
      }
      function Ad() {
        Va && (pd = od = null, qd = F = false);
      }
      function Bd(a) {
        null === rd ? rd = [a] : rd.push(a);
      }
      var Cd = da.ReactCurrentBatchConfig;
      function Dd(a, b) {
        if (Vc(a, b))
          return true;
        if ("object" !== typeof a || null === a || "object" !== typeof b || null === b)
          return false;
        var c = Object.keys(a), d = Object.keys(b);
        if (c.length !== d.length)
          return false;
        for (d = 0; d < c.length; d++) {
          var e = c[d];
          if (!fc.call(b, e) || !Vc(a[e], b[e]))
            return false;
        }
        return true;
      }
      function Ed(a) {
        switch (a.tag) {
          case 5:
            return cc(a.type);
          case 16:
            return cc("Lazy");
          case 13:
            return cc("Suspense");
          case 19:
            return cc("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a = ec(a.type, false), a;
          case 11:
            return a = ec(a.type.render, false), a;
          case 1:
            return a = ec(a.type, true), a;
          default:
            return "";
        }
      }
      function Fd(a, b) {
        if (a && a.defaultProps) {
          b = ca({}, b);
          a = a.defaultProps;
          for (var c in a)
            void 0 === b[c] && (b[c] = a[c]);
          return b;
        }
        return b;
      }
      var Gd = ic(null), Hd = null, Id = null, Jd = null;
      function Kd() {
        Jd = Id = Hd = null;
      }
      function Ld(a, b, c) {
        Sa ? (v(Gd, b._currentValue), b._currentValue = c) : (v(Gd, b._currentValue2), b._currentValue2 = c);
      }
      function Md(a) {
        var b = Gd.current;
        q(Gd);
        Sa ? a._currentValue = b : a._currentValue2 = b;
      }
      function Nd(a, b, c) {
        for (; null !== a; ) {
          var d = a.alternate;
          (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
          if (a === c)
            break;
          a = a.return;
        }
      }
      function Od(a, b) {
        Hd = a;
        Jd = Id = null;
        a = a.dependencies;
        null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (G = true), a.firstContext = null);
      }
      function Pd(a) {
        var b = Sa ? a._currentValue : a._currentValue2;
        if (Jd !== a)
          if (a = { context: a, memoizedValue: b, next: null }, null === Id) {
            if (null === Hd)
              throw Error(m(308));
            Id = a;
            Hd.dependencies = { lanes: 0, firstContext: a };
          } else
            Id = Id.next = a;
        return b;
      }
      var Qd = null;
      function Rd(a) {
        null === Qd ? Qd = [a] : Qd.push(a);
      }
      function Sd(a, b, c, d) {
        var e = b.interleaved;
        null === e ? (c.next = c, Rd(b)) : (c.next = e.next, e.next = c);
        b.interleaved = c;
        return Td(a, d);
      }
      function Td(a, b) {
        a.lanes |= b;
        var c = a.alternate;
        null !== c && (c.lanes |= b);
        c = a;
        for (a = a.return; null !== a; )
          a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
        return 3 === c.tag ? c.stateNode : null;
      }
      var Ud = false;
      function Vd(a) {
        a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      function Wd(a, b) {
        a = a.updateQueue;
        b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
      }
      function Xd(a, b) {
        return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
      }
      function Yd(a, b, c) {
        var d = a.updateQueue;
        if (null === d)
          return null;
        d = d.shared;
        if (0 !== (H & 2)) {
          var e = d.pending;
          null === e ? b.next = b : (b.next = e.next, e.next = b);
          d.pending = b;
          return Td(a, c);
        }
        e = d.interleaved;
        null === e ? (b.next = b, Rd(d)) : (b.next = e.next, e.next = b);
        d.interleaved = b;
        return Td(a, c);
      }
      function Zd(a, b, c) {
        b = b.updateQueue;
        if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
          var d = b.lanes;
          d &= a.pendingLanes;
          c |= d;
          b.lanes = c;
          Hc(a, c);
        }
      }
      function $d(a, b) {
        var c = a.updateQueue, d = a.alternate;
        if (null !== d && (d = d.updateQueue, c === d)) {
          var e = null, f = null;
          c = c.firstBaseUpdate;
          if (null !== c) {
            do {
              var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
              null === f ? e = f = g : f = f.next = g;
              c = c.next;
            } while (null !== c);
            null === f ? e = f = b : f = f.next = b;
          } else
            e = f = b;
          c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
          a.updateQueue = c;
          return;
        }
        a = c.lastBaseUpdate;
        null === a ? c.firstBaseUpdate = b : a.next = b;
        c.lastBaseUpdate = b;
      }
      function ae(a, b, c, d) {
        var e = a.updateQueue;
        Ud = false;
        var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
        if (null !== h) {
          e.shared.pending = null;
          var k = h, l = k.next;
          k.next = null;
          null === g ? f = l : g.next = l;
          g = k;
          var n = a.alternate;
          null !== n && (n = n.updateQueue, h = n.lastBaseUpdate, h !== g && (null === h ? n.firstBaseUpdate = l : h.next = l, n.lastBaseUpdate = k));
        }
        if (null !== f) {
          var t = e.baseState;
          g = 0;
          n = l = k = null;
          h = f;
          do {
            var p = h.lane, B = h.eventTime;
            if ((d & p) === p) {
              null !== n && (n = n.next = {
                eventTime: B,
                lane: 0,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
              });
              a: {
                var w = a, Z = h;
                p = b;
                B = c;
                switch (Z.tag) {
                  case 1:
                    w = Z.payload;
                    if ("function" === typeof w) {
                      t = w.call(B, t, p);
                      break a;
                    }
                    t = w;
                    break a;
                  case 3:
                    w.flags = w.flags & -65537 | 128;
                  case 0:
                    w = Z.payload;
                    p = "function" === typeof w ? w.call(B, t, p) : w;
                    if (null === p || void 0 === p)
                      break a;
                    t = ca({}, t, p);
                    break a;
                  case 2:
                    Ud = true;
                }
              }
              null !== h.callback && 0 !== h.lane && (a.flags |= 64, p = e.effects, null === p ? e.effects = [h] : p.push(h));
            } else
              B = { eventTime: B, lane: p, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === n ? (l = n = B, k = t) : n = n.next = B, g |= p;
            h = h.next;
            if (null === h)
              if (h = e.shared.pending, null === h)
                break;
              else
                p = h, h = p.next, p.next = null, e.lastBaseUpdate = p, e.shared.pending = null;
          } while (1);
          null === n && (k = t);
          e.baseState = k;
          e.firstBaseUpdate = l;
          e.lastBaseUpdate = n;
          b = e.shared.interleaved;
          if (null !== b) {
            e = b;
            do
              g |= e.lane, e = e.next;
            while (e !== b);
          } else
            null === f && (e.shared.lanes = 0);
          be |= g;
          a.lanes = g;
          a.memoizedState = t;
        }
      }
      function ce(a, b, c) {
        a = b.effects;
        b.effects = null;
        if (null !== a)
          for (b = 0; b < a.length; b++) {
            var d = a[b], e = d.callback;
            if (null !== e) {
              d.callback = null;
              d = c;
              if ("function" !== typeof e)
                throw Error(m(191, e));
              e.call(d);
            }
          }
      }
      var de = new aa.Component().refs;
      function ee(a, b, c, d) {
        b = a.memoizedState;
        c = c(d, b);
        c = null === c || void 0 === c ? b : ca({}, b, c);
        a.memoizedState = c;
        0 === a.lanes && (a.updateQueue.baseState = c);
      }
      var he = { isMounted: function(a) {
        return (a = a._reactInternals) ? wa(a) === a : false;
      }, enqueueSetState: function(a, b, c) {
        a = a._reactInternals;
        var d = I(), e = fe(a), f = Xd(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = Yd(a, f, e);
        null !== b && (ge(b, a, e, d), Zd(b, a, e));
      }, enqueueReplaceState: function(a, b, c) {
        a = a._reactInternals;
        var d = I(), e = fe(a), f = Xd(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = Yd(a, f, e);
        null !== b && (ge(b, a, e, d), Zd(b, a, e));
      }, enqueueForceUpdate: function(a, b) {
        a = a._reactInternals;
        var c = I(), d = fe(a), e = Xd(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        b = Yd(a, e, d);
        null !== b && (ge(b, a, d, c), Zd(b, a, d));
      } };
      function ie(a, b, c, d, e, f, g) {
        a = a.stateNode;
        return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Dd(c, d) || !Dd(e, f) : true;
      }
      function je(a, b, c) {
        var d = false, e = jc;
        var f = b.contextType;
        "object" === typeof f && null !== f ? f = Pd(f) : (e = A(b) ? kc : x.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? lc(a, e) : jc);
        b = new b(c, f);
        a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
        b.updater = he;
        a.stateNode = b;
        b._reactInternals = a;
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
        return b;
      }
      function ke(a, b, c, d) {
        a = b.state;
        "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
        "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
        b.state !== a && he.enqueueReplaceState(b, b.state, null);
      }
      function le(a, b, c, d) {
        var e = a.stateNode;
        e.props = c;
        e.state = a.memoizedState;
        e.refs = de;
        Vd(a);
        var f = b.contextType;
        "object" === typeof f && null !== f ? e.context = Pd(f) : (f = A(b) ? kc : x.current, e.context = lc(a, f));
        e.state = a.memoizedState;
        f = b.getDerivedStateFromProps;
        "function" === typeof f && (ee(a, b, f, c), e.state = a.memoizedState);
        "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && he.enqueueReplaceState(e, e.state, null), ae(a, c, e, d), e.state = a.memoizedState);
        "function" === typeof e.componentDidMount && (a.flags |= 4194308);
      }
      function me(a, b, c) {
        a = c.ref;
        if (null !== a && "function" !== typeof a && "object" !== typeof a) {
          if (c._owner) {
            c = c._owner;
            if (c) {
              if (1 !== c.tag)
                throw Error(m(309));
              var d = c.stateNode;
            }
            if (!d)
              throw Error(m(147, a));
            var e = d, f = "" + a;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f)
              return b.ref;
            b = function(a2) {
              var b2 = e.refs;
              b2 === de && (b2 = e.refs = {});
              null === a2 ? delete b2[f] : b2[f] = a2;
            };
            b._stringRef = f;
            return b;
          }
          if ("string" !== typeof a)
            throw Error(m(284));
          if (!c._owner)
            throw Error(m(290, a));
        }
        return a;
      }
      function ne(a, b) {
        a = Object.prototype.toString.call(b);
        throw Error(m(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
      }
      function oe(a) {
        var b = a._init;
        return b(a._payload);
      }
      function pe(a) {
        function b(b2, c2) {
          if (a) {
            var d2 = b2.deletions;
            null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
          }
        }
        function c(c2, d2) {
          if (!a)
            return null;
          for (; null !== d2; )
            b(c2, d2), d2 = d2.sibling;
          return null;
        }
        function d(a2, b2) {
          for (a2 = /* @__PURE__ */ new Map(); null !== b2; )
            null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
          return a2;
        }
        function e(a2, b2) {
          a2 = qe(a2, b2);
          a2.index = 0;
          a2.sibling = null;
          return a2;
        }
        function f(b2, c2, d2) {
          b2.index = d2;
          if (!a)
            return b2.flags |= 1048576, c2;
          d2 = b2.alternate;
          if (null !== d2)
            return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
          b2.flags |= 2;
          return c2;
        }
        function g(b2) {
          a && null === b2.alternate && (b2.flags |= 2);
          return b2;
        }
        function h(a2, b2, c2, d2) {
          if (null === b2 || 6 !== b2.tag)
            return b2 = re(c2, a2.mode, d2), b2.return = a2, b2;
          b2 = e(b2, c2);
          b2.return = a2;
          return b2;
        }
        function k(a2, b2, c2, d2) {
          var f2 = c2.type;
          if (f2 === ha)
            return n(a2, b2, c2.props.children, d2, c2.key);
          if (null !== b2 && (b2.elementType === f2 || "object" === typeof f2 && null !== f2 && f2.$$typeof === qa && oe(f2) === b2.type))
            return d2 = e(b2, c2.props), d2.ref = me(a2, b2, c2), d2.return = a2, d2;
          d2 = se(c2.type, c2.key, c2.props, null, a2.mode, d2);
          d2.ref = me(a2, b2, c2);
          d2.return = a2;
          return d2;
        }
        function l(a2, b2, c2, d2) {
          if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation)
            return b2 = te(c2, a2.mode, d2), b2.return = a2, b2;
          b2 = e(b2, c2.children || []);
          b2.return = a2;
          return b2;
        }
        function n(a2, b2, c2, d2, f2) {
          if (null === b2 || 7 !== b2.tag)
            return b2 = ue(c2, a2.mode, d2, f2), b2.return = a2, b2;
          b2 = e(b2, c2);
          b2.return = a2;
          return b2;
        }
        function t(a2, b2, c2) {
          if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2)
            return b2 = re("" + b2, a2.mode, c2), b2.return = a2, b2;
          if ("object" === typeof b2 && null !== b2) {
            switch (b2.$$typeof) {
              case ea:
                return c2 = se(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = me(a2, null, b2), c2.return = a2, c2;
              case fa:
                return b2 = te(b2, a2.mode, c2), b2.return = a2, b2;
              case qa:
                var d2 = b2._init;
                return t(a2, d2(b2._payload), c2);
            }
            if (Da(b2) || ta(b2))
              return b2 = ue(b2, a2.mode, c2, null), b2.return = a2, b2;
            ne(a2, b2);
          }
          return null;
        }
        function p(a2, b2, c2, d2) {
          var e2 = null !== b2 ? b2.key : null;
          if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2)
            return null !== e2 ? null : h(a2, b2, "" + c2, d2);
          if ("object" === typeof c2 && null !== c2) {
            switch (c2.$$typeof) {
              case ea:
                return c2.key === e2 ? k(a2, b2, c2, d2) : null;
              case fa:
                return c2.key === e2 ? l(a2, b2, c2, d2) : null;
              case qa:
                return e2 = c2._init, p(
                  a2,
                  b2,
                  e2(c2._payload),
                  d2
                );
            }
            if (Da(c2) || ta(c2))
              return null !== e2 ? null : n(a2, b2, c2, d2, null);
            ne(a2, c2);
          }
          return null;
        }
        function B(a2, b2, c2, d2, e2) {
          if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2)
            return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
          if ("object" === typeof d2 && null !== d2) {
            switch (d2.$$typeof) {
              case ea:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k(b2, a2, d2, e2);
              case fa:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
              case qa:
                var f2 = d2._init;
                return B(a2, b2, c2, f2(d2._payload), e2);
            }
            if (Da(d2) || ta(d2))
              return a2 = a2.get(c2) || null, n(b2, a2, d2, e2, null);
            ne(b2, d2);
          }
          return null;
        }
        function w(e2, g2, h2, k2) {
          for (var l2 = null, n2 = null, r = g2, u = g2 = 0, E = null; null !== r && u < h2.length; u++) {
            r.index > u ? (E = r, r = null) : E = r.sibling;
            var y = p(e2, r, h2[u], k2);
            if (null === y) {
              null === r && (r = E);
              break;
            }
            a && r && null === y.alternate && b(e2, r);
            g2 = f(y, g2, u);
            null === n2 ? l2 = y : n2.sibling = y;
            n2 = y;
            r = E;
          }
          if (u === h2.length)
            return c(e2, r), F && kd(e2, u), l2;
          if (null === r) {
            for (; u < h2.length; u++)
              r = t(e2, h2[u], k2), null !== r && (g2 = f(r, g2, u), null === n2 ? l2 = r : n2.sibling = r, n2 = r);
            F && kd(e2, u);
            return l2;
          }
          for (r = d(e2, r); u < h2.length; u++)
            E = B(r, e2, u, h2[u], k2), null !== E && (a && null !== E.alternate && r.delete(null === E.key ? u : E.key), g2 = f(E, g2, u), null === n2 ? l2 = E : n2.sibling = E, n2 = E);
          a && r.forEach(function(a2) {
            return b(e2, a2);
          });
          F && kd(e2, u);
          return l2;
        }
        function Z(e2, g2, h2, k2) {
          var l2 = ta(h2);
          if ("function" !== typeof l2)
            throw Error(m(150));
          h2 = l2.call(h2);
          if (null == h2)
            throw Error(m(151));
          for (var n2 = l2 = null, r = g2, u = g2 = 0, E = null, y = h2.next(); null !== r && !y.done; u++, y = h2.next()) {
            r.index > u ? (E = r, r = null) : E = r.sibling;
            var w2 = p(e2, r, y.value, k2);
            if (null === w2) {
              null === r && (r = E);
              break;
            }
            a && r && null === w2.alternate && b(e2, r);
            g2 = f(w2, g2, u);
            null === n2 ? l2 = w2 : n2.sibling = w2;
            n2 = w2;
            r = E;
          }
          if (y.done)
            return c(
              e2,
              r
            ), F && kd(e2, u), l2;
          if (null === r) {
            for (; !y.done; u++, y = h2.next())
              y = t(e2, y.value, k2), null !== y && (g2 = f(y, g2, u), null === n2 ? l2 = y : n2.sibling = y, n2 = y);
            F && kd(e2, u);
            return l2;
          }
          for (r = d(e2, r); !y.done; u++, y = h2.next())
            y = B(r, e2, u, y.value, k2), null !== y && (a && null !== y.alternate && r.delete(null === y.key ? u : y.key), g2 = f(y, g2, u), null === n2 ? l2 = y : n2.sibling = y, n2 = y);
          a && r.forEach(function(a2) {
            return b(e2, a2);
          });
          F && kd(e2, u);
          return l2;
        }
        function za(a2, d2, f2, h2) {
          "object" === typeof f2 && null !== f2 && f2.type === ha && null === f2.key && (f2 = f2.props.children);
          if ("object" === typeof f2 && null !== f2) {
            switch (f2.$$typeof) {
              case ea:
                a: {
                  for (var k2 = f2.key, l2 = d2; null !== l2; ) {
                    if (l2.key === k2) {
                      k2 = f2.type;
                      if (k2 === ha) {
                        if (7 === l2.tag) {
                          c(a2, l2.sibling);
                          d2 = e(l2, f2.props.children);
                          d2.return = a2;
                          a2 = d2;
                          break a;
                        }
                      } else if (l2.elementType === k2 || "object" === typeof k2 && null !== k2 && k2.$$typeof === qa && oe(k2) === l2.type) {
                        c(a2, l2.sibling);
                        d2 = e(l2, f2.props);
                        d2.ref = me(a2, l2, f2);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                      c(a2, l2);
                      break;
                    } else
                      b(a2, l2);
                    l2 = l2.sibling;
                  }
                  f2.type === ha ? (d2 = ue(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = se(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = me(a2, d2, f2), h2.return = a2, a2 = h2);
                }
                return g(a2);
              case fa:
                a: {
                  for (l2 = f2.key; null !== d2; ) {
                    if (d2.key === l2)
                      if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                        c(a2, d2.sibling);
                        d2 = e(d2, f2.children || []);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      } else {
                        c(a2, d2);
                        break;
                      }
                    else
                      b(a2, d2);
                    d2 = d2.sibling;
                  }
                  d2 = te(f2, a2.mode, h2);
                  d2.return = a2;
                  a2 = d2;
                }
                return g(a2);
              case qa:
                return l2 = f2._init, za(a2, d2, l2(f2._payload), h2);
            }
            if (Da(f2))
              return w(a2, d2, f2, h2);
            if (ta(f2))
              return Z(a2, d2, f2, h2);
            ne(a2, f2);
          }
          return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = re(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
        }
        return za;
      }
      var ve = pe(true), we = pe(false), xe = {}, ye = ic(xe), ze = ic(xe), Ae = ic(xe);
      function Be(a) {
        if (a === xe)
          throw Error(m(174));
        return a;
      }
      function Ce(a, b) {
        v(Ae, b);
        v(ze, a);
        v(ye, xe);
        a = Fa(b);
        q(ye);
        v(ye, a);
      }
      function De() {
        q(ye);
        q(ze);
        q(Ae);
      }
      function Ee(a) {
        var b = Be(Ae.current), c = Be(ye.current);
        b = Ga(c, a.type, b);
        c !== b && (v(ze, a), v(ye, b));
      }
      function Fe(a) {
        ze.current === a && (q(ye), q(ze));
      }
      var J = ic(0);
      function Ge(a) {
        for (var b = a; null !== b; ) {
          if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || Jb(c) || Kb(c)))
              return b;
          } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 128))
              return b;
          } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
          }
          if (b === a)
            break;
          for (; null === b.sibling; ) {
            if (null === b.return || b.return === a)
              return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
        return null;
      }
      var He = [];
      function Ie() {
        for (var a = 0; a < He.length; a++) {
          var b = He[a];
          Sa ? b._workInProgressVersionPrimary = null : b._workInProgressVersionSecondary = null;
        }
        He.length = 0;
      }
      var Je = da.ReactCurrentDispatcher, Ke = da.ReactCurrentBatchConfig, Le = 0, K = null, L = null, M = null, Me = false, Ne = false, Oe = 0, Pe = 0;
      function N() {
        throw Error(m(321));
      }
      function Qe(a, b) {
        if (null === b)
          return false;
        for (var c = 0; c < b.length && c < a.length; c++)
          if (!Vc(a[c], b[c]))
            return false;
        return true;
      }
      function Re(a, b, c, d, e, f) {
        Le = f;
        K = b;
        b.memoizedState = null;
        b.updateQueue = null;
        b.lanes = 0;
        Je.current = null === a || null === a.memoizedState ? Se : Te;
        a = c(d, e);
        if (Ne) {
          f = 0;
          do {
            Ne = false;
            Oe = 0;
            if (25 <= f)
              throw Error(m(301));
            f += 1;
            M = L = null;
            b.updateQueue = null;
            Je.current = Ue;
            a = c(d, e);
          } while (Ne);
        }
        Je.current = Ve;
        b = null !== L && null !== L.next;
        Le = 0;
        M = L = K = null;
        Me = false;
        if (b)
          throw Error(m(300));
        return a;
      }
      function We() {
        var a = 0 !== Oe;
        Oe = 0;
        return a;
      }
      function Xe() {
        var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === M ? K.memoizedState = M = a : M = M.next = a;
        return M;
      }
      function Ye() {
        if (null === L) {
          var a = K.alternate;
          a = null !== a ? a.memoizedState : null;
        } else
          a = L.next;
        var b = null === M ? K.memoizedState : M.next;
        if (null !== b)
          M = b, L = a;
        else {
          if (null === a)
            throw Error(m(310));
          L = a;
          a = { memoizedState: L.memoizedState, baseState: L.baseState, baseQueue: L.baseQueue, queue: L.queue, next: null };
          null === M ? K.memoizedState = M = a : M = M.next = a;
        }
        return M;
      }
      function Ze(a, b) {
        return "function" === typeof b ? b(a) : b;
      }
      function $e(a) {
        var b = Ye(), c = b.queue;
        if (null === c)
          throw Error(m(311));
        c.lastRenderedReducer = a;
        var d = L, e = d.baseQueue, f = c.pending;
        if (null !== f) {
          if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
          }
          d.baseQueue = e = f;
          c.pending = null;
        }
        if (null !== e) {
          f = e.next;
          d = d.baseState;
          var h = g = null, k = null, l = f;
          do {
            var n = l.lane;
            if ((Le & n) === n)
              null !== k && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
            else {
              var t = {
                lane: n,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
              };
              null === k ? (h = k = t, g = d) : k = k.next = t;
              K.lanes |= n;
              be |= n;
            }
            l = l.next;
          } while (null !== l && l !== f);
          null === k ? g = d : k.next = h;
          Vc(d, b.memoizedState) || (G = true);
          b.memoizedState = d;
          b.baseState = g;
          b.baseQueue = k;
          c.lastRenderedState = d;
        }
        a = c.interleaved;
        if (null !== a) {
          e = a;
          do
            f = e.lane, K.lanes |= f, be |= f, e = e.next;
          while (e !== a);
        } else
          null === e && (c.lanes = 0);
        return [b.memoizedState, c.dispatch];
      }
      function af(a) {
        var b = Ye(), c = b.queue;
        if (null === c)
          throw Error(m(311));
        c.lastRenderedReducer = a;
        var d = c.dispatch, e = c.pending, f = b.memoizedState;
        if (null !== e) {
          c.pending = null;
          var g = e = e.next;
          do
            f = a(f, g.action), g = g.next;
          while (g !== e);
          Vc(f, b.memoizedState) || (G = true);
          b.memoizedState = f;
          null === b.baseQueue && (b.baseState = f);
          c.lastRenderedState = f;
        }
        return [f, d];
      }
      function bf() {
      }
      function cf(a, b) {
        var c = K, d = Ye(), e = b(), f = !Vc(d.memoizedState, e);
        f && (d.memoizedState = e, G = true);
        d = d.queue;
        df(ef.bind(null, c, d, a), [a]);
        if (d.getSnapshot !== b || f || null !== M && M.memoizedState.tag & 1) {
          c.flags |= 2048;
          ff(9, gf.bind(null, c, d, e, b), void 0, null);
          if (null === O)
            throw Error(m(349));
          0 !== (Le & 30) || hf(c, b, e);
        }
        return e;
      }
      function hf(a, b, c) {
        a.flags |= 16384;
        a = { getSnapshot: b, value: c };
        b = K.updateQueue;
        null === b ? (b = { lastEffect: null, stores: null }, K.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
      }
      function gf(a, b, c, d) {
        b.value = c;
        b.getSnapshot = d;
        jf(b) && kf(a);
      }
      function ef(a, b, c) {
        return c(function() {
          jf(b) && kf(a);
        });
      }
      function jf(a) {
        var b = a.getSnapshot;
        a = a.value;
        try {
          var c = b();
          return !Vc(a, c);
        } catch (d) {
          return true;
        }
      }
      function kf(a) {
        var b = Td(a, 1);
        null !== b && ge(b, a, 1, -1);
      }
      function lf(a) {
        var b = Xe();
        "function" === typeof a && (a = a());
        b.memoizedState = b.baseState = a;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Ze, lastRenderedState: a };
        b.queue = a;
        a = a.dispatch = mf.bind(null, K, a);
        return [b.memoizedState, a];
      }
      function ff(a, b, c, d) {
        a = { tag: a, create: b, destroy: c, deps: d, next: null };
        b = K.updateQueue;
        null === b ? (b = { lastEffect: null, stores: null }, K.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
        return a;
      }
      function nf() {
        return Ye().memoizedState;
      }
      function of(a, b, c, d) {
        var e = Xe();
        K.flags |= a;
        e.memoizedState = ff(1 | b, c, void 0, void 0 === d ? null : d);
      }
      function pf(a, b, c, d) {
        var e = Ye();
        d = void 0 === d ? null : d;
        var f = void 0;
        if (null !== L) {
          var g = L.memoizedState;
          f = g.destroy;
          if (null !== d && Qe(d, g.deps)) {
            e.memoizedState = ff(b, c, f, d);
            return;
          }
        }
        K.flags |= a;
        e.memoizedState = ff(1 | b, c, f, d);
      }
      function qf(a, b) {
        return of(8390656, 8, a, b);
      }
      function df(a, b) {
        return pf(2048, 8, a, b);
      }
      function rf(a, b) {
        return pf(4, 2, a, b);
      }
      function sf(a, b) {
        return pf(4, 4, a, b);
      }
      function tf(a, b) {
        if ("function" === typeof b)
          return a = a(), b(a), function() {
            b(null);
          };
        if (null !== b && void 0 !== b)
          return a = a(), b.current = a, function() {
            b.current = null;
          };
      }
      function uf(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return pf(4, 4, tf.bind(null, b, a), c);
      }
      function vf() {
      }
      function wf(a, b) {
        var c = Ye();
        b = void 0 === b ? null : b;
        var d = c.memoizedState;
        if (null !== d && null !== b && Qe(b, d[1]))
          return d[0];
        c.memoizedState = [a, b];
        return a;
      }
      function xf(a, b) {
        var c = Ye();
        b = void 0 === b ? null : b;
        var d = c.memoizedState;
        if (null !== d && null !== b && Qe(b, d[1]))
          return d[0];
        a = a();
        c.memoizedState = [a, b];
        return a;
      }
      function yf(a, b, c) {
        if (0 === (Le & 21))
          return a.baseState && (a.baseState = false, G = true), a.memoizedState = c;
        Vc(c, b) || (c = Dc(), K.lanes |= c, be |= c, a.baseState = true);
        return b;
      }
      function zf(a, b) {
        var c = C;
        C = 0 !== c && 4 > c ? c : 4;
        a(true);
        var d = Ke.transition;
        Ke.transition = {};
        try {
          a(false), b();
        } finally {
          C = c, Ke.transition = d;
        }
      }
      function Af() {
        return Ye().memoizedState;
      }
      function Bf(a, b, c) {
        var d = fe(a);
        c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (Cf(a))
          Df(b, c);
        else if (c = Sd(a, b, c, d), null !== c) {
          var e = I();
          ge(c, a, d, e);
          Ef(c, b, d);
        }
      }
      function mf(a, b, c) {
        var d = fe(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (Cf(a))
          Df(b, e);
        else {
          var f = a.alternate;
          if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f))
            try {
              var g = b.lastRenderedState, h = f(g, c);
              e.hasEagerState = true;
              e.eagerState = h;
              if (Vc(h, g)) {
                var k = b.interleaved;
                null === k ? (e.next = e, Rd(b)) : (e.next = k.next, k.next = e);
                b.interleaved = e;
                return;
              }
            } catch (l) {
            } finally {
            }
          c = Sd(a, b, e, d);
          null !== c && (e = I(), ge(c, a, d, e), Ef(c, b, d));
        }
      }
      function Cf(a) {
        var b = a.alternate;
        return a === K || null !== b && b === K;
      }
      function Df(a, b) {
        Ne = Me = true;
        var c = a.pending;
        null === c ? b.next = b : (b.next = c.next, c.next = b);
        a.pending = b;
      }
      function Ef(a, b, c) {
        if (0 !== (c & 4194240)) {
          var d = b.lanes;
          d &= a.pendingLanes;
          c |= d;
          b.lanes = c;
          Hc(a, c);
        }
      }
      var Ve = { readContext: Pd, useCallback: N, useContext: N, useEffect: N, useImperativeHandle: N, useInsertionEffect: N, useLayoutEffect: N, useMemo: N, useReducer: N, useRef: N, useState: N, useDebugValue: N, useDeferredValue: N, useTransition: N, useMutableSource: N, useSyncExternalStore: N, useId: N, unstable_isNewReconciler: false }, Se = { readContext: Pd, useCallback: function(a, b) {
        Xe().memoizedState = [a, void 0 === b ? null : b];
        return a;
      }, useContext: Pd, useEffect: qf, useImperativeHandle: function(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return of(
          4194308,
          4,
          tf.bind(null, b, a),
          c
        );
      }, useLayoutEffect: function(a, b) {
        return of(4194308, 4, a, b);
      }, useInsertionEffect: function(a, b) {
        return of(4, 2, a, b);
      }, useMemo: function(a, b) {
        var c = Xe();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [a, b];
        return a;
      }, useReducer: function(a, b, c) {
        var d = Xe();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
        d.queue = a;
        a = a.dispatch = Bf.bind(null, K, a);
        return [d.memoizedState, a];
      }, useRef: function(a) {
        var b = Xe();
        a = { current: a };
        return b.memoizedState = a;
      }, useState: lf, useDebugValue: vf, useDeferredValue: function(a) {
        return Xe().memoizedState = a;
      }, useTransition: function() {
        var a = lf(false), b = a[0];
        a = zf.bind(null, a[1]);
        Xe().memoizedState = a;
        return [b, a];
      }, useMutableSource: function() {
      }, useSyncExternalStore: function(a, b, c) {
        var d = K, e = Xe();
        if (F) {
          if (void 0 === c)
            throw Error(m(407));
          c = c();
        } else {
          c = b();
          if (null === O)
            throw Error(m(349));
          0 !== (Le & 30) || hf(d, b, c);
        }
        e.memoizedState = c;
        var f = { value: c, getSnapshot: b };
        e.queue = f;
        qf(ef.bind(
          null,
          d,
          f,
          a
        ), [a]);
        d.flags |= 2048;
        ff(9, gf.bind(null, d, f, c, b), void 0, null);
        return c;
      }, useId: function() {
        var a = Xe(), b = O.identifierPrefix;
        if (F) {
          var c = jd;
          var d = id;
          c = (d & ~(1 << 32 - tc(d) - 1)).toString(32) + c;
          b = ":" + b + "R" + c;
          c = Oe++;
          0 < c && (b += "H" + c.toString(32));
          b += ":";
        } else
          c = Pe++, b = ":" + b + "r" + c.toString(32) + ":";
        return a.memoizedState = b;
      }, unstable_isNewReconciler: false }, Te = {
        readContext: Pd,
        useCallback: wf,
        useContext: Pd,
        useEffect: df,
        useImperativeHandle: uf,
        useInsertionEffect: rf,
        useLayoutEffect: sf,
        useMemo: xf,
        useReducer: $e,
        useRef: nf,
        useState: function() {
          return $e(Ze);
        },
        useDebugValue: vf,
        useDeferredValue: function(a) {
          var b = Ye();
          return yf(b, L.memoizedState, a);
        },
        useTransition: function() {
          var a = $e(Ze)[0], b = Ye().memoizedState;
          return [a, b];
        },
        useMutableSource: bf,
        useSyncExternalStore: cf,
        useId: Af,
        unstable_isNewReconciler: false
      }, Ue = { readContext: Pd, useCallback: wf, useContext: Pd, useEffect: df, useImperativeHandle: uf, useInsertionEffect: rf, useLayoutEffect: sf, useMemo: xf, useReducer: af, useRef: nf, useState: function() {
        return af(Ze);
      }, useDebugValue: vf, useDeferredValue: function(a) {
        var b = Ye();
        return null === L ? b.memoizedState = a : yf(b, L.memoizedState, a);
      }, useTransition: function() {
        var a = af(Ze)[0], b = Ye().memoizedState;
        return [a, b];
      }, useMutableSource: bf, useSyncExternalStore: cf, useId: Af, unstable_isNewReconciler: false };
      function Ff(a, b) {
        try {
          var c = "", d = b;
          do
            c += Ed(d), d = d.return;
          while (d);
          var e = c;
        } catch (f) {
          e = "\nError generating stack: " + f.message + "\n" + f.stack;
        }
        return { value: a, source: b, stack: e, digest: null };
      }
      function Gf(a, b, c) {
        return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
      }
      function Hf(a, b) {
        try {
          console.error(b.value);
        } catch (c) {
          setTimeout(function() {
            throw c;
          });
        }
      }
      var If = "function" === typeof WeakMap ? WeakMap : Map;
      function Jf(a, b, c) {
        c = Xd(-1, c);
        c.tag = 3;
        c.payload = { element: null };
        var d = b.value;
        c.callback = function() {
          Kf || (Kf = true, Lf = d);
          Hf(a, b);
        };
        return c;
      }
      function Mf(a, b, c) {
        c = Xd(-1, c);
        c.tag = 3;
        var d = a.type.getDerivedStateFromError;
        if ("function" === typeof d) {
          var e = b.value;
          c.payload = function() {
            return d(e);
          };
          c.callback = function() {
            Hf(a, b);
          };
        }
        var f = a.stateNode;
        null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
          Hf(a, b);
          "function" !== typeof d && (null === Nf ? Nf = /* @__PURE__ */ new Set([this]) : Nf.add(this));
          var c2 = b.stack;
          this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
        });
        return c;
      }
      function Of(a, b, c) {
        var d = a.pingCache;
        if (null === d) {
          d = a.pingCache = new If();
          var e = /* @__PURE__ */ new Set();
          d.set(b, e);
        } else
          e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
        e.has(c) || (e.add(c), a = Pf.bind(null, a, b, c), b.then(a, a));
      }
      function Qf(a) {
        do {
          var b;
          if (b = 13 === a.tag)
            b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
          if (b)
            return a;
          a = a.return;
        } while (null !== a);
        return null;
      }
      function Rf(a, b, c, d, e) {
        if (0 === (a.mode & 1))
          return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = Xd(-1, 1), b.tag = 2, Yd(c, b, 1))), c.lanes |= 1), a;
        a.flags |= 65536;
        a.lanes = e;
        return a;
      }
      var Sf = da.ReactCurrentOwner, G = false;
      function P(a, b, c, d) {
        b.child = null === a ? we(b, null, c, d) : ve(b, a.child, c, d);
      }
      function Tf(a, b, c, d, e) {
        c = c.render;
        var f = b.ref;
        Od(b, e);
        d = Re(a, b, c, d, f, e);
        c = We();
        if (null !== a && !G)
          return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Uf(a, b, e);
        F && c && md(b);
        b.flags |= 1;
        P(a, b, d, e);
        return b.child;
      }
      function Vf(a, b, c, d, e) {
        if (null === a) {
          var f = c.type;
          if ("function" === typeof f && !Wf(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps)
            return b.tag = 15, b.type = f, Xf(a, b, f, d, e);
          a = se(c.type, null, d, b, b.mode, e);
          a.ref = b.ref;
          a.return = b;
          return b.child = a;
        }
        f = a.child;
        if (0 === (a.lanes & e)) {
          var g = f.memoizedProps;
          c = c.compare;
          c = null !== c ? c : Dd;
          if (c(g, d) && a.ref === b.ref)
            return Uf(a, b, e);
        }
        b.flags |= 1;
        a = qe(f, d);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      function Xf(a, b, c, d, e) {
        if (null !== a) {
          var f = a.memoizedProps;
          if (Dd(f, d) && a.ref === b.ref)
            if (G = false, b.pendingProps = d = f, 0 !== (a.lanes & e))
              0 !== (a.flags & 131072) && (G = true);
            else
              return b.lanes = a.lanes, Uf(a, b, e);
        }
        return Yf(a, b, c, d, e);
      }
      function Zf(a, b, c) {
        var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
        if ("hidden" === d.mode)
          if (0 === (b.mode & 1))
            b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, v($f, ag), ag |= c;
          else {
            if (0 === (c & 1073741824))
              return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, v($f, ag), ag |= a, null;
            b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
            d = null !== f ? f.baseLanes : c;
            v($f, ag);
            ag |= d;
          }
        else
          null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, v($f, ag), ag |= d;
        P(a, b, e, c);
        return b.child;
      }
      function bg(a, b) {
        var c = b.ref;
        if (null === a && null !== c || null !== a && a.ref !== c)
          b.flags |= 512, b.flags |= 2097152;
      }
      function Yf(a, b, c, d, e) {
        var f = A(c) ? kc : x.current;
        f = lc(b, f);
        Od(b, e);
        c = Re(a, b, c, d, f, e);
        d = We();
        if (null !== a && !G)
          return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Uf(a, b, e);
        F && d && md(b);
        b.flags |= 1;
        P(a, b, c, e);
        return b.child;
      }
      function cg(a, b, c, d, e) {
        if (A(c)) {
          var f = true;
          pc(b);
        } else
          f = false;
        Od(b, e);
        if (null === b.stateNode)
          dg(a, b), je(b, c, d), le(b, c, d, e), d = true;
        else if (null === a) {
          var g = b.stateNode, h = b.memoizedProps;
          g.props = h;
          var k = g.context, l = c.contextType;
          "object" === typeof l && null !== l ? l = Pd(l) : (l = A(c) ? kc : x.current, l = lc(b, l));
          var n = c.getDerivedStateFromProps, t = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;
          t || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && ke(b, g, d, l);
          Ud = false;
          var p = b.memoizedState;
          g.state = p;
          ae(b, d, g, e);
          k = b.memoizedState;
          h !== d || p !== k || z.current || Ud ? ("function" === typeof n && (ee(b, c, n, d), k = b.memoizedState), (h = Ud || ie(b, c, h, d, p, k, l)) ? (t || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
        } else {
          g = b.stateNode;
          Wd(a, b);
          h = b.memoizedProps;
          l = b.type === b.elementType ? h : Fd(b.type, h);
          g.props = l;
          t = b.pendingProps;
          p = g.context;
          k = c.contextType;
          "object" === typeof k && null !== k ? k = Pd(k) : (k = A(c) ? kc : x.current, k = lc(b, k));
          var B = c.getDerivedStateFromProps;
          (n = "function" === typeof B || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== t || p !== k) && ke(b, g, d, k);
          Ud = false;
          p = b.memoizedState;
          g.state = p;
          ae(b, d, g, e);
          var w = b.memoizedState;
          h !== t || p !== w || z.current || Ud ? ("function" === typeof B && (ee(b, c, B, d), w = b.memoizedState), (l = Ud || ie(b, c, l, d, p, w, k) || false) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, w, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, w, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = w), g.props = d, g.state = w, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 1024), d = false);
        }
        return eg(a, b, c, d, f, e);
      }
      function eg(a, b, c, d, e, f) {
        bg(a, b);
        var g = 0 !== (b.flags & 128);
        if (!d && !g)
          return e && rc(b, c, false), Uf(a, b, f);
        d = b.stateNode;
        Sf.current = b;
        var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
        b.flags |= 1;
        null !== a && g ? (b.child = ve(b, a.child, null, f), b.child = ve(b, null, h, f)) : P(a, b, h, f);
        b.memoizedState = d.state;
        e && rc(b, c, true);
        return b.child;
      }
      function fg(a) {
        var b = a.stateNode;
        b.pendingContext ? nc(a, b.pendingContext, b.pendingContext !== b.context) : b.context && nc(a, b.context, false);
        Ce(a, b.containerInfo);
      }
      function gg(a, b, c, d, e) {
        Ad();
        Bd(e);
        b.flags |= 256;
        P(a, b, c, d);
        return b.child;
      }
      var hg = { dehydrated: null, treeContext: null, retryLane: 0 };
      function ig(a) {
        return { baseLanes: a, cachePool: null, transitions: null };
      }
      function jg(a, b, c) {
        var d = b.pendingProps, e = J.current, f = false, g = 0 !== (b.flags & 128), h;
        (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
        if (h)
          f = true, b.flags &= -129;
        else if (null === a || null !== a.memoizedState)
          e |= 1;
        v(J, e & 1);
        if (null === a) {
          wd(b);
          a = b.memoizedState;
          if (null !== a && (a = a.dehydrated, null !== a))
            return 0 === (b.mode & 1) ? b.lanes = 1 : Kb(a) ? b.lanes = 8 : b.lanes = 1073741824, null;
          g = d.children;
          a = d.fallback;
          return f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = kg(g, d, 0, null), a = ue(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = ig(c), b.memoizedState = hg, a) : lg(b, g);
        }
        e = a.memoizedState;
        if (null !== e && (h = e.dehydrated, null !== h))
          return mg(a, b, g, d, h, e, c);
        if (f) {
          f = d.fallback;
          g = b.mode;
          e = a.child;
          h = e.sibling;
          var k = { mode: "hidden", children: d.children };
          0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = qe(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
          null !== h ? f = qe(h, f) : (f = ue(f, g, c, null), f.flags |= 2);
          f.return = b;
          d.return = b;
          d.sibling = f;
          b.child = d;
          d = f;
          f = b.child;
          g = a.child.memoizedState;
          g = null === g ? ig(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
          f.memoizedState = g;
          f.childLanes = a.childLanes & ~c;
          b.memoizedState = hg;
          return d;
        }
        f = a.child;
        a = f.sibling;
        d = qe(f, { mode: "visible", children: d.children });
        0 === (b.mode & 1) && (d.lanes = c);
        d.return = b;
        d.sibling = null;
        null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
        b.child = d;
        b.memoizedState = null;
        return d;
      }
      function lg(a, b) {
        b = kg({ mode: "visible", children: b }, a.mode, 0, null);
        b.return = a;
        return a.child = b;
      }
      function ng(a, b, c, d) {
        null !== d && Bd(d);
        ve(b, a.child, null, c);
        a = lg(b, b.pendingProps.children);
        a.flags |= 2;
        b.memoizedState = null;
        return a;
      }
      function mg(a, b, c, d, e, f, g) {
        if (c) {
          if (b.flags & 256)
            return b.flags &= -257, d = Gf(Error(m(422))), ng(a, b, g, d);
          if (null !== b.memoizedState)
            return b.child = a.child, b.flags |= 128, null;
          f = d.fallback;
          e = b.mode;
          d = kg({ mode: "visible", children: d.children }, e, 0, null);
          f = ue(f, e, g, null);
          f.flags |= 2;
          d.return = b;
          f.return = b;
          d.sibling = f;
          b.child = d;
          0 !== (b.mode & 1) && ve(b, a.child, null, g);
          b.child.memoizedState = ig(g);
          b.memoizedState = hg;
          return f;
        }
        if (0 === (b.mode & 1))
          return ng(a, b, g, null);
        if (Kb(e))
          return d = Lb(e).digest, f = Error(m(419)), d = Gf(
            f,
            d,
            void 0
          ), ng(a, b, g, d);
        c = 0 !== (g & a.childLanes);
        if (G || c) {
          d = O;
          if (null !== d) {
            switch (g & -g) {
              case 4:
                e = 2;
                break;
              case 16:
                e = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e = 32;
                break;
              case 536870912:
                e = 268435456;
                break;
              default:
                e = 0;
            }
            e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
            0 !== e && e !== f.retryLane && (f.retryLane = e, Td(a, e), ge(
              d,
              a,
              e,
              -1
            ));
          }
          og();
          d = Gf(Error(m(421)));
          return ng(a, b, g, d);
        }
        if (Jb(e))
          return b.flags |= 128, b.child = a.child, b = pg.bind(null, a), Mb(e, b), null;
        a = f.treeContext;
        Va && (pd = Qb(e), od = b, F = true, rd = null, qd = false, null !== a && (fd[gd++] = id, fd[gd++] = jd, fd[gd++] = hd, id = a.id, jd = a.overflow, hd = b));
        b = lg(b, d.children);
        b.flags |= 4096;
        return b;
      }
      function qg(a, b, c) {
        a.lanes |= b;
        var d = a.alternate;
        null !== d && (d.lanes |= b);
        Nd(a.return, b, c);
      }
      function rg(a, b, c, d, e) {
        var f = a.memoizedState;
        null === f ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
      }
      function sg(a, b, c) {
        var d = b.pendingProps, e = d.revealOrder, f = d.tail;
        P(a, b, d.children, c);
        d = J.current;
        if (0 !== (d & 2))
          d = d & 1 | 2, b.flags |= 128;
        else {
          if (null !== a && 0 !== (a.flags & 128))
            a:
              for (a = b.child; null !== a; ) {
                if (13 === a.tag)
                  null !== a.memoizedState && qg(a, c, b);
                else if (19 === a.tag)
                  qg(a, c, b);
                else if (null !== a.child) {
                  a.child.return = a;
                  a = a.child;
                  continue;
                }
                if (a === b)
                  break a;
                for (; null === a.sibling; ) {
                  if (null === a.return || a.return === b)
                    break a;
                  a = a.return;
                }
                a.sibling.return = a.return;
                a = a.sibling;
              }
          d &= 1;
        }
        v(J, d);
        if (0 === (b.mode & 1))
          b.memoizedState = null;
        else
          switch (e) {
            case "forwards":
              c = b.child;
              for (e = null; null !== c; )
                a = c.alternate, null !== a && null === Ge(a) && (e = c), c = c.sibling;
              c = e;
              null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
              rg(b, false, e, c, f);
              break;
            case "backwards":
              c = null;
              e = b.child;
              for (b.child = null; null !== e; ) {
                a = e.alternate;
                if (null !== a && null === Ge(a)) {
                  b.child = e;
                  break;
                }
                a = e.sibling;
                e.sibling = c;
                c = e;
                e = a;
              }
              rg(b, true, c, null, f);
              break;
            case "together":
              rg(b, false, null, null, void 0);
              break;
            default:
              b.memoizedState = null;
          }
        return b.child;
      }
      function dg(a, b) {
        0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
      }
      function Uf(a, b, c) {
        null !== a && (b.dependencies = a.dependencies);
        be |= b.lanes;
        if (0 === (c & b.childLanes))
          return null;
        if (null !== a && b.child !== a.child)
          throw Error(m(153));
        if (null !== b.child) {
          a = b.child;
          c = qe(a, a.pendingProps);
          b.child = c;
          for (c.return = b; null !== a.sibling; )
            a = a.sibling, c = c.sibling = qe(a, a.pendingProps), c.return = b;
          c.sibling = null;
        }
        return b.child;
      }
      function tg(a, b, c) {
        switch (b.tag) {
          case 3:
            fg(b);
            Ad();
            break;
          case 5:
            Ee(b);
            break;
          case 1:
            A(b.type) && pc(b);
            break;
          case 4:
            Ce(b, b.stateNode.containerInfo);
            break;
          case 10:
            Ld(b, b.type._context, b.memoizedProps.value);
            break;
          case 13:
            var d = b.memoizedState;
            if (null !== d) {
              if (null !== d.dehydrated)
                return v(J, J.current & 1), b.flags |= 128, null;
              if (0 !== (c & b.child.childLanes))
                return jg(a, b, c);
              v(J, J.current & 1);
              a = Uf(a, b, c);
              return null !== a ? a.sibling : null;
            }
            v(J, J.current & 1);
            break;
          case 19:
            d = 0 !== (c & b.childLanes);
            if (0 !== (a.flags & 128)) {
              if (d)
                return sg(
                  a,
                  b,
                  c
                );
              b.flags |= 128;
            }
            var e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            v(J, J.current);
            if (d)
              break;
            else
              return null;
          case 22:
          case 23:
            return b.lanes = 0, Zf(a, b, c);
        }
        return Uf(a, b, c);
      }
      function ug(a) {
        a.flags |= 4;
      }
      function vg(a, b) {
        if (null !== a && a.child === b.child)
          return true;
        if (0 !== (b.flags & 16))
          return false;
        for (a = b.child; null !== a; ) {
          if (0 !== (a.flags & 12854) || 0 !== (a.subtreeFlags & 12854))
            return false;
          a = a.sibling;
        }
        return true;
      }
      var wg, xg, yg, zg;
      if (Ta)
        wg = function(a, b) {
          for (var c = b.child; null !== c; ) {
            if (5 === c.tag || 6 === c.tag)
              Ka(a, c.stateNode);
            else if (4 !== c.tag && null !== c.child) {
              c.child.return = c;
              c = c.child;
              continue;
            }
            if (c === b)
              break;
            for (; null === c.sibling; ) {
              if (null === c.return || c.return === b)
                return;
              c = c.return;
            }
            c.sibling.return = c.return;
            c = c.sibling;
          }
        }, xg = function() {
        }, yg = function(a, b, c, d, e) {
          a = a.memoizedProps;
          if (a !== d) {
            var f = b.stateNode, g = Be(ye.current);
            c = Ma(f, c, a, d, e, g);
            (b.updateQueue = c) && ug(b);
          }
        }, zg = function(a, b, c, d) {
          c !== d && ug(b);
        };
      else if (Ua) {
        wg = function(a, b, c, d) {
          for (var e = b.child; null !== e; ) {
            if (5 === e.tag) {
              var f = e.stateNode;
              c && d && (f = Eb(f, e.type, e.memoizedProps, e));
              Ka(a, f);
            } else if (6 === e.tag)
              f = e.stateNode, c && d && (f = Fb(f, e.memoizedProps, e)), Ka(a, f);
            else if (4 !== e.tag) {
              if (22 === e.tag && null !== e.memoizedState)
                f = e.child, null !== f && (f.return = e), wg(a, e, true, true);
              else if (null !== e.child) {
                e.child.return = e;
                e = e.child;
                continue;
              }
            }
            if (e === b)
              break;
            for (; null === e.sibling; ) {
              if (null === e.return || e.return === b)
                return;
              e = e.return;
            }
            e.sibling.return = e.return;
            e = e.sibling;
          }
        };
        var Ag = function(a, b, c, d) {
          for (var e = b.child; null !== e; ) {
            if (5 === e.tag) {
              var f = e.stateNode;
              c && d && (f = Eb(f, e.type, e.memoizedProps, e));
              Ab(a, f);
            } else if (6 === e.tag)
              f = e.stateNode, c && d && (f = Fb(f, e.memoizedProps, e)), Ab(a, f);
            else if (4 !== e.tag) {
              if (22 === e.tag && null !== e.memoizedState)
                f = e.child, null !== f && (f.return = e), Ag(a, e, true, true);
              else if (null !== e.child) {
                e.child.return = e;
                e = e.child;
                continue;
              }
            }
            if (e === b)
              break;
            for (; null === e.sibling; ) {
              if (null === e.return || e.return === b)
                return;
              e = e.return;
            }
            e.sibling.return = e.return;
            e = e.sibling;
          }
        };
        xg = function(a, b) {
          var c = b.stateNode;
          if (!vg(a, b)) {
            a = c.containerInfo;
            var d = zb(a);
            Ag(d, b, false, false);
            c.pendingChildren = d;
            ug(b);
            Bb(a, d);
          }
        };
        yg = function(a, b, c, d, e) {
          var f = a.stateNode, g = a.memoizedProps;
          if ((a = vg(a, b)) && g === d)
            b.stateNode = f;
          else {
            var h = b.stateNode, k = Be(ye.current), l = null;
            g !== d && (l = Ma(h, c, g, d, e, k));
            a && null === l ? b.stateNode = f : (f = yb(f, l, c, g, d, b, a, h), La(f, c, d, e, k) && ug(b), b.stateNode = f, a ? ug(b) : wg(f, b, false, false));
          }
        };
        zg = function(a, b, c, d) {
          c !== d ? (a = Be(Ae.current), c = Be(ye.current), b.stateNode = Oa(d, a, c, b), ug(b)) : b.stateNode = a.stateNode;
        };
      } else
        xg = function() {
        }, yg = function() {
        }, zg = function() {
        };
      function Bg(a, b) {
        if (!F)
          switch (a.tailMode) {
            case "hidden":
              b = a.tail;
              for (var c = null; null !== b; )
                null !== b.alternate && (c = b), b = b.sibling;
              null === c ? a.tail = null : c.sibling = null;
              break;
            case "collapsed":
              c = a.tail;
              for (var d = null; null !== c; )
                null !== c.alternate && (d = c), c = c.sibling;
              null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
          }
      }
      function Q(a) {
        var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
        if (b)
          for (var e = a.child; null !== e; )
            c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
        else
          for (e = a.child; null !== e; )
            c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
        a.subtreeFlags |= d;
        a.childLanes = c;
        return b;
      }
      function Cg(a, b, c) {
        var d = b.pendingProps;
        nd(b);
        switch (b.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return Q(b), null;
          case 1:
            return A(b.type) && mc(), Q(b), null;
          case 3:
            c = b.stateNode;
            De();
            q(z);
            q(x);
            Ie();
            c.pendingContext && (c.context = c.pendingContext, c.pendingContext = null);
            if (null === a || null === a.child)
              yd(b) ? ug(b) : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== rd && (Dg(rd), rd = null));
            xg(a, b);
            Q(b);
            return null;
          case 5:
            Fe(b);
            c = Be(Ae.current);
            var e = b.type;
            if (null !== a && null != b.stateNode)
              yg(a, b, e, d, c), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            else {
              if (!d) {
                if (null === b.stateNode)
                  throw Error(m(166));
                Q(b);
                return null;
              }
              a = Be(ye.current);
              if (yd(b)) {
                if (!Va)
                  throw Error(m(175));
                a = Rb(b.stateNode, b.type, b.memoizedProps, c, a, b, !qd);
                b.updateQueue = a;
                null !== a && ug(b);
              } else {
                var f = Ja(e, d, c, a, b);
                wg(f, b, false, false);
                b.stateNode = f;
                La(f, e, d, c, a) && ug(b);
              }
              null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            }
            Q(b);
            return null;
          case 6:
            if (a && null != b.stateNode)
              zg(a, b, a.memoizedProps, d);
            else {
              if ("string" !== typeof d && null === b.stateNode)
                throw Error(m(166));
              a = Be(Ae.current);
              c = Be(ye.current);
              if (yd(b)) {
                if (!Va)
                  throw Error(m(176));
                a = b.stateNode;
                c = b.memoizedProps;
                if (d = Sb(a, c, b, !qd)) {
                  if (e = od, null !== e)
                    switch (e.tag) {
                      case 3:
                        $b(e.stateNode.containerInfo, a, c, 0 !== (e.mode & 1));
                        break;
                      case 5:
                        ac(e.type, e.memoizedProps, e.stateNode, a, c, 0 !== (e.mode & 1));
                    }
                }
                d && ug(b);
              } else
                b.stateNode = Oa(d, a, c, b);
            }
            Q(b);
            return null;
          case 13:
            q(J);
            d = b.memoizedState;
            if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
              if (F && null !== pd && 0 !== (b.mode & 1) && 0 === (b.flags & 128))
                zd(), Ad(), b.flags |= 98560, e = false;
              else if (e = yd(b), null !== d && null !== d.dehydrated) {
                if (null === a) {
                  if (!e)
                    throw Error(m(318));
                  if (!Va)
                    throw Error(m(344));
                  e = b.memoizedState;
                  e = null !== e ? e.dehydrated : null;
                  if (!e)
                    throw Error(m(317));
                  Tb(e, b);
                } else
                  Ad(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                Q(b);
                e = false;
              } else
                null !== rd && (Dg(rd), rd = null), e = true;
              if (!e)
                return b.flags & 65536 ? b : null;
            }
            if (0 !== (b.flags & 128))
              return b.lanes = c, b;
            c = null !== d;
            c !== (null !== a && null !== a.memoizedState) && c && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (J.current & 1) ? 0 === R && (R = 3) : og()));
            null !== b.updateQueue && (b.flags |= 4);
            Q(b);
            return null;
          case 4:
            return De(), xg(a, b), null === a && Xa(b.stateNode.containerInfo), Q(b), null;
          case 10:
            return Md(b.type._context), Q(b), null;
          case 17:
            return A(b.type) && mc(), Q(b), null;
          case 19:
            q(J);
            e = b.memoizedState;
            if (null === e)
              return Q(b), null;
            d = 0 !== (b.flags & 128);
            f = e.rendering;
            if (null === f)
              if (d)
                Bg(e, false);
              else {
                if (0 !== R || null !== a && 0 !== (a.flags & 128))
                  for (a = b.child; null !== a; ) {
                    f = Ge(a);
                    if (null !== f) {
                      b.flags |= 128;
                      Bg(e, false);
                      a = f.updateQueue;
                      null !== a && (b.updateQueue = a, b.flags |= 4);
                      b.subtreeFlags = 0;
                      a = c;
                      for (c = b.child; null !== c; )
                        d = c, e = a, d.flags &= 14680066, f = d.alternate, null === f ? (d.childLanes = 0, d.lanes = e, d.child = null, d.subtreeFlags = 0, d.memoizedProps = null, d.memoizedState = null, d.updateQueue = null, d.dependencies = null, d.stateNode = null) : (d.childLanes = f.childLanes, d.lanes = f.lanes, d.child = f.child, d.subtreeFlags = 0, d.deletions = null, d.memoizedProps = f.memoizedProps, d.memoizedState = f.memoizedState, d.updateQueue = f.updateQueue, d.type = f.type, e = f.dependencies, d.dependencies = null === e ? null : { lanes: e.lanes, firstContext: e.firstContext }), c = c.sibling;
                      v(J, J.current & 1 | 2);
                      return b.child;
                    }
                    a = a.sibling;
                  }
                null !== e.tail && D() > Eg && (b.flags |= 128, d = true, Bg(e, false), b.lanes = 4194304);
              }
            else {
              if (!d)
                if (a = Ge(f), null !== a) {
                  if (b.flags |= 128, d = true, a = a.updateQueue, null !== a && (b.updateQueue = a, b.flags |= 4), Bg(e, true), null === e.tail && "hidden" === e.tailMode && !f.alternate && !F)
                    return Q(b), null;
                } else
                  2 * D() - e.renderingStartTime > Eg && 1073741824 !== c && (b.flags |= 128, d = true, Bg(e, false), b.lanes = 4194304);
              e.isBackwards ? (f.sibling = b.child, b.child = f) : (a = e.last, null !== a ? a.sibling = f : b.child = f, e.last = f);
            }
            if (null !== e.tail)
              return b = e.tail, e.rendering = b, e.tail = b.sibling, e.renderingStartTime = D(), b.sibling = null, a = J.current, v(J, d ? a & 1 | 2 : a & 1), b;
            Q(b);
            return null;
          case 22:
          case 23:
            return Fg(), c = null !== b.memoizedState, null !== a && null !== a.memoizedState !== c && (b.flags |= 8192), c && 0 !== (b.mode & 1) ? 0 !== (ag & 1073741824) && (Q(b), Ta && b.subtreeFlags & 6 && (b.flags |= 8192)) : Q(b), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(m(
          156,
          b.tag
        ));
      }
      function Gg(a, b) {
        nd(b);
        switch (b.tag) {
          case 1:
            return A(b.type) && mc(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
          case 3:
            return De(), q(z), q(x), Ie(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
          case 5:
            return Fe(b), null;
          case 13:
            q(J);
            a = b.memoizedState;
            if (null !== a && null !== a.dehydrated) {
              if (null === b.alternate)
                throw Error(m(340));
              Ad();
            }
            a = b.flags;
            return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
          case 19:
            return q(J), null;
          case 4:
            return De(), null;
          case 10:
            return Md(b.type._context), null;
          case 22:
          case 23:
            return Fg(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      var Hg = false, S = false, Ig = "function" === typeof WeakSet ? WeakSet : Set, T = null;
      function Jg(a, b) {
        var c = a.ref;
        if (null !== c)
          if ("function" === typeof c)
            try {
              c(null);
            } catch (d) {
              U(a, b, d);
            }
          else
            c.current = null;
      }
      function Kg(a, b, c) {
        try {
          c();
        } catch (d) {
          U(a, b, d);
        }
      }
      var Lg = false;
      function Mg(a, b) {
        Ha(a.containerInfo);
        for (T = b; null !== T; )
          if (a = T, b = a.child, 0 !== (a.subtreeFlags & 1028) && null !== b)
            b.return = a, T = b;
          else
            for (; null !== T; ) {
              a = T;
              try {
                var c = a.alternate;
                if (0 !== (a.flags & 1024))
                  switch (a.tag) {
                    case 0:
                    case 11:
                    case 15:
                      break;
                    case 1:
                      if (null !== c) {
                        var d = c.memoizedProps, e = c.memoizedState, f = a.stateNode, g = f.getSnapshotBeforeUpdate(a.elementType === a.type ? d : Fd(a.type, d), e);
                        f.__reactInternalSnapshotBeforeUpdate = g;
                      }
                      break;
                    case 3:
                      Ta && xb(a.stateNode.containerInfo);
                      break;
                    case 5:
                    case 6:
                    case 4:
                    case 17:
                      break;
                    default:
                      throw Error(m(163));
                  }
              } catch (h) {
                U(a, a.return, h);
              }
              b = a.sibling;
              if (null !== b) {
                b.return = a.return;
                T = b;
                break;
              }
              T = a.return;
            }
        c = Lg;
        Lg = false;
        return c;
      }
      function Ng(a, b, c) {
        var d = b.updateQueue;
        d = null !== d ? d.lastEffect : null;
        if (null !== d) {
          var e = d = d.next;
          do {
            if ((e.tag & a) === a) {
              var f = e.destroy;
              e.destroy = void 0;
              void 0 !== f && Kg(b, c, f);
            }
            e = e.next;
          } while (e !== d);
        }
      }
      function Og(a, b) {
        b = b.updateQueue;
        b = null !== b ? b.lastEffect : null;
        if (null !== b) {
          var c = b = b.next;
          do {
            if ((c.tag & a) === a) {
              var d = c.create;
              c.destroy = d();
            }
            c = c.next;
          } while (c !== b);
        }
      }
      function Pg(a) {
        var b = a.ref;
        if (null !== b) {
          var c = a.stateNode;
          switch (a.tag) {
            case 5:
              a = Ea(c);
              break;
            default:
              a = c;
          }
          "function" === typeof b ? b(a) : b.current = a;
        }
      }
      function Qg(a) {
        var b = a.alternate;
        null !== b && (a.alternate = null, Qg(b));
        a.child = null;
        a.deletions = null;
        a.sibling = null;
        5 === a.tag && (b = a.stateNode, null !== b && Za(b));
        a.stateNode = null;
        a.return = null;
        a.dependencies = null;
        a.memoizedProps = null;
        a.memoizedState = null;
        a.pendingProps = null;
        a.stateNode = null;
        a.updateQueue = null;
      }
      function Rg(a) {
        return 5 === a.tag || 3 === a.tag || 4 === a.tag;
      }
      function Sg(a) {
        a:
          for (; ; ) {
            for (; null === a.sibling; ) {
              if (null === a.return || Rg(a.return))
                return null;
              a = a.return;
            }
            a.sibling.return = a.return;
            for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
              if (a.flags & 2)
                continue a;
              if (null === a.child || 4 === a.tag)
                continue a;
              else
                a.child.return = a, a = a.child;
            }
            if (!(a.flags & 2))
              return a.stateNode;
          }
      }
      function Tg(a, b, c) {
        var d = a.tag;
        if (5 === d || 6 === d)
          a = a.stateNode, b ? pb(c, a, b) : kb(c, a);
        else if (4 !== d && (a = a.child, null !== a))
          for (Tg(a, b, c), a = a.sibling; null !== a; )
            Tg(a, b, c), a = a.sibling;
      }
      function Ug(a, b, c) {
        var d = a.tag;
        if (5 === d || 6 === d)
          a = a.stateNode, b ? ob(c, a, b) : jb(c, a);
        else if (4 !== d && (a = a.child, null !== a))
          for (Ug(a, b, c), a = a.sibling; null !== a; )
            Ug(a, b, c), a = a.sibling;
      }
      var V = null, Vg = false;
      function Wg(a, b, c) {
        for (c = c.child; null !== c; )
          Xg(a, b, c), c = c.sibling;
      }
      function Xg(a, b, c) {
        if (Sc && "function" === typeof Sc.onCommitFiberUnmount)
          try {
            Sc.onCommitFiberUnmount(Rc, c);
          } catch (h) {
          }
        switch (c.tag) {
          case 5:
            S || Jg(c, b);
          case 6:
            if (Ta) {
              var d = V, e = Vg;
              V = null;
              Wg(a, b, c);
              V = d;
              Vg = e;
              null !== V && (Vg ? rb(V, c.stateNode) : qb(V, c.stateNode));
            } else
              Wg(a, b, c);
            break;
          case 18:
            Ta && null !== V && (Vg ? Yb(V, c.stateNode) : Xb(V, c.stateNode));
            break;
          case 4:
            Ta ? (d = V, e = Vg, V = c.stateNode.containerInfo, Vg = true, Wg(a, b, c), V = d, Vg = e) : (Ua && (d = c.stateNode.containerInfo, e = zb(d), Cb(d, e)), Wg(a, b, c));
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!S && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
              e = d = d.next;
              do {
                var f = e, g = f.destroy;
                f = f.tag;
                void 0 !== g && (0 !== (f & 2) ? Kg(c, b, g) : 0 !== (f & 4) && Kg(c, b, g));
                e = e.next;
              } while (e !== d);
            }
            Wg(a, b, c);
            break;
          case 1:
            if (!S && (Jg(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount))
              try {
                d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
              } catch (h) {
                U(c, b, h);
              }
            Wg(a, b, c);
            break;
          case 21:
            Wg(a, b, c);
            break;
          case 22:
            c.mode & 1 ? (S = (d = S) || null !== c.memoizedState, Wg(a, b, c), S = d) : Wg(a, b, c);
            break;
          default:
            Wg(
              a,
              b,
              c
            );
        }
      }
      function Yg(a) {
        var b = a.updateQueue;
        if (null !== b) {
          a.updateQueue = null;
          var c = a.stateNode;
          null === c && (c = a.stateNode = new Ig());
          b.forEach(function(b2) {
            var d = Zg.bind(null, a, b2);
            c.has(b2) || (c.add(b2), b2.then(d, d));
          });
        }
      }
      function $g(a, b) {
        var c = b.deletions;
        if (null !== c)
          for (var d = 0; d < c.length; d++) {
            var e = c[d];
            try {
              var f = a, g = b;
              if (Ta) {
                var h = g;
                a:
                  for (; null !== h; ) {
                    switch (h.tag) {
                      case 5:
                        V = h.stateNode;
                        Vg = false;
                        break a;
                      case 3:
                        V = h.stateNode.containerInfo;
                        Vg = true;
                        break a;
                      case 4:
                        V = h.stateNode.containerInfo;
                        Vg = true;
                        break a;
                    }
                    h = h.return;
                  }
                if (null === V)
                  throw Error(m(160));
                Xg(f, g, e);
                V = null;
                Vg = false;
              } else
                Xg(f, g, e);
              var k = e.alternate;
              null !== k && (k.return = null);
              e.return = null;
            } catch (l) {
              U(e, b, l);
            }
          }
        if (b.subtreeFlags & 12854)
          for (b = b.child; null !== b; )
            ah(b, a), b = b.sibling;
      }
      function ah(a, b) {
        var c = a.alternate, d = a.flags;
        switch (a.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            $g(b, a);
            bh(a);
            if (d & 4) {
              try {
                Ng(3, a, a.return), Og(3, a);
              } catch (p) {
                U(a, a.return, p);
              }
              try {
                Ng(5, a, a.return);
              } catch (p) {
                U(a, a.return, p);
              }
            }
            break;
          case 1:
            $g(b, a);
            bh(a);
            d & 512 && null !== c && Jg(c, c.return);
            break;
          case 5:
            $g(b, a);
            bh(a);
            d & 512 && null !== c && Jg(c, c.return);
            if (Ta) {
              if (a.flags & 32) {
                var e = a.stateNode;
                try {
                  sb(e);
                } catch (p) {
                  U(a, a.return, p);
                }
              }
              if (d & 4 && (e = a.stateNode, null != e)) {
                var f = a.memoizedProps;
                c = null !== c ? c.memoizedProps : f;
                d = a.type;
                b = a.updateQueue;
                a.updateQueue = null;
                if (null !== b)
                  try {
                    nb(e, b, d, c, f, a);
                  } catch (p) {
                    U(a, a.return, p);
                  }
              }
            }
            break;
          case 6:
            $g(b, a);
            bh(a);
            if (d & 4 && Ta) {
              if (null === a.stateNode)
                throw Error(m(162));
              e = a.stateNode;
              f = a.memoizedProps;
              c = null !== c ? c.memoizedProps : f;
              try {
                lb(e, c, f);
              } catch (p) {
                U(a, a.return, p);
              }
            }
            break;
          case 3:
            $g(b, a);
            bh(a);
            if (d & 4) {
              if (Ta && Va && null !== c && c.memoizedState.isDehydrated)
                try {
                  Vb(b.containerInfo);
                } catch (p) {
                  U(a, a.return, p);
                }
              if (Ua) {
                e = b.containerInfo;
                f = b.pendingChildren;
                try {
                  Cb(e, f);
                } catch (p) {
                  U(a, a.return, p);
                }
              }
            }
            break;
          case 4:
            $g(
              b,
              a
            );
            bh(a);
            if (d & 4 && Ua) {
              f = a.stateNode;
              e = f.containerInfo;
              f = f.pendingChildren;
              try {
                Cb(e, f);
              } catch (p) {
                U(a, a.return, p);
              }
            }
            break;
          case 13:
            $g(b, a);
            bh(a);
            e = a.child;
            e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (ch = D()));
            d & 4 && Yg(a);
            break;
          case 22:
            var g = null !== c && null !== c.memoizedState;
            a.mode & 1 ? (S = (c = S) || g, $g(b, a), S = c) : $g(b, a);
            bh(a);
            if (d & 8192) {
              c = null !== a.memoizedState;
              if ((a.stateNode.isHidden = c) && !g && 0 !== (a.mode & 1))
                for (T = a, d = a.child; null !== d; ) {
                  for (b = T = d; null !== T; ) {
                    g = T;
                    var h = g.child;
                    switch (g.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        Ng(4, g, g.return);
                        break;
                      case 1:
                        Jg(g, g.return);
                        var k = g.stateNode;
                        if ("function" === typeof k.componentWillUnmount) {
                          var l = g, n = g.return;
                          try {
                            var t = l;
                            k.props = t.memoizedProps;
                            k.state = t.memoizedState;
                            k.componentWillUnmount();
                          } catch (p) {
                            U(l, n, p);
                          }
                        }
                        break;
                      case 5:
                        Jg(g, g.return);
                        break;
                      case 22:
                        if (null !== g.memoizedState) {
                          dh(b);
                          continue;
                        }
                    }
                    null !== h ? (h.return = g, T = h) : dh(b);
                  }
                  d = d.sibling;
                }
              if (Ta) {
                a:
                  if (d = null, Ta)
                    for (b = a; ; ) {
                      if (5 === b.tag) {
                        if (null === d) {
                          d = b;
                          try {
                            e = b.stateNode, c ? tb(e) : vb(b.stateNode, b.memoizedProps);
                          } catch (p) {
                            U(a, a.return, p);
                          }
                        }
                      } else if (6 === b.tag) {
                        if (null === d)
                          try {
                            f = b.stateNode, c ? ub(f) : wb(f, b.memoizedProps);
                          } catch (p) {
                            U(a, a.return, p);
                          }
                      } else if ((22 !== b.tag && 23 !== b.tag || null === b.memoizedState || b === a) && null !== b.child) {
                        b.child.return = b;
                        b = b.child;
                        continue;
                      }
                      if (b === a)
                        break a;
                      for (; null === b.sibling; ) {
                        if (null === b.return || b.return === a)
                          break a;
                        d === b && (d = null);
                        b = b.return;
                      }
                      d === b && (d = null);
                      b.sibling.return = b.return;
                      b = b.sibling;
                    }
              }
            }
            break;
          case 19:
            $g(b, a);
            bh(a);
            d & 4 && Yg(a);
            break;
          case 21:
            break;
          default:
            $g(b, a), bh(a);
        }
      }
      function bh(a) {
        var b = a.flags;
        if (b & 2) {
          try {
            if (Ta) {
              b: {
                for (var c = a.return; null !== c; ) {
                  if (Rg(c)) {
                    var d = c;
                    break b;
                  }
                  c = c.return;
                }
                throw Error(m(160));
              }
              switch (d.tag) {
                case 5:
                  var e = d.stateNode;
                  d.flags & 32 && (sb(e), d.flags &= -33);
                  var f = Sg(a);
                  Ug(a, f, e);
                  break;
                case 3:
                case 4:
                  var g = d.stateNode.containerInfo, h = Sg(a);
                  Tg(a, h, g);
                  break;
                default:
                  throw Error(m(161));
              }
            }
          } catch (k) {
            U(a, a.return, k);
          }
          a.flags &= -3;
        }
        b & 4096 && (a.flags &= -4097);
      }
      function eh(a, b, c) {
        T = a;
        fh(a, b, c);
      }
      function fh(a, b, c) {
        for (var d = 0 !== (a.mode & 1); null !== T; ) {
          var e = T, f = e.child;
          if (22 === e.tag && d) {
            var g = null !== e.memoizedState || Hg;
            if (!g) {
              var h = e.alternate, k = null !== h && null !== h.memoizedState || S;
              h = Hg;
              var l = S;
              Hg = g;
              if ((S = k) && !l)
                for (T = e; null !== T; )
                  g = T, k = g.child, 22 === g.tag && null !== g.memoizedState ? gh(e) : null !== k ? (k.return = g, T = k) : gh(e);
              for (; null !== f; )
                T = f, fh(f, b, c), f = f.sibling;
              T = e;
              Hg = h;
              S = l;
            }
            hh(a, b, c);
          } else
            0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, T = f) : hh(a, b, c);
        }
      }
      function hh(a) {
        for (; null !== T; ) {
          var b = T;
          if (0 !== (b.flags & 8772)) {
            var c = b.alternate;
            try {
              if (0 !== (b.flags & 8772))
                switch (b.tag) {
                  case 0:
                  case 11:
                  case 15:
                    S || Og(5, b);
                    break;
                  case 1:
                    var d = b.stateNode;
                    if (b.flags & 4 && !S)
                      if (null === c)
                        d.componentDidMount();
                      else {
                        var e = b.elementType === b.type ? c.memoizedProps : Fd(b.type, c.memoizedProps);
                        d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                      }
                    var f = b.updateQueue;
                    null !== f && ce(b, f, d);
                    break;
                  case 3:
                    var g = b.updateQueue;
                    if (null !== g) {
                      c = null;
                      if (null !== b.child)
                        switch (b.child.tag) {
                          case 5:
                            c = Ea(b.child.stateNode);
                            break;
                          case 1:
                            c = b.child.stateNode;
                        }
                      ce(b, g, c);
                    }
                    break;
                  case 5:
                    var h = b.stateNode;
                    null === c && b.flags & 4 && mb(h, b.type, b.memoizedProps, b);
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (Va && null === b.memoizedState) {
                      var k = b.alternate;
                      if (null !== k) {
                        var l = k.memoizedState;
                        if (null !== l) {
                          var n = l.dehydrated;
                          null !== n && Wb(n);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  default:
                    throw Error(m(163));
                }
              S || b.flags & 512 && Pg(b);
            } catch (t) {
              U(b, b.return, t);
            }
          }
          if (b === a) {
            T = null;
            break;
          }
          c = b.sibling;
          if (null !== c) {
            c.return = b.return;
            T = c;
            break;
          }
          T = b.return;
        }
      }
      function dh(a) {
        for (; null !== T; ) {
          var b = T;
          if (b === a) {
            T = null;
            break;
          }
          var c = b.sibling;
          if (null !== c) {
            c.return = b.return;
            T = c;
            break;
          }
          T = b.return;
        }
      }
      function gh(a) {
        for (; null !== T; ) {
          var b = T;
          try {
            switch (b.tag) {
              case 0:
              case 11:
              case 15:
                var c = b.return;
                try {
                  Og(4, b);
                } catch (k) {
                  U(b, c, k);
                }
                break;
              case 1:
                var d = b.stateNode;
                if ("function" === typeof d.componentDidMount) {
                  var e = b.return;
                  try {
                    d.componentDidMount();
                  } catch (k) {
                    U(b, e, k);
                  }
                }
                var f = b.return;
                try {
                  Pg(b);
                } catch (k) {
                  U(b, f, k);
                }
                break;
              case 5:
                var g = b.return;
                try {
                  Pg(b);
                } catch (k) {
                  U(b, g, k);
                }
            }
          } catch (k) {
            U(b, b.return, k);
          }
          if (b === a) {
            T = null;
            break;
          }
          var h = b.sibling;
          if (null !== h) {
            h.return = b.return;
            T = h;
            break;
          }
          T = b.return;
        }
      }
      var ih = 0, jh = 1, kh = 2, lh = 3, mh = 4;
      if ("function" === typeof Symbol && Symbol.for) {
        var nh = Symbol.for;
        ih = nh("selector.component");
        jh = nh("selector.has_pseudo_class");
        kh = nh("selector.role");
        lh = nh("selector.test_id");
        mh = nh("selector.text");
      }
      function oh(a) {
        var b = Wa(a);
        if (null != b) {
          if ("string" !== typeof b.memoizedProps["data-testname"])
            throw Error(m(364));
          return b;
        }
        a = cb2(a);
        if (null === a)
          throw Error(m(362));
        return a.stateNode.current;
      }
      function ph(a, b) {
        switch (b.$$typeof) {
          case ih:
            if (a.type === b.value)
              return true;
            break;
          case jh:
            a: {
              b = b.value;
              a = [a, 0];
              for (var c = 0; c < a.length; ) {
                var d = a[c++], e = a[c++], f = b[e];
                if (5 !== d.tag || !fb(d)) {
                  for (; null != f && ph(d, f); )
                    e++, f = b[e];
                  if (e === b.length) {
                    b = true;
                    break a;
                  } else
                    for (d = d.child; null !== d; )
                      a.push(d, e), d = d.sibling;
                }
              }
              b = false;
            }
            return b;
          case kh:
            if (5 === a.tag && gb(a.stateNode, b.value))
              return true;
            break;
          case mh:
            if (5 === a.tag || 6 === a.tag) {
              if (a = eb(a), null !== a && 0 <= a.indexOf(b.value))
                return true;
            }
            break;
          case lh:
            if (5 === a.tag && (a = a.memoizedProps["data-testname"], "string" === typeof a && a.toLowerCase() === b.value.toLowerCase()))
              return true;
            break;
          default:
            throw Error(m(365));
        }
        return false;
      }
      function qh(a) {
        switch (a.$$typeof) {
          case ih:
            return "<" + (ua(a.value) || "Unknown") + ">";
          case jh:
            return ":has(" + (qh(a) || "") + ")";
          case kh:
            return '[role="' + a.value + '"]';
          case mh:
            return '"' + a.value + '"';
          case lh:
            return '[data-testname="' + a.value + '"]';
          default:
            throw Error(m(365));
        }
      }
      function rh(a, b) {
        var c = [];
        a = [a, 0];
        for (var d = 0; d < a.length; ) {
          var e = a[d++], f = a[d++], g = b[f];
          if (5 !== e.tag || !fb(e)) {
            for (; null != g && ph(e, g); )
              f++, g = b[f];
            if (f === b.length)
              c.push(e);
            else
              for (e = e.child; null !== e; )
                a.push(e, f), e = e.sibling;
          }
        }
        return c;
      }
      function sh(a, b) {
        if (!bb)
          throw Error(m(363));
        a = oh(a);
        a = rh(a, b);
        b = [];
        a = Array.from(a);
        for (var c = 0; c < a.length; ) {
          var d = a[c++];
          if (5 === d.tag)
            fb(d) || b.push(d.stateNode);
          else
            for (d = d.child; null !== d; )
              a.push(d), d = d.sibling;
        }
        return b;
      }
      var th = Math.ceil, uh = da.ReactCurrentDispatcher, vh = da.ReactCurrentOwner, W = da.ReactCurrentBatchConfig, H = 0, O = null, X = null, Y = 0, ag = 0, $f = ic(0), R = 0, wh = null, be = 0, xh = 0, yh = 0, zh = null, Ah = null, ch = 0, Eg = Infinity, Bh = null;
      function Ch() {
        Eg = D() + 500;
      }
      var Kf = false, Lf = null, Nf = null, Dh = false, Eh = null, Fh = 0, Gh = 0, Hh = null, Ih = -1, Jh = 0;
      function I() {
        return 0 !== (H & 6) ? D() : -1 !== Ih ? Ih : Ih = D();
      }
      function fe(a) {
        if (0 === (a.mode & 1))
          return 1;
        if (0 !== (H & 2) && 0 !== Y)
          return Y & -Y;
        if (null !== Cd.transition)
          return 0 === Jh && (Jh = Dc()), Jh;
        a = C;
        return 0 !== a ? a : Ya();
      }
      function ge(a, b, c, d) {
        if (50 < Gh)
          throw Gh = 0, Hh = null, Error(m(185));
        Fc(a, c, d);
        if (0 === (H & 2) || a !== O)
          a === O && (0 === (H & 2) && (xh |= c), 4 === R && Kh(a, Y)), Lh(a, d), 1 === c && 0 === H && 0 === (b.mode & 1) && (Ch(), Xc && ad());
      }
      function Lh(a, b) {
        var c = a.callbackNode;
        Bc(a, b);
        var d = zc(a, a === O ? Y : 0);
        if (0 === d)
          null !== c && Kc(c), a.callbackNode = null, a.callbackPriority = 0;
        else if (b = d & -d, a.callbackPriority !== b) {
          null != c && Kc(c);
          if (1 === b)
            0 === a.tag ? $c(Mh.bind(null, a)) : Zc(Mh.bind(null, a)), $a ? ab(function() {
              0 === (H & 6) && ad();
            }) : Jc(Nc, ad), c = null;
          else {
            switch (Ic(d)) {
              case 1:
                c = Nc;
                break;
              case 4:
                c = Oc;
                break;
              case 16:
                c = Pc;
                break;
              case 536870912:
                c = Qc;
                break;
              default:
                c = Pc;
            }
            c = Nh(c, Oh.bind(null, a));
          }
          a.callbackPriority = b;
          a.callbackNode = c;
        }
      }
      function Oh(a, b) {
        Ih = -1;
        Jh = 0;
        if (0 !== (H & 6))
          throw Error(m(327));
        var c = a.callbackNode;
        if (Ph() && a.callbackNode !== c)
          return null;
        var d = zc(a, a === O ? Y : 0);
        if (0 === d)
          return null;
        if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b)
          b = Qh(a, d);
        else {
          b = d;
          var e = H;
          H |= 2;
          var f = Rh();
          if (O !== a || Y !== b)
            Bh = null, Ch(), Sh(a, b);
          do
            try {
              Th();
              break;
            } catch (h) {
              Uh(a, h);
            }
          while (1);
          Kd();
          uh.current = f;
          H = e;
          null !== X ? b = 0 : (O = null, Y = 0, b = R);
        }
        if (0 !== b) {
          2 === b && (e = Cc(a), 0 !== e && (d = e, b = Vh(a, e)));
          if (1 === b)
            throw c = wh, Sh(a, 0), Kh(a, d), Lh(a, D()), c;
          if (6 === b)
            Kh(a, d);
          else {
            e = a.current.alternate;
            if (0 === (d & 30) && !Wh(e) && (b = Qh(a, d), 2 === b && (f = Cc(a), 0 !== f && (d = f, b = Vh(a, f))), 1 === b))
              throw c = wh, Sh(a, 0), Kh(a, d), Lh(a, D()), c;
            a.finishedWork = e;
            a.finishedLanes = d;
            switch (b) {
              case 0:
              case 1:
                throw Error(m(345));
              case 2:
                Xh(a, Ah, Bh);
                break;
              case 3:
                Kh(a, d);
                if ((d & 130023424) === d && (b = ch + 500 - D(), 10 < b)) {
                  if (0 !== zc(a, 0))
                    break;
                  e = a.suspendedLanes;
                  if ((e & d) !== d) {
                    I();
                    a.pingedLanes |= a.suspendedLanes & e;
                    break;
                  }
                  a.timeoutHandle = Pa(Xh.bind(null, a, Ah, Bh), b);
                  break;
                }
                Xh(a, Ah, Bh);
                break;
              case 4:
                Kh(a, d);
                if ((d & 4194240) === d)
                  break;
                b = a.eventTimes;
                for (e = -1; 0 < d; ) {
                  var g = 31 - tc(d);
                  f = 1 << g;
                  g = b[g];
                  g > e && (e = g);
                  d &= ~f;
                }
                d = e;
                d = D() - d;
                d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * th(d / 1960)) - d;
                if (10 < d) {
                  a.timeoutHandle = Pa(Xh.bind(null, a, Ah, Bh), d);
                  break;
                }
                Xh(a, Ah, Bh);
                break;
              case 5:
                Xh(a, Ah, Bh);
                break;
              default:
                throw Error(m(329));
            }
          }
        }
        Lh(a, D());
        return a.callbackNode === c ? Oh.bind(null, a) : null;
      }
      function Vh(a, b) {
        var c = zh;
        a.current.memoizedState.isDehydrated && (Sh(a, b).flags |= 256);
        a = Qh(a, b);
        2 !== a && (b = Ah, Ah = c, null !== b && Dg(b));
        return a;
      }
      function Dg(a) {
        null === Ah ? Ah = a : Ah.push.apply(Ah, a);
      }
      function Wh(a) {
        for (var b = a; ; ) {
          if (b.flags & 16384) {
            var c = b.updateQueue;
            if (null !== c && (c = c.stores, null !== c))
              for (var d = 0; d < c.length; d++) {
                var e = c[d], f = e.getSnapshot;
                e = e.value;
                try {
                  if (!Vc(f(), e))
                    return false;
                } catch (g) {
                  return false;
                }
              }
          }
          c = b.child;
          if (b.subtreeFlags & 16384 && null !== c)
            c.return = b, b = c;
          else {
            if (b === a)
              break;
            for (; null === b.sibling; ) {
              if (null === b.return || b.return === a)
                return true;
              b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
          }
        }
        return true;
      }
      function Kh(a, b) {
        b &= ~yh;
        b &= ~xh;
        a.suspendedLanes |= b;
        a.pingedLanes &= ~b;
        for (a = a.expirationTimes; 0 < b; ) {
          var c = 31 - tc(b), d = 1 << c;
          a[c] = -1;
          b &= ~d;
        }
      }
      function Mh(a) {
        if (0 !== (H & 6))
          throw Error(m(327));
        Ph();
        var b = zc(a, 0);
        if (0 === (b & 1))
          return Lh(a, D()), null;
        var c = Qh(a, b);
        if (0 !== a.tag && 2 === c) {
          var d = Cc(a);
          0 !== d && (b = d, c = Vh(a, d));
        }
        if (1 === c)
          throw c = wh, Sh(a, 0), Kh(a, b), Lh(a, D()), c;
        if (6 === c)
          throw Error(m(345));
        a.finishedWork = a.current.alternate;
        a.finishedLanes = b;
        Xh(a, Ah, Bh);
        Lh(a, D());
        return null;
      }
      function Yh(a) {
        null !== Eh && 0 === Eh.tag && 0 === (H & 6) && Ph();
        var b = H;
        H |= 1;
        var c = W.transition, d = C;
        try {
          if (W.transition = null, C = 1, a)
            return a();
        } finally {
          C = d, W.transition = c, H = b, 0 === (H & 6) && ad();
        }
      }
      function Fg() {
        ag = $f.current;
        q($f);
      }
      function Sh(a, b) {
        a.finishedWork = null;
        a.finishedLanes = 0;
        var c = a.timeoutHandle;
        c !== Ra && (a.timeoutHandle = Ra, Qa(c));
        if (null !== X)
          for (c = X.return; null !== c; ) {
            var d = c;
            nd(d);
            switch (d.tag) {
              case 1:
                d = d.type.childContextTypes;
                null !== d && void 0 !== d && mc();
                break;
              case 3:
                De();
                q(z);
                q(x);
                Ie();
                break;
              case 5:
                Fe(d);
                break;
              case 4:
                De();
                break;
              case 13:
                q(J);
                break;
              case 19:
                q(J);
                break;
              case 10:
                Md(d.type._context);
                break;
              case 22:
              case 23:
                Fg();
            }
            c = c.return;
          }
        O = a;
        X = a = qe(a.current, null);
        Y = ag = b;
        R = 0;
        wh = null;
        yh = xh = be = 0;
        Ah = zh = null;
        if (null !== Qd) {
          for (b = 0; b < Qd.length; b++)
            if (c = Qd[b], d = c.interleaved, null !== d) {
              c.interleaved = null;
              var e = d.next, f = c.pending;
              if (null !== f) {
                var g = f.next;
                f.next = e;
                d.next = g;
              }
              c.pending = d;
            }
          Qd = null;
        }
        return a;
      }
      function Uh(a, b) {
        do {
          var c = X;
          try {
            Kd();
            Je.current = Ve;
            if (Me) {
              for (var d = K.memoizedState; null !== d; ) {
                var e = d.queue;
                null !== e && (e.pending = null);
                d = d.next;
              }
              Me = false;
            }
            Le = 0;
            M = L = K = null;
            Ne = false;
            Oe = 0;
            vh.current = null;
            if (null === c || null === c.return) {
              R = 1;
              wh = b;
              X = null;
              break;
            }
            a: {
              var f = a, g = c.return, h = c, k = b;
              b = Y;
              h.flags |= 32768;
              if (null !== k && "object" === typeof k && "function" === typeof k.then) {
                var l = k, n = h, t = n.tag;
                if (0 === (n.mode & 1) && (0 === t || 11 === t || 15 === t)) {
                  var p = n.alternate;
                  p ? (n.updateQueue = p.updateQueue, n.memoizedState = p.memoizedState, n.lanes = p.lanes) : (n.updateQueue = null, n.memoizedState = null);
                }
                var B = Qf(g);
                if (null !== B) {
                  B.flags &= -257;
                  Rf(B, g, h, f, b);
                  B.mode & 1 && Of(f, l, b);
                  b = B;
                  k = l;
                  var w = b.updateQueue;
                  if (null === w) {
                    var Z = /* @__PURE__ */ new Set();
                    Z.add(k);
                    b.updateQueue = Z;
                  } else
                    w.add(k);
                  break a;
                } else {
                  if (0 === (b & 1)) {
                    Of(f, l, b);
                    og();
                    break a;
                  }
                  k = Error(m(426));
                }
              } else if (F && h.mode & 1) {
                var za = Qf(g);
                if (null !== za) {
                  0 === (za.flags & 65536) && (za.flags |= 256);
                  Rf(za, g, h, f, b);
                  Bd(Ff(k, h));
                  break a;
                }
              }
              f = k = Ff(k, h);
              4 !== R && (R = 2);
              null === zh ? zh = [f] : zh.push(f);
              f = g;
              do {
                switch (f.tag) {
                  case 3:
                    f.flags |= 65536;
                    b &= -b;
                    f.lanes |= b;
                    var E = Jf(f, k, b);
                    $d(f, E);
                    break a;
                  case 1:
                    h = k;
                    var r = f.type, u = f.stateNode;
                    if (0 === (f.flags & 128) && ("function" === typeof r.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Nf || !Nf.has(u)))) {
                      f.flags |= 65536;
                      b &= -b;
                      f.lanes |= b;
                      var Db = Mf(f, h, b);
                      $d(f, Db);
                      break a;
                    }
                }
                f = f.return;
              } while (null !== f);
            }
            Zh(c);
          } catch (qc) {
            b = qc;
            X === c && null !== c && (X = c = c.return);
            continue;
          }
          break;
        } while (1);
      }
      function Rh() {
        var a = uh.current;
        uh.current = Ve;
        return null === a ? Ve : a;
      }
      function og() {
        if (0 === R || 3 === R || 2 === R)
          R = 4;
        null === O || 0 === (be & 268435455) && 0 === (xh & 268435455) || Kh(O, Y);
      }
      function Qh(a, b) {
        var c = H;
        H |= 2;
        var d = Rh();
        if (O !== a || Y !== b)
          Bh = null, Sh(a, b);
        do
          try {
            $h();
            break;
          } catch (e) {
            Uh(a, e);
          }
        while (1);
        Kd();
        H = c;
        uh.current = d;
        if (null !== X)
          throw Error(m(261));
        O = null;
        Y = 0;
        return R;
      }
      function $h() {
        for (; null !== X; )
          ai(X);
      }
      function Th() {
        for (; null !== X && !Lc(); )
          ai(X);
      }
      function ai(a) {
        var b = bi(a.alternate, a, ag);
        a.memoizedProps = a.pendingProps;
        null === b ? Zh(a) : X = b;
        vh.current = null;
      }
      function Zh(a) {
        var b = a;
        do {
          var c = b.alternate;
          a = b.return;
          if (0 === (b.flags & 32768)) {
            if (c = Cg(c, b, ag), null !== c) {
              X = c;
              return;
            }
          } else {
            c = Gg(c, b);
            if (null !== c) {
              c.flags &= 32767;
              X = c;
              return;
            }
            if (null !== a)
              a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
            else {
              R = 6;
              X = null;
              return;
            }
          }
          b = b.sibling;
          if (null !== b) {
            X = b;
            return;
          }
          X = b = a;
        } while (null !== b);
        0 === R && (R = 5);
      }
      function Xh(a, b, c) {
        var d = C, e = W.transition;
        try {
          W.transition = null, C = 1, ci(a, b, c, d);
        } finally {
          W.transition = e, C = d;
        }
        return null;
      }
      function ci(a, b, c, d) {
        do
          Ph();
        while (null !== Eh);
        if (0 !== (H & 6))
          throw Error(m(327));
        c = a.finishedWork;
        var e = a.finishedLanes;
        if (null === c)
          return null;
        a.finishedWork = null;
        a.finishedLanes = 0;
        if (c === a.current)
          throw Error(m(177));
        a.callbackNode = null;
        a.callbackPriority = 0;
        var f = c.lanes | c.childLanes;
        Gc(a, f);
        a === O && (X = O = null, Y = 0);
        0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || Dh || (Dh = true, Nh(Pc, function() {
          Ph();
          return null;
        }));
        f = 0 !== (c.flags & 15990);
        if (0 !== (c.subtreeFlags & 15990) || f) {
          f = W.transition;
          W.transition = null;
          var g = C;
          C = 1;
          var h = H;
          H |= 4;
          vh.current = null;
          Mg(a, c);
          ah(c, a);
          Ia(a.containerInfo);
          a.current = c;
          eh(c, a, e);
          Mc();
          H = h;
          C = g;
          W.transition = f;
        } else
          a.current = c;
        Dh && (Dh = false, Eh = a, Fh = e);
        f = a.pendingLanes;
        0 === f && (Nf = null);
        Tc(c.stateNode, d);
        Lh(a, D());
        if (null !== b)
          for (d = a.onRecoverableError, c = 0; c < b.length; c++)
            e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
        if (Kf)
          throw Kf = false, a = Lf, Lf = null, a;
        0 !== (Fh & 1) && 0 !== a.tag && Ph();
        f = a.pendingLanes;
        0 !== (f & 1) ? a === Hh ? Gh++ : (Gh = 0, Hh = a) : Gh = 0;
        ad();
        return null;
      }
      function Ph() {
        if (null !== Eh) {
          var a = Ic(Fh), b = W.transition, c = C;
          try {
            W.transition = null;
            C = 16 > a ? 16 : a;
            if (null === Eh)
              var d = false;
            else {
              a = Eh;
              Eh = null;
              Fh = 0;
              if (0 !== (H & 6))
                throw Error(m(331));
              var e = H;
              H |= 4;
              for (T = a.current; null !== T; ) {
                var f = T, g = f.child;
                if (0 !== (T.flags & 16)) {
                  var h = f.deletions;
                  if (null !== h) {
                    for (var k = 0; k < h.length; k++) {
                      var l = h[k];
                      for (T = l; null !== T; ) {
                        var n = T;
                        switch (n.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Ng(8, n, f);
                        }
                        var t = n.child;
                        if (null !== t)
                          t.return = n, T = t;
                        else
                          for (; null !== T; ) {
                            n = T;
                            var p = n.sibling, B = n.return;
                            Qg(n);
                            if (n === l) {
                              T = null;
                              break;
                            }
                            if (null !== p) {
                              p.return = B;
                              T = p;
                              break;
                            }
                            T = B;
                          }
                      }
                    }
                    var w = f.alternate;
                    if (null !== w) {
                      var Z = w.child;
                      if (null !== Z) {
                        w.child = null;
                        do {
                          var za = Z.sibling;
                          Z.sibling = null;
                          Z = za;
                        } while (null !== Z);
                      }
                    }
                    T = f;
                  }
                }
                if (0 !== (f.subtreeFlags & 2064) && null !== g)
                  g.return = f, T = g;
                else
                  b:
                    for (; null !== T; ) {
                      f = T;
                      if (0 !== (f.flags & 2048))
                        switch (f.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Ng(9, f, f.return);
                        }
                      var E = f.sibling;
                      if (null !== E) {
                        E.return = f.return;
                        T = E;
                        break b;
                      }
                      T = f.return;
                    }
              }
              var r = a.current;
              for (T = r; null !== T; ) {
                g = T;
                var u = g.child;
                if (0 !== (g.subtreeFlags & 2064) && null !== u)
                  u.return = g, T = u;
                else
                  b:
                    for (g = r; null !== T; ) {
                      h = T;
                      if (0 !== (h.flags & 2048))
                        try {
                          switch (h.tag) {
                            case 0:
                            case 11:
                            case 15:
                              Og(9, h);
                          }
                        } catch (qc) {
                          U(h, h.return, qc);
                        }
                      if (h === g) {
                        T = null;
                        break b;
                      }
                      var Db = h.sibling;
                      if (null !== Db) {
                        Db.return = h.return;
                        T = Db;
                        break b;
                      }
                      T = h.return;
                    }
              }
              H = e;
              ad();
              if (Sc && "function" === typeof Sc.onPostCommitFiberRoot)
                try {
                  Sc.onPostCommitFiberRoot(Rc, a);
                } catch (qc) {
                }
              d = true;
            }
            return d;
          } finally {
            C = c, W.transition = b;
          }
        }
        return false;
      }
      function di(a, b, c) {
        b = Ff(c, b);
        b = Jf(a, b, 1);
        a = Yd(a, b, 1);
        b = I();
        null !== a && (Fc(a, 1, b), Lh(a, b));
      }
      function U(a, b, c) {
        if (3 === a.tag)
          di(a, a, c);
        else
          for (; null !== b; ) {
            if (3 === b.tag) {
              di(b, a, c);
              break;
            } else if (1 === b.tag) {
              var d = b.stateNode;
              if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Nf || !Nf.has(d))) {
                a = Ff(c, a);
                a = Mf(b, a, 1);
                b = Yd(b, a, 1);
                a = I();
                null !== b && (Fc(b, 1, a), Lh(b, a));
                break;
              }
            }
            b = b.return;
          }
      }
      function Pf(a, b, c) {
        var d = a.pingCache;
        null !== d && d.delete(b);
        b = I();
        a.pingedLanes |= a.suspendedLanes & c;
        O === a && (Y & c) === c && (4 === R || 3 === R && (Y & 130023424) === Y && 500 > D() - ch ? Sh(a, 0) : yh |= c);
        Lh(a, b);
      }
      function ei(a, b) {
        0 === b && (0 === (a.mode & 1) ? b = 1 : (b = xc, xc <<= 1, 0 === (xc & 130023424) && (xc = 4194304)));
        var c = I();
        a = Td(a, b);
        null !== a && (Fc(a, b, c), Lh(a, c));
      }
      function pg(a) {
        var b = a.memoizedState, c = 0;
        null !== b && (c = b.retryLane);
        ei(a, c);
      }
      function Zg(a, b) {
        var c = 0;
        switch (a.tag) {
          case 13:
            var d = a.stateNode;
            var e = a.memoizedState;
            null !== e && (c = e.retryLane);
            break;
          case 19:
            d = a.stateNode;
            break;
          default:
            throw Error(m(314));
        }
        null !== d && d.delete(b);
        ei(a, c);
      }
      var bi;
      bi = function(a, b, c) {
        if (null !== a)
          if (a.memoizedProps !== b.pendingProps || z.current)
            G = true;
          else {
            if (0 === (a.lanes & c) && 0 === (b.flags & 128))
              return G = false, tg(a, b, c);
            G = 0 !== (a.flags & 131072) ? true : false;
          }
        else
          G = false, F && 0 !== (b.flags & 1048576) && ld(b, ed, b.index);
        b.lanes = 0;
        switch (b.tag) {
          case 2:
            var d = b.type;
            dg(a, b);
            a = b.pendingProps;
            var e = lc(b, x.current);
            Od(b, c);
            e = Re(null, b, d, a, e, c);
            var f = We();
            b.flags |= 1;
            "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, A(d) ? (f = true, pc(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, Vd(b), e.updater = he, b.stateNode = e, e._reactInternals = b, le(b, d, a, c), b = eg(null, b, d, true, f, c)) : (b.tag = 0, F && f && md(b), P(null, b, e, c), b = b.child);
            return b;
          case 16:
            d = b.elementType;
            a: {
              dg(a, b);
              a = b.pendingProps;
              e = d._init;
              d = e(d._payload);
              b.type = d;
              e = b.tag = fi(d);
              a = Fd(d, a);
              switch (e) {
                case 0:
                  b = Yf(null, b, d, a, c);
                  break a;
                case 1:
                  b = cg(null, b, d, a, c);
                  break a;
                case 11:
                  b = Tf(null, b, d, a, c);
                  break a;
                case 14:
                  b = Vf(null, b, d, Fd(d.type, a), c);
                  break a;
              }
              throw Error(m(
                306,
                d,
                ""
              ));
            }
            return b;
          case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Fd(d, e), Yf(a, b, d, e, c);
          case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Fd(d, e), cg(a, b, d, e, c);
          case 3:
            a: {
              fg(b);
              if (null === a)
                throw Error(m(387));
              d = b.pendingProps;
              f = b.memoizedState;
              e = f.element;
              Wd(a, b);
              ae(b, d, null, c);
              var g = b.memoizedState;
              d = g.element;
              if (Va && f.isDehydrated)
                if (f = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                  e = Ff(Error(m(423)), b);
                  b = gg(a, b, d, c, e);
                  break a;
                } else if (d !== e) {
                  e = Ff(Error(m(424)), b);
                  b = gg(a, b, d, c, e);
                  break a;
                } else
                  for (Va && (pd = Pb(b.stateNode.containerInfo), od = b, F = true, rd = null, qd = false), c = we(b, null, d, c), b.child = c; c; )
                    c.flags = c.flags & -3 | 4096, c = c.sibling;
              else {
                Ad();
                if (d === e) {
                  b = Uf(a, b, c);
                  break a;
                }
                P(a, b, d, c);
              }
              b = b.child;
            }
            return b;
          case 5:
            return Ee(b), null === a && wd(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Na(d, e) ? g = null : null !== f && Na(d, f) && (b.flags |= 32), bg(a, b), P(a, b, g, c), b.child;
          case 6:
            return null === a && wd(b), null;
          case 13:
            return jg(a, b, c);
          case 4:
            return Ce(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = ve(b, null, d, c) : P(a, b, d, c), b.child;
          case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Fd(d, e), Tf(a, b, d, e, c);
          case 7:
            return P(a, b, b.pendingProps, c), b.child;
          case 8:
            return P(a, b, b.pendingProps.children, c), b.child;
          case 12:
            return P(a, b, b.pendingProps.children, c), b.child;
          case 10:
            a: {
              d = b.type._context;
              e = b.pendingProps;
              f = b.memoizedProps;
              g = e.value;
              Ld(b, d, g);
              if (null !== f)
                if (Vc(f.value, g)) {
                  if (f.children === e.children && !z.current) {
                    b = Uf(a, b, c);
                    break a;
                  }
                } else
                  for (f = b.child, null !== f && (f.return = b); null !== f; ) {
                    var h = f.dependencies;
                    if (null !== h) {
                      g = f.child;
                      for (var k = h.firstContext; null !== k; ) {
                        if (k.context === d) {
                          if (1 === f.tag) {
                            k = Xd(-1, c & -c);
                            k.tag = 2;
                            var l = f.updateQueue;
                            if (null !== l) {
                              l = l.shared;
                              var n = l.pending;
                              null === n ? k.next = k : (k.next = n.next, n.next = k);
                              l.pending = k;
                            }
                          }
                          f.lanes |= c;
                          k = f.alternate;
                          null !== k && (k.lanes |= c);
                          Nd(f.return, c, b);
                          h.lanes |= c;
                          break;
                        }
                        k = k.next;
                      }
                    } else if (10 === f.tag)
                      g = f.type === b.type ? null : f.child;
                    else if (18 === f.tag) {
                      g = f.return;
                      if (null === g)
                        throw Error(m(341));
                      g.lanes |= c;
                      h = g.alternate;
                      null !== h && (h.lanes |= c);
                      Nd(g, c, b);
                      g = f.sibling;
                    } else
                      g = f.child;
                    if (null !== g)
                      g.return = f;
                    else
                      for (g = f; null !== g; ) {
                        if (g === b) {
                          g = null;
                          break;
                        }
                        f = g.sibling;
                        if (null !== f) {
                          f.return = g.return;
                          g = f;
                          break;
                        }
                        g = g.return;
                      }
                    f = g;
                  }
              P(a, b, e.children, c);
              b = b.child;
            }
            return b;
          case 9:
            return e = b.type, d = b.pendingProps.children, Od(b, c), e = Pd(e), d = d(e), b.flags |= 1, P(a, b, d, c), b.child;
          case 14:
            return d = b.type, e = Fd(d, b.pendingProps), e = Fd(d.type, e), Vf(a, b, d, e, c);
          case 15:
            return Xf(a, b, b.type, b.pendingProps, c);
          case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Fd(d, e), dg(a, b), b.tag = 1, A(d) ? (a = true, pc(b)) : a = false, Od(b, c), je(b, d, e), le(b, d, e, c), eg(null, b, d, true, a, c);
          case 19:
            return sg(a, b, c);
          case 22:
            return Zf(a, b, c);
        }
        throw Error(m(156, b.tag));
      };
      function Nh(a, b) {
        return Jc(a, b);
      }
      function gi(a, b, c, d) {
        this.tag = a;
        this.key = c;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function td(a, b, c, d) {
        return new gi(a, b, c, d);
      }
      function Wf(a) {
        a = a.prototype;
        return !(!a || !a.isReactComponent);
      }
      function fi(a) {
        if ("function" === typeof a)
          return Wf(a) ? 1 : 0;
        if (void 0 !== a && null !== a) {
          a = a.$$typeof;
          if (a === ma)
            return 11;
          if (a === pa)
            return 14;
        }
        return 2;
      }
      function qe(a, b) {
        var c = a.alternate;
        null === c ? (c = td(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
        c.flags = a.flags & 14680064;
        c.childLanes = a.childLanes;
        c.lanes = a.lanes;
        c.child = a.child;
        c.memoizedProps = a.memoizedProps;
        c.memoizedState = a.memoizedState;
        c.updateQueue = a.updateQueue;
        b = a.dependencies;
        c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
        c.sibling = a.sibling;
        c.index = a.index;
        c.ref = a.ref;
        return c;
      }
      function se(a, b, c, d, e, f) {
        var g = 2;
        d = a;
        if ("function" === typeof a)
          Wf(a) && (g = 1);
        else if ("string" === typeof a)
          g = 5;
        else
          a:
            switch (a) {
              case ha:
                return ue(c.children, e, f, b);
              case ia:
                g = 8;
                e |= 8;
                break;
              case ja:
                return a = td(12, c, b, e | 2), a.elementType = ja, a.lanes = f, a;
              case na:
                return a = td(13, c, b, e), a.elementType = na, a.lanes = f, a;
              case oa:
                return a = td(19, c, b, e), a.elementType = oa, a.lanes = f, a;
              case ra:
                return kg(c, e, f, b);
              default:
                if ("object" === typeof a && null !== a)
                  switch (a.$$typeof) {
                    case ka:
                      g = 10;
                      break a;
                    case la:
                      g = 9;
                      break a;
                    case ma:
                      g = 11;
                      break a;
                    case pa:
                      g = 14;
                      break a;
                    case qa:
                      g = 16;
                      d = null;
                      break a;
                  }
                throw Error(m(130, null == a ? a : typeof a, ""));
            }
        b = td(g, c, b, e);
        b.elementType = a;
        b.type = d;
        b.lanes = f;
        return b;
      }
      function ue(a, b, c, d) {
        a = td(7, a, d, b);
        a.lanes = c;
        return a;
      }
      function kg(a, b, c, d) {
        a = td(22, a, d, b);
        a.elementType = ra;
        a.lanes = c;
        a.stateNode = { isHidden: false };
        return a;
      }
      function re(a, b, c) {
        a = td(6, a, null, b);
        a.lanes = c;
        return a;
      }
      function te(a, b, c) {
        b = td(4, null !== a.children ? a.children : [], a.key, b);
        b.lanes = c;
        b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
        return b;
      }
      function hi(a, b, c, d, e) {
        this.tag = b;
        this.containerInfo = a;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = Ra;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = Ec(0);
        this.expirationTimes = Ec(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = Ec(0);
        this.identifierPrefix = d;
        this.onRecoverableError = e;
        Va && (this.mutableSourceEagerHydrationData = null);
      }
      function ii(a, b, c, d, e, f, g, h, k) {
        a = new hi(a, b, c, h, k);
        1 === b ? (b = 1, true === f && (b |= 8)) : b = 0;
        f = td(3, null, null, b);
        a.current = f;
        f.stateNode = a;
        f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
        Vd(f);
        return a;
      }
      function ji(a) {
        if (!a)
          return jc;
        a = a._reactInternals;
        a: {
          if (wa(a) !== a || 1 !== a.tag)
            throw Error(m(170));
          var b = a;
          do {
            switch (b.tag) {
              case 3:
                b = b.stateNode.context;
                break a;
              case 1:
                if (A(b.type)) {
                  b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                  break a;
                }
            }
            b = b.return;
          } while (null !== b);
          throw Error(m(171));
        }
        if (1 === a.tag) {
          var c = a.type;
          if (A(c))
            return oc(a, c, b);
        }
        return b;
      }
      function ki(a) {
        var b = a._reactInternals;
        if (void 0 === b) {
          if ("function" === typeof a.render)
            throw Error(m(188));
          a = Object.keys(a).join(",");
          throw Error(m(268, a));
        }
        a = Aa(b);
        return null === a ? null : a.stateNode;
      }
      function li(a, b) {
        a = a.memoizedState;
        if (null !== a && null !== a.dehydrated) {
          var c = a.retryLane;
          a.retryLane = 0 !== c && c < b ? c : b;
        }
      }
      function mi(a, b) {
        li(a, b);
        (a = a.alternate) && li(a, b);
      }
      function ni(a) {
        a = Aa(a);
        return null === a ? null : a.stateNode;
      }
      function oi() {
        return null;
      }
      exports3.attemptContinuousHydration = function(a) {
        if (13 === a.tag) {
          var b = Td(a, 134217728);
          if (null !== b) {
            var c = I();
            ge(b, a, 134217728, c);
          }
          mi(a, 134217728);
        }
      };
      exports3.attemptDiscreteHydration = function(a) {
        if (13 === a.tag) {
          var b = Td(a, 1);
          if (null !== b) {
            var c = I();
            ge(b, a, 1, c);
          }
          mi(a, 1);
        }
      };
      exports3.attemptHydrationAtCurrentPriority = function(a) {
        if (13 === a.tag) {
          var b = fe(a), c = Td(a, b);
          if (null !== c) {
            var d = I();
            ge(c, a, b, d);
          }
          mi(a, b);
        }
      };
      exports3.attemptSynchronousHydration = function(a) {
        switch (a.tag) {
          case 3:
            var b = a.stateNode;
            if (b.current.memoizedState.isDehydrated) {
              var c = yc(b.pendingLanes);
              0 !== c && (Hc(b, c | 1), Lh(b, D()), 0 === (H & 6) && (Ch(), ad()));
            }
            break;
          case 13:
            Yh(function() {
              var b2 = Td(a, 1);
              if (null !== b2) {
                var c2 = I();
                ge(b2, a, 1, c2);
              }
            }), mi(a, 1);
        }
      };
      exports3.batchedUpdates = function(a, b) {
        var c = H;
        H |= 1;
        try {
          return a(b);
        } finally {
          H = c, 0 === H && (Ch(), Xc && ad());
        }
      };
      exports3.createComponentSelector = function(a) {
        return { $$typeof: ih, value: a };
      };
      exports3.createContainer = function(a, b, c, d, e, f, g) {
        return ii(a, b, false, null, c, d, e, f, g);
      };
      exports3.createHasPseudoClassSelector = function(a) {
        return { $$typeof: jh, value: a };
      };
      exports3.createHydrationContainer = function(a, b, c, d, e, f, g, h, k) {
        a = ii(c, d, true, a, e, f, g, h, k);
        a.context = ji(null);
        c = a.current;
        d = I();
        e = fe(c);
        f = Xd(d, e);
        f.callback = void 0 !== b && null !== b ? b : null;
        Yd(c, f, e);
        a.current.lanes = e;
        Fc(a, e, d);
        Lh(a, d);
        return a;
      };
      exports3.createPortal = function(a, b, c) {
        var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: fa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
      };
      exports3.createRoleSelector = function(a) {
        return { $$typeof: kh, value: a };
      };
      exports3.createTestNameSelector = function(a) {
        return { $$typeof: lh, value: a };
      };
      exports3.createTextSelector = function(a) {
        return { $$typeof: mh, value: a };
      };
      exports3.deferredUpdates = function(a) {
        var b = C, c = W.transition;
        try {
          return W.transition = null, C = 16, a();
        } finally {
          C = b, W.transition = c;
        }
      };
      exports3.discreteUpdates = function(a, b, c, d, e) {
        var f = C, g = W.transition;
        try {
          return W.transition = null, C = 1, a(b, c, d, e);
        } finally {
          C = f, W.transition = g, 0 === H && Ch();
        }
      };
      exports3.findAllNodes = sh;
      exports3.findBoundingRects = function(a, b) {
        if (!bb)
          throw Error(m(363));
        b = sh(a, b);
        a = [];
        for (var c = 0; c < b.length; c++)
          a.push(db(b[c]));
        for (b = a.length - 1; 0 < b; b--) {
          c = a[b];
          for (var d = c.x, e = d + c.width, f = c.y, g = f + c.height, h = b - 1; 0 <= h; h--)
            if (b !== h) {
              var k = a[h], l = k.x, n = l + k.width, t = k.y, p = t + k.height;
              if (d >= l && f >= t && e <= n && g <= p) {
                a.splice(b, 1);
                break;
              } else if (!(d !== l || c.width !== k.width || p < f || t > g)) {
                t > f && (k.height += t - f, k.y = f);
                p < g && (k.height = g - t);
                a.splice(b, 1);
                break;
              } else if (!(f !== t || c.height !== k.height || n < d || l > e)) {
                l > d && (k.width += l - d, k.x = d);
                n < e && (k.width = e - l);
                a.splice(b, 1);
                break;
              }
            }
        }
        return a;
      };
      exports3.findHostInstance = ki;
      exports3.findHostInstanceWithNoPortals = function(a) {
        a = ya(a);
        a = null !== a ? Ca(a) : null;
        return null === a ? null : a.stateNode;
      };
      exports3.findHostInstanceWithWarning = function(a) {
        return ki(a);
      };
      exports3.flushControlled = function(a) {
        var b = H;
        H |= 1;
        var c = W.transition, d = C;
        try {
          W.transition = null, C = 1, a();
        } finally {
          C = d, W.transition = c, H = b, 0 === H && (Ch(), ad());
        }
      };
      exports3.flushPassiveEffects = Ph;
      exports3.flushSync = Yh;
      exports3.focusWithin = function(a, b) {
        if (!bb)
          throw Error(m(363));
        a = oh(a);
        b = rh(a, b);
        b = Array.from(b);
        for (a = 0; a < b.length; ) {
          var c = b[a++];
          if (!fb(c)) {
            if (5 === c.tag && hb(c.stateNode))
              return true;
            for (c = c.child; null !== c; )
              b.push(c), c = c.sibling;
          }
        }
        return false;
      };
      exports3.getCurrentUpdatePriority = function() {
        return C;
      };
      exports3.getFindAllNodesFailureDescription = function(a, b) {
        if (!bb)
          throw Error(m(363));
        var c = 0, d = [];
        a = [oh(a), 0];
        for (var e = 0; e < a.length; ) {
          var f = a[e++], g = a[e++], h = b[g];
          if (5 !== f.tag || !fb(f)) {
            if (ph(f, h) && (d.push(qh(h)), g++, g > c && (c = g)), g < b.length)
              for (f = f.child; null !== f; )
                a.push(f, g), f = f.sibling;
          }
        }
        if (c < b.length) {
          for (a = []; c < b.length; c++)
            a.push(qh(b[c]));
          return "findAllNodes was able to match part of the selector:\n  " + (d.join(" > ") + "\n\nNo matching component was found for:\n  ") + a.join(" > ");
        }
        return null;
      };
      exports3.getPublicRootInstance = function(a) {
        a = a.current;
        if (!a.child)
          return null;
        switch (a.child.tag) {
          case 5:
            return Ea(a.child.stateNode);
          default:
            return a.child.stateNode;
        }
      };
      exports3.injectIntoDevTools = function(a) {
        a = { bundleType: a.bundleType, version: a.version, rendererPackageName: a.rendererPackageName, rendererConfig: a.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: da.ReactCurrentDispatcher, findHostInstanceByFiber: ni, findFiberByHostInstance: a.findFiberByHostInstance || oi, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0" };
        if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)
          a = false;
        else {
          var b = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (b.isDisabled || !b.supportsFiber)
            a = true;
          else {
            try {
              Rc = b.inject(a), Sc = b;
            } catch (c) {
            }
            a = b.checkDCE ? true : false;
          }
        }
        return a;
      };
      exports3.isAlreadyRendering = function() {
        return false;
      };
      exports3.observeVisibleRects = function(a, b, c, d) {
        if (!bb)
          throw Error(m(363));
        a = sh(a, b);
        var e = ib(a, c, d).disconnect;
        return { disconnect: function() {
          e();
        } };
      };
      exports3.registerMutableSourceForHydration = function(a, b) {
        var c = b._getVersion;
        c = c(b._source);
        null == a.mutableSourceEagerHydrationData ? a.mutableSourceEagerHydrationData = [b, c] : a.mutableSourceEagerHydrationData.push(b, c);
      };
      exports3.runWithPriority = function(a, b) {
        var c = C;
        try {
          return C = a, b();
        } finally {
          C = c;
        }
      };
      exports3.shouldError = function() {
        return null;
      };
      exports3.shouldSuspend = function() {
        return false;
      };
      exports3.updateContainer = function(a, b, c, d) {
        var e = b.current, f = I(), g = fe(e);
        c = ji(c);
        null === b.context ? b.context = c : b.pendingContext = c;
        b = Xd(f, g);
        b.payload = { element: a };
        d = void 0 === d ? null : d;
        null !== d && (b.callback = d);
        a = Yd(e, b, g);
        null !== a && (ge(a, e, g, f), Zd(a, e, g));
        return g;
      };
      return exports3;
    };
  }
});

// ../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler.development.js
var require_react_reconciler_development = __commonJS({
  "../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler.development.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      module2.exports = function $$$reconciler($$$hostConfig) {
        var exports3 = {};
        "use strict";
        var React23 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React23.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var assign = Object.assign;
        function get(key2) {
          return key2._reactInternals;
        }
        function set(key2, value) {
          key2._reactInternals = value;
        }
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment6 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromType(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type2.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type2.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type2 = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type2;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type2;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type2, type2.render, "ForwardRef");
            case Fragment6:
              return "Fragment";
            case HostComponent:
              return type2;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type2);
            case Mode:
              if (type2 === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type2 === "function") {
                return type2.displayName || type2.name || null;
              }
              if (typeof type2 === "string") {
                return type2;
              }
              break;
          }
          return null;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var getPublicInstance = $$$hostConfig.getPublicInstance;
        var getRootHostContext = $$$hostConfig.getRootHostContext;
        var getChildHostContext = $$$hostConfig.getChildHostContext;
        var prepareForCommit = $$$hostConfig.prepareForCommit;
        var resetAfterCommit = $$$hostConfig.resetAfterCommit;
        var createInstance = $$$hostConfig.createInstance;
        var appendInitialChild = $$$hostConfig.appendInitialChild;
        var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
        var prepareUpdate = $$$hostConfig.prepareUpdate;
        var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
        var createTextInstance = $$$hostConfig.createTextInstance;
        var scheduleTimeout = $$$hostConfig.scheduleTimeout;
        var cancelTimeout = $$$hostConfig.cancelTimeout;
        var noTimeout = $$$hostConfig.noTimeout;
        var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
        var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
        var supportsMutation = $$$hostConfig.supportsMutation;
        var supportsPersistence = $$$hostConfig.supportsPersistence;
        var supportsHydration = $$$hostConfig.supportsHydration;
        var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
        var beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;
        var afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;
        var preparePortalMount = $$$hostConfig.preparePortalMount;
        var prepareScopeUpdate = $$$hostConfig.prepareScopeUpdate;
        var getInstanceFromScope = $$$hostConfig.getInstanceFromScope;
        var getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;
        var detachDeletedInstance = $$$hostConfig.detachDeletedInstance;
        var supportsMicrotasks = $$$hostConfig.supportsMicrotasks;
        var scheduleMicrotask = $$$hostConfig.scheduleMicrotask;
        var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;
        var findFiberRoot = $$$hostConfig.findFiberRoot;
        var getBoundingRect = $$$hostConfig.getBoundingRect;
        var getTextContent = $$$hostConfig.getTextContent;
        var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;
        var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;
        var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;
        var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver;
        var appendChild = $$$hostConfig.appendChild;
        var appendChildToContainer = $$$hostConfig.appendChildToContainer;
        var commitTextUpdate = $$$hostConfig.commitTextUpdate;
        var commitMount = $$$hostConfig.commitMount;
        var commitUpdate = $$$hostConfig.commitUpdate;
        var insertBefore = $$$hostConfig.insertBefore;
        var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
        var removeChild = $$$hostConfig.removeChild;
        var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
        var resetTextContent = $$$hostConfig.resetTextContent;
        var hideInstance = $$$hostConfig.hideInstance;
        var hideTextInstance = $$$hostConfig.hideTextInstance;
        var unhideInstance = $$$hostConfig.unhideInstance;
        var unhideTextInstance = $$$hostConfig.unhideTextInstance;
        var clearContainer = $$$hostConfig.clearContainer;
        var cloneInstance = $$$hostConfig.cloneInstance;
        var createContainerChildSet = $$$hostConfig.createContainerChildSet;
        var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
        var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
        var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
        var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
        var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;
        var canHydrateInstance = $$$hostConfig.canHydrateInstance;
        var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
        var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
        var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
        var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
        var getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;
        var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
        var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
        var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
        var getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;
        var getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;
        var hydrateInstance = $$$hostConfig.hydrateInstance;
        var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
        var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
        var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
        var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
        var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
        var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
        var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
        var shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;
        var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
        var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
        var didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;
        var didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;
        var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
        var didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;
        var didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;
        var didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;
        var didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;
        var didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;
        var didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;
        var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
        var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
        var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;
        var errorHydratingContainer = $$$hostConfig.errorHydratingContainer;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err2 = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err2.name = "Invariant Violation";
                    throw err2;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type2 = workInProgress2.type;
            var contextTypes = type2.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key2 in contextTypes) {
              context[key2] = unmaskedContext[key2];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type2) {
          {
            var childContextTypes = type2.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type2, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type2.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type2, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type2, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root, wipLanes) {
          var pendingLanes = root.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root.suspendedLanes;
          var pingedLanes = root.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root, lanes) {
          var eventTimes = root.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root, currentTime) {
          var pendingLanes = root.pendingLanes;
          var suspendedLanes = root.suspendedLanes;
          var pingedLanes = root.pingedLanes;
          var expirationTimes = root.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root) {
          return getHighestPriorityLanes(root.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root) {
          var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root, lanes) {
          return (lanes & root.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i2 = 0; i2 < TotalLanes; i2++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root, updateLane, eventTime) {
          root.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
          }
          var eventTimes = root.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root, suspendedLanes) {
          root.suspendedLanes |= suspendedLanes;
          root.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root, pingedLanes, eventTime) {
          root.pingedLanes |= root.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root, remainingLanes) {
          var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
          root.pendingLanes = remainingLanes;
          root.suspendedLanes = NoLanes;
          root.pingedLanes = NoLanes;
          root.expiredLanes &= remainingLanes;
          root.mutableReadLanes &= remainingLanes;
          root.entangledLanes &= remainingLanes;
          var entanglements = root.entanglements;
          var eventTimes = root.eventTimes;
          var expirationTimes = root.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root, entangledLanes) {
          var rootEntangledLanes = root.entangledLanes |= entangledLanes;
          var entanglements = root.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
          var memoizedUpdaters = root.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority2 = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority2;
          }
          return IdleEventPriority;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err2) {
            {
              error("React instrumentation encountered an error: %s.", err2);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root, children);
              } catch (err2) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        function onCommitRoot(root, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority2:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root, void 0, didError);
              }
            } catch (err2) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root);
            } catch (err2) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err2) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err2);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err2) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err2);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i2 < queue.length; i2++) {
                var callback = queue[i2];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i2 + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        function isRootDehydrated(root) {
          var currentState = root.current.memoizedState;
          return currentState.isDehydrated;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          if (!supportsHydration) {
            return false;
          }
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          if (!supportsHydration) {
            return false;
          }
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type2 = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type2, props);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      _isConcurrentMode
                    );
                    break;
                  }
                  case SuspenseComponent: {
                    didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type2 = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type2, props);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          if (!supportsHydration) {
            throw new Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          if (!supportsHydration) {
            throw new Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          if (!supportsHydration) {
            throw new Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          if (!supportsHydration) {
            throw new Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
          }
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (!supportsHydration) {
            return false;
          }
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          if (!supportsHydration) {
            return;
          }
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            var currentKey = keysA[i2];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type2;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          if (isPrimaryRenderer) {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          } else {
            push(valueCursor, context._currentValue2, providerFiber);
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          if (isPrimaryRenderer) {
            {
              context._currentValue = currentValue;
            }
          } else {
            {
              context._currentValue2 = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
              var queue = concurrentQueues[i2];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i2 = 0; i2 < effects.length; i2++) {
              var effect = effects[i2];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React23.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key2 = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key2)) {
              didWarnOnInvalidCallback.add(key2);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type2, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type2) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
              entangleTransitions(root, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
              entangleTransitions(root, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
              entangleTransitions(root, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key2) {
            if (current2 === null || current2.tag !== Fragment6) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key2);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key2 = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key2 !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key2) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key2) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key2 !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key2 = child.key;
                  if (typeof key2 !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key2);
                    break;
                  }
                  if (!knownKeys.has(key2)) {
                    knownKeys.add(key2);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key2);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child = newChildren[i2];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key2 = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key2) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment6) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key2 = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key2) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type, rootInstance);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row2) {
          var node = row2;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row2) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row2) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
            var mutableSource = workInProgressSources[i2];
            if (isPrimaryRenderer) {
              mutableSource._workInProgressVersionPrimary = null;
            } else {
              mutableSource._workInProgressVersionSecondary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root.mutableSourceEagerHydrationData == null) {
            root.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row2 = i2 + 1 + ". " + oldHookName;
                  while (row2.length < secondColumnStart) {
                    row2 += " ";
                  }
                  row2 += newHookName + "\n";
                  table += row2;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (objectIs(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root = getWorkInProgressRoot();
            if (root === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root = getWorkInProgressRoot();
            if (root === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root !== null) {
            scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create2, destroy, deps) {
          var effect = {
            tag,
            create: create2,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
        }
        function mountEffect(create2, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
          }
        }
        function updateEffect(create2, deps) {
          return updateEffectImpl(Passive, Passive$1, create2, deps);
        }
        function mountInsertionEffect(create2, deps) {
          return mountEffectImpl(Update, Insertion, create2, deps);
        }
        function updateInsertionEffect(create2, deps) {
          return updateEffectImpl(Update, Insertion, create2, deps);
        }
        function mountLayoutEffect(create2, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create2, deps);
        }
        function updateLayoutEffect(create2, deps) {
          return updateEffectImpl(Update, Layout, create2, deps);
        }
        function imperativeHandleEffect(create2, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create2();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create2();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$1.transition;
          ReactCurrentBatchConfig$1.transition = {};
          var currentTransition = ReactCurrentBatchConfig$1.transition;
          {
            ReactCurrentBatchConfig$1.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$1.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root = getWorkInProgressRoot();
          var identifierPrefix = root.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
              entangleTransitionUpdate(root, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root, fiber, lane, eventTime);
              entangleTransitionUpdate(root, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useInsertionEffect: function(create2, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root = parentFiber.stateNode;
                  root.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root = parentFiber.stateNode;
                  if (root !== null) {
                    root.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root, wakeable, lanes) {
          var pingCache = root.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type2 = Component.type;
            if (isSimpleFunctionComponent(type2) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type2;
              {
                resolvedType = resolveFunctionForHotReloading(type2);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type2);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(type2)
                );
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root = workInProgress2.stateNode;
          if (root.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root.pendingContext, root.pendingContext !== root.context);
          } else if (root.context) {
            pushTopLevelContextObject(workInProgress2, root.context, false);
          }
          pushHostContainer(workInProgress2, root.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (supportsHydration && prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type2 = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type2, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type2, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      "prop",
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root = getWorkInProgressRoot();
              if (root !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row2 = firstChild;
          var lastContentRow = null;
          while (row2 !== null) {
            var currentRow = row2.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row2;
            }
            row2 = row2.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type2 = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type2, index2, type2);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row2 = workInProgress2.child;
                workInProgress2.child = null;
                while (row2 !== null) {
                  var currentRow = row2.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row2;
                    break;
                  }
                  var nextRow = row2.sibling;
                  row2.sibling = _tail;
                  _tail = row2;
                  row2 = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  _tail,
                  null,
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  null,
                  null,
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type2 = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type2 ? _unresolvedProps2 : resolveDefaultProps(type2, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type2, _resolvedProps2, renderLanes2);
            }
            case Fragment6:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        function hadNoMutationsEffects(current2, completedWork) {
          var didBailout = current2 !== null && current2.child === completedWork.child;
          if (didBailout) {
            return true;
          }
          if ((completedWork.flags & ChildDeletion) !== NoFlags) {
            return false;
          }
          var child = completedWork.child;
          while (child !== null) {
            if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {
              return false;
            }
            child = child.sibling;
          }
          return true;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        if (supportsMutation) {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        } else if (supportsPersistence) {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (needsVisibilityToggle && isHidden2) {
                  var props = node.memoizedProps;
                  var type2 = node.type;
                  instance = cloneHiddenInstance(instance, type2, props, node);
                }
                appendInitialChild(parent, instance);
              } else if (node.tag === HostText) {
                var _instance = node.stateNode;
                if (needsVisibilityToggle && isHidden2) {
                  var text = node.memoizedProps;
                  _instance = cloneHiddenTextInstance(_instance, text, node);
                }
                appendInitialChild(parent, _instance);
              } else if (node.tag === HostPortal)
                ;
              else if (node.tag === OffscreenComponent && node.memoizedState !== null) {
                var child = node.child;
                if (child !== null) {
                  child.return = node;
                }
                appendAllChildren(parent, node, true, true);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              node = node;
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          var appendAllChildrenToContainer = function(containerChildSet, workInProgress2, needsVisibilityToggle, isHidden2) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (needsVisibilityToggle && isHidden2) {
                  var props = node.memoizedProps;
                  var type2 = node.type;
                  instance = cloneHiddenInstance(instance, type2, props, node);
                }
                appendChildToContainerChildSet(containerChildSet, instance);
              } else if (node.tag === HostText) {
                var _instance2 = node.stateNode;
                if (needsVisibilityToggle && isHidden2) {
                  var text = node.memoizedProps;
                  _instance2 = cloneHiddenTextInstance(_instance2, text, node);
                }
                appendChildToContainerChildSet(containerChildSet, _instance2);
              } else if (node.tag === HostPortal)
                ;
              else if (node.tag === OffscreenComponent && node.memoizedState !== null) {
                var child = node.child;
                if (child !== null) {
                  child.return = node;
                }
                appendAllChildrenToContainer(containerChildSet, node, true, true);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              node = node;
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
            var portalOrRoot = workInProgress2.stateNode;
            var childrenUnchanged = hadNoMutationsEffects(current2, workInProgress2);
            if (childrenUnchanged)
              ;
            else {
              var container = portalOrRoot.containerInfo;
              var newChildSet = createContainerChildSet(container);
              appendAllChildrenToContainer(newChildSet, workInProgress2, false, false);
              portalOrRoot.pendingChildren = newChildSet;
              markUpdate(workInProgress2);
              finalizeContainerChildren(container, newChildSet);
            }
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
            var currentInstance = current2.stateNode;
            var oldProps = current2.memoizedProps;
            var childrenUnchanged = hadNoMutationsEffects(current2, workInProgress2);
            if (childrenUnchanged && oldProps === newProps) {
              workInProgress2.stateNode = currentInstance;
              return;
            }
            var recyclableInstance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = null;
            if (oldProps !== newProps) {
              updatePayload = prepareUpdate(recyclableInstance, type2, oldProps, newProps, rootContainerInstance, currentHostContext);
            }
            if (childrenUnchanged && updatePayload === null) {
              workInProgress2.stateNode = currentInstance;
              return;
            }
            var newInstance = cloneInstance(currentInstance, updatePayload, type2, oldProps, newProps, workInProgress2, childrenUnchanged, recyclableInstance);
            if (finalizeInitialChildren(newInstance, type2, newProps, rootContainerInstance, currentHostContext)) {
              markUpdate(workInProgress2);
            }
            workInProgress2.stateNode = newInstance;
            if (childrenUnchanged) {
              markUpdate(workInProgress2);
            } else {
              appendAllChildren(newInstance, workInProgress2, false, false);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();
              workInProgress2.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress2);
              markUpdate(workInProgress2);
            } else {
              workInProgress2.stateNode = current2.stateNode;
            }
          };
        } else {
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type2, newProps, rootContainerInstance) {
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment6:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type2 = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type2, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type2, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type2, newProps, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row2 = workInProgress2.child;
                    while (row2 !== null) {
                      var suspended = findFirstSuspended(row2);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row2 = row2.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  if (supportsMutation) {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function invokeGuardedCallbackProd(name, func2, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func2.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func2, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func2.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func2, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root, firstChild) {
          focusedInstanceHandle = prepareForCommit(root.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                if (supportsMutation) {
                  var root = finishedWork.stateNode;
                  clearContainer(root.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create2 = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create2();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root = parentFiber.stateNode;
                          root.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type2 = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type2, props, finishedWork);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden2) {
          var hostSubtreeRoot = null;
          if (supportsMutation) {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden2) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden2) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function emptyPortalContainer(current2) {
          if (!supportsPersistence) {
            return;
          }
          var portal = current2.stateNode;
          var containerInfo = portal.containerInfo;
          var emptyChildSet = createContainerChildSet(containerInfo);
          replaceContainerChildren(containerInfo, emptyChildSet);
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          if (!supportsMutation) {
            return;
          }
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root, returnFiber, deletedFiber) {
          if (supportsMutation) {
            var parent = returnFiber;
            findParent:
              while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          } else {
            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              if (supportsMutation) {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              return;
            }
            case DehydratedFragment: {
              if (supportsMutation) {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              if (supportsMutation) {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              } else {
                emptyPortalContainer(deletedFiber);
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          if (!supportsHydration) {
            return;
          }
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i2 = 0; i2 < deletions.length; i2++) {
              var childToDelete = deletions[i2];
              try {
                commitDeletionEffects(root, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              if (supportsMutation) {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type2 = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type2, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                if (supportsMutation) {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                if (supportsMutation && supportsHydration) {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
                if (supportsPersistence) {
                  var containerInfo = root.containerInfo;
                  var pendingChildren = root.pendingChildren;
                  try {
                    replaceContainerChildren(containerInfo, pendingChildren);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                if (supportsPersistence) {
                  var portal = finishedWork.stateNode;
                  var _containerInfo = portal.containerInfo;
                  var _pendingChildren = portal.pendingChildren;
                  try {
                    replaceContainerChildren(_containerInfo, _pendingChildren);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden2 = newState !== null;
                offscreenInstance.isHidden = isHidden2;
                if (isHidden2) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                if (supportsMutation) {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden2 = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    root,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden2 = fiber.memoizedState !== null;
              if (isHidden2) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i2 = 0; i2 < deletions.length; i2++) {
                  var fiberToDelete = deletions[i2];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        function createComponentSelector(component) {
          return {
            $$typeof: COMPONENT_TYPE,
            value: component
          };
        }
        function createHasPseudoClassSelector(selectors) {
          return {
            $$typeof: HAS_PSEUDO_CLASS_TYPE,
            value: selectors
          };
        }
        function createRoleSelector(role) {
          return {
            $$typeof: ROLE_TYPE,
            value: role
          };
        }
        function createTextSelector(text) {
          return {
            $$typeof: TEXT_TYPE,
            value: text
          };
        }
        function createTestNameSelector(id) {
          return {
            $$typeof: TEST_NAME_TYPE,
            value: id
          };
        }
        function findFiberRootForHostRoot(hostRoot) {
          var maybeFiber = getInstanceFromNode(hostRoot);
          if (maybeFiber != null) {
            if (typeof maybeFiber.memoizedProps["data-testname"] !== "string") {
              throw new Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");
            }
            return maybeFiber;
          } else {
            var fiberRoot = findFiberRoot(hostRoot);
            if (fiberRoot === null) {
              throw new Error("Could not find React container within specified host subtree.");
            }
            return fiberRoot.stateNode.current;
          }
        }
        function matchSelector(fiber, selector) {
          switch (selector.$$typeof) {
            case COMPONENT_TYPE:
              if (fiber.type === selector.value) {
                return true;
              }
              break;
            case HAS_PSEUDO_CLASS_TYPE:
              return hasMatchingPaths(fiber, selector.value);
            case ROLE_TYPE:
              if (fiber.tag === HostComponent) {
                var node = fiber.stateNode;
                if (matchAccessibilityRole(node, selector.value)) {
                  return true;
                }
              }
              break;
            case TEXT_TYPE:
              if (fiber.tag === HostComponent || fiber.tag === HostText) {
                var textContent = getTextContent(fiber);
                if (textContent !== null && textContent.indexOf(selector.value) >= 0) {
                  return true;
                }
              }
              break;
            case TEST_NAME_TYPE:
              if (fiber.tag === HostComponent) {
                var dataTestID = fiber.memoizedProps["data-testname"];
                if (typeof dataTestID === "string" && dataTestID.toLowerCase() === selector.value.toLowerCase()) {
                  return true;
                }
              }
              break;
            default:
              throw new Error("Invalid selector type specified.");
          }
          return false;
        }
        function selectorToString(selector) {
          switch (selector.$$typeof) {
            case COMPONENT_TYPE:
              var displayName = getComponentNameFromType(selector.value) || "Unknown";
              return "<" + displayName + ">";
            case HAS_PSEUDO_CLASS_TYPE:
              return ":has(" + (selectorToString(selector) || "") + ")";
            case ROLE_TYPE:
              return '[role="' + selector.value + '"]';
            case TEXT_TYPE:
              return '"' + selector.value + '"';
            case TEST_NAME_TYPE:
              return '[data-testname="' + selector.value + '"]';
            default:
              throw new Error("Invalid selector type specified.");
          }
        }
        function findPaths(root, selectors) {
          var matchingFibers = [];
          var stack = [root, 0];
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            var selectorIndex = stack[index2++];
            var selector = selectors[selectorIndex];
            if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
              continue;
            } else {
              while (selector != null && matchSelector(fiber, selector)) {
                selectorIndex++;
                selector = selectors[selectorIndex];
              }
            }
            if (selectorIndex === selectors.length) {
              matchingFibers.push(fiber);
            } else {
              var child = fiber.child;
              while (child !== null) {
                stack.push(child, selectorIndex);
                child = child.sibling;
              }
            }
          }
          return matchingFibers;
        }
        function hasMatchingPaths(root, selectors) {
          var stack = [root, 0];
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            var selectorIndex = stack[index2++];
            var selector = selectors[selectorIndex];
            if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
              continue;
            } else {
              while (selector != null && matchSelector(fiber, selector)) {
                selectorIndex++;
                selector = selectors[selectorIndex];
              }
            }
            if (selectorIndex === selectors.length) {
              return true;
            } else {
              var child = fiber.child;
              while (child !== null) {
                stack.push(child, selectorIndex);
                child = child.sibling;
              }
            }
          }
          return false;
        }
        function findAllNodes(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            throw new Error("Test selector API is not supported by this renderer.");
          }
          var root = findFiberRootForHostRoot(hostRoot);
          var matchingFibers = findPaths(root, selectors);
          var instanceRoots = [];
          var stack = Array.from(matchingFibers);
          var index2 = 0;
          while (index2 < stack.length) {
            var node = stack[index2++];
            if (node.tag === HostComponent) {
              if (isHiddenSubtree(node)) {
                continue;
              }
              instanceRoots.push(node.stateNode);
            } else {
              var child = node.child;
              while (child !== null) {
                stack.push(child);
                child = child.sibling;
              }
            }
          }
          return instanceRoots;
        }
        function getFindAllNodesFailureDescription(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            throw new Error("Test selector API is not supported by this renderer.");
          }
          var root = findFiberRootForHostRoot(hostRoot);
          var maxSelectorIndex = 0;
          var matchedNames = [];
          var stack = [root, 0];
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            var selectorIndex = stack[index2++];
            var selector = selectors[selectorIndex];
            if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
              continue;
            } else if (matchSelector(fiber, selector)) {
              matchedNames.push(selectorToString(selector));
              selectorIndex++;
              if (selectorIndex > maxSelectorIndex) {
                maxSelectorIndex = selectorIndex;
              }
            }
            if (selectorIndex < selectors.length) {
              var child = fiber.child;
              while (child !== null) {
                stack.push(child, selectorIndex);
                child = child.sibling;
              }
            }
          }
          if (maxSelectorIndex < selectors.length) {
            var unmatchedNames = [];
            for (var i2 = maxSelectorIndex; i2 < selectors.length; i2++) {
              unmatchedNames.push(selectorToString(selectors[i2]));
            }
            return "findAllNodes was able to match part of the selector:\n" + ("  " + matchedNames.join(" > ") + "\n\n") + "No matching component was found for:\n" + ("  " + unmatchedNames.join(" > "));
          }
          return null;
        }
        function findBoundingRects(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            throw new Error("Test selector API is not supported by this renderer.");
          }
          var instanceRoots = findAllNodes(hostRoot, selectors);
          var boundingRects = [];
          for (var i2 = 0; i2 < instanceRoots.length; i2++) {
            boundingRects.push(getBoundingRect(instanceRoots[i2]));
          }
          for (var _i = boundingRects.length - 1; _i > 0; _i--) {
            var targetRect = boundingRects[_i];
            var targetLeft = targetRect.x;
            var targetRight = targetLeft + targetRect.width;
            var targetTop = targetRect.y;
            var targetBottom = targetTop + targetRect.height;
            for (var j = _i - 1; j >= 0; j--) {
              if (_i !== j) {
                var otherRect = boundingRects[j];
                var otherLeft = otherRect.x;
                var otherRight = otherLeft + otherRect.width;
                var otherTop = otherRect.y;
                var otherBottom = otherTop + otherRect.height;
                if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {
                  boundingRects.splice(_i, 1);
                  break;
                } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {
                  if (otherTop > targetTop) {
                    otherRect.height += otherTop - targetTop;
                    otherRect.y = targetTop;
                  }
                  if (otherBottom < targetBottom) {
                    otherRect.height = targetBottom - otherTop;
                  }
                  boundingRects.splice(_i, 1);
                  break;
                } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {
                  if (otherLeft > targetLeft) {
                    otherRect.width += otherLeft - targetLeft;
                    otherRect.x = targetLeft;
                  }
                  if (otherRight < targetRight) {
                    otherRect.width = targetRight - otherLeft;
                  }
                  boundingRects.splice(_i, 1);
                  break;
                }
              }
            }
          }
          return boundingRects;
        }
        function focusWithin(hostRoot, selectors) {
          if (!supportsTestSelectors) {
            throw new Error("Test selector API is not supported by this renderer.");
          }
          var root = findFiberRootForHostRoot(hostRoot);
          var matchingFibers = findPaths(root, selectors);
          var stack = Array.from(matchingFibers);
          var index2 = 0;
          while (index2 < stack.length) {
            var fiber = stack[index2++];
            if (isHiddenSubtree(fiber)) {
              continue;
            }
            if (fiber.tag === HostComponent) {
              var node = fiber.stateNode;
              if (setFocusIfFocusable(node)) {
                return true;
              }
            }
            var child = fiber.child;
            while (child !== null) {
              stack.push(child);
              child = child.sibling;
            }
          }
          return false;
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          if (supportsTestSelectors) {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        function observeVisibleRects(hostRoot, selectors, callback, options) {
          if (!supportsTestSelectors) {
            throw new Error("Test selector API is not supported by this renderer.");
          }
          var instanceRoots = findAllNodes(hostRoot, selectors);
          var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options), disconnect = _setupIntersectionObs.disconnect, observe = _setupIntersectionObs.observe, unobserve = _setupIntersectionObs.unobserve;
          var commitHook = function() {
            var nextInstanceRoots = findAllNodes(hostRoot, selectors);
            instanceRoots.forEach(function(target) {
              if (nextInstanceRoots.indexOf(target) < 0) {
                unobserve(target);
              }
            });
            nextInstanceRoots.forEach(function(target) {
              if (instanceRoots.indexOf(target) < 0) {
                observe(target);
              }
            });
          };
          commitHooks.push(commitHook);
          return {
            disconnect: function() {
              var index2 = commitHooks.indexOf(commitHook);
              if (index2 >= 0) {
                commitHooks.splice(index2, 1);
              }
              disconnect();
            }
          };
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$2.transition !== null) {
              var transition = ReactCurrentBatchConfig$2.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
          var current2 = root.current;
          current2.lanes = lane;
          markRootUpdated(root, lane, eventTime);
          ensureRootIsScheduled(root, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (executionContext & RenderContext) !== NoContext;
        }
        function ensureRootIsScheduled(root, currentTime) {
          var existingCallbackNode = root.callbackNode;
          markStarvedLanesAsExpired(root, currentTime);
          var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            }
            if (supportsMicrotasks) {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            } else {
              scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority2:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
          }
          root.callbackPriority = newCallbackPriority;
          root.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root, NoLanes);
              markRootSuspended$1(root, lanes);
              ensureRootIsScheduled(root, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root, lanes);
              var finishedWork = root.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root, NoLanes);
                  markRootSuspended$1(root, lanes);
                  ensureRootIsScheduled(root, now());
                  throw _fatalError;
                }
              }
              root.finishedWork = finishedWork;
              root.finishedLanes = lanes;
              finishConcurrentRender(root, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root, now());
          if (root.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root);
          }
          return null;
        }
        function recoverFromConcurrentError(root, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root)) {
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root, suspendedLanes);
                    break;
                  }
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i2 = 0; i2 < checks.length; i2++) {
                    var check = checks[i2];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root, suspendedLanes);
        }
        function performSyncWorkOnRoot(root) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root, now());
            return null;
          }
          var exitStatus = renderRootSync(root, lanes);
          if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root.current.alternate;
          root.finishedWork = finishedWork;
          root.finishedLanes = lanes;
          commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root, now());
          return null;
        }
        function flushRoot(root, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function deferredUpdates(fn) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          try {
            ReactCurrentBatchConfig$2.transition = null;
            setCurrentUpdatePriority(DefaultEventPriority2);
            return fn();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
          }
        }
        function batchedUpdates(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          try {
            ReactCurrentBatchConfig$2.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$2.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function flushControlled(fn) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$2.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            fn();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root, lanes) {
          root.finishedWork = null;
          root.finishedLanes = NoLanes;
          var timeoutHandle = root.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root;
          var rootWorkInProgress = createWorkInProgress(root.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          try {
            ReactCurrentBatchConfig$2.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$2.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root.finishedWork;
          var lanes = root.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root.finishedWork = null;
          root.finishedLanes = NoLanes;
          if (finishedWork === root.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root.callbackNode = null;
          root.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root, remainingLanes);
          if (root === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo);
            root.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
          } else {
            root.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root.onRecoverableError;
            for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
              var recoverableError = recoverableErrors[i2];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority2, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$2.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root.current);
          commitPassiveMountEffects(root, root.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i2 = 0; i2 < profilerEffects.length; i2++) {
              var _fiber = profilerEffects[i2];
              commitPassiveEffectDurations(root, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root);
          {
            var stateNode = root.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root !== null) {
                  markRootUpdated(root, SyncLane, eventTime);
                  ensureRootIsScheduled(root, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root, wakeable, pingedLanes) {
          var pingCache = root.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root);
          if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
          {
            if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type2) {
          {
            if (resolveFamily === null) {
              return type2;
            }
            var family = resolveFamily(type2);
            if (family === void 0) {
              return type2;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type2) {
          return resolveFunctionForHotReloading(type2);
        }
        function resolveForwardRefForHotReloading(type2) {
          {
            if (resolveFamily === null) {
              return type2;
            }
            var family = resolveFamily(type2);
            if (family === void 0) {
              if (type2 !== null && type2 !== void 0 && typeof type2.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type2.render);
                if (type2.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type2.displayName !== void 0) {
                    syntheticType.displayName = type2.displayName;
                  }
                  return syntheticType;
                }
              }
              return type2;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root, element) {
          {
            if (root.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type2;
                break;
              case ForwardRef:
                candidateType = type2.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type2 = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type2;
                break;
              case ForwardRef:
                candidateType = type2.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key2, mode) {
          this.tag = tag;
          this.key = key2;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key2, mode) {
          return new FiberNode(tag, pendingProps, key2, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type2) {
          return typeof type2 === "function" && !shouldConstruct$1(type2) && type2.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type2, key2, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type2;
          if (typeof type2 === "function") {
            if (shouldConstruct$1(type2)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type2 === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type2) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key2);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key2);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key2);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key2);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key2);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type2 === "object" && type2 !== null) {
                    switch (type2.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type2 == null ? type2 : typeof type2) + "." + info));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key2, mode);
          fiber.elementType = type2;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type2 = element.type;
          var key2 = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type2, key2, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key2) {
          var fiber = createFiber(Fragment6, elements, key2, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key2) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key2, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key2, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key2, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key2) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key2, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          if (supportsHydration) {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root.current = uninitializedFiber;
          uninitializedFiber.stateNode = root;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root;
        }
        var ReactVersion = "18.2.0";
        function createPortal(children, containerInfo, implementation) {
          var key2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key2);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key2 == null ? null : "" + key2,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstance(component) {
          var fiber = get(component);
          if (fiber === void 0) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate = true;
          var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root.context = getContextForSubtree(null);
          var current2 = root.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root, lane, eventTime);
          return root;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root = enqueueUpdate(current$1, update, lane);
          if (root !== null) {
            scheduleUpdateOnFiber(root, current$1, lane, eventTime);
            entangleTransitions(root, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root = fiber.stateNode;
              if (isRootDehydrated(root)) {
                var lanes = getHighestPriorityPendingLanes(root);
                flushRoot(root, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptDiscreteHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SyncLane;
          var root = enqueueConcurrentRenderForLane(fiber, lane);
          if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root = enqueueConcurrentRenderForLane(fiber, lane);
          if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root = enqueueConcurrentRenderForLane(fiber, lane);
          if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path2, index2) {
            var key2 = path2[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path2.length) {
              if (isArray(updated)) {
                updated.splice(key2, 1);
              } else {
                delete updated[key2];
              }
              return updated;
            }
            updated[key2] = copyWithDeleteImpl(obj[key2], path2, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path2) {
            return copyWithDeleteImpl(obj, path2, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                if (oldPath[i2] !== newPath[i2]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path2, index2, value) {
            if (index2 >= path2.length) {
              return value;
            }
            var key2 = path2[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key2] = copyWithSetImpl(obj[key2], path2, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path2, value) {
            return copyWithSetImpl(obj, path2, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path2, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path2, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path2) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path2);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path2, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path2) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) {
              scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        exports3.attemptContinuousHydration = attemptContinuousHydration;
        exports3.attemptDiscreteHydration = attemptDiscreteHydration;
        exports3.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;
        exports3.attemptSynchronousHydration = attemptSynchronousHydration;
        exports3.batchedUpdates = batchedUpdates;
        exports3.createComponentSelector = createComponentSelector;
        exports3.createContainer = createContainer;
        exports3.createHasPseudoClassSelector = createHasPseudoClassSelector;
        exports3.createHydrationContainer = createHydrationContainer;
        exports3.createPortal = createPortal;
        exports3.createRoleSelector = createRoleSelector;
        exports3.createTestNameSelector = createTestNameSelector;
        exports3.createTextSelector = createTextSelector;
        exports3.deferredUpdates = deferredUpdates;
        exports3.discreteUpdates = discreteUpdates;
        exports3.findAllNodes = findAllNodes;
        exports3.findBoundingRects = findBoundingRects;
        exports3.findHostInstance = findHostInstance;
        exports3.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;
        exports3.findHostInstanceWithWarning = findHostInstanceWithWarning;
        exports3.flushControlled = flushControlled;
        exports3.flushPassiveEffects = flushPassiveEffects;
        exports3.flushSync = flushSync;
        exports3.focusWithin = focusWithin;
        exports3.getCurrentUpdatePriority = getCurrentUpdatePriority;
        exports3.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;
        exports3.getPublicRootInstance = getPublicRootInstance;
        exports3.injectIntoDevTools = injectIntoDevTools;
        exports3.isAlreadyRendering = isAlreadyRendering;
        exports3.observeVisibleRects = observeVisibleRects;
        exports3.registerMutableSourceForHydration = registerMutableSourceForHydration;
        exports3.runWithPriority = runWithPriority;
        exports3.shouldError = shouldError;
        exports3.shouldSuspend = shouldSuspend;
        exports3.updateContainer = updateContainer;
        return exports3;
      };
    }
  }
});

// ../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/index.js
var require_react_reconciler = __commonJS({
  "../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_reconciler_production_min();
    } else {
      module2.exports = require_react_reconciler_development();
    }
  }
});

// ../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler-constants.production.min.js
var require_react_reconciler_constants_production_min = __commonJS({
  "../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler-constants.production.min.js"(exports2) {
    "use strict";
    exports2.ConcurrentRoot = 1;
    exports2.ContinuousEventPriority = 4;
    exports2.DefaultEventPriority = 16;
    exports2.DiscreteEventPriority = 1;
    exports2.IdleEventPriority = 536870912;
    exports2.LegacyRoot = 0;
  }
});

// ../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js
var require_react_reconciler_constants_development = __commonJS({
  "../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/cjs/react-reconciler-constants.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var SyncLane = 1;
        var InputContinuousLane = 4;
        var DefaultLane = 16;
        var IdleLane = 536870912;
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority2 = DefaultLane;
        var IdleEventPriority = IdleLane;
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        exports2.ConcurrentRoot = ConcurrentRoot;
        exports2.ContinuousEventPriority = ContinuousEventPriority;
        exports2.DefaultEventPriority = DefaultEventPriority2;
        exports2.DiscreteEventPriority = DiscreteEventPriority;
        exports2.IdleEventPriority = IdleEventPriority;
        exports2.LegacyRoot = LegacyRoot;
      })();
    }
  }
});

// ../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/constants.js
var require_constants = __commonJS({
  "../../node_modules/.store/react-reconciler-virtual-8c0d7dac01/node_modules/react-reconciler/constants.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_reconciler_constants_production_min();
    } else {
      module2.exports = require_react_reconciler_constants_development();
    }
  }
});

// ../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/dist/YGEnums.js
var require_YGEnums = __commonJS({
  "../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/dist/YGEnums.js"(exports2, module2) {
    "use strict";
    var CONSTANTS = {
      ALIGN_COUNT: 8,
      ALIGN_AUTO: 0,
      ALIGN_FLEX_START: 1,
      ALIGN_CENTER: 2,
      ALIGN_FLEX_END: 3,
      ALIGN_STRETCH: 4,
      ALIGN_BASELINE: 5,
      ALIGN_SPACE_BETWEEN: 6,
      ALIGN_SPACE_AROUND: 7,
      DIMENSION_COUNT: 2,
      DIMENSION_WIDTH: 0,
      DIMENSION_HEIGHT: 1,
      DIRECTION_COUNT: 3,
      DIRECTION_INHERIT: 0,
      DIRECTION_LTR: 1,
      DIRECTION_RTL: 2,
      DISPLAY_COUNT: 2,
      DISPLAY_FLEX: 0,
      DISPLAY_NONE: 1,
      EDGE_COUNT: 9,
      EDGE_LEFT: 0,
      EDGE_TOP: 1,
      EDGE_RIGHT: 2,
      EDGE_BOTTOM: 3,
      EDGE_START: 4,
      EDGE_END: 5,
      EDGE_HORIZONTAL: 6,
      EDGE_VERTICAL: 7,
      EDGE_ALL: 8,
      EXPERIMENTAL_FEATURE_COUNT: 1,
      EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS: 0,
      FLEX_DIRECTION_COUNT: 4,
      FLEX_DIRECTION_COLUMN: 0,
      FLEX_DIRECTION_COLUMN_REVERSE: 1,
      FLEX_DIRECTION_ROW: 2,
      FLEX_DIRECTION_ROW_REVERSE: 3,
      JUSTIFY_COUNT: 6,
      JUSTIFY_FLEX_START: 0,
      JUSTIFY_CENTER: 1,
      JUSTIFY_FLEX_END: 2,
      JUSTIFY_SPACE_BETWEEN: 3,
      JUSTIFY_SPACE_AROUND: 4,
      JUSTIFY_SPACE_EVENLY: 5,
      LOG_LEVEL_COUNT: 6,
      LOG_LEVEL_ERROR: 0,
      LOG_LEVEL_WARN: 1,
      LOG_LEVEL_INFO: 2,
      LOG_LEVEL_DEBUG: 3,
      LOG_LEVEL_VERBOSE: 4,
      LOG_LEVEL_FATAL: 5,
      MEASURE_MODE_COUNT: 3,
      MEASURE_MODE_UNDEFINED: 0,
      MEASURE_MODE_EXACTLY: 1,
      MEASURE_MODE_AT_MOST: 2,
      NODE_TYPE_COUNT: 2,
      NODE_TYPE_DEFAULT: 0,
      NODE_TYPE_TEXT: 1,
      OVERFLOW_COUNT: 3,
      OVERFLOW_VISIBLE: 0,
      OVERFLOW_HIDDEN: 1,
      OVERFLOW_SCROLL: 2,
      POSITION_TYPE_COUNT: 2,
      POSITION_TYPE_RELATIVE: 0,
      POSITION_TYPE_ABSOLUTE: 1,
      PRINT_OPTIONS_COUNT: 3,
      PRINT_OPTIONS_LAYOUT: 1,
      PRINT_OPTIONS_STYLE: 2,
      PRINT_OPTIONS_CHILDREN: 4,
      UNIT_COUNT: 4,
      UNIT_UNDEFINED: 0,
      UNIT_POINT: 1,
      UNIT_PERCENT: 2,
      UNIT_AUTO: 3,
      WRAP_COUNT: 3,
      WRAP_NO_WRAP: 0,
      WRAP_WRAP: 1,
      WRAP_WRAP_REVERSE: 2
    };
    module2.exports = CONSTANTS;
  }
});

// ../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-common.js
var require_entry_common = __commonJS({
  "../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-common.js"(exports2, module2) {
    "use strict";
    var _extends = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key2 in source) {
          if (Object.prototype.hasOwnProperty.call(source, key2)) {
            target[key2] = source[key2];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i2 = 0; i2 < props.length; i2++) {
          var descriptor = props[i2];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    function _defineProperty(obj, key2, value) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var CONSTANTS = require_YGEnums();
    var Layout = function() {
      function Layout2(left, right, top, bottom, width, height) {
        _classCallCheck(this, Layout2);
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.width = width;
        this.height = height;
      }
      _createClass(Layout2, [{
        key: "fromJS",
        value: function fromJS(expose) {
          expose(this.left, this.right, this.top, this.bottom, this.width, this.height);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "<Layout#" + this.left + ":" + this.right + ";" + this.top + ":" + this.bottom + ";" + this.width + ":" + this.height + ">";
        }
      }]);
      return Layout2;
    }();
    var Size = function() {
      _createClass(Size2, null, [{
        key: "fromJS",
        value: function fromJS(_ref) {
          var width = _ref.width, height = _ref.height;
          return new Size2(width, height);
        }
      }]);
      function Size2(width, height) {
        _classCallCheck(this, Size2);
        this.width = width;
        this.height = height;
      }
      _createClass(Size2, [{
        key: "fromJS",
        value: function fromJS(expose) {
          expose(this.width, this.height);
        }
      }, {
        key: "toString",
        value: function toString() {
          return "<Size#" + this.width + "x" + this.height + ">";
        }
      }]);
      return Size2;
    }();
    var Value = function() {
      function Value2(unit, value) {
        _classCallCheck(this, Value2);
        this.unit = unit;
        this.value = value;
      }
      _createClass(Value2, [{
        key: "fromJS",
        value: function fromJS(expose) {
          expose(this.unit, this.value);
        }
      }, {
        key: "toString",
        value: function toString() {
          switch (this.unit) {
            case CONSTANTS.UNIT_POINT:
              return String(this.value);
            case CONSTANTS.UNIT_PERCENT:
              return this.value + "%";
            case CONSTANTS.UNIT_AUTO:
              return "auto";
            default: {
              return this.value + "?";
            }
          }
        }
      }, {
        key: "valueOf",
        value: function valueOf() {
          return this.value;
        }
      }]);
      return Value2;
    }();
    module2.exports = function(bind, lib) {
      function patch(prototype, name, fn) {
        var original = prototype[name];
        prototype[name] = function() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return fn.call.apply(fn, [this, original].concat(args));
        };
      }
      var _arr = ["setPosition", "setMargin", "setFlexBasis", "setWidth", "setHeight", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setPadding"];
      var _loop = function _loop2() {
        var _methods;
        var fnName = _arr[_i];
        var methods = (_methods = {}, _defineProperty(_methods, CONSTANTS.UNIT_POINT, lib.Node.prototype[fnName]), _defineProperty(_methods, CONSTANTS.UNIT_PERCENT, lib.Node.prototype[fnName + "Percent"]), _defineProperty(_methods, CONSTANTS.UNIT_AUTO, lib.Node.prototype[fnName + "Auto"]), _methods);
        patch(lib.Node.prototype, fnName, function(original) {
          for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          var value = args.pop();
          var unit = void 0, asNumber = void 0;
          if (value === "auto") {
            unit = CONSTANTS.UNIT_AUTO;
            asNumber = void 0;
          } else if (value instanceof Value) {
            unit = value.unit;
            asNumber = value.valueOf();
          } else {
            unit = typeof value === "string" && value.endsWith("%") ? CONSTANTS.UNIT_PERCENT : CONSTANTS.UNIT_POINT;
            asNumber = parseFloat(value);
            if (!Number.isNaN(value) && Number.isNaN(asNumber)) {
              throw new Error("Invalid value " + value + " for " + fnName);
            }
          }
          if (!methods[unit])
            throw new Error('Failed to execute "' + fnName + `": Unsupported unit '` + value + "'");
          if (asNumber !== void 0) {
            var _methods$unit;
            return (_methods$unit = methods[unit]).call.apply(_methods$unit, [this].concat(args, [asNumber]));
          } else {
            var _methods$unit2;
            return (_methods$unit2 = methods[unit]).call.apply(_methods$unit2, [this].concat(args));
          }
        });
      };
      for (var _i = 0; _i < _arr.length; _i++) {
        _loop();
      }
      patch(lib.Config.prototype, "free", function() {
        lib.Config.destroy(this);
      });
      patch(lib.Node, "create", function(_, config) {
        return config ? lib.Node.createWithConfig(config) : lib.Node.createDefault();
      });
      patch(lib.Node.prototype, "free", function() {
        lib.Node.destroy(this);
      });
      patch(lib.Node.prototype, "freeRecursive", function() {
        for (var t = 0, T = this.getChildCount(); t < T; ++t) {
          this.getChild(0).freeRecursive();
        }
        this.free();
      });
      patch(lib.Node.prototype, "setMeasureFunc", function(original, measureFunc) {
        if (measureFunc) {
          return original.call(this, function() {
            return Size.fromJS(measureFunc.apply(void 0, arguments));
          });
        } else {
          return this.unsetMeasureFunc();
        }
      });
      patch(lib.Node.prototype, "calculateLayout", function(original) {
        var width = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : NaN;
        var height = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : NaN;
        var direction = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : CONSTANTS.DIRECTION_LTR;
        return original.call(this, width, height, direction);
      });
      return _extends({
        Config: lib.Config,
        Node: lib.Node,
        Layout: bind("Layout", Layout),
        Size: bind("Size", Size),
        Value: bind("Value", Value),
        getInstanceCount: function getInstanceCount() {
          return lib.getInstanceCount.apply(lib, arguments);
        }
      }, CONSTANTS);
    };
  }
});

// ../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js
var require_nbind = __commonJS({
  "../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/build/Release/nbind.js"(exports, module) {
    (function(root, wrapper) {
      if (typeof define == "function" && define.amd)
        define([], function() {
          return wrapper;
        });
      else if (typeof module == "object" && module.exports)
        module.exports = wrapper;
      else
        (root.nbind = root.nbind || {}).init = wrapper;
    })(exports, function(Module, cb) {
      if (typeof Module == "function") {
        cb = Module;
        Module = {};
      }
      Module.onRuntimeInitialized = function(init, cb2) {
        return function() {
          if (init)
            init.apply(this, arguments);
          try {
            Module.ccall("nbind_init");
          } catch (err2) {
            cb2(err2);
            return;
          }
          cb2(null, { bind: Module._nbind_value, reflect: Module.NBind.reflect, queryType: Module.NBind.queryType, toggleLightGC: Module.toggleLightGC, lib: Module });
        };
      }(Module.onRuntimeInitialized, cb);
      var Module;
      if (!Module)
        Module = (typeof Module !== "undefined" ? Module : null) || {};
      var moduleOverrides = {};
      for (var key in Module) {
        if (Module.hasOwnProperty(key)) {
          moduleOverrides[key] = Module[key];
        }
      }
      var ENVIRONMENT_IS_WEB = false;
      var ENVIRONMENT_IS_WORKER = false;
      var ENVIRONMENT_IS_NODE = false;
      var ENVIRONMENT_IS_SHELL = false;
      if (Module["ENVIRONMENT"]) {
        if (Module["ENVIRONMENT"] === "WEB") {
          ENVIRONMENT_IS_WEB = true;
        } else if (Module["ENVIRONMENT"] === "WORKER") {
          ENVIRONMENT_IS_WORKER = true;
        } else if (Module["ENVIRONMENT"] === "NODE") {
          ENVIRONMENT_IS_NODE = true;
        } else if (Module["ENVIRONMENT"] === "SHELL") {
          ENVIRONMENT_IS_SHELL = true;
        } else {
          throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.");
        }
      } else {
        ENVIRONMENT_IS_WEB = typeof window === "object";
        ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        ENVIRONMENT_IS_NODE = typeof process === "object" && typeof __require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
        ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
      }
      if (ENVIRONMENT_IS_NODE) {
        if (!Module["print"])
          Module["print"] = console.log;
        if (!Module["printErr"])
          Module["printErr"] = console.warn;
        var nodeFS;
        var nodePath;
        Module["read"] = function shell_read(filename, binary) {
          if (!nodeFS)
            nodeFS = {}("");
          if (!nodePath)
            nodePath = {}("");
          filename = nodePath["normalize"](filename);
          var ret = nodeFS["readFileSync"](filename);
          return binary ? ret : ret.toString();
        };
        Module["readBinary"] = function readBinary(filename) {
          var ret = Module["read"](filename, true);
          if (!ret.buffer) {
            ret = new Uint8Array(ret);
          }
          assert(ret.buffer);
          return ret;
        };
        Module["load"] = function load(f) {
          globalEval(read(f));
        };
        if (!Module["thisProgram"]) {
          if (process["argv"].length > 1) {
            Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
          } else {
            Module["thisProgram"] = "unknown-program";
          }
        }
        Module["arguments"] = process["argv"].slice(2);
        if (typeof module !== "undefined") {
          module["exports"] = Module;
        }
        process["on"]("uncaughtException", function(ex) {
          if (!(ex instanceof ExitStatus)) {
            throw ex;
          }
        });
        Module["inspect"] = function() {
          return "[Emscripten Module object]";
        };
      } else if (ENVIRONMENT_IS_SHELL) {
        if (!Module["print"])
          Module["print"] = print;
        if (typeof printErr != "undefined")
          Module["printErr"] = printErr;
        if (typeof read != "undefined") {
          Module["read"] = read;
        } else {
          Module["read"] = function shell_read() {
            throw "no read() available";
          };
        }
        Module["readBinary"] = function readBinary(f) {
          if (typeof readbuffer === "function") {
            return new Uint8Array(readbuffer(f));
          }
          var data = read(f, "binary");
          assert(typeof data === "object");
          return data;
        };
        if (typeof scriptArgs != "undefined") {
          Module["arguments"] = scriptArgs;
        } else if (typeof arguments != "undefined") {
          Module["arguments"] = arguments;
        }
        if (typeof quit === "function") {
          Module["quit"] = function(status, toThrow) {
            quit(status);
          };
        }
      } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
        Module["read"] = function shell_read(url) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.send(null);
          return xhr.responseText;
        };
        if (ENVIRONMENT_IS_WORKER) {
          Module["readBinary"] = function readBinary(url) {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response);
          };
        }
        Module["readAsync"] = function readAsync(url, onload, onerror) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
              onload(xhr.response);
            } else {
              onerror();
            }
          };
          xhr.onerror = onerror;
          xhr.send(null);
        };
        if (typeof arguments != "undefined") {
          Module["arguments"] = arguments;
        }
        if (typeof console !== "undefined") {
          if (!Module["print"])
            Module["print"] = function shell_print(x) {
              console.log(x);
            };
          if (!Module["printErr"])
            Module["printErr"] = function shell_printErr(x) {
              console.warn(x);
            };
        } else {
          var TRY_USE_DUMP = false;
          if (!Module["print"])
            Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? function(x) {
              dump(x);
            } : function(x) {
            };
        }
        if (ENVIRONMENT_IS_WORKER) {
          Module["load"] = importScripts;
        }
        if (typeof Module["setWindowTitle"] === "undefined") {
          Module["setWindowTitle"] = function(title) {
            document.title = title;
          };
        }
      } else {
        throw "Unknown runtime environment. Where are we?";
      }
      function globalEval(x) {
        eval.call(null, x);
      }
      if (!Module["load"] && Module["read"]) {
        Module["load"] = function load(f) {
          globalEval(Module["read"](f));
        };
      }
      if (!Module["print"]) {
        Module["print"] = function() {
        };
      }
      if (!Module["printErr"]) {
        Module["printErr"] = Module["print"];
      }
      if (!Module["arguments"]) {
        Module["arguments"] = [];
      }
      if (!Module["thisProgram"]) {
        Module["thisProgram"] = "./this.program";
      }
      if (!Module["quit"]) {
        Module["quit"] = function(status, toThrow) {
          throw toThrow;
        };
      }
      Module.print = Module["print"];
      Module.printErr = Module["printErr"];
      Module["preRun"] = [];
      Module["postRun"] = [];
      for (var key in moduleOverrides) {
        if (moduleOverrides.hasOwnProperty(key)) {
          Module[key] = moduleOverrides[key];
        }
      }
      moduleOverrides = void 0;
      var Runtime = { setTempRet0: function(value) {
        tempRet0 = value;
        return value;
      }, getTempRet0: function() {
        return tempRet0;
      }, stackSave: function() {
        return STACKTOP;
      }, stackRestore: function(stackTop) {
        STACKTOP = stackTop;
      }, getNativeTypeSize: function(type2) {
        switch (type2) {
          case "i1":
          case "i8":
            return 1;
          case "i16":
            return 2;
          case "i32":
            return 4;
          case "i64":
            return 8;
          case "float":
            return 4;
          case "double":
            return 8;
          default: {
            if (type2[type2.length - 1] === "*") {
              return Runtime.QUANTUM_SIZE;
            } else if (type2[0] === "i") {
              var bits = parseInt(type2.substr(1));
              assert(bits % 8 === 0);
              return bits / 8;
            } else {
              return 0;
            }
          }
        }
      }, getNativeFieldSize: function(type2) {
        return Math.max(Runtime.getNativeTypeSize(type2), Runtime.QUANTUM_SIZE);
      }, STACK_ALIGN: 16, prepVararg: function(ptr2, type2) {
        if (type2 === "double" || type2 === "i64") {
          if (ptr2 & 7) {
            assert((ptr2 & 7) === 4);
            ptr2 += 4;
          }
        } else {
          assert((ptr2 & 3) === 0);
        }
        return ptr2;
      }, getAlignSize: function(type2, size, vararg) {
        if (!vararg && (type2 == "i64" || type2 == "double"))
          return 8;
        if (!type2)
          return Math.min(size, 8);
        return Math.min(size || (type2 ? Runtime.getNativeFieldSize(type2) : 0), Runtime.QUANTUM_SIZE);
      }, dynCall: function(sig, ptr2, args) {
        if (args && args.length) {
          return Module["dynCall_" + sig].apply(null, [ptr2].concat(args));
        } else {
          return Module["dynCall_" + sig].call(null, ptr2);
        }
      }, functionPointers: [], addFunction: function(func2) {
        for (var i2 = 0; i2 < Runtime.functionPointers.length; i2++) {
          if (!Runtime.functionPointers[i2]) {
            Runtime.functionPointers[i2] = func2;
            return 2 * (1 + i2);
          }
        }
        throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
      }, removeFunction: function(index) {
        Runtime.functionPointers[(index - 2) / 2] = null;
      }, warnOnce: function(text) {
        if (!Runtime.warnOnce.shown)
          Runtime.warnOnce.shown = {};
        if (!Runtime.warnOnce.shown[text]) {
          Runtime.warnOnce.shown[text] = 1;
          Module.printErr(text);
        }
      }, funcWrappers: {}, getFuncWrapper: function(func2, sig) {
        if (!func2)
          return;
        assert(sig);
        if (!Runtime.funcWrappers[sig]) {
          Runtime.funcWrappers[sig] = {};
        }
        var sigCache = Runtime.funcWrappers[sig];
        if (!sigCache[func2]) {
          if (sig.length === 1) {
            sigCache[func2] = function dynCall_wrapper() {
              return Runtime.dynCall(sig, func2);
            };
          } else if (sig.length === 2) {
            sigCache[func2] = function dynCall_wrapper(arg2) {
              return Runtime.dynCall(sig, func2, [arg2]);
            };
          } else {
            sigCache[func2] = function dynCall_wrapper() {
              return Runtime.dynCall(sig, func2, Array.prototype.slice.call(arguments));
            };
          }
        }
        return sigCache[func2];
      }, getCompilerSetting: function(name) {
        throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
      }, stackAlloc: function(size) {
        var ret = STACKTOP;
        STACKTOP = STACKTOP + size | 0;
        STACKTOP = STACKTOP + 15 & -16;
        return ret;
      }, staticAlloc: function(size) {
        var ret = STATICTOP;
        STATICTOP = STATICTOP + size | 0;
        STATICTOP = STATICTOP + 15 & -16;
        return ret;
      }, dynamicAlloc: function(size) {
        var ret = HEAP32[DYNAMICTOP_PTR >> 2];
        var end = (ret + size + 15 | 0) & -16;
        HEAP32[DYNAMICTOP_PTR >> 2] = end;
        if (end >= TOTAL_MEMORY) {
          var success = enlargeMemory();
          if (!success) {
            HEAP32[DYNAMICTOP_PTR >> 2] = ret;
            return 0;
          }
        }
        return ret;
      }, alignMemory: function(size, quantum) {
        var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
        return ret;
      }, makeBigInt: function(low, high, unsigned) {
        var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296 : +(low >>> 0) + +(high | 0) * 4294967296;
        return ret;
      }, GLOBAL_BASE: 8, QUANTUM_SIZE: 4, __dummy__: 0 };
      Module["Runtime"] = Runtime;
      var ABORT = 0;
      var EXITSTATUS = 0;
      function assert(condition, text) {
        if (!condition) {
          abort("Assertion failed: " + text);
        }
      }
      function getCFunc(ident) {
        var func = Module["_" + ident];
        if (!func) {
          try {
            func = eval("_" + ident);
          } catch (e) {
          }
        }
        assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
        return func;
      }
      var cwrap, ccall;
      (function() {
        var JSfuncs = { "stackSave": function() {
          Runtime.stackSave();
        }, "stackRestore": function() {
          Runtime.stackRestore();
        }, "arrayToC": function(arr) {
          var ret = Runtime.stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }, "stringToC": function(str) {
          var ret = 0;
          if (str !== null && str !== void 0 && str !== 0) {
            var len = (str.length << 2) + 1;
            ret = Runtime.stackAlloc(len);
            stringToUTF8(str, ret, len);
          }
          return ret;
        } };
        var toC = { "string": JSfuncs["stringToC"], "array": JSfuncs["arrayToC"] };
        ccall = function ccallFunc(ident2, returnType2, argTypes2, args, opts) {
          var func2 = getCFunc(ident2);
          var cArgs = [];
          var stack = 0;
          if (args) {
            for (var i2 = 0; i2 < args.length; i2++) {
              var converter = toC[argTypes2[i2]];
              if (converter) {
                if (stack === 0)
                  stack = Runtime.stackSave();
                cArgs[i2] = converter(args[i2]);
              } else {
                cArgs[i2] = args[i2];
              }
            }
          }
          var ret = func2.apply(null, cArgs);
          if (returnType2 === "string")
            ret = Pointer_stringify(ret);
          if (stack !== 0) {
            if (opts && opts.async) {
              EmterpreterAsync.asyncFinalizers.push(function() {
                Runtime.stackRestore(stack);
              });
              return;
            }
            Runtime.stackRestore(stack);
          }
          return ret;
        };
        var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
        function parseJSFunc(jsfunc) {
          var parsed = jsfunc.toString().match(sourceRegex).slice(1);
          return { arguments: parsed[0], body: parsed[1], returnValue: parsed[2] };
        }
        var JSsource = null;
        function ensureJSsource() {
          if (!JSsource) {
            JSsource = {};
            for (var fun in JSfuncs) {
              if (JSfuncs.hasOwnProperty(fun)) {
                JSsource[fun] = parseJSFunc(JSfuncs[fun]);
              }
            }
          }
        }
        cwrap = function cwrap(ident, returnType, argTypes) {
          argTypes = argTypes || [];
          var cfunc = getCFunc(ident);
          var numericArgs = argTypes.every(function(type2) {
            return type2 === "number";
          });
          var numericRet = returnType !== "string";
          if (numericRet && numericArgs) {
            return cfunc;
          }
          var argNames = argTypes.map(function(x, i2) {
            return "$" + i2;
          });
          var funcstr = "(function(" + argNames.join(",") + ") {";
          var nargs = argTypes.length;
          if (!numericArgs) {
            ensureJSsource();
            funcstr += "var stack = " + JSsource["stackSave"].body + ";";
            for (var i = 0; i < nargs; i++) {
              var arg = argNames[i], type = argTypes[i];
              if (type === "number")
                continue;
              var convertCode = JSsource[type + "ToC"];
              funcstr += "var " + convertCode.arguments + " = " + arg + ";";
              funcstr += convertCode.body + ";";
              funcstr += arg + "=(" + convertCode.returnValue + ");";
            }
          }
          var cfuncname = parseJSFunc(function() {
            return cfunc;
          }).returnValue;
          funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
          if (!numericRet) {
            var strgfy = parseJSFunc(function() {
              return Pointer_stringify;
            }).returnValue;
            funcstr += "ret = " + strgfy + "(ret);";
          }
          if (!numericArgs) {
            ensureJSsource();
            funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
          }
          funcstr += "return ret})";
          return eval(funcstr);
        };
      })();
      Module["ccall"] = ccall;
      Module["cwrap"] = cwrap;
      function setValue(ptr2, value, type2, noSafe) {
        type2 = type2 || "i8";
        if (type2.charAt(type2.length - 1) === "*")
          type2 = "i32";
        switch (type2) {
          case "i1":
            HEAP8[ptr2 >> 0] = value;
            break;
          case "i8":
            HEAP8[ptr2 >> 0] = value;
            break;
          case "i16":
            HEAP16[ptr2 >> 1] = value;
            break;
          case "i32":
            HEAP32[ptr2 >> 2] = value;
            break;
          case "i64":
            tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr2 >> 2] = tempI64[0], HEAP32[ptr2 + 4 >> 2] = tempI64[1];
            break;
          case "float":
            HEAPF32[ptr2 >> 2] = value;
            break;
          case "double":
            HEAPF64[ptr2 >> 3] = value;
            break;
          default:
            abort("invalid type for setValue: " + type2);
        }
      }
      Module["setValue"] = setValue;
      function getValue(ptr2, type2, noSafe) {
        type2 = type2 || "i8";
        if (type2.charAt(type2.length - 1) === "*")
          type2 = "i32";
        switch (type2) {
          case "i1":
            return HEAP8[ptr2 >> 0];
          case "i8":
            return HEAP8[ptr2 >> 0];
          case "i16":
            return HEAP16[ptr2 >> 1];
          case "i32":
            return HEAP32[ptr2 >> 2];
          case "i64":
            return HEAP32[ptr2 >> 2];
          case "float":
            return HEAPF32[ptr2 >> 2];
          case "double":
            return HEAPF64[ptr2 >> 3];
          default:
            abort("invalid type for setValue: " + type2);
        }
        return null;
      }
      Module["getValue"] = getValue;
      var ALLOC_NORMAL = 0;
      var ALLOC_STACK = 1;
      var ALLOC_STATIC = 2;
      var ALLOC_DYNAMIC = 3;
      var ALLOC_NONE = 4;
      Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
      Module["ALLOC_STACK"] = ALLOC_STACK;
      Module["ALLOC_STATIC"] = ALLOC_STATIC;
      Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
      Module["ALLOC_NONE"] = ALLOC_NONE;
      function allocate(slab, types, allocator, ptr2) {
        var zeroinit, size;
        if (typeof slab === "number") {
          zeroinit = true;
          size = slab;
        } else {
          zeroinit = false;
          size = slab.length;
        }
        var singleType = typeof types === "string" ? types : null;
        var ret;
        if (allocator == ALLOC_NONE) {
          ret = ptr2;
        } else {
          ret = [typeof _malloc === "function" ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === void 0 ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
        }
        if (zeroinit) {
          var ptr2 = ret, stop;
          assert((ret & 3) == 0);
          stop = ret + (size & ~3);
          for (; ptr2 < stop; ptr2 += 4) {
            HEAP32[ptr2 >> 2] = 0;
          }
          stop = ret + size;
          while (ptr2 < stop) {
            HEAP8[ptr2++ >> 0] = 0;
          }
          return ret;
        }
        if (singleType === "i8") {
          if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret);
          } else {
            HEAPU8.set(new Uint8Array(slab), ret);
          }
          return ret;
        }
        var i2 = 0, type2, typeSize, previousType;
        while (i2 < size) {
          var curr = slab[i2];
          if (typeof curr === "function") {
            curr = Runtime.getFunctionIndex(curr);
          }
          type2 = singleType || types[i2];
          if (type2 === 0) {
            i2++;
            continue;
          }
          if (type2 == "i64")
            type2 = "i32";
          setValue(ret + i2, curr, type2);
          if (previousType !== type2) {
            typeSize = Runtime.getNativeTypeSize(type2);
            previousType = type2;
          }
          i2 += typeSize;
        }
        return ret;
      }
      Module["allocate"] = allocate;
      function getMemory(size) {
        if (!staticSealed)
          return Runtime.staticAlloc(size);
        if (!runtimeInitialized)
          return Runtime.dynamicAlloc(size);
        return _malloc(size);
      }
      Module["getMemory"] = getMemory;
      function Pointer_stringify(ptr2, length) {
        if (length === 0 || !ptr2)
          return "";
        var hasUtf = 0;
        var t;
        var i2 = 0;
        while (1) {
          t = HEAPU8[ptr2 + i2 >> 0];
          hasUtf |= t;
          if (t == 0 && !length)
            break;
          i2++;
          if (length && i2 == length)
            break;
        }
        if (!length)
          length = i2;
        var ret = "";
        if (hasUtf < 128) {
          var MAX_CHUNK = 1024;
          var curr;
          while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr2, ptr2 + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr2 += MAX_CHUNK;
            length -= MAX_CHUNK;
          }
          return ret;
        }
        return Module["UTF8ToString"](ptr2);
      }
      Module["Pointer_stringify"] = Pointer_stringify;
      function AsciiToString(ptr2) {
        var str = "";
        while (1) {
          var ch = HEAP8[ptr2++ >> 0];
          if (!ch)
            return str;
          str += String.fromCharCode(ch);
        }
      }
      Module["AsciiToString"] = AsciiToString;
      function stringToAscii(str, outPtr) {
        return writeAsciiToMemory(str, outPtr, false);
      }
      Module["stringToAscii"] = stringToAscii;
      var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
      function UTF8ArrayToString(u8Array, idx) {
        var endPtr = idx;
        while (u8Array[endPtr])
          ++endPtr;
        if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
          return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
        } else {
          var u0, u1, u2, u3, u4, u5;
          var str = "";
          while (1) {
            u0 = u8Array[idx++];
            if (!u0)
              return str;
            if (!(u0 & 128)) {
              str += String.fromCharCode(u0);
              continue;
            }
            u1 = u8Array[idx++] & 63;
            if ((u0 & 224) == 192) {
              str += String.fromCharCode((u0 & 31) << 6 | u1);
              continue;
            }
            u2 = u8Array[idx++] & 63;
            if ((u0 & 240) == 224) {
              u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
              u3 = u8Array[idx++] & 63;
              if ((u0 & 248) == 240) {
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
              } else {
                u4 = u8Array[idx++] & 63;
                if ((u0 & 252) == 248) {
                  u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
                } else {
                  u5 = u8Array[idx++] & 63;
                  u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
                }
              }
            }
            if (u0 < 65536) {
              str += String.fromCharCode(u0);
            } else {
              var ch = u0 - 65536;
              str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
            }
          }
        }
      }
      Module["UTF8ArrayToString"] = UTF8ArrayToString;
      function UTF8ToString(ptr2) {
        return UTF8ArrayToString(HEAPU8, ptr2);
      }
      Module["UTF8ToString"] = UTF8ToString;
      function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
        if (!(maxBytesToWrite > 0))
          return 0;
        var startIdx = outIdx;
        var endIdx = outIdx + maxBytesToWrite - 1;
        for (var i2 = 0; i2 < str.length; ++i2) {
          var u = str.charCodeAt(i2);
          if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i2) & 1023;
          if (u <= 127) {
            if (outIdx >= endIdx)
              break;
            outU8Array[outIdx++] = u;
          } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx)
              break;
            outU8Array[outIdx++] = 192 | u >> 6;
            outU8Array[outIdx++] = 128 | u & 63;
          } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx)
              break;
            outU8Array[outIdx++] = 224 | u >> 12;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
          } else if (u <= 2097151) {
            if (outIdx + 3 >= endIdx)
              break;
            outU8Array[outIdx++] = 240 | u >> 18;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
          } else if (u <= 67108863) {
            if (outIdx + 4 >= endIdx)
              break;
            outU8Array[outIdx++] = 248 | u >> 24;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
          } else {
            if (outIdx + 5 >= endIdx)
              break;
            outU8Array[outIdx++] = 252 | u >> 30;
            outU8Array[outIdx++] = 128 | u >> 24 & 63;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63;
          }
        }
        outU8Array[outIdx] = 0;
        return outIdx - startIdx;
      }
      Module["stringToUTF8Array"] = stringToUTF8Array;
      function stringToUTF8(str, outPtr, maxBytesToWrite) {
        return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
      }
      Module["stringToUTF8"] = stringToUTF8;
      function lengthBytesUTF8(str) {
        var len = 0;
        for (var i2 = 0; i2 < str.length; ++i2) {
          var u = str.charCodeAt(i2);
          if (u >= 55296 && u <= 57343)
            u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i2) & 1023;
          if (u <= 127) {
            ++len;
          } else if (u <= 2047) {
            len += 2;
          } else if (u <= 65535) {
            len += 3;
          } else if (u <= 2097151) {
            len += 4;
          } else if (u <= 67108863) {
            len += 5;
          } else {
            len += 6;
          }
        }
        return len;
      }
      Module["lengthBytesUTF8"] = lengthBytesUTF8;
      var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
      function demangle(func2) {
        var __cxa_demangle_func = Module["___cxa_demangle"] || Module["__cxa_demangle"];
        if (__cxa_demangle_func) {
          try {
            var s = func2.substr(1);
            var len = lengthBytesUTF8(s) + 1;
            var buf = _malloc(len);
            stringToUTF8(s, buf, len);
            var status = _malloc(4);
            var ret = __cxa_demangle_func(buf, 0, 0, status);
            if (getValue(status, "i32") === 0 && ret) {
              return Pointer_stringify(ret);
            }
          } catch (e) {
          } finally {
            if (buf)
              _free(buf);
            if (status)
              _free(status);
            if (ret)
              _free(ret);
          }
          return func2;
        }
        Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
        return func2;
      }
      function demangleAll(text) {
        var regex = /__Z[\w\d_]+/g;
        return text.replace(regex, function(x) {
          var y = demangle(x);
          return x === y ? x : x + " [" + y + "]";
        });
      }
      function jsStackTrace() {
        var err2 = new Error();
        if (!err2.stack) {
          try {
            throw new Error(0);
          } catch (e) {
            err2 = e;
          }
          if (!err2.stack) {
            return "(no stack trace available)";
          }
        }
        return err2.stack.toString();
      }
      function stackTrace() {
        var js = jsStackTrace();
        if (Module["extraStackTrace"])
          js += "\n" + Module["extraStackTrace"]();
        return demangleAll(js);
      }
      Module["stackTrace"] = stackTrace;
      var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
      function updateGlobalBufferViews() {
        Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
        Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
        Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
        Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
        Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
        Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
        Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
        Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
      }
      var STATIC_BASE, STATICTOP, staticSealed;
      var STACK_BASE, STACKTOP, STACK_MAX;
      var DYNAMIC_BASE, DYNAMICTOP_PTR;
      STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
      staticSealed = false;
      function abortOnCannotGrowMemory() {
        abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
      }
      function enlargeMemory() {
        abortOnCannotGrowMemory();
      }
      var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
      var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 134217728;
      if (TOTAL_MEMORY < TOTAL_STACK)
        Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
      if (Module["buffer"]) {
        buffer = Module["buffer"];
      } else {
        {
          buffer = new ArrayBuffer(TOTAL_MEMORY);
        }
      }
      updateGlobalBufferViews();
      function getTotalMemory() {
        return TOTAL_MEMORY;
      }
      HEAP32[0] = 1668509029;
      HEAP16[1] = 25459;
      if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99)
        throw "Runtime error: expected the system to be little-endian!";
      Module["HEAP"] = HEAP;
      Module["buffer"] = buffer;
      Module["HEAP8"] = HEAP8;
      Module["HEAP16"] = HEAP16;
      Module["HEAP32"] = HEAP32;
      Module["HEAPU8"] = HEAPU8;
      Module["HEAPU16"] = HEAPU16;
      Module["HEAPU32"] = HEAPU32;
      Module["HEAPF32"] = HEAPF32;
      Module["HEAPF64"] = HEAPF64;
      function callRuntimeCallbacks(callbacks) {
        while (callbacks.length > 0) {
          var callback = callbacks.shift();
          if (typeof callback == "function") {
            callback();
            continue;
          }
          var func2 = callback.func;
          if (typeof func2 === "number") {
            if (callback.arg === void 0) {
              Module["dynCall_v"](func2);
            } else {
              Module["dynCall_vi"](func2, callback.arg);
            }
          } else {
            func2(callback.arg === void 0 ? null : callback.arg);
          }
        }
      }
      var __ATPRERUN__ = [];
      var __ATINIT__ = [];
      var __ATMAIN__ = [];
      var __ATEXIT__ = [];
      var __ATPOSTRUN__ = [];
      var runtimeInitialized = false;
      var runtimeExited = false;
      function preRun() {
        if (Module["preRun"]) {
          if (typeof Module["preRun"] == "function")
            Module["preRun"] = [Module["preRun"]];
          while (Module["preRun"].length) {
            addOnPreRun(Module["preRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPRERUN__);
      }
      function ensureInitRuntime() {
        if (runtimeInitialized)
          return;
        runtimeInitialized = true;
        callRuntimeCallbacks(__ATINIT__);
      }
      function preMain() {
        callRuntimeCallbacks(__ATMAIN__);
      }
      function exitRuntime() {
        callRuntimeCallbacks(__ATEXIT__);
        runtimeExited = true;
      }
      function postRun() {
        if (Module["postRun"]) {
          if (typeof Module["postRun"] == "function")
            Module["postRun"] = [Module["postRun"]];
          while (Module["postRun"].length) {
            addOnPostRun(Module["postRun"].shift());
          }
        }
        callRuntimeCallbacks(__ATPOSTRUN__);
      }
      function addOnPreRun(cb2) {
        __ATPRERUN__.unshift(cb2);
      }
      Module["addOnPreRun"] = addOnPreRun;
      function addOnInit(cb2) {
        __ATINIT__.unshift(cb2);
      }
      Module["addOnInit"] = addOnInit;
      function addOnPreMain(cb2) {
        __ATMAIN__.unshift(cb2);
      }
      Module["addOnPreMain"] = addOnPreMain;
      function addOnExit(cb2) {
        __ATEXIT__.unshift(cb2);
      }
      Module["addOnExit"] = addOnExit;
      function addOnPostRun(cb2) {
        __ATPOSTRUN__.unshift(cb2);
      }
      Module["addOnPostRun"] = addOnPostRun;
      function intArrayFromString(stringy, dontAddNull, length) {
        var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
        var u8array = new Array(len);
        var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
        if (dontAddNull)
          u8array.length = numBytesWritten;
        return u8array;
      }
      Module["intArrayFromString"] = intArrayFromString;
      function intArrayToString(array) {
        var ret = [];
        for (var i2 = 0; i2 < array.length; i2++) {
          var chr = array[i2];
          if (chr > 255) {
            chr &= 255;
          }
          ret.push(String.fromCharCode(chr));
        }
        return ret.join("");
      }
      Module["intArrayToString"] = intArrayToString;
      function writeStringToMemory(string, buffer2, dontAddNull) {
        Runtime.warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
        var lastChar, end;
        if (dontAddNull) {
          end = buffer2 + lengthBytesUTF8(string);
          lastChar = HEAP8[end];
        }
        stringToUTF8(string, buffer2, Infinity);
        if (dontAddNull)
          HEAP8[end] = lastChar;
      }
      Module["writeStringToMemory"] = writeStringToMemory;
      function writeArrayToMemory(array, buffer2) {
        HEAP8.set(array, buffer2);
      }
      Module["writeArrayToMemory"] = writeArrayToMemory;
      function writeAsciiToMemory(str, buffer2, dontAddNull) {
        for (var i2 = 0; i2 < str.length; ++i2) {
          HEAP8[buffer2++ >> 0] = str.charCodeAt(i2);
        }
        if (!dontAddNull)
          HEAP8[buffer2 >> 0] = 0;
      }
      Module["writeAsciiToMemory"] = writeAsciiToMemory;
      if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5)
        Math["imul"] = function imul(a, b) {
          var ah = a >>> 16;
          var al = a & 65535;
          var bh = b >>> 16;
          var bl = b & 65535;
          return al * bl + (ah * bl + al * bh << 16) | 0;
        };
      Math.imul = Math["imul"];
      if (!Math["fround"]) {
        var froundBuffer = new Float32Array(1);
        Math["fround"] = function(x) {
          froundBuffer[0] = x;
          return froundBuffer[0];
        };
      }
      Math.fround = Math["fround"];
      if (!Math["clz32"])
        Math["clz32"] = function(x) {
          x = x >>> 0;
          for (var i2 = 0; i2 < 32; i2++) {
            if (x & 1 << 31 - i2)
              return i2;
          }
          return 32;
        };
      Math.clz32 = Math["clz32"];
      if (!Math["trunc"])
        Math["trunc"] = function(x) {
          return x < 0 ? Math.ceil(x) : Math.floor(x);
        };
      Math.trunc = Math["trunc"];
      var Math_abs = Math.abs;
      var Math_cos = Math.cos;
      var Math_sin = Math.sin;
      var Math_tan = Math.tan;
      var Math_acos = Math.acos;
      var Math_asin = Math.asin;
      var Math_atan = Math.atan;
      var Math_atan2 = Math.atan2;
      var Math_exp = Math.exp;
      var Math_log = Math.log;
      var Math_sqrt = Math.sqrt;
      var Math_ceil = Math.ceil;
      var Math_floor = Math.floor;
      var Math_pow = Math.pow;
      var Math_imul = Math.imul;
      var Math_fround = Math.fround;
      var Math_round = Math.round;
      var Math_min = Math.min;
      var Math_clz32 = Math.clz32;
      var Math_trunc = Math.trunc;
      var runDependencies = 0;
      var runDependencyWatcher = null;
      var dependenciesFulfilled = null;
      function getUniqueRunDependency(id) {
        return id;
      }
      function addRunDependency(id) {
        runDependencies++;
        if (Module["monitorRunDependencies"]) {
          Module["monitorRunDependencies"](runDependencies);
        }
      }
      Module["addRunDependency"] = addRunDependency;
      function removeRunDependency(id) {
        runDependencies--;
        if (Module["monitorRunDependencies"]) {
          Module["monitorRunDependencies"](runDependencies);
        }
        if (runDependencies == 0) {
          if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
          }
          if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback();
          }
        }
      }
      Module["removeRunDependency"] = removeRunDependency;
      Module["preloadedImages"] = {};
      Module["preloadedAudios"] = {};
      var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5, $6, $7) {
        return _nbind.callbackSignatureList[$0].apply(this, arguments);
      }];
      function _emscripten_asm_const_iiiiiiii(code, a0, a1, a2, a3, a4, a5, a6) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6);
      }
      function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
        return ASM_CONSTS[code](a0, a1, a2, a3);
      }
      function _emscripten_asm_const_iiidddddd(code, a0, a1, a2, a3, a4, a5, a6, a7) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7);
      }
      function _emscripten_asm_const_iiididi(code, a0, a1, a2, a3, a4, a5) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
      }
      function _emscripten_asm_const_iiii(code, a0, a1, a2) {
        return ASM_CONSTS[code](a0, a1, a2);
      }
      function _emscripten_asm_const_iiiid(code, a0, a1, a2, a3) {
        return ASM_CONSTS[code](a0, a1, a2, a3);
      }
      function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
        return ASM_CONSTS[code](a0, a1, a2, a3, a4);
      }
      STATIC_BASE = Runtime.GLOBAL_BASE;
      STATICTOP = STATIC_BASE + 12800;
      __ATINIT__.push({ func: function() {
        __GLOBAL__sub_I_Yoga_cpp();
      } }, { func: function() {
        __GLOBAL__sub_I_nbind_cc();
      } }, { func: function() {
        __GLOBAL__sub_I_common_cc();
      } }, { func: function() {
        __GLOBAL__sub_I_Binding_cc();
      } });
      allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 127, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 128, 191, 0, 0, 128, 191, 0, 0, 192, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 63, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 190, 12, 0, 0, 200, 12, 0, 0, 208, 12, 0, 0, 216, 12, 0, 0, 230, 12, 0, 0, 242, 12, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 192, 127, 3, 0, 0, 0, 180, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 183, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 184, 45, 0, 0, 185, 45, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 186, 45, 0, 0, 185, 45, 0, 0, 148, 4, 0, 0, 3, 0, 0, 0, 187, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 2, 0, 0, 0, 189, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 188, 45, 0, 0, 181, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 183, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 190, 45, 0, 0, 190, 45, 0, 0, 182, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 181, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 48, 5, 0, 0, 3, 0, 0, 0, 56, 5, 0, 0, 1, 0, 0, 0, 189, 45, 0, 0, 185, 45, 0, 0, 164, 4, 0, 0, 76, 5, 0, 0, 2, 0, 0, 0, 191, 45, 0, 0, 186, 45, 0, 0, 182, 45, 0, 0, 185, 45, 0, 0, 192, 45, 0, 0, 185, 45, 0, 0, 182, 45, 0, 0, 186, 45, 0, 0, 185, 45, 0, 0, 76, 5, 0, 0, 76, 5, 0, 0, 136, 5, 0, 0, 182, 45, 0, 0, 181, 45, 0, 0, 2, 0, 0, 0, 190, 45, 0, 0, 136, 5, 0, 0, 56, 19, 0, 0, 156, 5, 0, 0, 2, 0, 0, 0, 184, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 204, 5, 0, 0, 181, 45, 0, 0, 181, 45, 0, 0, 2, 0, 0, 0, 180, 45, 0, 0, 204, 5, 0, 0, 2, 0, 0, 0, 195, 45, 0, 0, 236, 5, 0, 0, 97, 19, 0, 0, 198, 45, 0, 0, 211, 45, 0, 0, 212, 45, 0, 0, 213, 45, 0, 0, 214, 45, 0, 0, 215, 45, 0, 0, 188, 45, 0, 0, 182, 45, 0, 0, 216, 45, 0, 0, 217, 45, 0, 0, 218, 45, 0, 0, 219, 45, 0, 0, 192, 45, 0, 0, 181, 45, 0, 0, 0, 0, 0, 0, 185, 45, 0, 0, 110, 19, 0, 0, 186, 45, 0, 0, 115, 19, 0, 0, 221, 45, 0, 0, 120, 19, 0, 0, 148, 4, 0, 0, 132, 19, 0, 0, 96, 6, 0, 0, 145, 19, 0, 0, 222, 45, 0, 0, 164, 19, 0, 0, 223, 45, 0, 0, 173, 19, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 104, 6, 0, 0, 1, 0, 0, 0, 187, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 1, 0, 0, 0, 13, 0, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 164, 6, 0, 0, 188, 45, 0, 0, 172, 6, 0, 0, 180, 6, 0, 0, 2, 0, 0, 0, 188, 6, 0, 0, 7, 0, 0, 0, 224, 45, 0, 0, 7, 0, 0, 0, 164, 6, 0, 0, 1, 0, 0, 0, 213, 45, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 172, 6, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 164, 6, 0, 0, 185, 45, 0, 0, 224, 45, 0, 0, 211, 45, 0, 0, 211, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 172, 6, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 224, 45, 0, 0, 188, 45, 0, 0, 222, 45, 0, 0, 211, 45, 0, 0, 40, 7, 0, 0, 188, 45, 0, 0, 2, 0, 0, 0, 224, 45, 0, 0, 185, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 188, 45, 0, 0, 222, 45, 0, 0, 224, 45, 0, 0, 148, 4, 0, 0, 185, 45, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 148, 4, 0, 0, 185, 45, 0, 0, 164, 6, 0, 0, 148, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 1, 0, 0, 0, 16, 0, 0, 0, 148, 7, 0, 0, 2, 0, 0, 0, 225, 45, 0, 0, 183, 45, 0, 0, 188, 45, 0, 0, 168, 7, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 234, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 9, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 242, 45, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 110, 111, 100, 101, 0, 67, 97, 110, 110, 111, 116, 32, 114, 101, 115, 101, 116, 32, 97, 32, 110, 111, 100, 101, 32, 119, 104, 105, 99, 104, 32, 115, 116, 105, 108, 108, 32, 104, 97, 115, 32, 99, 104, 105, 108, 100, 114, 101, 110, 32, 97, 116, 116, 97, 99, 104, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 114, 101, 115, 101, 116, 32, 97, 32, 110, 111, 100, 101, 32, 115, 116, 105, 108, 108, 32, 97, 116, 116, 97, 99, 104, 101, 100, 32, 116, 111, 32, 97, 32, 112, 97, 114, 101, 110, 116, 0, 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 102, 111, 114, 32, 99, 111, 110, 102, 105, 103, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 116, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 58, 32, 78, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 46, 0, 67, 104, 105, 108, 100, 32, 97, 108, 114, 101, 97, 100, 121, 32, 104, 97, 115, 32, 97, 32, 112, 97, 114, 101, 110, 116, 44, 32, 105, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 114, 101, 109, 111, 118, 101, 100, 32, 102, 105, 114, 115, 116, 46, 0, 67, 97, 110, 110, 111, 116, 32, 97, 100, 100, 32, 99, 104, 105, 108, 100, 58, 32, 78, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 99, 97, 110, 110, 111, 116, 32, 104, 97, 118, 101, 32, 99, 104, 105, 108, 100, 114, 101, 110, 46, 0, 79, 110, 108, 121, 32, 108, 101, 97, 102, 32, 110, 111, 100, 101, 115, 32, 119, 105, 116, 104, 32, 99, 117, 115, 116, 111, 109, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 115, 104, 111, 117, 108, 100, 32, 109, 97, 110, 117, 97, 108, 108, 121, 32, 109, 97, 114, 107, 32, 116, 104, 101, 109, 115, 101, 108, 118, 101, 115, 32, 97, 115, 32, 100, 105, 114, 116, 121, 0, 67, 97, 110, 110, 111, 116, 32, 103, 101, 116, 32, 108, 97, 121, 111, 117, 116, 32, 112, 114, 111, 112, 101, 114, 116, 105, 101, 115, 32, 111, 102, 32, 109, 117, 108, 116, 105, 45, 101, 100, 103, 101, 32, 115, 104, 111, 114, 116, 104, 97, 110, 100, 115, 0, 37, 115, 37, 100, 46, 123, 91, 115, 107, 105, 112, 112, 101, 100, 93, 32, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 97, 119, 58, 32, 37, 102, 32, 97, 104, 58, 32, 37, 102, 32, 61, 62, 32, 100, 58, 32, 40, 37, 102, 44, 32, 37, 102, 41, 32, 37, 115, 10, 0, 37, 115, 37, 100, 46, 123, 37, 115, 0, 42, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 97, 119, 58, 32, 37, 102, 32, 97, 104, 58, 32, 37, 102, 32, 37, 115, 10, 0, 37, 115, 37, 100, 46, 125, 37, 115, 0, 119, 109, 58, 32, 37, 115, 44, 32, 104, 109, 58, 32, 37, 115, 44, 32, 100, 58, 32, 40, 37, 102, 44, 32, 37, 102, 41, 32, 37, 115, 10, 0, 79, 117, 116, 32, 111, 102, 32, 99, 97, 99, 104, 101, 32, 101, 110, 116, 114, 105, 101, 115, 33, 10, 0, 83, 99, 97, 108, 101, 32, 102, 97, 99, 116, 111, 114, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 0, 105, 110, 105, 116, 105, 97, 108, 0, 37, 115, 10, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 85, 78, 68, 69, 70, 73, 78, 69, 68, 0, 69, 88, 65, 67, 84, 76, 89, 0, 65, 84, 95, 77, 79, 83, 84, 0, 76, 65, 89, 95, 85, 78, 68, 69, 70, 73, 78, 69, 68, 0, 76, 65, 89, 95, 69, 88, 65, 67, 84, 76, 89, 0, 76, 65, 89, 95, 65, 84, 95, 77, 79, 83, 84, 0, 97, 118, 97, 105, 108, 97, 98, 108, 101, 87, 105, 100, 116, 104, 32, 105, 115, 32, 105, 110, 100, 101, 102, 105, 110, 105, 116, 101, 32, 115, 111, 32, 119, 105, 100, 116, 104, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 89, 71, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 85, 110, 100, 101, 102, 105, 110, 101, 100, 0, 97, 118, 97, 105, 108, 97, 98, 108, 101, 72, 101, 105, 103, 104, 116, 32, 105, 115, 32, 105, 110, 100, 101, 102, 105, 110, 105, 116, 101, 32, 115, 111, 32, 104, 101, 105, 103, 104, 116, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 32, 109, 117, 115, 116, 32, 98, 101, 32, 89, 71, 77, 101, 97, 115, 117, 114, 101, 77, 111, 100, 101, 85, 110, 100, 101, 102, 105, 110, 101, 100, 0, 102, 108, 101, 120, 0, 115, 116, 114, 101, 116, 99, 104, 0, 109, 117, 108, 116, 105, 108, 105, 110, 101, 45, 115, 116, 114, 101, 116, 99, 104, 0, 69, 120, 112, 101, 99, 116, 101, 100, 32, 110, 111, 100, 101, 32, 116, 111, 32, 104, 97, 118, 101, 32, 99, 117, 115, 116, 111, 109, 32, 109, 101, 97, 115, 117, 114, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0, 109, 101, 97, 115, 117, 114, 101, 0, 69, 120, 112, 101, 99, 116, 32, 99, 117, 115, 116, 111, 109, 32, 98, 97, 115, 101, 108, 105, 110, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 111, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 32, 78, 97, 78, 0, 97, 98, 115, 45, 109, 101, 97, 115, 117, 114, 101, 0, 97, 98, 115, 45, 108, 97, 121, 111, 117, 116, 0, 78, 111, 100, 101, 0, 99, 114, 101, 97, 116, 101, 68, 101, 102, 97, 117, 108, 116, 0, 99, 114, 101, 97, 116, 101, 87, 105, 116, 104, 67, 111, 110, 102, 105, 103, 0, 100, 101, 115, 116, 114, 111, 121, 0, 114, 101, 115, 101, 116, 0, 99, 111, 112, 121, 83, 116, 121, 108, 101, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 84, 121, 112, 101, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 0, 115, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 65, 108, 105, 103, 110, 67, 111, 110, 116, 101, 110, 116, 0, 115, 101, 116, 65, 108, 105, 103, 110, 73, 116, 101, 109, 115, 0, 115, 101, 116, 65, 108, 105, 103, 110, 83, 101, 108, 102, 0, 115, 101, 116, 70, 108, 101, 120, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 115, 101, 116, 70, 108, 101, 120, 87, 114, 97, 112, 0, 115, 101, 116, 74, 117, 115, 116, 105, 102, 121, 67, 111, 110, 116, 101, 110, 116, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 114, 103, 105, 110, 65, 117, 116, 111, 0, 115, 101, 116, 79, 118, 101, 114, 102, 108, 111, 119, 0, 115, 101, 116, 68, 105, 115, 112, 108, 97, 121, 0, 115, 101, 116, 70, 108, 101, 120, 0, 115, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 0, 115, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 70, 108, 101, 120, 71, 114, 111, 119, 0, 115, 101, 116, 70, 108, 101, 120, 83, 104, 114, 105, 110, 107, 0, 115, 101, 116, 87, 105, 100, 116, 104, 0, 115, 101, 116, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 87, 105, 100, 116, 104, 65, 117, 116, 111, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 72, 101, 105, 103, 104, 116, 65, 117, 116, 111, 0, 115, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 0, 115, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 0, 115, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 0, 115, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 80, 101, 114, 99, 101, 110, 116, 0, 115, 101, 116, 65, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0, 115, 101, 116, 66, 111, 114, 100, 101, 114, 0, 115, 101, 116, 80, 97, 100, 100, 105, 110, 103, 0, 115, 101, 116, 80, 97, 100, 100, 105, 110, 103, 80, 101, 114, 99, 101, 110, 116, 0, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 84, 121, 112, 101, 0, 103, 101, 116, 80, 111, 115, 105, 116, 105, 111, 110, 0, 103, 101, 116, 65, 108, 105, 103, 110, 67, 111, 110, 116, 101, 110, 116, 0, 103, 101, 116, 65, 108, 105, 103, 110, 73, 116, 101, 109, 115, 0, 103, 101, 116, 65, 108, 105, 103, 110, 83, 101, 108, 102, 0, 103, 101, 116, 70, 108, 101, 120, 68, 105, 114, 101, 99, 116, 105, 111, 110, 0, 103, 101, 116, 70, 108, 101, 120, 87, 114, 97, 112, 0, 103, 101, 116, 74, 117, 115, 116, 105, 102, 121, 67, 111, 110, 116, 101, 110, 116, 0, 103, 101, 116, 77, 97, 114, 103, 105, 110, 0, 103, 101, 116, 70, 108, 101, 120, 66, 97, 115, 105, 115, 0, 103, 101, 116, 70, 108, 101, 120, 71, 114, 111, 119, 0, 103, 101, 116, 70, 108, 101, 120, 83, 104, 114, 105, 110, 107, 0, 103, 101, 116, 87, 105, 100, 116, 104, 0, 103, 101, 116, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 77, 105, 110, 87, 105, 100, 116, 104, 0, 103, 101, 116, 77, 105, 110, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 77, 97, 120, 87, 105, 100, 116, 104, 0, 103, 101, 116, 77, 97, 120, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 65, 115, 112, 101, 99, 116, 82, 97, 116, 105, 111, 0, 103, 101, 116, 66, 111, 114, 100, 101, 114, 0, 103, 101, 116, 79, 118, 101, 114, 102, 108, 111, 119, 0, 103, 101, 116, 68, 105, 115, 112, 108, 97, 121, 0, 103, 101, 116, 80, 97, 100, 100, 105, 110, 103, 0, 105, 110, 115, 101, 114, 116, 67, 104, 105, 108, 100, 0, 114, 101, 109, 111, 118, 101, 67, 104, 105, 108, 100, 0, 103, 101, 116, 67, 104, 105, 108, 100, 67, 111, 117, 110, 116, 0, 103, 101, 116, 80, 97, 114, 101, 110, 116, 0, 103, 101, 116, 67, 104, 105, 108, 100, 0, 115, 101, 116, 77, 101, 97, 115, 117, 114, 101, 70, 117, 110, 99, 0, 117, 110, 115, 101, 116, 77, 101, 97, 115, 117, 114, 101, 70, 117, 110, 99, 0, 109, 97, 114, 107, 68, 105, 114, 116, 121, 0, 105, 115, 68, 105, 114, 116, 121, 0, 99, 97, 108, 99, 117, 108, 97, 116, 101, 76, 97, 121, 111, 117, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 76, 101, 102, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 82, 105, 103, 104, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 84, 111, 112, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 66, 111, 116, 116, 111, 109, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 87, 105, 100, 116, 104, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 72, 101, 105, 103, 104, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 76, 97, 121, 111, 117, 116, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 77, 97, 114, 103, 105, 110, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 66, 111, 114, 100, 101, 114, 0, 103, 101, 116, 67, 111, 109, 112, 117, 116, 101, 100, 80, 97, 100, 100, 105, 110, 103, 0, 67, 111, 110, 102, 105, 103, 0, 99, 114, 101, 97, 116, 101, 0, 115, 101, 116, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 70, 101, 97, 116, 117, 114, 101, 69, 110, 97, 98, 108, 101, 100, 0, 115, 101, 116, 80, 111, 105, 110, 116, 83, 99, 97, 108, 101, 70, 97, 99, 116, 111, 114, 0, 105, 115, 69, 120, 112, 101, 114, 105, 109, 101, 110, 116, 97, 108, 70, 101, 97, 116, 117, 114, 101, 69, 110, 97, 98, 108, 101, 100, 0, 86, 97, 108, 117, 101, 0, 76, 97, 121, 111, 117, 116, 0, 83, 105, 122, 101, 0, 103, 101, 116, 73, 110, 115, 116, 97, 110, 99, 101, 67, 111, 117, 110, 116, 0, 73, 110, 116, 54, 52, 0, 1, 1, 1, 2, 2, 4, 4, 4, 4, 8, 8, 4, 8, 118, 111, 105, 100, 0, 98, 111, 111, 108, 0, 115, 116, 100, 58, 58, 115, 116, 114, 105, 110, 103, 0, 99, 98, 70, 117, 110, 99, 116, 105, 111, 110, 32, 38, 0, 99, 111, 110, 115, 116, 32, 99, 98, 70, 117, 110, 99, 116, 105, 111, 110, 32, 38, 0, 69, 120, 116, 101, 114, 110, 97, 108, 0, 66, 117, 102, 102, 101, 114, 0, 78, 66, 105, 110, 100, 73, 68, 0, 78, 66, 105, 110, 100, 0, 98, 105, 110, 100, 95, 118, 97, 108, 117, 101, 0, 114, 101, 102, 108, 101, 99, 116, 0, 113, 117, 101, 114, 121, 84, 121, 112, 101, 0, 108, 97, 108, 108, 111, 99, 0, 108, 114, 101, 115, 101, 116, 0, 123, 114, 101, 116, 117, 114, 110, 40, 95, 110, 98, 105, 110, 100, 46, 99, 97, 108, 108, 98, 97, 99, 107, 83, 105, 103, 110, 97, 116, 117, 114, 101, 76, 105, 115, 116, 91, 36, 48, 93, 46, 97, 112, 112, 108, 121, 40, 116, 104, 105, 115, 44, 97, 114, 103, 117, 109, 101, 110, 116, 115, 41, 41, 59, 125, 0, 95, 110, 98, 105, 110, 100, 95, 110, 101, 119, 0, 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 40, 110, 117, 108, 108, 41, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 105, 110, 102, 0, 73, 78, 70, 0, 110, 97, 110, 0, 78, 65, 78, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 46, 0, 84, 33, 34, 25, 13, 1, 2, 3, 17, 75, 28, 12, 16, 4, 11, 29, 18, 30, 39, 104, 110, 111, 112, 113, 98, 32, 5, 6, 15, 19, 20, 21, 26, 8, 22, 7, 40, 36, 23, 24, 9, 10, 14, 27, 31, 37, 35, 131, 130, 125, 38, 42, 43, 60, 61, 62, 63, 67, 71, 74, 77, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 121, 122, 123, 124, 0, 73, 108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115, 117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111, 99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97, 108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101, 107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110, 107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121, 115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111, 115, 116, 32, 105, 115, 32, 100, 111, 119, 110, 0, 72, 111, 115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 0, 66, 108, 111, 99, 107, 32, 100, 101, 118, 105, 99, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73, 115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105, 115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108, 105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97, 109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121, 115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97, 100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107, 115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107, 32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101, 118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 68, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 101, 97, 109, 0, 78, 111, 32, 100, 97, 116, 97, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 68, 101, 118, 105, 99, 101, 32, 116, 105, 109, 101, 111, 117, 116, 0, 79, 117, 116, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 76, 105, 110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97, 100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 70, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 105, 110, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99, 107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115, 115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 116, 121, 112, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101, 115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0, 78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102, 101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 110, 100, 32, 97, 102, 116, 101, 114, 32, 115, 111, 99, 107, 101, 116, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0, 82, 101, 109, 111, 116, 101, 32, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 78, 111, 32, 109, 101, 100, 105, 117, 109, 32, 102, 111, 117, 110, 100, 0, 87, 114, 111, 110, 103, 32, 109, 101, 100, 105, 117, 109, 32, 116, 121, 112, 101, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
      var tempDoublePtr = STATICTOP;
      STATICTOP += 16;
      function _atexit(func2, arg2) {
        __ATEXIT__.unshift({ func: func2, arg: arg2 });
      }
      function ___cxa_atexit() {
        return _atexit.apply(null, arguments);
      }
      function _abort() {
        Module["abort"]();
      }
      function __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj() {
        Module["printErr"]("missing function: _ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj");
        abort(-1);
      }
      function __decorate(decorators, target, key2, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key2) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key2, desc);
        else
          for (var i2 = decorators.length - 1; i2 >= 0; i2--)
            if (d = decorators[i2])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key2, r) : d(target, key2)) || r;
        return c > 3 && r && Object.defineProperty(target, key2, r), r;
      }
      function _defineHidden(value) {
        return function(target, key2) {
          Object.defineProperty(target, key2, { configurable: false, enumerable: false, value, writable: true });
        };
      }
      var _nbind = {};
      function __nbind_free_external(num2) {
        _nbind.externalList[num2].dereference(num2);
      }
      function __nbind_reference_external(num2) {
        _nbind.externalList[num2].reference();
      }
      function _llvm_stackrestore(p) {
        var self2 = _llvm_stacksave;
        var ret = self2.LLVM_SAVEDSTACKS[p];
        self2.LLVM_SAVEDSTACKS.splice(p, 1);
        Runtime.stackRestore(ret);
      }
      function __nbind_register_pool(pageSize, usedPtr, rootPtr, pagePtr) {
        _nbind.Pool.pageSize = pageSize;
        _nbind.Pool.usedPtr = usedPtr / 4;
        _nbind.Pool.rootPtr = rootPtr;
        _nbind.Pool.pagePtr = pagePtr / 4;
        HEAP32[usedPtr / 4] = 16909060;
        if (HEAP8[usedPtr] == 1)
          _nbind.bigEndian = true;
        HEAP32[usedPtr / 4] = 0;
        _nbind.makeTypeKindTbl = (_a2 = {}, _a2[1024] = _nbind.PrimitiveType, _a2[64] = _nbind.Int64Type, _a2[2048] = _nbind.BindClass, _a2[3072] = _nbind.BindClassPtr, _a2[4096] = _nbind.SharedClassPtr, _a2[5120] = _nbind.ArrayType, _a2[6144] = _nbind.ArrayType, _a2[7168] = _nbind.CStringType, _a2[9216] = _nbind.CallbackType, _a2[10240] = _nbind.BindType, _a2);
        _nbind.makeTypeNameTbl = { "Buffer": _nbind.BufferType, "External": _nbind.ExternalType, "Int64": _nbind.Int64Type, "_nbind_new": _nbind.CreateValueType, "bool": _nbind.BooleanType, "cbFunction &": _nbind.CallbackType, "const cbFunction &": _nbind.CallbackType, "const std::string &": _nbind.StringType, "std::string": _nbind.StringType };
        Module["toggleLightGC"] = _nbind.toggleLightGC;
        _nbind.callUpcast = Module["dynCall_ii"];
        var globalScope = _nbind.makeType(_nbind.constructType, { flags: 2048, id: 0, name: "" });
        globalScope.proto = Module;
        _nbind.BindClass.list.push(globalScope);
        var _a2;
      }
      function _emscripten_set_main_loop_timing(mode, value) {
        Browser.mainLoop.timingMode = mode;
        Browser.mainLoop.timingValue = value;
        if (!Browser.mainLoop.func) {
          return 1;
        }
        if (mode == 0) {
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
            var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
            setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
          };
          Browser.mainLoop.method = "timeout";
        } else if (mode == 1) {
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner);
          };
          Browser.mainLoop.method = "rAF";
        } else if (mode == 2) {
          if (!window["setImmediate"]) {
            let Browser_setImmediate_messageHandler2 = function(event) {
              if (event.source === window && event.data === emscriptenMainLoopMessageId) {
                event.stopPropagation();
                setImmediates.shift()();
              }
            };
            var Browser_setImmediate_messageHandler = Browser_setImmediate_messageHandler2;
            var setImmediates = [];
            var emscriptenMainLoopMessageId = "setimmediate";
            window.addEventListener("message", Browser_setImmediate_messageHandler2, true);
            window["setImmediate"] = function Browser_emulated_setImmediate(func2) {
              setImmediates.push(func2);
              if (ENVIRONMENT_IS_WORKER) {
                if (Module["setImmediates"] === void 0)
                  Module["setImmediates"] = [];
                Module["setImmediates"].push(func2);
                window.postMessage({ target: emscriptenMainLoopMessageId });
              } else
                window.postMessage(emscriptenMainLoopMessageId, "*");
            };
          }
          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
            window["setImmediate"](Browser.mainLoop.runner);
          };
          Browser.mainLoop.method = "immediate";
        }
        return 0;
      }
      function _emscripten_get_now() {
        abort();
      }
      function _emscripten_set_main_loop(func2, fps, simulateInfiniteLoop, arg2, noSetTiming) {
        Module["noExitRuntime"] = true;
        assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
        Browser.mainLoop.func = func2;
        Browser.mainLoop.arg = arg2;
        var browserIterationFunc;
        if (typeof arg2 !== "undefined") {
          browserIterationFunc = function() {
            Module["dynCall_vi"](func2, arg2);
          };
        } else {
          browserIterationFunc = function() {
            Module["dynCall_v"](func2);
          };
        }
        var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
        Browser.mainLoop.runner = function Browser_mainLoop_runner() {
          if (ABORT)
            return;
          if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
              var remaining = Browser.mainLoop.remainingBlockers;
              var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
              if (blocker.counted) {
                Browser.mainLoop.remainingBlockers = next;
              } else {
                next = next + 0.5;
                Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
              }
            }
            console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
            Browser.mainLoop.updateStatus();
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
              return;
            setTimeout(Browser.mainLoop.runner, 0);
            return;
          }
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
            return;
          Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
          if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
            Browser.mainLoop.scheduler();
            return;
          } else if (Browser.mainLoop.timingMode == 0) {
            Browser.mainLoop.tickStartTime = _emscripten_get_now();
          }
          if (Browser.mainLoop.method === "timeout" && Module.ctx) {
            Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
            Browser.mainLoop.method = "";
          }
          Browser.mainLoop.runIter(browserIterationFunc);
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop)
            return;
          if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData)
            SDL.audio.queueNewAudioData();
          Browser.mainLoop.scheduler();
        };
        if (!noSetTiming) {
          if (fps && fps > 0)
            _emscripten_set_main_loop_timing(0, 1e3 / fps);
          else
            _emscripten_set_main_loop_timing(1, 1);
          Browser.mainLoop.scheduler();
        }
        if (simulateInfiniteLoop) {
          throw "SimulateInfiniteLoop";
        }
      }
      var Browser = { mainLoop: { scheduler: null, method: "", currentlyRunningMainloop: 0, func: null, arg: 0, timingMode: 0, timingValue: 0, currentFrameNumber: 0, queue: [], pause: function() {
        Browser.mainLoop.scheduler = null;
        Browser.mainLoop.currentlyRunningMainloop++;
      }, resume: function() {
        Browser.mainLoop.currentlyRunningMainloop++;
        var timingMode = Browser.mainLoop.timingMode;
        var timingValue = Browser.mainLoop.timingValue;
        var func2 = Browser.mainLoop.func;
        Browser.mainLoop.func = null;
        _emscripten_set_main_loop(func2, 0, false, Browser.mainLoop.arg, true);
        _emscripten_set_main_loop_timing(timingMode, timingValue);
        Browser.mainLoop.scheduler();
      }, updateStatus: function() {
        if (Module["setStatus"]) {
          var message = Module["statusMessage"] || "Please wait...";
          var remaining = Browser.mainLoop.remainingBlockers;
          var expected = Browser.mainLoop.expectedBlockers;
          if (remaining) {
            if (remaining < expected) {
              Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
            } else {
              Module["setStatus"](message);
            }
          } else {
            Module["setStatus"]("");
          }
        }
      }, runIter: function(func2) {
        if (ABORT)
          return;
        if (Module["preMainLoop"]) {
          var preRet = Module["preMainLoop"]();
          if (preRet === false) {
            return;
          }
        }
        try {
          func2();
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === "object" && e.stack)
              Module.printErr("exception thrown: " + [e, e.stack]);
            throw e;
          }
        }
        if (Module["postMainLoop"])
          Module["postMainLoop"]();
      } }, isFullscreen: false, pointerLock: false, moduleContextCreatedCallbacks: [], workers: [], init: function() {
        if (!Module["preloadPlugins"])
          Module["preloadPlugins"] = [];
        if (Browser.initted)
          return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch (e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
        Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : void 0;
        if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
        var imagePlugin = {};
        imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) {
                b = new Blob([new Uint8Array(byteArray).buffer], { type: Browser.getMimetype(name) });
              }
            } catch (e) {
              Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append(new Uint8Array(byteArray).buffer);
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, "Image " + name + " could not be decoded");
            var canvas2 = document.createElement("canvas");
            canvas2.width = img.width;
            canvas2.height = img.height;
            var ctx = canvas2.getContext("2d");
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas2;
            Browser.URLObject.revokeObjectURL(url);
            if (onload)
              onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log("Image " + url + " could not be decoded");
            if (onerror)
              onerror();
          };
          img.src = url;
        };
        Module["preloadPlugins"].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 };
        };
        audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio2) {
            if (done)
              return;
            done = true;
            Module["preloadedAudios"][name] = audio2;
            if (onload)
              onload(byteArray);
          }
          function fail() {
            if (done)
              return;
            done = true;
            Module["preloadedAudios"][name] = new Audio();
            if (onerror)
              onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch (e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b);
            var audio = new Audio();
            audio.addEventListener("canplaythrough", function() {
              finish(audio);
            }, false);
            audio.onerror = function audio_onerror(event) {
              if (done)
                return;
              console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
              function encode64(data) {
                var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                var PAD = "=";
                var ret = "";
                var leftchar = 0;
                var leftbits = 0;
                for (var i2 = 0; i2 < data.length; i2++) {
                  leftchar = leftchar << 8 | data[i2];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = leftchar >> leftbits - 6 & 63;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar & 3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar & 15) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
              finish(audio);
            };
            audio.src = url;
            Browser.safeSetTimeout(function() {
              finish(audio);
            }, 1e4);
          } else {
            return fail();
          }
        };
        Module["preloadPlugins"].push(audioPlugin);
        function pointerLockChange() {
          Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"];
        }
        var canvas = Module["canvas"];
        if (canvas) {
          canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || function() {
          };
          canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || function() {
          };
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
          document.addEventListener("pointerlockchange", pointerLockChange, false);
          document.addEventListener("mozpointerlockchange", pointerLockChange, false);
          document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
          document.addEventListener("mspointerlockchange", pointerLockChange, false);
          if (Module["elementPointerLock"]) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                Module["canvas"].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      }, createContext: function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas)
          return Module.ctx;
        var ctx;
        var contextHandle;
        if (useWebGL) {
          var contextAttributes = { antialias: false, alpha: false };
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext("2d");
        }
        if (!ctx)
          return null;
        if (setInModule) {
          if (!useWebGL)
            assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
          Module.ctx = ctx;
          if (useWebGL)
            GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) {
            callback();
          });
          Browser.init();
        }
        return ctx;
      }, destroyContext: function(canvas, useWebGL, setInModule) {
      }, fullscreenHandlersInstalled: false, lockPointer: void 0, resizeCanvas: void 0, requestFullscreen: function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === "undefined")
          Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === "undefined")
          Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === "undefined")
          Browser.vrDevice = null;
        var canvas = Module["canvas"];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer2 = canvas.parentNode;
          if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer2) {
            canvas.exitFullscreen = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || function() {
            };
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer)
              canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas)
              Browser.setFullscreenCanvasSize();
          } else {
            canvasContainer2.parentNode.insertBefore(canvas, canvasContainer2);
            canvasContainer2.parentNode.removeChild(canvasContainer2);
            if (Browser.resizeCanvas)
              Browser.setWindowedCanvasSize();
          }
          if (Module["onFullScreen"])
            Module["onFullScreen"](Browser.isFullscreen);
          if (Module["onFullscreen"])
            Module["onFullscreen"](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener("fullscreenchange", fullscreenChange, false);
          document.addEventListener("mozfullscreenchange", fullscreenChange, false);
          document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
          document.addEventListener("MSFullscreenChange", fullscreenChange, false);
        }
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? function() {
          canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"]);
        } : null) || (canvasContainer["webkitRequestFullScreen"] ? function() {
          canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
        } : null);
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      }, requestFullScreen: function(lockPointer, resizeCanvas, vrDevice) {
        Module.printErr("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");
        Browser.requestFullScreen = function(lockPointer2, resizeCanvas2, vrDevice2) {
          return Browser.requestFullscreen(lockPointer2, resizeCanvas2, vrDevice2);
        };
        return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      }, nextRAF: 0, fakeRequestAnimationFrame: function(func2) {
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1e3 / 60;
        } else {
          while (now + 2 >= Browser.nextRAF) {
            Browser.nextRAF += 1e3 / 60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func2, delay);
      }, requestAnimationFrame: function requestAnimationFrame(func2) {
        if (typeof window === "undefined") {
          Browser.fakeRequestAnimationFrame(func2);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func2);
        }
      }, safeCallback: function(func2) {
        return function() {
          if (!ABORT)
            return func2.apply(null, arguments);
        };
      }, allowAsyncCallbacks: true, queuedAsyncCallbacks: [], pauseAsyncCallbacks: function() {
        Browser.allowAsyncCallbacks = false;
      }, resumeAsyncCallbacks: function() {
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func2) {
            func2();
          });
        }
      }, safeRequestAnimationFrame: function(func2) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT)
            return;
          if (Browser.allowAsyncCallbacks) {
            func2();
          } else {
            Browser.queuedAsyncCallbacks.push(func2);
          }
        });
      }, safeSetTimeout: function(func2, timeout) {
        Module["noExitRuntime"] = true;
        return setTimeout(function() {
          if (ABORT)
            return;
          if (Browser.allowAsyncCallbacks) {
            func2();
          } else {
            Browser.queuedAsyncCallbacks.push(func2);
          }
        }, timeout);
      }, safeSetInterval: function(func2, timeout) {
        Module["noExitRuntime"] = true;
        return setInterval(function() {
          if (ABORT)
            return;
          if (Browser.allowAsyncCallbacks) {
            func2();
          }
        }, timeout);
      }, getMimetype: function(name) {
        return { "jpg": "image/jpeg", "jpeg": "image/jpeg", "png": "image/png", "bmp": "image/bmp", "ogg": "audio/ogg", "wav": "audio/wav", "mp3": "audio/mpeg" }[name.substr(name.lastIndexOf(".") + 1)];
      }, getUserMedia: function(func2) {
        if (!window.getUserMedia) {
          window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
        }
        window.getUserMedia(func2);
      }, getMovementX: function(event) {
        return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
      }, getMovementY: function(event) {
        return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
      }, getMouseWheelDelta: function(event) {
        var delta = 0;
        switch (event.type) {
          case "DOMMouseScroll":
            delta = event.detail;
            break;
          case "mousewheel":
            delta = event.wheelDelta;
            break;
          case "wheel":
            delta = event["deltaY"];
            break;
          default:
            throw "unrecognized mouse wheel event: " + event.type;
        }
        return delta;
      }, mouseX: 0, mouseY: 0, mouseMovementX: 0, mouseMovementY: 0, touches: {}, lastTouches: {}, calculateMouseEvent: function(event) {
        if (Browser.pointerLock) {
          if (event.type != "mousemove" && "mozMovementX" in event) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
          var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
          if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
            var touch = event.touch;
            if (touch === void 0) {
              return;
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
            var coords = { x: adjustedX, y: adjustedY };
            if (event.type === "touchstart") {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === "touchend" || event.type === "touchmove") {
              var last = Browser.touches[touch.identifier];
              if (!last)
                last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      }, asyncLoad: function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
        Module["readAsync"](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep)
            removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep)
          addRunDependency(dep);
      }, resizeListeners: [], updateResizeListeners: function() {
        var canvas = Module["canvas"];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      }, setCanvasSize: function(width, height, noUpdates) {
        var canvas = Module["canvas"];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates)
          Browser.updateResizeListeners();
      }, windowedWidth: 0, windowedHeight: 0, setFullscreenCanvasSize: function() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
          flags = flags | 8388608;
          HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
        }
        Browser.updateResizeListeners();
      }, setWindowedCanvasSize: function() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
          flags = flags & ~8388608;
          HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
        }
        Browser.updateResizeListeners();
      }, updateCanvasDimensions: function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
          if (w / h < Module["forcedAspectRatio"]) {
            w = Math.round(h * Module["forcedAspectRatio"]);
          } else {
            h = Math.round(w / Module["forcedAspectRatio"]);
          }
        }
        if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
          var factor = Math.min(screen.width / w, screen.height / h);
          w = Math.round(w * factor);
          h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width != w)
            canvas.width = w;
          if (canvas.height != h)
            canvas.height = h;
          if (typeof canvas.style != "undefined") {
            canvas.style.removeProperty("width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width != wNative)
            canvas.width = wNative;
          if (canvas.height != hNative)
            canvas.height = hNative;
          if (typeof canvas.style != "undefined") {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty("width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty("width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }, wgetRequests: {}, nextWgetRequestHandle: 0, getNextWgetRequestHandle: function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      } };
      var SYSCALLS = { varargs: 0, get: function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret;
      }, getStr: function() {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      }, get64: function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0)
          assert(high === 0);
        else
          assert(high === -1);
        return low;
      }, getZero: function() {
        assert(SYSCALLS.get() === 0);
      } };
      function ___syscall6(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.getStreamFromFD();
          FS.close(stream);
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___syscall54(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function _typeModule(self2) {
        var structureList = [[0, 1, "X"], [1, 1, "const X"], [128, 1, "X *"], [256, 1, "X &"], [384, 1, "X &&"], [512, 1, "std::shared_ptr<X>"], [640, 1, "std::unique_ptr<X>"], [5120, 1, "std::vector<X>"], [6144, 2, "std::array<X, Y>"], [9216, -1, "std::function<X (Y)>"]];
        function applyStructure(outerName, outerFlags, innerName, innerFlags, param, flip) {
          if (outerFlags == 1) {
            var ref = innerFlags & 896;
            if (ref == 128 || ref == 256 || ref == 384)
              outerName = "X const";
          }
          var name;
          if (flip) {
            name = innerName.replace("X", outerName).replace("Y", param);
          } else {
            name = outerName.replace("X", innerName).replace("Y", param);
          }
          return name.replace(/([*&]) (?=[*&])/g, "$1");
        }
        function reportProblem(problem, id, kind, structureType, place) {
          throw new Error(problem + " type " + kind.replace("X", id + "?") + (structureType ? " with flag " + structureType : "") + " in " + place);
        }
        function getComplexType(id, constructType2, getType2, queryType2, place, kind, prevStructure, depth) {
          if (kind === void 0) {
            kind = "X";
          }
          if (depth === void 0) {
            depth = 1;
          }
          var result = getType2(id);
          if (result)
            return result;
          var query = queryType2(id);
          var structureType = query.placeholderFlag;
          var structure = structureList[structureType];
          if (prevStructure && structure) {
            kind = applyStructure(prevStructure[2], prevStructure[0], kind, structure[0], "?", true);
          }
          var problem;
          if (structureType == 0)
            problem = "Unbound";
          if (structureType >= 10)
            problem = "Corrupt";
          if (depth > 20)
            problem = "Deeply nested";
          if (problem)
            reportProblem(problem, id, kind, structureType, place || "?");
          var subId = query.paramList[0];
          var subType = getComplexType(subId, constructType2, getType2, queryType2, place, kind, structure, depth + 1);
          var srcSpec;
          var spec = { flags: structure[0], id, name: "", paramList: [subType] };
          var argList2 = [];
          var structureParam = "?";
          switch (query.placeholderFlag) {
            case 1:
              srcSpec = subType.spec;
              break;
            case 2:
              if ((subType.flags & 15360) == 1024 && subType.spec.ptrSize == 1) {
                spec.flags = 7168;
                break;
              }
              ;
            case 3:
            case 6:
            case 5:
              srcSpec = subType.spec;
              if ((subType.flags & 15360) != 2048) {
              }
              break;
            case 8:
              structureParam = "" + query.paramList[1];
              spec.paramList.push(query.paramList[1]);
              break;
            case 9:
              for (var _i = 0, _a2 = query.paramList[1]; _i < _a2.length; _i++) {
                var paramId = _a2[_i];
                var paramType = getComplexType(paramId, constructType2, getType2, queryType2, place, kind, structure, depth + 1);
                argList2.push(paramType.name);
                spec.paramList.push(paramType);
              }
              structureParam = argList2.join(", ");
              break;
            default:
              break;
          }
          spec.name = applyStructure(structure[2], structure[0], subType.name, subType.flags, structureParam);
          if (srcSpec) {
            for (var _b = 0, _c = Object.keys(srcSpec); _b < _c.length; _b++) {
              var key2 = _c[_b];
              spec[key2] = spec[key2] || srcSpec[key2];
            }
            spec.flags |= srcSpec.flags;
          }
          return makeType(constructType2, spec);
        }
        function makeType(constructType2, spec) {
          var flags = spec.flags;
          var refKind = flags & 896;
          var kind = flags & 15360;
          if (!spec.name && kind == 1024) {
            if (spec.ptrSize == 1) {
              spec.name = (flags & 16 ? "" : (flags & 8 ? "un" : "") + "signed ") + "char";
            } else {
              spec.name = (flags & 8 ? "u" : "") + (flags & 32 ? "float" : "int") + (spec.ptrSize * 8 + "_t");
            }
          }
          if (spec.ptrSize == 8 && !(flags & 32))
            kind = 64;
          if (kind == 2048) {
            if (refKind == 512 || refKind == 640) {
              kind = 4096;
            } else if (refKind)
              kind = 3072;
          }
          return constructType2(kind, spec);
        }
        var Type = function() {
          function Type2(spec) {
            this.id = spec.id;
            this.name = spec.name;
            this.flags = spec.flags;
            this.spec = spec;
          }
          Type2.prototype.toString = function() {
            return this.name;
          };
          return Type2;
        }();
        var output = { Type, getComplexType, makeType, structureList };
        self2.output = output;
        return self2.output || output;
      }
      function __nbind_register_type(id, namePtr) {
        var name = _nbind.readAsciiString(namePtr);
        var spec = { flags: 10240, id, name };
        _nbind.makeType(_nbind.constructType, spec);
      }
      function __nbind_register_callback_signature(typeListPtr, typeCount) {
        var typeList = _nbind.readTypeIdList(typeListPtr, typeCount);
        var num2 = _nbind.callbackSignatureList.length;
        _nbind.callbackSignatureList[num2] = _nbind.makeJSCaller(typeList);
        return num2;
      }
      function __extends(Class, Parent) {
        for (var key2 in Parent)
          if (Parent.hasOwnProperty(key2))
            Class[key2] = Parent[key2];
        function Base() {
          this.constructor = Class;
        }
        Base.prototype = Parent.prototype;
        Class.prototype = new Base();
      }
      function __nbind_register_class(idListPtr, policyListPtr, superListPtr, upcastListPtr, superCount, destructorPtr, namePtr) {
        var name = _nbind.readAsciiString(namePtr);
        var policyTbl2 = _nbind.readPolicyList(policyListPtr);
        var idList = HEAPU32.subarray(idListPtr / 4, idListPtr / 4 + 2);
        var spec = { flags: 2048 | (policyTbl2["Value"] ? 2 : 0), id: idList[0], name };
        var bindClass = _nbind.makeType(_nbind.constructType, spec);
        bindClass.ptrType = _nbind.getComplexType(idList[1], _nbind.constructType, _nbind.getType, _nbind.queryType);
        bindClass.destroy = _nbind.makeMethodCaller(bindClass.ptrType, { boundID: spec.id, flags: 0, name: "destroy", num: 0, ptr: destructorPtr, title: bindClass.name + ".free", typeList: ["void", "uint32_t", "uint32_t"] });
        if (superCount) {
          bindClass.superIdList = Array.prototype.slice.call(HEAPU32.subarray(superListPtr / 4, superListPtr / 4 + superCount));
          bindClass.upcastList = Array.prototype.slice.call(HEAPU32.subarray(upcastListPtr / 4, upcastListPtr / 4 + superCount));
        }
        Module[bindClass.name] = bindClass.makeBound(policyTbl2);
        _nbind.BindClass.list.push(bindClass);
      }
      function _removeAccessorPrefix(name) {
        var prefixMatcher = /^[Gg]et_?([A-Z]?([A-Z]?))/;
        return name.replace(prefixMatcher, function(match, initial, second) {
          return second ? initial : initial.toLowerCase();
        });
      }
      function __nbind_register_function(boundID, policyListPtr, typeListPtr, typeCount, ptr2, direct, signatureType, namePtr, num2, flags) {
        var bindClass = _nbind.getType(boundID);
        var policyTbl2 = _nbind.readPolicyList(policyListPtr);
        var typeList = _nbind.readTypeIdList(typeListPtr, typeCount);
        var specList;
        if (signatureType == 5) {
          specList = [{ direct: ptr2, name: "__nbindConstructor", ptr: 0, title: bindClass.name + " constructor", typeList: ["uint32_t"].concat(typeList.slice(1)) }, { direct, name: "__nbindValueConstructor", ptr: 0, title: bindClass.name + " value constructor", typeList: ["void", "uint32_t"].concat(typeList.slice(1)) }];
        } else {
          var name_1 = _nbind.readAsciiString(namePtr);
          var title = (bindClass.name && bindClass.name + ".") + name_1;
          if (signatureType == 3 || signatureType == 4) {
            name_1 = _removeAccessorPrefix(name_1);
          }
          specList = [{ boundID, direct, name: name_1, ptr: ptr2, title, typeList }];
        }
        for (var _i = 0, specList_1 = specList; _i < specList_1.length; _i++) {
          var spec = specList_1[_i];
          spec.signatureType = signatureType;
          spec.policyTbl = policyTbl2;
          spec.num = num2;
          spec.flags = flags;
          bindClass.addMethod(spec);
        }
      }
      function _nbind_value(name, proto2) {
        if (!_nbind.typeNameTbl[name])
          _nbind.throwError("Unknown value type " + name);
        Module["NBind"].bind_value(name, proto2);
        _defineHidden(_nbind.typeNameTbl[name].proto.prototype.__nbindValueConstructor)(proto2.prototype, "__nbindValueConstructor");
      }
      Module["_nbind_value"] = _nbind_value;
      function __nbind_get_value_object(num2, ptr2) {
        var obj = _nbind.popValue(num2);
        if (!obj.fromJS) {
          throw new Error("Object " + obj + " has no fromJS function");
        }
        obj.fromJS(function() {
          obj.__nbindValueConstructor.apply(this, Array.prototype.concat.apply([ptr2], arguments));
        });
      }
      function _emscripten_memcpy_big(dest, src, num2) {
        HEAPU8.set(HEAPU8.subarray(src, src + num2), dest);
        return dest;
      }
      function __nbind_register_primitive(id, size, flags) {
        var spec = { flags: 1024 | flags, id, ptrSize: size };
        _nbind.makeType(_nbind.constructType, spec);
      }
      var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_STATIC);
      function ___setErrNo(value) {
        if (Module["___errno_location"])
          HEAP32[Module["___errno_location"]() >> 2] = value;
        return value;
      }
      function _llvm_stacksave() {
        var self2 = _llvm_stacksave;
        if (!self2.LLVM_SAVEDSTACKS) {
          self2.LLVM_SAVEDSTACKS = [];
        }
        self2.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
        return self2.LLVM_SAVEDSTACKS.length - 1;
      }
      function ___syscall140(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
          var offset = offset_low;
          FS.llseek(stream, offset, whence);
          HEAP32[result >> 2] = stream.position;
          if (stream.getdents && offset === 0 && whence === 0)
            stream.getdents = null;
          return 0;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function ___syscall146(which, varargs) {
        SYSCALLS.varargs = varargs;
        try {
          var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
          var ret = 0;
          if (!___syscall146.buffer) {
            ___syscall146.buffers = [null, [], []];
            ___syscall146.printChar = function(stream2, curr) {
              var buffer2 = ___syscall146.buffers[stream2];
              assert(buffer2);
              if (curr === 0 || curr === 10) {
                (stream2 === 1 ? Module["print"] : Module["printErr"])(UTF8ArrayToString(buffer2, 0));
                buffer2.length = 0;
              } else {
                buffer2.push(curr);
              }
            };
          }
          for (var i2 = 0; i2 < iovcnt; i2++) {
            var ptr2 = HEAP32[iov + i2 * 8 >> 2];
            var len = HEAP32[iov + (i2 * 8 + 4) >> 2];
            for (var j = 0; j < len; j++) {
              ___syscall146.printChar(stream, HEAPU8[ptr2 + j]);
            }
            ret += len;
          }
          return ret;
        } catch (e) {
          if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError))
            abort(e);
          return -e.errno;
        }
      }
      function __nbind_finish() {
        for (var _i = 0, _a2 = _nbind.BindClass.list; _i < _a2.length; _i++) {
          var bindClass = _a2[_i];
          bindClass.finish();
        }
      }
      var ___dso_handle = STATICTOP;
      STATICTOP += 16;
      (function(_nbind) {
        var typeIdTbl = {};
        _nbind.typeNameTbl = {};
        var Pool = function() {
          function Pool2() {
          }
          Pool2.lalloc = function(size) {
            size = size + 7 & ~7;
            var used = HEAPU32[Pool2.usedPtr];
            if (size > Pool2.pageSize / 2 || size > Pool2.pageSize - used) {
              var NBind = _nbind.typeNameTbl["NBind"].proto;
              return NBind.lalloc(size);
            } else {
              HEAPU32[Pool2.usedPtr] = used + size;
              return Pool2.rootPtr + used;
            }
          };
          Pool2.lreset = function(used, page) {
            var topPage = HEAPU32[Pool2.pagePtr];
            if (topPage) {
              var NBind = _nbind.typeNameTbl["NBind"].proto;
              NBind.lreset(used, page);
            } else {
              HEAPU32[Pool2.usedPtr] = used;
            }
          };
          return Pool2;
        }();
        _nbind.Pool = Pool;
        function constructType(kind, spec) {
          var construct = kind == 10240 ? _nbind.makeTypeNameTbl[spec.name] || _nbind.BindType : _nbind.makeTypeKindTbl[kind];
          var bindType = new construct(spec);
          typeIdTbl[spec.id] = bindType;
          _nbind.typeNameTbl[spec.name] = bindType;
          return bindType;
        }
        _nbind.constructType = constructType;
        function getType(id) {
          return typeIdTbl[id];
        }
        _nbind.getType = getType;
        function queryType(id) {
          var placeholderFlag = HEAPU8[id];
          var paramCount = _nbind.structureList[placeholderFlag][1];
          id /= 4;
          if (paramCount < 0) {
            ++id;
            paramCount = HEAPU32[id] + 1;
          }
          var paramList = Array.prototype.slice.call(HEAPU32.subarray(id + 1, id + 1 + paramCount));
          if (placeholderFlag == 9) {
            paramList = [paramList[0], paramList.slice(1)];
          }
          return { paramList, placeholderFlag };
        }
        _nbind.queryType = queryType;
        function getTypes(idList, place) {
          return idList.map(function(id) {
            return typeof id == "number" ? _nbind.getComplexType(id, constructType, getType, queryType, place) : _nbind.typeNameTbl[id];
          });
        }
        _nbind.getTypes = getTypes;
        function readTypeIdList(typeListPtr, typeCount) {
          return Array.prototype.slice.call(HEAPU32, typeListPtr / 4, typeListPtr / 4 + typeCount);
        }
        _nbind.readTypeIdList = readTypeIdList;
        function readAsciiString(ptr2) {
          var endPtr = ptr2;
          while (HEAPU8[endPtr++])
            ;
          return String.fromCharCode.apply("", HEAPU8.subarray(ptr2, endPtr - 1));
        }
        _nbind.readAsciiString = readAsciiString;
        function readPolicyList(policyListPtr) {
          var policyTbl2 = {};
          if (policyListPtr) {
            while (1) {
              var namePtr = HEAPU32[policyListPtr / 4];
              if (!namePtr)
                break;
              policyTbl2[readAsciiString(namePtr)] = true;
              policyListPtr += 4;
            }
          }
          return policyTbl2;
        }
        _nbind.readPolicyList = readPolicyList;
        function getDynCall(typeList, name) {
          var mangleMap = { float32_t: "d", float64_t: "d", int64_t: "d", uint64_t: "d", "void": "v" };
          var signature = typeList.map(function(type2) {
            return mangleMap[type2.name] || "i";
          }).join("");
          var dynCall2 = Module["dynCall_" + signature];
          if (!dynCall2) {
            throw new Error("dynCall_" + signature + " not found for " + name + "(" + typeList.map(function(type2) {
              return type2.name;
            }).join(", ") + ")");
          }
          return dynCall2;
        }
        _nbind.getDynCall = getDynCall;
        function addMethod(obj, name, func2, arity) {
          var overload = obj[name];
          if (obj.hasOwnProperty(name) && overload) {
            if (overload.arity || overload.arity === 0) {
              overload = _nbind.makeOverloader(overload, overload.arity);
              obj[name] = overload;
            }
            overload.addMethod(func2, arity);
          } else {
            func2.arity = arity;
            obj[name] = func2;
          }
        }
        _nbind.addMethod = addMethod;
        function throwError(message) {
          throw new Error(message);
        }
        _nbind.throwError = throwError;
        _nbind.bigEndian = false;
        var _a = _typeModule(_typeModule);
        _nbind.Type = _a.Type, _nbind.makeType = _a.makeType, _nbind.getComplexType = _a.getComplexType, _nbind.structureList = _a.structureList;
        var BindType = function(_super) {
          __extends(BindType2, _super);
          function BindType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.heap = HEAPU32;
            _this.ptrSize = 4;
            return _this;
          }
          BindType2.prototype.needsWireRead = function(policyTbl2) {
            return !!this.wireRead || !!this.makeWireRead;
          };
          BindType2.prototype.needsWireWrite = function(policyTbl2) {
            return !!this.wireWrite || !!this.makeWireWrite;
          };
          return BindType2;
        }(_nbind.Type);
        _nbind.BindType = BindType;
        var PrimitiveType = function(_super) {
          __extends(PrimitiveType2, _super);
          function PrimitiveType2(spec) {
            var _this = _super.call(this, spec) || this;
            var heapTbl = spec.flags & 32 ? { 32: HEAPF32, 64: HEAPF64 } : spec.flags & 8 ? { 8: HEAPU8, 16: HEAPU16, 32: HEAPU32 } : { 8: HEAP8, 16: HEAP16, 32: HEAP32 };
            _this.heap = heapTbl[spec.ptrSize * 8];
            _this.ptrSize = spec.ptrSize;
            return _this;
          }
          PrimitiveType2.prototype.needsWireWrite = function(policyTbl2) {
            return !!policyTbl2 && !!policyTbl2["Strict"];
          };
          PrimitiveType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return policyTbl2 && policyTbl2["Strict"] && function(arg2) {
              if (typeof arg2 == "number")
                return arg2;
              throw new Error("Type mismatch");
            };
          };
          return PrimitiveType2;
        }(BindType);
        _nbind.PrimitiveType = PrimitiveType;
        function pushCString(str, policyTbl2) {
          if (str === null || str === void 0) {
            if (policyTbl2 && policyTbl2["Nullable"]) {
              return 0;
            } else
              throw new Error("Type mismatch");
          }
          if (policyTbl2 && policyTbl2["Strict"]) {
            if (typeof str != "string")
              throw new Error("Type mismatch");
          } else
            str = str.toString();
          var length = Module.lengthBytesUTF8(str) + 1;
          var result = _nbind.Pool.lalloc(length);
          Module.stringToUTF8Array(str, HEAPU8, result, length);
          return result;
        }
        _nbind.pushCString = pushCString;
        function popCString(ptr2) {
          if (ptr2 === 0)
            return null;
          return Module.Pointer_stringify(ptr2);
        }
        _nbind.popCString = popCString;
        var CStringType = function(_super) {
          __extends(CStringType2, _super);
          function CStringType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = popCString;
            _this.wireWrite = pushCString;
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            return _this;
          }
          CStringType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return function(arg2) {
              return pushCString(arg2, policyTbl2);
            };
          };
          return CStringType2;
        }(BindType);
        _nbind.CStringType = CStringType;
        var BooleanType = function(_super) {
          __extends(BooleanType2, _super);
          function BooleanType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = function(arg2) {
              return !!arg2;
            };
            return _this;
          }
          BooleanType2.prototype.needsWireWrite = function(policyTbl2) {
            return !!policyTbl2 && !!policyTbl2["Strict"];
          };
          BooleanType2.prototype.makeWireRead = function(expr) {
            return "!!(" + expr + ")";
          };
          BooleanType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return policyTbl2 && policyTbl2["Strict"] && function(arg2) {
              if (typeof arg2 == "boolean")
                return arg2;
              throw new Error("Type mismatch");
            } || expr;
          };
          return BooleanType2;
        }(BindType);
        _nbind.BooleanType = BooleanType;
        var Wrapper = function() {
          function Wrapper2() {
          }
          Wrapper2.prototype.persist = function() {
            this.__nbindState |= 1;
          };
          return Wrapper2;
        }();
        _nbind.Wrapper = Wrapper;
        function makeBound(policyTbl2, bindClass) {
          var Bound = function(_super) {
            __extends(Bound2, _super);
            function Bound2(marker, flags, ptr2, shared) {
              var _this = _super.call(this) || this;
              if (!(_this instanceof Bound2)) {
                return new (Function.prototype.bind.apply(Bound2, Array.prototype.concat.apply([null], arguments)))();
              }
              var nbindFlags = flags;
              var nbindPtr = ptr2;
              var nbindShared = shared;
              if (marker !== _nbind.ptrMarker) {
                var wirePtr = _this.__nbindConstructor.apply(_this, arguments);
                nbindFlags = 4096 | 512;
                nbindShared = HEAPU32[wirePtr / 4];
                nbindPtr = HEAPU32[wirePtr / 4 + 1];
              }
              var spec = { configurable: true, enumerable: false, value: null, writable: false };
              var propTbl = { "__nbindFlags": nbindFlags, "__nbindPtr": nbindPtr };
              if (nbindShared) {
                propTbl["__nbindShared"] = nbindShared;
                _nbind.mark(_this);
              }
              for (var _i = 0, _a2 = Object.keys(propTbl); _i < _a2.length; _i++) {
                var key2 = _a2[_i];
                spec.value = propTbl[key2];
                Object.defineProperty(_this, key2, spec);
              }
              _defineHidden(0)(_this, "__nbindState");
              return _this;
            }
            Bound2.prototype.free = function() {
              bindClass.destroy.call(this, this.__nbindShared, this.__nbindFlags);
              this.__nbindState |= 2;
              disableMember(this, "__nbindShared");
              disableMember(this, "__nbindPtr");
            };
            return Bound2;
          }(Wrapper);
          __decorate([_defineHidden()], Bound.prototype, "__nbindConstructor", void 0);
          __decorate([_defineHidden()], Bound.prototype, "__nbindValueConstructor", void 0);
          __decorate([_defineHidden(policyTbl2)], Bound.prototype, "__nbindPolicies", void 0);
          return Bound;
        }
        _nbind.makeBound = makeBound;
        function disableMember(obj, name) {
          function die() {
            throw new Error("Accessing deleted object");
          }
          Object.defineProperty(obj, name, { configurable: false, enumerable: false, get: die, set: die });
        }
        _nbind.ptrMarker = {};
        var BindClass = function(_super) {
          __extends(BindClass2, _super);
          function BindClass2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.wireRead = function(arg2) {
              return _nbind.popValue(arg2, _this.ptrType);
            };
            _this.wireWrite = function(arg2) {
              return pushPointer(arg2, _this.ptrType, true);
            };
            _this.pendingSuperCount = 0;
            _this.ready = false;
            _this.methodTbl = {};
            if (spec.paramList) {
              _this.classType = spec.paramList[0].classType;
              _this.proto = _this.classType.proto;
            } else
              _this.classType = _this;
            return _this;
          }
          BindClass2.prototype.makeBound = function(policyTbl2) {
            var Bound = _nbind.makeBound(policyTbl2, this);
            this.proto = Bound;
            this.ptrType.proto = Bound;
            return Bound;
          };
          BindClass2.prototype.addMethod = function(spec) {
            var overloadList = this.methodTbl[spec.name] || [];
            overloadList.push(spec);
            this.methodTbl[spec.name] = overloadList;
          };
          BindClass2.prototype.registerMethods = function(src, staticOnly) {
            var setter;
            for (var _i = 0, _a2 = Object.keys(src.methodTbl); _i < _a2.length; _i++) {
              var name_1 = _a2[_i];
              var overloadList = src.methodTbl[name_1];
              for (var _b = 0, overloadList_1 = overloadList; _b < overloadList_1.length; _b++) {
                var spec = overloadList_1[_b];
                var target = void 0;
                var caller = void 0;
                target = this.proto.prototype;
                if (staticOnly && spec.signatureType != 1)
                  continue;
                switch (spec.signatureType) {
                  case 1:
                    target = this.proto;
                  case 5:
                    caller = _nbind.makeCaller(spec);
                    _nbind.addMethod(target, spec.name, caller, spec.typeList.length - 1);
                    break;
                  case 4:
                    setter = _nbind.makeMethodCaller(src.ptrType, spec);
                    break;
                  case 3:
                    Object.defineProperty(target, spec.name, { configurable: true, enumerable: false, get: _nbind.makeMethodCaller(src.ptrType, spec), set: setter });
                    break;
                  case 2:
                    caller = _nbind.makeMethodCaller(src.ptrType, spec);
                    _nbind.addMethod(target, spec.name, caller, spec.typeList.length - 1);
                    break;
                  default:
                    break;
                }
              }
            }
          };
          BindClass2.prototype.registerSuperMethods = function(src, firstSuper, visitTbl) {
            if (visitTbl[src.name])
              return;
            visitTbl[src.name] = true;
            var superNum = 0;
            var nextFirst;
            for (var _i = 0, _a2 = src.superIdList || []; _i < _a2.length; _i++) {
              var superId = _a2[_i];
              var superClass = _nbind.getType(superId);
              if (superNum++ < firstSuper || firstSuper < 0) {
                nextFirst = -1;
              } else {
                nextFirst = 0;
              }
              this.registerSuperMethods(superClass, nextFirst, visitTbl);
            }
            this.registerMethods(src, firstSuper < 0);
          };
          BindClass2.prototype.finish = function() {
            if (this.ready)
              return this;
            this.ready = true;
            this.superList = (this.superIdList || []).map(function(superId) {
              return _nbind.getType(superId).finish();
            });
            var Bound = this.proto;
            if (this.superList.length) {
              var Proto = function() {
                this.constructor = Bound;
              };
              Proto.prototype = this.superList[0].proto.prototype;
              Bound.prototype = new Proto();
            }
            if (Bound != Module)
              Bound.prototype.__nbindType = this;
            this.registerSuperMethods(this, 1, {});
            return this;
          };
          BindClass2.prototype.upcastStep = function(dst, ptr2) {
            if (dst == this)
              return ptr2;
            for (var i2 = 0; i2 < this.superList.length; ++i2) {
              var superPtr = this.superList[i2].upcastStep(dst, _nbind.callUpcast(this.upcastList[i2], ptr2));
              if (superPtr)
                return superPtr;
            }
            return 0;
          };
          return BindClass2;
        }(_nbind.BindType);
        BindClass.list = [];
        _nbind.BindClass = BindClass;
        function popPointer(ptr2, type2) {
          return ptr2 ? new type2.proto(_nbind.ptrMarker, type2.flags, ptr2) : null;
        }
        _nbind.popPointer = popPointer;
        function pushPointer(obj, type2, tryValue) {
          if (!(obj instanceof _nbind.Wrapper)) {
            if (tryValue) {
              return _nbind.pushValue(obj);
            } else
              throw new Error("Type mismatch");
          }
          var ptr2 = obj.__nbindPtr;
          var objType = obj.__nbindType.classType;
          var classType = type2.classType;
          if (obj instanceof type2.proto) {
            while (objType != classType) {
              ptr2 = _nbind.callUpcast(objType.upcastList[0], ptr2);
              objType = objType.superList[0];
            }
          } else {
            ptr2 = objType.upcastStep(classType, ptr2);
            if (!ptr2)
              throw new Error("Type mismatch");
          }
          return ptr2;
        }
        _nbind.pushPointer = pushPointer;
        function pushMutablePointer(obj, type2) {
          var ptr2 = pushPointer(obj, type2);
          if (obj.__nbindFlags & 1) {
            throw new Error("Passing a const value as a non-const argument");
          }
          return ptr2;
        }
        var BindClassPtr = function(_super) {
          __extends(BindClassPtr2, _super);
          function BindClassPtr2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.classType = spec.paramList[0].classType;
            _this.proto = _this.classType.proto;
            var isConst = spec.flags & 1;
            var isValue = (_this.flags & 896) == 256 && spec.flags & 2;
            var push = isConst ? pushPointer : pushMutablePointer;
            var pop = isValue ? _nbind.popValue : popPointer;
            _this.makeWireWrite = function(expr, policyTbl2) {
              return policyTbl2["Nullable"] ? function(arg2) {
                return arg2 ? push(arg2, _this) : 0;
              } : function(arg2) {
                return push(arg2, _this);
              };
            };
            _this.wireRead = function(arg2) {
              return pop(arg2, _this);
            };
            _this.wireWrite = function(arg2) {
              return push(arg2, _this);
            };
            return _this;
          }
          return BindClassPtr2;
        }(_nbind.BindType);
        _nbind.BindClassPtr = BindClassPtr;
        function popShared(ptr2, type2) {
          var shared = HEAPU32[ptr2 / 4];
          var unsafe = HEAPU32[ptr2 / 4 + 1];
          return unsafe ? new type2.proto(_nbind.ptrMarker, type2.flags, unsafe, shared) : null;
        }
        _nbind.popShared = popShared;
        function pushShared(obj, type2) {
          if (!(obj instanceof type2.proto))
            throw new Error("Type mismatch");
          return obj.__nbindShared;
        }
        function pushMutableShared(obj, type2) {
          if (!(obj instanceof type2.proto))
            throw new Error("Type mismatch");
          if (obj.__nbindFlags & 1) {
            throw new Error("Passing a const value as a non-const argument");
          }
          return obj.__nbindShared;
        }
        var SharedClassPtr = function(_super) {
          __extends(SharedClassPtr2, _super);
          function SharedClassPtr2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.readResources = [_nbind.resources.pool];
            _this.classType = spec.paramList[0].classType;
            _this.proto = _this.classType.proto;
            var isConst = spec.flags & 1;
            var push = isConst ? pushShared : pushMutableShared;
            _this.wireRead = function(arg2) {
              return popShared(arg2, _this);
            };
            _this.wireWrite = function(arg2) {
              return push(arg2, _this);
            };
            return _this;
          }
          return SharedClassPtr2;
        }(_nbind.BindType);
        _nbind.SharedClassPtr = SharedClassPtr;
        _nbind.externalList = [0];
        var firstFreeExternal = 0;
        var External = function() {
          function External2(data) {
            this.refCount = 1;
            this.data = data;
          }
          External2.prototype.register = function() {
            var num2 = firstFreeExternal;
            if (num2) {
              firstFreeExternal = _nbind.externalList[num2];
            } else
              num2 = _nbind.externalList.length;
            _nbind.externalList[num2] = this;
            return num2;
          };
          External2.prototype.reference = function() {
            ++this.refCount;
          };
          External2.prototype.dereference = function(num2) {
            if (--this.refCount == 0) {
              if (this.free)
                this.free();
              _nbind.externalList[num2] = firstFreeExternal;
              firstFreeExternal = num2;
            }
          };
          return External2;
        }();
        _nbind.External = External;
        function popExternal(num2) {
          var obj = _nbind.externalList[num2];
          obj.dereference(num2);
          return obj.data;
        }
        function pushExternal(obj) {
          var external = new External(obj);
          external.reference();
          return external.register();
        }
        var ExternalType = function(_super) {
          __extends(ExternalType2, _super);
          function ExternalType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = popExternal;
            _this.wireWrite = pushExternal;
            return _this;
          }
          return ExternalType2;
        }(_nbind.BindType);
        _nbind.ExternalType = ExternalType;
        _nbind.callbackSignatureList = [];
        var CallbackType = function(_super) {
          __extends(CallbackType2, _super);
          function CallbackType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireWrite = function(func2) {
              if (typeof func2 != "function")
                _nbind.throwError("Type mismatch");
              return new _nbind.External(func2).register();
            };
            return _this;
          }
          return CallbackType2;
        }(_nbind.BindType);
        _nbind.CallbackType = CallbackType;
        _nbind.valueList = [0];
        var firstFreeValue = 0;
        function pushValue(value) {
          var num2 = firstFreeValue;
          if (num2) {
            firstFreeValue = _nbind.valueList[num2];
          } else
            num2 = _nbind.valueList.length;
          _nbind.valueList[num2] = value;
          return num2 * 2 + 1;
        }
        _nbind.pushValue = pushValue;
        function popValue(num2, type2) {
          if (!num2)
            _nbind.throwError("Value type JavaScript class is missing or not registered");
          if (num2 & 1) {
            num2 >>= 1;
            var obj = _nbind.valueList[num2];
            _nbind.valueList[num2] = firstFreeValue;
            firstFreeValue = num2;
            return obj;
          } else if (type2) {
            return _nbind.popShared(num2, type2);
          } else
            throw new Error("Invalid value slot " + num2);
        }
        _nbind.popValue = popValue;
        var valueBase = 18446744073709552e3;
        function push64(num2) {
          if (typeof num2 == "number")
            return num2;
          return pushValue(num2) * 4096 + valueBase;
        }
        function pop64(num2) {
          if (num2 < valueBase)
            return num2;
          return popValue((num2 - valueBase) / 4096);
        }
        var CreateValueType = function(_super) {
          __extends(CreateValueType2, _super);
          function CreateValueType2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          CreateValueType2.prototype.makeWireWrite = function(expr) {
            return "(_nbind.pushValue(new " + expr + "))";
          };
          return CreateValueType2;
        }(_nbind.BindType);
        _nbind.CreateValueType = CreateValueType;
        var Int64Type = function(_super) {
          __extends(Int64Type2, _super);
          function Int64Type2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireWrite = push64;
            _this.wireRead = pop64;
            return _this;
          }
          return Int64Type2;
        }(_nbind.BindType);
        _nbind.Int64Type = Int64Type;
        function pushArray(arr, type2) {
          if (!arr)
            return 0;
          var length = arr.length;
          if ((type2.size || type2.size === 0) && length < type2.size) {
            throw new Error("Type mismatch");
          }
          var ptrSize = type2.memberType.ptrSize;
          var result = _nbind.Pool.lalloc(4 + length * ptrSize);
          HEAPU32[result / 4] = length;
          var heap = type2.memberType.heap;
          var ptr2 = (result + 4) / ptrSize;
          var wireWrite = type2.memberType.wireWrite;
          var num2 = 0;
          if (wireWrite) {
            while (num2 < length) {
              heap[ptr2++] = wireWrite(arr[num2++]);
            }
          } else {
            while (num2 < length) {
              heap[ptr2++] = arr[num2++];
            }
          }
          return result;
        }
        _nbind.pushArray = pushArray;
        function popArray(ptr2, type2) {
          if (ptr2 === 0)
            return null;
          var length = HEAPU32[ptr2 / 4];
          var arr = new Array(length);
          var heap = type2.memberType.heap;
          ptr2 = (ptr2 + 4) / type2.memberType.ptrSize;
          var wireRead = type2.memberType.wireRead;
          var num2 = 0;
          if (wireRead) {
            while (num2 < length) {
              arr[num2++] = wireRead(heap[ptr2++]);
            }
          } else {
            while (num2 < length) {
              arr[num2++] = heap[ptr2++];
            }
          }
          return arr;
        }
        _nbind.popArray = popArray;
        var ArrayType = function(_super) {
          __extends(ArrayType2, _super);
          function ArrayType2(spec) {
            var _this = _super.call(this, spec) || this;
            _this.wireRead = function(arg2) {
              return popArray(arg2, _this);
            };
            _this.wireWrite = function(arg2) {
              return pushArray(arg2, _this);
            };
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            _this.memberType = spec.paramList[0];
            if (spec.paramList[1])
              _this.size = spec.paramList[1];
            return _this;
          }
          return ArrayType2;
        }(_nbind.BindType);
        _nbind.ArrayType = ArrayType;
        function pushString(str, policyTbl2) {
          if (str === null || str === void 0) {
            if (policyTbl2 && policyTbl2["Nullable"]) {
              str = "";
            } else
              throw new Error("Type mismatch");
          }
          if (policyTbl2 && policyTbl2["Strict"]) {
            if (typeof str != "string")
              throw new Error("Type mismatch");
          } else
            str = str.toString();
          var length = Module.lengthBytesUTF8(str);
          var result = _nbind.Pool.lalloc(4 + length + 1);
          HEAPU32[result / 4] = length;
          Module.stringToUTF8Array(str, HEAPU8, result + 4, length + 1);
          return result;
        }
        _nbind.pushString = pushString;
        function popString(ptr2) {
          if (ptr2 === 0)
            return null;
          var length = HEAPU32[ptr2 / 4];
          return Module.Pointer_stringify(ptr2 + 4, length);
        }
        _nbind.popString = popString;
        var StringType = function(_super) {
          __extends(StringType2, _super);
          function StringType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireRead = popString;
            _this.wireWrite = pushString;
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            return _this;
          }
          StringType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return function(arg2) {
              return pushString(arg2, policyTbl2);
            };
          };
          return StringType2;
        }(_nbind.BindType);
        _nbind.StringType = StringType;
        function makeArgList(argCount) {
          return Array.apply(null, Array(argCount)).map(function(dummy, num2) {
            return "a" + (num2 + 1);
          });
        }
        function anyNeedsWireWrite(typeList, policyTbl2) {
          return typeList.reduce(function(result, type2) {
            return result || type2.needsWireWrite(policyTbl2);
          }, false);
        }
        function anyNeedsWireRead(typeList, policyTbl2) {
          return typeList.reduce(function(result, type2) {
            return result || !!type2.needsWireRead(policyTbl2);
          }, false);
        }
        function makeWireRead(convertParamList2, policyTbl2, type2, expr) {
          var paramNum = convertParamList2.length;
          if (type2.makeWireRead) {
            return type2.makeWireRead(expr, convertParamList2, paramNum);
          } else if (type2.wireRead) {
            convertParamList2[paramNum] = type2.wireRead;
            return "(convertParamList[" + paramNum + "](" + expr + "))";
          } else
            return expr;
        }
        function makeWireWrite(convertParamList2, policyTbl2, type2, expr) {
          var wireWrite;
          var paramNum = convertParamList2.length;
          if (type2.makeWireWrite) {
            wireWrite = type2.makeWireWrite(expr, policyTbl2, convertParamList2, paramNum);
          } else
            wireWrite = type2.wireWrite;
          if (wireWrite) {
            if (typeof wireWrite == "string") {
              return wireWrite;
            } else {
              convertParamList2[paramNum] = wireWrite;
              return "(convertParamList[" + paramNum + "](" + expr + "))";
            }
          } else
            return expr;
        }
        function buildCallerFunction(dynCall, ptrType, ptr, num, policyTbl, needsWireWrite, prefix, returnType, argTypeList, mask, err) {
          var argList = makeArgList(argTypeList.length);
          var convertParamList = [];
          var callExpression = makeWireRead(convertParamList, policyTbl, returnType, "dynCall(" + [prefix].concat(argList.map(function(name, index) {
            return makeWireWrite(convertParamList, policyTbl, argTypeList[index], name);
          })).join(",") + ")");
          var resourceSet = _nbind.listResources([returnType], argTypeList);
          var sourceCode = "function(" + argList.join(",") + "){" + (mask ? "this.__nbindFlags&mask&&err();" : "") + resourceSet.makeOpen() + "var r=" + callExpression + ";" + resourceSet.makeClose() + "return r;}";
          return eval("(" + sourceCode + ")");
        }
        function buildJSCallerFunction(returnType, argTypeList) {
          var argList = makeArgList(argTypeList.length);
          var convertParamList = [];
          var callExpression = makeWireWrite(convertParamList, null, returnType, "_nbind.externalList[num].data(" + argList.map(function(name, index) {
            return makeWireRead(convertParamList, null, argTypeList[index], name);
          }).join(",") + ")");
          var resourceSet = _nbind.listResources(argTypeList, [returnType]);
          resourceSet.remove(_nbind.resources.pool);
          var sourceCode = "function(" + ["dummy", "num"].concat(argList).join(",") + "){" + resourceSet.makeOpen() + "var r=" + callExpression + ";" + resourceSet.makeClose() + "return r;}";
          return eval("(" + sourceCode + ")");
        }
        _nbind.buildJSCallerFunction = buildJSCallerFunction;
        function makeJSCaller(idList) {
          var argCount = idList.length - 1;
          var typeList = _nbind.getTypes(idList, "callback");
          var returnType2 = typeList[0];
          var argTypeList2 = typeList.slice(1);
          var needsWireRead = anyNeedsWireRead(argTypeList2, null);
          var needsWireWrite2 = returnType2.needsWireWrite(null);
          if (!needsWireWrite2 && !needsWireRead) {
            switch (argCount) {
              case 0:
                return function(dummy, num2) {
                  return _nbind.externalList[num2].data();
                };
              case 1:
                return function(dummy, num2, a1) {
                  return _nbind.externalList[num2].data(a1);
                };
              case 2:
                return function(dummy, num2, a1, a2) {
                  return _nbind.externalList[num2].data(a1, a2);
                };
              case 3:
                return function(dummy, num2, a1, a2, a3) {
                  return _nbind.externalList[num2].data(a1, a2, a3);
                };
              default:
                break;
            }
          }
          return buildJSCallerFunction(returnType2, argTypeList2);
        }
        _nbind.makeJSCaller = makeJSCaller;
        function makeMethodCaller(ptrType2, spec) {
          var argCount = spec.typeList.length - 1;
          var typeIdList = spec.typeList.slice(0);
          typeIdList.splice(1, 0, "uint32_t", spec.boundID);
          var typeList = _nbind.getTypes(typeIdList, spec.title);
          var returnType2 = typeList[0];
          var argTypeList2 = typeList.slice(3);
          var needsWireRead = returnType2.needsWireRead(spec.policyTbl);
          var needsWireWrite2 = anyNeedsWireWrite(argTypeList2, spec.policyTbl);
          var ptr2 = spec.ptr;
          var num2 = spec.num;
          var dynCall2 = _nbind.getDynCall(typeList, spec.title);
          var mask2 = ~spec.flags & 1;
          function err2() {
            throw new Error("Calling a non-const method on a const object");
          }
          if (!needsWireRead && !needsWireWrite2) {
            switch (argCount) {
              case 0:
                return function() {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2));
                };
              case 1:
                return function(a1) {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2), a1);
                };
              case 2:
                return function(a1, a2) {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2), a1, a2);
                };
              case 3:
                return function(a1, a2, a3) {
                  return this.__nbindFlags & mask2 ? err2() : dynCall2(ptr2, num2, _nbind.pushPointer(this, ptrType2), a1, a2, a3);
                };
              default:
                break;
            }
          }
          return buildCallerFunction(dynCall2, ptrType2, ptr2, num2, spec.policyTbl, needsWireWrite2, "ptr,num,pushPointer(this,ptrType)", returnType2, argTypeList2, mask2, err2);
        }
        _nbind.makeMethodCaller = makeMethodCaller;
        function makeCaller(spec) {
          var argCount = spec.typeList.length - 1;
          var typeList = _nbind.getTypes(spec.typeList, spec.title);
          var returnType2 = typeList[0];
          var argTypeList2 = typeList.slice(1);
          var needsWireRead = returnType2.needsWireRead(spec.policyTbl);
          var needsWireWrite2 = anyNeedsWireWrite(argTypeList2, spec.policyTbl);
          var direct = spec.direct;
          var ptr2 = spec.ptr;
          if (spec.direct && !needsWireRead && !needsWireWrite2) {
            var dynCall_1 = _nbind.getDynCall(typeList, spec.title);
            switch (argCount) {
              case 0:
                return function() {
                  return dynCall_1(direct);
                };
              case 1:
                return function(a1) {
                  return dynCall_1(direct, a1);
                };
              case 2:
                return function(a1, a2) {
                  return dynCall_1(direct, a1, a2);
                };
              case 3:
                return function(a1, a2, a3) {
                  return dynCall_1(direct, a1, a2, a3);
                };
              default:
                break;
            }
            ptr2 = 0;
          }
          var prefix2;
          if (ptr2) {
            var typeIdList = spec.typeList.slice(0);
            typeIdList.splice(1, 0, "uint32_t");
            typeList = _nbind.getTypes(typeIdList, spec.title);
            prefix2 = "ptr,num";
          } else {
            ptr2 = direct;
            prefix2 = "ptr";
          }
          var dynCall2 = _nbind.getDynCall(typeList, spec.title);
          return buildCallerFunction(dynCall2, null, ptr2, spec.num, spec.policyTbl, needsWireWrite2, prefix2, returnType2, argTypeList2);
        }
        _nbind.makeCaller = makeCaller;
        function makeOverloader(func2, arity) {
          var callerList = [];
          function call() {
            return callerList[arguments.length].apply(this, arguments);
          }
          call.addMethod = function(_func, _arity) {
            callerList[_arity] = _func;
          };
          call.addMethod(func2, arity);
          return call;
        }
        _nbind.makeOverloader = makeOverloader;
        var Resource = function() {
          function Resource2(open, close) {
            var _this = this;
            this.makeOpen = function() {
              return Object.keys(_this.openTbl).join("");
            };
            this.makeClose = function() {
              return Object.keys(_this.closeTbl).join("");
            };
            this.openTbl = {};
            this.closeTbl = {};
            if (open)
              this.openTbl[open] = true;
            if (close)
              this.closeTbl[close] = true;
          }
          Resource2.prototype.add = function(other) {
            for (var _i = 0, _a2 = Object.keys(other.openTbl); _i < _a2.length; _i++) {
              var key2 = _a2[_i];
              this.openTbl[key2] = true;
            }
            for (var _b = 0, _c = Object.keys(other.closeTbl); _b < _c.length; _b++) {
              var key2 = _c[_b];
              this.closeTbl[key2] = true;
            }
          };
          Resource2.prototype.remove = function(other) {
            for (var _i = 0, _a2 = Object.keys(other.openTbl); _i < _a2.length; _i++) {
              var key2 = _a2[_i];
              delete this.openTbl[key2];
            }
            for (var _b = 0, _c = Object.keys(other.closeTbl); _b < _c.length; _b++) {
              var key2 = _c[_b];
              delete this.closeTbl[key2];
            }
          };
          return Resource2;
        }();
        _nbind.Resource = Resource;
        function listResources(readList, writeList) {
          var result = new Resource();
          for (var _i = 0, readList_1 = readList; _i < readList_1.length; _i++) {
            var bindType = readList_1[_i];
            for (var _a2 = 0, _b = bindType.readResources || []; _a2 < _b.length; _a2++) {
              var resource = _b[_a2];
              result.add(resource);
            }
          }
          for (var _c = 0, writeList_1 = writeList; _c < writeList_1.length; _c++) {
            var bindType = writeList_1[_c];
            for (var _d = 0, _e = bindType.writeResources || []; _d < _e.length; _d++) {
              var resource = _e[_d];
              result.add(resource);
            }
          }
          return result;
        }
        _nbind.listResources = listResources;
        _nbind.resources = { pool: new Resource("var used=HEAPU32[_nbind.Pool.usedPtr],page=HEAPU32[_nbind.Pool.pagePtr];", "_nbind.Pool.lreset(used,page);") };
        var ExternalBuffer = function(_super) {
          __extends(ExternalBuffer2, _super);
          function ExternalBuffer2(buf, ptr2) {
            var _this = _super.call(this, buf) || this;
            _this.ptr = ptr2;
            return _this;
          }
          ExternalBuffer2.prototype.free = function() {
            _free(this.ptr);
          };
          return ExternalBuffer2;
        }(_nbind.External);
        function getBuffer(buf) {
          if (buf instanceof ArrayBuffer) {
            return new Uint8Array(buf);
          } else if (buf instanceof DataView) {
            return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
          } else
            return buf;
        }
        function pushBuffer(buf, policyTbl2) {
          if (buf === null || buf === void 0) {
            if (policyTbl2 && policyTbl2["Nullable"])
              buf = [];
          }
          if (typeof buf != "object")
            throw new Error("Type mismatch");
          var b = buf;
          var length = b.byteLength || b.length;
          if (!length && length !== 0 && b.byteLength !== 0)
            throw new Error("Type mismatch");
          var result = _nbind.Pool.lalloc(8);
          var data = _malloc(length);
          var ptr2 = result / 4;
          HEAPU32[ptr2++] = length;
          HEAPU32[ptr2++] = data;
          HEAPU32[ptr2++] = new ExternalBuffer(buf, data).register();
          HEAPU8.set(getBuffer(buf), data);
          return result;
        }
        var BufferType = function(_super) {
          __extends(BufferType2, _super);
          function BufferType2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.wireWrite = pushBuffer;
            _this.readResources = [_nbind.resources.pool];
            _this.writeResources = [_nbind.resources.pool];
            return _this;
          }
          BufferType2.prototype.makeWireWrite = function(expr, policyTbl2) {
            return function(arg2) {
              return pushBuffer(arg2, policyTbl2);
            };
          };
          return BufferType2;
        }(_nbind.BindType);
        _nbind.BufferType = BufferType;
        function commitBuffer(num2, data, length) {
          var buf = _nbind.externalList[num2].data;
          var NodeBuffer = Buffer;
          if (typeof Buffer != "function")
            NodeBuffer = function() {
            };
          if (buf instanceof Array) {
          } else {
            var src = HEAPU8.subarray(data, data + length);
            if (buf instanceof NodeBuffer) {
              var srcBuf = void 0;
              if (typeof Buffer.from == "function" && Buffer.from.length >= 3) {
                srcBuf = Buffer.from(src);
              } else
                srcBuf = new Buffer(src);
              srcBuf.copy(buf);
            } else
              getBuffer(buf).set(src);
          }
        }
        _nbind.commitBuffer = commitBuffer;
        var dirtyList = [];
        var gcTimer = 0;
        function sweep() {
          for (var _i = 0, dirtyList_1 = dirtyList; _i < dirtyList_1.length; _i++) {
            var obj = dirtyList_1[_i];
            if (!(obj.__nbindState & (1 | 2))) {
              obj.free();
            }
          }
          dirtyList = [];
          gcTimer = 0;
        }
        _nbind.mark = function(obj) {
        };
        function toggleLightGC(enable) {
          if (enable) {
            _nbind.mark = function(obj) {
              dirtyList.push(obj);
              if (!gcTimer)
                gcTimer = setTimeout(sweep, 0);
            };
          } else {
            _nbind.mark = function(obj) {
            };
          }
        }
        _nbind.toggleLightGC = toggleLightGC;
      })(_nbind);
      Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
        Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");
        Module["requestFullScreen"] = Module["requestFullscreen"];
        Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
      };
      Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) {
        Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      };
      Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func2) {
        Browser.requestAnimationFrame(func2);
      };
      Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
        Browser.setCanvasSize(width, height, noUpdates);
      };
      Module["pauseMainLoop"] = function Module_pauseMainLoop() {
        Browser.mainLoop.pause();
      };
      Module["resumeMainLoop"] = function Module_resumeMainLoop() {
        Browser.mainLoop.resume();
      };
      Module["getUserMedia"] = function Module_getUserMedia() {
        Browser.getUserMedia();
      };
      Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
        return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
      };
      if (ENVIRONMENT_IS_NODE) {
        _emscripten_get_now = function _emscripten_get_now_actual() {
          var t = process["hrtime"]();
          return t[0] * 1e3 + t[1] / 1e6;
        };
      } else if (typeof dateNow !== "undefined") {
        _emscripten_get_now = dateNow;
      } else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
        _emscripten_get_now = function() {
          return self["performance"]["now"]();
        };
      } else if (typeof performance === "object" && typeof performance["now"] === "function") {
        _emscripten_get_now = function() {
          return performance["now"]();
        };
      } else {
        _emscripten_get_now = Date.now;
      }
      __ATEXIT__.push(function() {
        var fflush = Module["_fflush"];
        if (fflush)
          fflush(0);
        var printChar = ___syscall146.printChar;
        if (!printChar)
          return;
        var buffers = ___syscall146.buffers;
        if (buffers[1].length)
          printChar(1, 10);
        if (buffers[2].length)
          printChar(2, 10);
      });
      DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);
      STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
      STACK_MAX = STACK_BASE + TOTAL_STACK;
      DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);
      HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
      staticSealed = true;
      function invoke_viiiii(index, a1, a2, a3, a4, a5) {
        try {
          Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vif(index, a1, a2) {
        try {
          Module["dynCall_vif"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vid(index, a1, a2) {
        try {
          Module["dynCall_vid"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_fiff(index, a1, a2, a3) {
        try {
          return Module["dynCall_fiff"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vi(index, a1) {
        try {
          Module["dynCall_vi"](index, a1);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vii(index, a1, a2) {
        try {
          Module["dynCall_vii"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_ii(index, a1) {
        try {
          return Module["dynCall_ii"](index, a1);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viddi(index, a1, a2, a3, a4) {
        try {
          Module["dynCall_viddi"](index, a1, a2, a3, a4);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_vidd(index, a1, a2, a3) {
        try {
          Module["dynCall_vidd"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iiii(index, a1, a2, a3) {
        try {
          return Module["dynCall_iiii"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_diii(index, a1, a2, a3) {
        try {
          return Module["dynCall_diii"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_di(index, a1) {
        try {
          return Module["dynCall_di"](index, a1);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iid(index, a1, a2) {
        try {
          return Module["dynCall_iid"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iii(index, a1, a2) {
        try {
          return Module["dynCall_iii"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiddi(index, a1, a2, a3, a4, a5) {
        try {
          Module["dynCall_viiddi"](index, a1, a2, a3, a4, a5);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
        try {
          Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_dii(index, a1, a2) {
        try {
          return Module["dynCall_dii"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_i(index) {
        try {
          return Module["dynCall_i"](index);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
        try {
          return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiid(index, a1, a2, a3, a4) {
        try {
          Module["dynCall_viiid"](index, a1, a2, a3, a4);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viififi(index, a1, a2, a3, a4, a5, a6) {
        try {
          Module["dynCall_viififi"](index, a1, a2, a3, a4, a5, a6);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viii(index, a1, a2, a3) {
        try {
          Module["dynCall_viii"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_v(index) {
        try {
          Module["dynCall_v"](index);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viid(index, a1, a2, a3) {
        try {
          Module["dynCall_viid"](index, a1, a2, a3);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_idd(index, a1, a2) {
        try {
          return Module["dynCall_idd"](index, a1, a2);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      function invoke_viiii(index, a1, a2, a3, a4) {
        try {
          Module["dynCall_viiii"](index, a1, a2, a3, a4);
        } catch (e) {
          if (typeof e !== "number" && e !== "longjmp")
            throw e;
          Module["setThrew"](1, 0);
        }
      }
      Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
      Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_viiiii": invoke_viiiii, "invoke_vif": invoke_vif, "invoke_vid": invoke_vid, "invoke_fiff": invoke_fiff, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddi": invoke_viddi, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_diii": invoke_diii, "invoke_di": invoke_di, "invoke_iid": invoke_iid, "invoke_iii": invoke_iii, "invoke_viiddi": invoke_viiddi, "invoke_viiiiii": invoke_viiiiii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiiii": invoke_iiiiii, "invoke_viiid": invoke_viiid, "invoke_viififi": invoke_viififi, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_idd": invoke_idd, "invoke_viiii": invoke_viiii, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_asm_const_iiidddddd": _emscripten_asm_const_iiidddddd, "_emscripten_asm_const_iiiid": _emscripten_asm_const_iiiid, "__nbind_reference_external": __nbind_reference_external, "_emscripten_asm_const_iiiiiiii": _emscripten_asm_const_iiiiiiii, "_removeAccessorPrefix": _removeAccessorPrefix, "_typeModule": _typeModule, "__nbind_register_pool": __nbind_register_pool, "__decorate": __decorate, "_llvm_stackrestore": _llvm_stackrestore, "___cxa_atexit": ___cxa_atexit, "__extends": __extends, "__nbind_get_value_object": __nbind_get_value_object, "__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj": __ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "__nbind_register_primitive": __nbind_register_primitive, "__nbind_register_type": __nbind_register_type, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__nbind_register_function": __nbind_register_function, "___setErrNo": ___setErrNo, "__nbind_register_class": __nbind_register_class, "__nbind_finish": __nbind_finish, "_abort": _abort, "_nbind_value": _nbind_value, "_llvm_stacksave": _llvm_stacksave, "___syscall54": ___syscall54, "_defineHidden": _defineHidden, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_get_now": _emscripten_get_now, "__nbind_register_callback_signature": __nbind_register_callback_signature, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "__nbind_free_external": __nbind_free_external, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiididi": _emscripten_asm_const_iiididi, "___syscall6": ___syscall6, "_atexit": _atexit, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
      var asm = function(global2, env2, buffer2) {
        ;
        var a = new global2.Int8Array(buffer2);
        var b = new global2.Int16Array(buffer2);
        var c = new global2.Int32Array(buffer2);
        var d = new global2.Uint8Array(buffer2);
        var e = new global2.Uint16Array(buffer2);
        var f = new global2.Uint32Array(buffer2);
        var g = new global2.Float32Array(buffer2);
        var h = new global2.Float64Array(buffer2);
        var i2 = env2.DYNAMICTOP_PTR | 0;
        var j = env2.tempDoublePtr | 0;
        var k = env2.ABORT | 0;
        var l = env2.STACKTOP | 0;
        var m = env2.STACK_MAX | 0;
        var n = env2.cttz_i8 | 0;
        var o = env2.___dso_handle | 0;
        var p = 0;
        var q = 0;
        var r = 0;
        var s = 0;
        var t = global2.NaN, u = global2.Infinity;
        var v = 0, w = 0, x = 0, y = 0, z = 0;
        var A = 0;
        var B = global2.Math.floor;
        var C = global2.Math.abs;
        var D = global2.Math.sqrt;
        var E = global2.Math.pow;
        var F = global2.Math.cos;
        var G = global2.Math.sin;
        var H = global2.Math.tan;
        var I = global2.Math.acos;
        var J = global2.Math.asin;
        var K = global2.Math.atan;
        var L = global2.Math.atan2;
        var M = global2.Math.exp;
        var N = global2.Math.log;
        var O = global2.Math.ceil;
        var P = global2.Math.imul;
        var Q = global2.Math.min;
        var R = global2.Math.max;
        var S = global2.Math.clz32;
        var T = global2.Math.fround;
        var U = env2.abort;
        var V = env2.assert;
        var W = env2.enlargeMemory;
        var X = env2.getTotalMemory;
        var Y = env2.abortOnCannotGrowMemory;
        var Z = env2.invoke_viiiii;
        var _ = env2.invoke_vif;
        var $ = env2.invoke_vid;
        var aa = env2.invoke_fiff;
        var ba = env2.invoke_vi;
        var ca = env2.invoke_vii;
        var da = env2.invoke_ii;
        var ea = env2.invoke_viddi;
        var fa = env2.invoke_vidd;
        var ga = env2.invoke_iiii;
        var ha = env2.invoke_diii;
        var ia = env2.invoke_di;
        var ja = env2.invoke_iid;
        var ka = env2.invoke_iii;
        var la = env2.invoke_viiddi;
        var ma = env2.invoke_viiiiii;
        var na = env2.invoke_dii;
        var oa = env2.invoke_i;
        var pa = env2.invoke_iiiiii;
        var qa = env2.invoke_viiid;
        var ra = env2.invoke_viififi;
        var sa = env2.invoke_viii;
        var ta = env2.invoke_v;
        var ua = env2.invoke_viid;
        var va = env2.invoke_idd;
        var wa = env2.invoke_viiii;
        var xa = env2._emscripten_asm_const_iiiii;
        var ya = env2._emscripten_asm_const_iiidddddd;
        var za = env2._emscripten_asm_const_iiiid;
        var Aa = env2.__nbind_reference_external;
        var Ba = env2._emscripten_asm_const_iiiiiiii;
        var Ca = env2._removeAccessorPrefix;
        var Da = env2._typeModule;
        var Ea = env2.__nbind_register_pool;
        var Fa = env2.__decorate;
        var Ga = env2._llvm_stackrestore;
        var Ha = env2.___cxa_atexit;
        var Ia = env2.__extends;
        var Ja = env2.__nbind_get_value_object;
        var Ka = env2.__ZN8facebook4yoga14YGNodeToStringEPNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEP6YGNode14YGPrintOptionsj;
        var La = env2._emscripten_set_main_loop_timing;
        var Ma = env2.__nbind_register_primitive;
        var Na = env2.__nbind_register_type;
        var Oa = env2._emscripten_memcpy_big;
        var Pa = env2.__nbind_register_function;
        var Qa = env2.___setErrNo;
        var Ra = env2.__nbind_register_class;
        var Sa = env2.__nbind_finish;
        var Ta = env2._abort;
        var Ua = env2._nbind_value;
        var Va = env2._llvm_stacksave;
        var Wa = env2.___syscall54;
        var Xa = env2._defineHidden;
        var Ya = env2._emscripten_set_main_loop;
        var Za = env2._emscripten_get_now;
        var _a2 = env2.__nbind_register_callback_signature;
        var $a = env2._emscripten_asm_const_iiiiii;
        var ab = env2.__nbind_free_external;
        var bb = env2._emscripten_asm_const_iiii;
        var cb2 = env2._emscripten_asm_const_iiididi;
        var db = env2.___syscall6;
        var eb = env2._atexit;
        var fb = env2.___syscall140;
        var gb = env2.___syscall146;
        var hb = T(0);
        const ib = T(0);
        function Jb(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = l;
          l = l + a2 | 0;
          l = l + 15 & -16;
          return b2 | 0;
        }
        function Kb() {
          return l | 0;
        }
        function Lb(a2) {
          a2 = a2 | 0;
          l = a2;
        }
        function Mb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          l = a2;
          m = b2;
        }
        function Nb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (!p) {
            p = a2;
            q = b2;
          }
        }
        function Ob(a2) {
          a2 = a2 | 0;
          A = a2;
        }
        function Pb() {
          return A | 0;
        }
        function Qb() {
          var b2 = 0, d2 = 0;
          BC(8104, 8, 400) | 0;
          BC(8504, 408, 540) | 0;
          b2 = 9044;
          d2 = b2 + 44 | 0;
          do {
            c[b2 >> 2] = 0;
            b2 = b2 + 4 | 0;
          } while ((b2 | 0) < (d2 | 0));
          a[9088] = 0;
          a[9089] = 1;
          c[2273] = 0;
          c[2274] = 948;
          c[2275] = 948;
          Ha(17, 8104, o | 0) | 0;
          return;
        }
        function Rb(a2) {
          a2 = a2 | 0;
          oc(a2 + 948 | 0);
          return;
        }
        function Sb(a2) {
          a2 = T(a2);
          return ((af(a2) | 0) & 2147483647) >>> 0 > 2139095040 | 0;
        }
        function Tb(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          a:
            do
              if (!(c[a2 + (b2 << 3) + 4 >> 2] | 0)) {
                if ((b2 | 2 | 0) == 3 ? c[a2 + 60 >> 2] | 0 : 0) {
                  a2 = a2 + 56 | 0;
                  break;
                }
                switch (b2 | 0) {
                  case 0:
                  case 2:
                  case 4:
                  case 5: {
                    if (c[a2 + 52 >> 2] | 0) {
                      a2 = a2 + 48 | 0;
                      break a;
                    }
                    break;
                  }
                  default: {
                  }
                }
                if (!(c[a2 + 68 >> 2] | 0)) {
                  a2 = (b2 | 1 | 0) == 5 ? 948 : d2;
                  break;
                } else {
                  a2 = a2 + 64 | 0;
                  break;
                }
              } else
                a2 = a2 + (b2 << 3) | 0;
            while (0);
          return a2 | 0;
        }
        function Ub(b2) {
          b2 = b2 | 0;
          var d2 = 0;
          d2 = oB(1e3) | 0;
          Vb(b2, (d2 | 0) != 0, 2456);
          c[2276] = (c[2276] | 0) + 1;
          BC(d2 | 0, 8104, 1e3) | 0;
          if (a[b2 + 2 >> 0] | 0) {
            c[d2 + 4 >> 2] = 2;
            c[d2 + 12 >> 2] = 4;
          }
          c[d2 + 976 >> 2] = b2;
          return d2 | 0;
        }
        function Vb(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          f2 = l;
          l = l + 16 | 0;
          e2 = f2;
          if (!b2) {
            c[e2 >> 2] = d2;
            fe(a2, 5, 3197, e2);
          }
          l = f2;
          return;
        }
        function Wb() {
          return Ub(956) | 0;
        }
        function Xb(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = qC(1e3) | 0;
          Yb(b2, a2);
          Vb(c[a2 + 976 >> 2] | 0, 1, 2456);
          c[2276] = (c[2276] | 0) + 1;
          c[b2 + 944 >> 2] = 0;
          return b2 | 0;
        }
        function Yb(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          BC(a2 | 0, b2 | 0, 948) | 0;
          ie(a2 + 948 | 0, b2 + 948 | 0);
          d2 = a2 + 960 | 0;
          a2 = b2 + 960 | 0;
          b2 = d2 + 40 | 0;
          do {
            c[d2 >> 2] = c[a2 >> 2];
            d2 = d2 + 4 | 0;
            a2 = a2 + 4 | 0;
          } while ((d2 | 0) < (b2 | 0));
          return;
        }
        function Zb(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0;
          b2 = a2 + 944 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 | 0) {
            _b(d2 + 948 | 0, a2) | 0;
            c[b2 >> 2] = 0;
          }
          d2 = $b(a2) | 0;
          if (d2 | 0) {
            b2 = 0;
            do {
              c[(ac(a2, b2) | 0) + 944 >> 2] = 0;
              b2 = b2 + 1 | 0;
            } while ((b2 | 0) != (d2 | 0));
          }
          d2 = a2 + 948 | 0;
          e2 = c[d2 >> 2] | 0;
          f2 = a2 + 952 | 0;
          b2 = c[f2 >> 2] | 0;
          if ((b2 | 0) != (e2 | 0))
            c[f2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
          bc(d2);
          pB(a2);
          c[2276] = (c[2276] | 0) + -1;
          return;
        }
        function _b(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = c[a2 >> 2] | 0;
          i3 = a2 + 4 | 0;
          d2 = c[i3 >> 2] | 0;
          g2 = d2;
          a:
            do
              if ((e2 | 0) == (d2 | 0)) {
                f2 = e2;
                h2 = 4;
              } else {
                a2 = e2;
                while (1) {
                  if ((c[a2 >> 2] | 0) == (b2 | 0)) {
                    f2 = a2;
                    h2 = 4;
                    break a;
                  }
                  a2 = a2 + 4 | 0;
                  if ((a2 | 0) == (d2 | 0)) {
                    a2 = 0;
                    break;
                  }
                }
              }
            while (0);
          if ((h2 | 0) == 4)
            if ((f2 | 0) != (d2 | 0)) {
              e2 = f2 + 4 | 0;
              a2 = g2 - e2 | 0;
              b2 = a2 >> 2;
              if (b2) {
                GC(f2 | 0, e2 | 0, a2 | 0) | 0;
                d2 = c[i3 >> 2] | 0;
              }
              a2 = f2 + (b2 << 2) | 0;
              if ((d2 | 0) == (a2 | 0))
                a2 = 1;
              else {
                c[i3 >> 2] = d2 + (~((d2 + -4 - a2 | 0) >>> 2) << 2);
                a2 = 1;
              }
            } else
              a2 = 0;
          return a2 | 0;
        }
        function $b(a2) {
          a2 = a2 | 0;
          return (c[a2 + 952 >> 2] | 0) - (c[a2 + 948 >> 2] | 0) >> 2 | 0;
        }
        function ac(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[a2 + 948 >> 2] | 0;
          if ((c[a2 + 952 >> 2] | 0) - d2 >> 2 >>> 0 > b2 >>> 0)
            a2 = c[d2 + (b2 << 2) >> 2] | 0;
          else
            a2 = 0;
          return a2 | 0;
        }
        function bc(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0;
          e2 = l;
          l = l + 32 | 0;
          b2 = e2;
          f2 = c[a2 >> 2] | 0;
          d2 = (c[a2 + 4 >> 2] | 0) - f2 | 0;
          if (((c[a2 + 8 >> 2] | 0) - f2 | 0) >>> 0 > d2 >>> 0) {
            f2 = d2 >> 2;
            bf(b2, f2, f2, a2 + 8 | 0);
            cf(a2, b2);
            df(b2);
          }
          l = e2;
          return;
        }
        function cc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0;
          k2 = $b(a2) | 0;
          do
            if (k2 | 0) {
              if ((c[(ac(a2, 0) | 0) + 944 >> 2] | 0) == (a2 | 0)) {
                if (!(_b(a2 + 948 | 0, b2) | 0))
                  break;
                BC(b2 + 400 | 0, 8504, 540) | 0;
                c[b2 + 944 >> 2] = 0;
                nc(a2);
                break;
              }
              h2 = c[(c[a2 + 976 >> 2] | 0) + 12 >> 2] | 0;
              i3 = a2 + 948 | 0;
              j2 = (h2 | 0) == 0;
              d2 = 0;
              g2 = 0;
              do {
                e2 = c[(c[i3 >> 2] | 0) + (g2 << 2) >> 2] | 0;
                if ((e2 | 0) == (b2 | 0))
                  nc(a2);
                else {
                  f2 = Xb(e2) | 0;
                  c[(c[i3 >> 2] | 0) + (d2 << 2) >> 2] = f2;
                  c[f2 + 944 >> 2] = a2;
                  if (!j2)
                    Ib[h2 & 15](e2, f2, a2, d2);
                  d2 = d2 + 1 | 0;
                }
                g2 = g2 + 1 | 0;
              } while ((g2 | 0) != (k2 | 0));
              if (d2 >>> 0 < k2 >>> 0) {
                j2 = a2 + 948 | 0;
                i3 = a2 + 952 | 0;
                h2 = d2;
                d2 = c[i3 >> 2] | 0;
                do {
                  g2 = (c[j2 >> 2] | 0) + (h2 << 2) | 0;
                  e2 = g2 + 4 | 0;
                  f2 = d2 - e2 | 0;
                  b2 = f2 >> 2;
                  if (!b2)
                    f2 = d2;
                  else {
                    GC(g2 | 0, e2 | 0, f2 | 0) | 0;
                    d2 = c[i3 >> 2] | 0;
                    f2 = d2;
                  }
                  e2 = g2 + (b2 << 2) | 0;
                  if ((f2 | 0) != (e2 | 0)) {
                    d2 = f2 + (~((f2 + -4 - e2 | 0) >>> 2) << 2) | 0;
                    c[i3 >> 2] = d2;
                  }
                  h2 = h2 + 1 | 0;
                } while ((h2 | 0) != (k2 | 0));
              }
            }
          while (0);
          return;
        }
        function dc(b2) {
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          ec(b2, ($b(b2) | 0) == 0, 2491);
          ec(b2, (c[b2 + 944 >> 2] | 0) == 0, 2545);
          d2 = b2 + 948 | 0;
          e2 = c[d2 >> 2] | 0;
          f2 = b2 + 952 | 0;
          g2 = c[f2 >> 2] | 0;
          if ((g2 | 0) != (e2 | 0))
            c[f2 >> 2] = g2 + (~((g2 + -4 - e2 | 0) >>> 2) << 2);
          bc(d2);
          d2 = b2 + 976 | 0;
          e2 = c[d2 >> 2] | 0;
          BC(b2 | 0, 8104, 1e3) | 0;
          if (a[e2 + 2 >> 0] | 0) {
            c[b2 + 4 >> 2] = 2;
            c[b2 + 12 >> 2] = 4;
          }
          c[d2 >> 2] = e2;
          return;
        }
        function ec(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          f2 = l;
          l = l + 16 | 0;
          e2 = f2;
          if (!b2) {
            c[e2 >> 2] = d2;
            Vd(a2, 5, 3197, e2);
          }
          l = f2;
          return;
        }
        function fc() {
          return c[2276] | 0;
        }
        function gc() {
          var a2 = 0;
          a2 = oB(20) | 0;
          hc((a2 | 0) != 0, 2592);
          c[2277] = (c[2277] | 0) + 1;
          c[a2 >> 2] = c[239];
          c[a2 + 4 >> 2] = c[240];
          c[a2 + 8 >> 2] = c[241];
          c[a2 + 12 >> 2] = c[242];
          c[a2 + 16 >> 2] = c[243];
          return a2 | 0;
        }
        function hc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = l;
          l = l + 16 | 0;
          d2 = e2;
          if (!a2) {
            c[d2 >> 2] = b2;
            Vd(0, 5, 3197, d2);
          }
          l = e2;
          return;
        }
        function ic(a2) {
          a2 = a2 | 0;
          pB(a2);
          c[2277] = (c[2277] | 0) + -1;
          return;
        }
        function jc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          if (!b2) {
            d2 = 0;
            b2 = 0;
          } else {
            ec(a2, ($b(a2) | 0) == 0, 2629);
            d2 = 1;
          }
          c[a2 + 964 >> 2] = b2;
          c[a2 + 988 >> 2] = d2;
          return;
        }
        function kc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          g2 = e2 + 8 | 0;
          f2 = e2 + 4 | 0;
          h2 = e2;
          c[f2 >> 2] = b2;
          ec(a2, (c[b2 + 944 >> 2] | 0) == 0, 2709);
          ec(a2, (c[a2 + 964 >> 2] | 0) == 0, 2763);
          lc(a2);
          b2 = a2 + 948 | 0;
          c[h2 >> 2] = (c[b2 >> 2] | 0) + (d2 << 2);
          c[g2 >> 2] = c[h2 >> 2];
          mc(b2, g2, f2) | 0;
          c[(c[f2 >> 2] | 0) + 944 >> 2] = a2;
          nc(a2);
          l = e2;
          return;
        }
        function lc(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          d2 = $b(a2) | 0;
          if (d2 | 0 ? (c[(ac(a2, 0) | 0) + 944 >> 2] | 0) != (a2 | 0) : 0) {
            e2 = c[(c[a2 + 976 >> 2] | 0) + 12 >> 2] | 0;
            f2 = a2 + 948 | 0;
            g2 = (e2 | 0) == 0;
            b2 = 0;
            do {
              h2 = c[(c[f2 >> 2] | 0) + (b2 << 2) >> 2] | 0;
              i3 = Xb(h2) | 0;
              c[(c[f2 >> 2] | 0) + (b2 << 2) >> 2] = i3;
              c[i3 + 944 >> 2] = a2;
              if (!g2)
                Ib[e2 & 15](h2, i3, a2, b2);
              b2 = b2 + 1 | 0;
            } while ((b2 | 0) != (d2 | 0));
          }
          return;
        }
        function mc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0;
          s2 = l;
          l = l + 64 | 0;
          n2 = s2 + 52 | 0;
          i3 = s2 + 48 | 0;
          o2 = s2 + 28 | 0;
          p2 = s2 + 24 | 0;
          q2 = s2 + 20 | 0;
          r2 = s2;
          e2 = c[a2 >> 2] | 0;
          g2 = e2;
          b2 = e2 + ((c[b2 >> 2] | 0) - g2 >> 2 << 2) | 0;
          e2 = a2 + 4 | 0;
          f2 = c[e2 >> 2] | 0;
          h2 = a2 + 8 | 0;
          do
            if (f2 >>> 0 < (c[h2 >> 2] | 0) >>> 0) {
              if ((b2 | 0) == (f2 | 0)) {
                c[b2 >> 2] = c[d2 >> 2];
                c[e2 >> 2] = (c[e2 >> 2] | 0) + 4;
                break;
              }
              ef(a2, b2, f2, b2 + 4 | 0);
              if (b2 >>> 0 <= d2 >>> 0)
                d2 = (c[e2 >> 2] | 0) >>> 0 > d2 >>> 0 ? d2 + 4 | 0 : d2;
              c[b2 >> 2] = c[d2 >> 2];
            } else {
              e2 = (f2 - g2 >> 2) + 1 | 0;
              f2 = le(a2) | 0;
              if (f2 >>> 0 < e2 >>> 0)
                jC(a2);
              m2 = c[a2 >> 2] | 0;
              k2 = (c[h2 >> 2] | 0) - m2 | 0;
              g2 = k2 >> 1;
              bf(r2, k2 >> 2 >>> 0 < f2 >>> 1 >>> 0 ? g2 >>> 0 < e2 >>> 0 ? e2 : g2 : f2, b2 - m2 >> 2, a2 + 8 | 0);
              m2 = r2 + 8 | 0;
              e2 = c[m2 >> 2] | 0;
              g2 = r2 + 12 | 0;
              k2 = c[g2 >> 2] | 0;
              h2 = k2;
              j2 = e2;
              do
                if ((e2 | 0) == (k2 | 0)) {
                  k2 = r2 + 4 | 0;
                  e2 = c[k2 >> 2] | 0;
                  t2 = c[r2 >> 2] | 0;
                  f2 = t2;
                  if (e2 >>> 0 <= t2 >>> 0) {
                    e2 = h2 - f2 >> 1;
                    e2 = (e2 | 0) == 0 ? 1 : e2;
                    bf(o2, e2, e2 >>> 2, c[r2 + 16 >> 2] | 0);
                    c[p2 >> 2] = c[k2 >> 2];
                    c[q2 >> 2] = c[m2 >> 2];
                    c[i3 >> 2] = c[p2 >> 2];
                    c[n2 >> 2] = c[q2 >> 2];
                    gf(o2, i3, n2);
                    e2 = c[r2 >> 2] | 0;
                    c[r2 >> 2] = c[o2 >> 2];
                    c[o2 >> 2] = e2;
                    e2 = o2 + 4 | 0;
                    t2 = c[k2 >> 2] | 0;
                    c[k2 >> 2] = c[e2 >> 2];
                    c[e2 >> 2] = t2;
                    e2 = o2 + 8 | 0;
                    t2 = c[m2 >> 2] | 0;
                    c[m2 >> 2] = c[e2 >> 2];
                    c[e2 >> 2] = t2;
                    e2 = o2 + 12 | 0;
                    t2 = c[g2 >> 2] | 0;
                    c[g2 >> 2] = c[e2 >> 2];
                    c[e2 >> 2] = t2;
                    df(o2);
                    e2 = c[m2 >> 2] | 0;
                    break;
                  }
                  g2 = e2;
                  h2 = ((g2 - f2 >> 2) + 1 | 0) / -2 | 0;
                  i3 = e2 + (h2 << 2) | 0;
                  f2 = j2 - g2 | 0;
                  g2 = f2 >> 2;
                  if (g2) {
                    GC(i3 | 0, e2 | 0, f2 | 0) | 0;
                    e2 = c[k2 >> 2] | 0;
                  }
                  t2 = i3 + (g2 << 2) | 0;
                  c[m2 >> 2] = t2;
                  c[k2 >> 2] = e2 + (h2 << 2);
                  e2 = t2;
                }
              while (0);
              c[e2 >> 2] = c[d2 >> 2];
              c[m2 >> 2] = (c[m2 >> 2] | 0) + 4;
              b2 = ff(a2, r2, b2) | 0;
              df(r2);
            }
          while (0);
          l = s2;
          return b2 | 0;
        }
        function nc(b2) {
          b2 = b2 | 0;
          var d2 = 0;
          do {
            d2 = b2 + 984 | 0;
            if (a[d2 >> 0] | 0)
              break;
            a[d2 >> 0] = 1;
            g[b2 + 504 >> 2] = T(t);
            b2 = c[b2 + 944 >> 2] | 0;
          } while ((b2 | 0) != 0);
          return;
        }
        function oc(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
            sC(d2);
          }
          return;
        }
        function pc(a2) {
          a2 = a2 | 0;
          return c[a2 + 944 >> 2] | 0;
        }
        function qc(a2) {
          a2 = a2 | 0;
          ec(a2, (c[a2 + 964 >> 2] | 0) != 0, 2832);
          nc(a2);
          return;
        }
        function rc(b2) {
          b2 = b2 | 0;
          return (a[b2 + 984 >> 0] | 0) != 0 | 0;
        }
        function sc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (BB(a2, b2, 400) | 0) {
            BC(a2 | 0, b2 | 0, 400) | 0;
            nc(a2);
          }
          return;
        }
        function tc(a2) {
          a2 = a2 | 0;
          var b2 = ib;
          b2 = T(g[a2 + 44 >> 2]);
          a2 = Sb(b2) | 0;
          return T(a2 ? T(0) : b2);
        }
        function uc(b2) {
          b2 = b2 | 0;
          var d2 = ib;
          d2 = T(g[b2 + 48 >> 2]);
          if (Sb(d2) | 0)
            d2 = a[(c[b2 + 976 >> 2] | 0) + 2 >> 0] | 0 ? T(1) : T(0);
          return T(d2);
        }
        function vc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 + 980 >> 2] = b2;
          return;
        }
        function wc(a2) {
          a2 = a2 | 0;
          return c[a2 + 980 >> 2] | 0;
        }
        function xc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 4 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function yc(a2) {
          a2 = a2 | 0;
          return c[a2 + 4 >> 2] | 0;
        }
        function zc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 8 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Ac(a2) {
          a2 = a2 | 0;
          return c[a2 + 8 >> 2] | 0;
        }
        function Bc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 12 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Cc(a2) {
          a2 = a2 | 0;
          return c[a2 + 12 >> 2] | 0;
        }
        function Dc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 16 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Ec(a2) {
          a2 = a2 | 0;
          return c[a2 + 16 >> 2] | 0;
        }
        function Fc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 20 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Gc(a2) {
          a2 = a2 | 0;
          return c[a2 + 20 >> 2] | 0;
        }
        function Hc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 24 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Ic(a2) {
          a2 = a2 | 0;
          return c[a2 + 24 >> 2] | 0;
        }
        function Jc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 28 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Kc(a2) {
          a2 = a2 | 0;
          return c[a2 + 28 >> 2] | 0;
        }
        function Lc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 32 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Mc(a2) {
          a2 = a2 | 0;
          return c[a2 + 32 >> 2] | 0;
        }
        function Nc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 36 | 0;
          if ((c[d2 >> 2] | 0) != (b2 | 0)) {
            c[d2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Oc(a2) {
          a2 = a2 | 0;
          return c[a2 + 36 >> 2] | 0;
        }
        function Pc(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var c2 = 0;
          c2 = a2 + 40 | 0;
          if (T(g[c2 >> 2]) != b2) {
            g[c2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Qc(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var c2 = 0;
          c2 = a2 + 44 | 0;
          if (T(g[c2 >> 2]) != b2) {
            g[c2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Rc(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var c2 = 0;
          c2 = a2 + 48 | 0;
          if (T(g[c2 >> 2]) != b2) {
            g[c2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Sc(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 52 | 0;
          f2 = a2 + 56 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function Tc(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0;
          e2 = a2 + 52 | 0;
          d2 = a2 + 56 | 0;
          if (!(!(T(g[e2 >> 2]) != b2) ? (c[d2 >> 2] | 0) == 2 : 0)) {
            g[e2 >> 2] = b2;
            e2 = Sb(b2) | 0;
            c[d2 >> 2] = e2 ? 3 : 2;
            nc(a2);
          }
          return;
        }
        function Uc(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 52 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function Vc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = (h2 ^ 1) & 1;
          f2 = a2 + 132 + (b2 << 3) | 0;
          b2 = a2 + 132 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function Wc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = h2 ? 0 : 2;
          f2 = a2 + 132 + (b2 << 3) | 0;
          b2 = a2 + 132 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function Xc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = b2 + 132 + (d2 << 3) | 0;
          b2 = c[e2 + 4 >> 2] | 0;
          d2 = a2;
          c[d2 >> 2] = c[e2 >> 2];
          c[d2 + 4 >> 2] = b2;
          return;
        }
        function Yc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = (h2 ^ 1) & 1;
          f2 = a2 + 60 + (b2 << 3) | 0;
          b2 = a2 + 60 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function Zc(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = h2 ? 0 : 2;
          f2 = a2 + 60 + (b2 << 3) | 0;
          b2 = a2 + 60 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function _c(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = b2 + 60 + (d2 << 3) | 0;
          b2 = c[e2 + 4 >> 2] | 0;
          d2 = a2;
          c[d2 >> 2] = c[e2 >> 2];
          c[d2 + 4 >> 2] = b2;
          return;
        }
        function $c(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = a2 + 60 + (b2 << 3) + 4 | 0;
          if ((c[d2 >> 2] | 0) != 3) {
            g[a2 + 60 + (b2 << 3) >> 2] = T(t);
            c[d2 >> 2] = 3;
            nc(a2);
          }
          return;
        }
        function ad(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = (h2 ^ 1) & 1;
          f2 = a2 + 204 + (b2 << 3) | 0;
          b2 = a2 + 204 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function bd(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = h2 ? 0 : 2;
          f2 = a2 + 204 + (b2 << 3) | 0;
          b2 = a2 + 204 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function cd(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = b2 + 204 + (d2 << 3) | 0;
          b2 = c[e2 + 4 >> 2] | 0;
          d2 = a2;
          c[d2 >> 2] = c[e2 >> 2];
          c[d2 + 4 >> 2] = b2;
          return;
        }
        function dd(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(d2) | 0;
          e2 = (h2 ^ 1) & 1;
          f2 = a2 + 276 + (b2 << 3) | 0;
          b2 = a2 + 276 + (b2 << 3) + 4 | 0;
          if (!(h2 | T(g[f2 >> 2]) == d2 ? (c[b2 >> 2] | 0) == (e2 | 0) : 0)) {
            g[f2 >> 2] = d2;
            c[b2 >> 2] = e2;
            nc(a2);
          }
          return;
        }
        function ed(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return T(g[a2 + 276 + (b2 << 3) >> 2]);
        }
        function fd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 348 | 0;
          f2 = a2 + 352 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function gd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0;
          e2 = a2 + 348 | 0;
          d2 = a2 + 352 | 0;
          if (!(!(T(g[e2 >> 2]) != b2) ? (c[d2 >> 2] | 0) == 2 : 0)) {
            g[e2 >> 2] = b2;
            e2 = Sb(b2) | 0;
            c[d2 >> 2] = e2 ? 3 : 2;
            nc(a2);
          }
          return;
        }
        function hd(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = a2 + 352 | 0;
          if ((c[b2 >> 2] | 0) != 3) {
            g[a2 + 348 >> 2] = T(t);
            c[b2 >> 2] = 3;
            nc(a2);
          }
          return;
        }
        function id(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 348 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function jd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 356 | 0;
          f2 = a2 + 360 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function kd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0;
          e2 = a2 + 356 | 0;
          d2 = a2 + 360 | 0;
          if (!(!(T(g[e2 >> 2]) != b2) ? (c[d2 >> 2] | 0) == 2 : 0)) {
            g[e2 >> 2] = b2;
            e2 = Sb(b2) | 0;
            c[d2 >> 2] = e2 ? 3 : 2;
            nc(a2);
          }
          return;
        }
        function ld(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = a2 + 360 | 0;
          if ((c[b2 >> 2] | 0) != 3) {
            g[a2 + 356 >> 2] = T(t);
            c[b2 >> 2] = 3;
            nc(a2);
          }
          return;
        }
        function md(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 356 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function nd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 364 | 0;
          f2 = a2 + 368 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function od(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = h2 ? 0 : 2;
          e2 = a2 + 364 | 0;
          f2 = a2 + 368 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function pd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 364 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function qd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 372 | 0;
          f2 = a2 + 376 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function rd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = h2 ? 0 : 2;
          e2 = a2 + 372 | 0;
          f2 = a2 + 376 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function sd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 372 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function td(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 380 | 0;
          f2 = a2 + 384 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function ud(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = h2 ? 0 : 2;
          e2 = a2 + 380 | 0;
          f2 = a2 + 384 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function vd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 380 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function wd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = (h2 ^ 1) & 1;
          e2 = a2 + 388 | 0;
          f2 = a2 + 392 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function xd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0;
          h2 = Sb(b2) | 0;
          d2 = h2 ? 0 : 2;
          e2 = a2 + 388 | 0;
          f2 = a2 + 392 | 0;
          if (!(h2 | T(g[e2 >> 2]) == b2 ? (c[f2 >> 2] | 0) == (d2 | 0) : 0)) {
            g[e2 >> 2] = b2;
            c[f2 >> 2] = d2;
            nc(a2);
          }
          return;
        }
        function yd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = b2 + 388 | 0;
          d2 = c[e2 + 4 >> 2] | 0;
          b2 = a2;
          c[b2 >> 2] = c[e2 >> 2];
          c[b2 + 4 >> 2] = d2;
          return;
        }
        function zd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var c2 = 0;
          c2 = a2 + 396 | 0;
          if (T(g[c2 >> 2]) != b2) {
            g[c2 >> 2] = b2;
            nc(a2);
          }
          return;
        }
        function Ad(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 396 >> 2]);
        }
        function Bd(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 400 >> 2]);
        }
        function Cd(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 404 >> 2]);
        }
        function Dd(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 408 >> 2]);
        }
        function Ed(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 412 >> 2]);
        }
        function Fd(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 416 >> 2]);
        }
        function Gd(a2) {
          a2 = a2 | 0;
          return T(g[a2 + 420 >> 2]);
        }
        function Hd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          ec(a2, (b2 | 0) < 6, 2918);
          switch (b2 | 0) {
            case 0: {
              b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 5 : 4;
              break;
            }
            case 2: {
              b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 4 : 5;
              break;
            }
            default: {
            }
          }
          return T(g[a2 + 424 + (b2 << 2) >> 2]);
        }
        function Id(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          ec(a2, (b2 | 0) < 6, 2918);
          switch (b2 | 0) {
            case 0: {
              b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 5 : 4;
              break;
            }
            case 2: {
              b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 4 : 5;
              break;
            }
            default: {
            }
          }
          return T(g[a2 + 448 + (b2 << 2) >> 2]);
        }
        function Jd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          ec(a2, (b2 | 0) < 6, 2918);
          switch (b2 | 0) {
            case 0: {
              b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 5 : 4;
              break;
            }
            case 2: {
              b2 = (c[a2 + 496 >> 2] | 0) == 2 ? 4 : 5;
              break;
            }
            default: {
            }
          }
          return T(g[a2 + 472 + (b2 << 2) >> 2]);
        }
        function Kd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = ib;
          d2 = c[a2 + 4 >> 2] | 0;
          if ((d2 | 0) == (c[b2 + 4 >> 2] | 0)) {
            if (!d2)
              a2 = 1;
            else {
              e2 = T(g[a2 >> 2]);
              a2 = T(C(T(e2 - T(g[b2 >> 2])))) < T(999999974e-13);
            }
          } else
            a2 = 0;
          return a2 | 0;
        }
        function Ld(a2, b2) {
          a2 = T(a2);
          b2 = T(b2);
          var c2 = 0;
          if (Sb(a2) | 0)
            c2 = Sb(b2) | 0;
          else
            c2 = T(C(T(a2 - b2))) < T(999999974e-13);
          return c2 | 0;
        }
        function Md(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Nd(a2, b2);
          return;
        }
        function Nd(b2, d2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 4 | 0;
          c[f2 >> 2] = 0;
          c[f2 + 4 >> 2] = 0;
          c[f2 + 8 >> 2] = 0;
          Ka(f2 | 0, b2 | 0, d2 | 0, 0);
          Vd(b2, 3, (a[f2 + 11 >> 0] | 0) < 0 ? c[f2 >> 2] | 0 : f2, e2);
          tC(f2);
          l = e2;
          return;
        }
        function Od(a2, b2, c2, d2) {
          a2 = T(a2);
          b2 = T(b2);
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = ib;
          a2 = T(a2 * b2);
          e2 = T(gC(a2, T(1)));
          do
            if (!(Ld(e2, T(0)) | 0)) {
              a2 = T(a2 - e2);
              if (Ld(e2, T(1)) | 0) {
                a2 = T(a2 + T(1));
                break;
              }
              if (c2) {
                a2 = T(a2 + T(1));
                break;
              }
              if (!d2) {
                if (e2 > T(0.5))
                  e2 = T(1);
                else {
                  d2 = Ld(e2, T(0.5)) | 0;
                  e2 = d2 ? T(1) : T(0);
                }
                a2 = T(a2 + e2);
              }
            } else
              a2 = T(a2 - e2);
          while (0);
          return T(a2 / b2);
        }
        function Pd(a2, b2, c2, d2, e2, f2, h2, i3, j2, k2, l2, m2, n2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = c2 | 0;
          d2 = T(d2);
          e2 = e2 | 0;
          f2 = T(f2);
          h2 = h2 | 0;
          i3 = T(i3);
          j2 = T(j2);
          k2 = T(k2);
          l2 = T(l2);
          m2 = T(m2);
          n2 = n2 | 0;
          var o2 = 0, p2 = ib, q2 = ib, r2 = ib, s2 = ib, t2 = ib, u2 = ib;
          if (j2 < T(0) | k2 < T(0))
            n2 = 0;
          else {
            if ((n2 | 0) != 0 ? (p2 = T(g[n2 + 4 >> 2]), p2 != T(0)) : 0) {
              r2 = T(Od(b2, p2, 0, 0));
              s2 = T(Od(d2, p2, 0, 0));
              q2 = T(Od(f2, p2, 0, 0));
              p2 = T(Od(i3, p2, 0, 0));
            } else {
              q2 = f2;
              r2 = b2;
              p2 = i3;
              s2 = d2;
            }
            if ((e2 | 0) == (a2 | 0))
              o2 = Ld(q2, r2) | 0;
            else
              o2 = 0;
            if ((h2 | 0) == (c2 | 0))
              n2 = Ld(p2, s2) | 0;
            else
              n2 = 0;
            if ((!o2 ? (t2 = T(b2 - l2), !(Qd(a2, t2, j2) | 0)) : 0) ? !(Rd(a2, t2, e2, j2) | 0) : 0)
              o2 = Sd(a2, t2, e2, f2, j2) | 0;
            else
              o2 = 1;
            if ((!n2 ? (u2 = T(d2 - m2), !(Qd(c2, u2, k2) | 0)) : 0) ? !(Rd(c2, u2, h2, k2) | 0) : 0)
              n2 = Sd(c2, u2, h2, i3, k2) | 0;
            else
              n2 = 1;
            n2 = o2 & n2;
          }
          return n2 | 0;
        }
        function Qd(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = T(c2);
          if ((a2 | 0) == 1)
            a2 = Ld(b2, c2) | 0;
          else
            a2 = 0;
          return a2 | 0;
        }
        function Rd(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = c2 | 0;
          d2 = T(d2);
          if ((a2 | 0) == 2 & (c2 | 0) == 0) {
            if (!(b2 >= d2))
              a2 = Ld(b2, d2) | 0;
            else
              a2 = 1;
          } else
            a2 = 0;
          return a2 | 0;
        }
        function Sd(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = c2 | 0;
          d2 = T(d2);
          e2 = T(e2);
          if ((a2 | 0) == 2 & (c2 | 0) == 2 & d2 > b2) {
            if (!(e2 <= b2))
              a2 = Ld(b2, e2) | 0;
            else
              a2 = 1;
          } else
            a2 = 0;
          return a2 | 0;
        }
        function Td(b2, d2, e2, f2, i3, j2, k2, m2, n2, o2, p2) {
          b2 = b2 | 0;
          d2 = T(d2);
          e2 = T(e2);
          f2 = f2 | 0;
          i3 = i3 | 0;
          j2 = j2 | 0;
          k2 = T(k2);
          m2 = T(m2);
          n2 = n2 | 0;
          o2 = o2 | 0;
          p2 = p2 | 0;
          var q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = ib, v2 = ib, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = ib, I2 = ib, J2 = ib, K2 = 0, L2 = 0;
          G2 = l;
          l = l + 160 | 0;
          D2 = G2 + 152 | 0;
          C2 = G2 + 120 | 0;
          B2 = G2 + 104 | 0;
          y2 = G2 + 72 | 0;
          t2 = G2 + 56 | 0;
          A2 = G2 + 8 | 0;
          x2 = G2;
          z2 = (c[2279] | 0) + 1 | 0;
          c[2279] = z2;
          E2 = b2 + 984 | 0;
          if ((a[E2 >> 0] | 0) != 0 ? (c[b2 + 512 >> 2] | 0) != (c[2278] | 0) : 0)
            w2 = 4;
          else if ((c[b2 + 516 >> 2] | 0) == (f2 | 0))
            F2 = 0;
          else
            w2 = 4;
          if ((w2 | 0) == 4) {
            c[b2 + 520 >> 2] = 0;
            c[b2 + 924 >> 2] = -1;
            c[b2 + 928 >> 2] = -1;
            g[b2 + 932 >> 2] = T(-1);
            g[b2 + 936 >> 2] = T(-1);
            F2 = 1;
          }
          a:
            do
              if (!(c[b2 + 964 >> 2] | 0)) {
                if (n2) {
                  q2 = b2 + 916 | 0;
                  if (!(Ld(T(g[q2 >> 2]), d2) | 0)) {
                    w2 = 21;
                    break;
                  }
                  if (!(Ld(T(g[b2 + 920 >> 2]), e2) | 0)) {
                    w2 = 21;
                    break;
                  }
                  if ((c[b2 + 924 >> 2] | 0) != (i3 | 0)) {
                    w2 = 21;
                    break;
                  }
                  q2 = (c[b2 + 928 >> 2] | 0) == (j2 | 0) ? q2 : 0;
                  w2 = 22;
                  break;
                }
                s2 = c[b2 + 520 >> 2] | 0;
                if (!s2)
                  w2 = 21;
                else {
                  r2 = 0;
                  while (1) {
                    q2 = b2 + 524 + (r2 * 24 | 0) | 0;
                    if (((Ld(T(g[q2 >> 2]), d2) | 0 ? Ld(T(g[b2 + 524 + (r2 * 24 | 0) + 4 >> 2]), e2) | 0 : 0) ? (c[b2 + 524 + (r2 * 24 | 0) + 8 >> 2] | 0) == (i3 | 0) : 0) ? (c[b2 + 524 + (r2 * 24 | 0) + 12 >> 2] | 0) == (j2 | 0) : 0) {
                      w2 = 22;
                      break a;
                    }
                    r2 = r2 + 1 | 0;
                    if (r2 >>> 0 >= s2 >>> 0) {
                      w2 = 21;
                      break;
                    }
                  }
                }
              } else {
                u2 = T(Ud(b2, 2, k2));
                v2 = T(Ud(b2, 0, k2));
                q2 = b2 + 916 | 0;
                J2 = T(g[q2 >> 2]);
                I2 = T(g[b2 + 920 >> 2]);
                H2 = T(g[b2 + 932 >> 2]);
                if (!(Pd(i3, d2, j2, e2, c[b2 + 924 >> 2] | 0, J2, c[b2 + 928 >> 2] | 0, I2, H2, T(g[b2 + 936 >> 2]), u2, v2, p2) | 0)) {
                  s2 = c[b2 + 520 >> 2] | 0;
                  if (!s2)
                    w2 = 21;
                  else {
                    r2 = 0;
                    while (1) {
                      q2 = b2 + 524 + (r2 * 24 | 0) | 0;
                      H2 = T(g[q2 >> 2]);
                      I2 = T(g[b2 + 524 + (r2 * 24 | 0) + 4 >> 2]);
                      J2 = T(g[b2 + 524 + (r2 * 24 | 0) + 16 >> 2]);
                      if (Pd(i3, d2, j2, e2, c[b2 + 524 + (r2 * 24 | 0) + 8 >> 2] | 0, H2, c[b2 + 524 + (r2 * 24 | 0) + 12 >> 2] | 0, I2, J2, T(g[b2 + 524 + (r2 * 24 | 0) + 20 >> 2]), u2, v2, p2) | 0) {
                        w2 = 22;
                        break a;
                      }
                      r2 = r2 + 1 | 0;
                      if (r2 >>> 0 >= s2 >>> 0) {
                        w2 = 21;
                        break;
                      }
                    }
                  }
                } else
                  w2 = 22;
              }
            while (0);
          do
            if ((w2 | 0) == 21) {
              if (!(a[11697] | 0)) {
                q2 = 0;
                w2 = 31;
              } else {
                q2 = 0;
                w2 = 28;
              }
            } else if ((w2 | 0) == 22) {
              r2 = (a[11697] | 0) != 0;
              if (!((q2 | 0) != 0 & (F2 ^ 1)))
                if (r2) {
                  w2 = 28;
                  break;
                } else {
                  w2 = 31;
                  break;
                }
              t2 = q2 + 16 | 0;
              c[b2 + 908 >> 2] = c[t2 >> 2];
              s2 = q2 + 20 | 0;
              c[b2 + 912 >> 2] = c[s2 >> 2];
              if (!((a[11698] | 0) == 0 | r2 ^ 1)) {
                c[x2 >> 2] = Wd(z2) | 0;
                c[x2 + 4 >> 2] = z2;
                Vd(b2, 4, 2972, x2);
                r2 = c[b2 + 972 >> 2] | 0;
                if (r2 | 0)
                  nb[r2 & 127](b2);
                i3 = Xd(i3, n2) | 0;
                j2 = Xd(j2, n2) | 0;
                L2 = +T(g[t2 >> 2]);
                K2 = +T(g[s2 >> 2]);
                c[A2 >> 2] = i3;
                c[A2 + 4 >> 2] = j2;
                h[A2 + 8 >> 3] = +d2;
                h[A2 + 16 >> 3] = +e2;
                h[A2 + 24 >> 3] = L2;
                h[A2 + 32 >> 3] = K2;
                c[A2 + 40 >> 2] = o2;
                Vd(b2, 4, 2989, A2);
              }
            }
          while (0);
          if ((w2 | 0) == 28) {
            r2 = Wd(z2) | 0;
            c[t2 >> 2] = r2;
            c[t2 + 4 >> 2] = z2;
            c[t2 + 8 >> 2] = F2 ? 3047 : 11699;
            Vd(b2, 4, 3038, t2);
            r2 = c[b2 + 972 >> 2] | 0;
            if (r2 | 0)
              nb[r2 & 127](b2);
            A2 = Xd(i3, n2) | 0;
            w2 = Xd(j2, n2) | 0;
            c[y2 >> 2] = A2;
            c[y2 + 4 >> 2] = w2;
            h[y2 + 8 >> 3] = +d2;
            h[y2 + 16 >> 3] = +e2;
            c[y2 + 24 >> 2] = o2;
            Vd(b2, 4, 3049, y2);
            w2 = 31;
          }
          if ((w2 | 0) == 31) {
            Yd(b2, d2, e2, f2, i3, j2, k2, m2, n2, p2);
            if (a[11697] | 0) {
              r2 = c[2279] | 0;
              A2 = Wd(r2) | 0;
              c[B2 >> 2] = A2;
              c[B2 + 4 >> 2] = r2;
              c[B2 + 8 >> 2] = F2 ? 3047 : 11699;
              Vd(b2, 4, 3083, B2);
              r2 = c[b2 + 972 >> 2] | 0;
              if (r2 | 0)
                nb[r2 & 127](b2);
              A2 = Xd(i3, n2) | 0;
              B2 = Xd(j2, n2) | 0;
              K2 = +T(g[b2 + 908 >> 2]);
              L2 = +T(g[b2 + 912 >> 2]);
              c[C2 >> 2] = A2;
              c[C2 + 4 >> 2] = B2;
              h[C2 + 8 >> 3] = K2;
              h[C2 + 16 >> 3] = L2;
              c[C2 + 24 >> 2] = o2;
              Vd(b2, 4, 3092, C2);
            }
            c[b2 + 516 >> 2] = f2;
            if (!q2) {
              r2 = b2 + 520 | 0;
              q2 = c[r2 >> 2] | 0;
              if ((q2 | 0) == 16) {
                if (a[11697] | 0)
                  Vd(b2, 4, 3124, D2);
                c[r2 >> 2] = 0;
                q2 = 0;
              }
              if (n2)
                q2 = b2 + 916 | 0;
              else {
                c[r2 >> 2] = q2 + 1;
                q2 = b2 + 524 + (q2 * 24 | 0) | 0;
              }
              g[q2 >> 2] = d2;
              g[q2 + 4 >> 2] = e2;
              c[q2 + 8 >> 2] = i3;
              c[q2 + 12 >> 2] = j2;
              c[q2 + 16 >> 2] = c[b2 + 908 >> 2];
              c[q2 + 20 >> 2] = c[b2 + 912 >> 2];
              q2 = 0;
            }
          }
          if (n2) {
            c[b2 + 416 >> 2] = c[b2 + 908 >> 2];
            c[b2 + 420 >> 2] = c[b2 + 912 >> 2];
            a[b2 + 985 >> 0] = 1;
            a[E2 >> 0] = 0;
          }
          c[2279] = (c[2279] | 0) + -1;
          c[b2 + 512 >> 2] = c[2278];
          l = G2;
          return F2 | (q2 | 0) == 0 | 0;
        }
        function Ud(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          var d2 = ib;
          d2 = T(me(a2, b2, c2));
          return T(d2 + T(ne(a2, b2, c2)));
        }
        function Vd(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          c[f2 >> 2] = e2;
          if (!a2)
            e2 = 0;
          else
            e2 = c[a2 + 976 >> 2] | 0;
          ge(e2, a2, b2, d2, f2);
          l = g2;
          return;
        }
        function Wd(a2) {
          a2 = a2 | 0;
          return (a2 >>> 0 > 60 ? 3201 : 3201 + (60 - a2) | 0) | 0;
        }
        function Xd(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = l;
          l = l + 32 | 0;
          d2 = f2 + 12 | 0;
          e2 = f2;
          c[d2 >> 2] = c[254];
          c[d2 + 4 >> 2] = c[255];
          c[d2 + 8 >> 2] = c[256];
          c[e2 >> 2] = c[257];
          c[e2 + 4 >> 2] = c[258];
          c[e2 + 8 >> 2] = c[259];
          if ((a2 | 0) > 2)
            a2 = 11699;
          else
            a2 = c[(b2 ? e2 : d2) + (a2 << 2) >> 2] | 0;
          l = f2;
          return a2 | 0;
        }
        function Yd(b2, e2, f2, h2, i3, k2, m2, n2, o2, p2) {
          b2 = b2 | 0;
          e2 = T(e2);
          f2 = T(f2);
          h2 = h2 | 0;
          i3 = i3 | 0;
          k2 = k2 | 0;
          m2 = T(m2);
          n2 = T(n2);
          o2 = o2 | 0;
          p2 = p2 | 0;
          var q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = ib, v2 = ib, w2 = ib, x2 = ib, y2 = ib, z2 = ib, A2 = ib, B2 = 0, C2 = 0, D2 = 0, E2 = ib, F2 = ib, G2 = 0, H2 = ib, I2 = 0, J2 = 0, K2 = 0, L2 = 0, M2 = 0, N2 = 0, O2 = 0, P2 = 0, Q2 = 0, R2 = 0, S2 = 0, U2 = 0, V2 = 0, W2 = 0, X2 = 0, Y2 = 0, Z2 = 0, _2 = 0, $2 = ib, aa2 = ib, ba2 = ib, ca2 = ib, da2 = ib, ea2 = 0, fa2 = 0, ga2 = 0, ha2 = 0, ia2 = 0, ja2 = ib, ka2 = ib, la2 = ib, ma2 = ib, na2 = ib, oa2 = ib, pa2 = 0, qa2 = ib, ra2 = ib, sa2 = ib, ta2 = ib, ua2 = ib, va2 = ib, wa2 = 0, xa2 = 0, ya2 = ib, za2 = ib, Aa2 = 0, Ba2 = 0, Ca2 = 0, Da2 = 0, Ea2 = ib, Fa2 = 0, Ga2 = 0, Ha2 = 0, Ia2 = 0, Ja2 = 0, Ka2 = 0, La2 = 0, Ma2 = ib, Na2 = 0, Oa2 = 0;
          La2 = l;
          l = l + 16 | 0;
          ea2 = La2 + 12 | 0;
          fa2 = La2 + 8 | 0;
          ga2 = La2 + 4 | 0;
          ha2 = La2;
          ec(b2, (i3 | 0) == 0 | (Sb(e2) | 0) ^ 1, 3326);
          ec(b2, (k2 | 0) == 0 | (Sb(f2) | 0) ^ 1, 3406);
          Ga2 = qe(b2, h2) | 0;
          c[b2 + 496 >> 2] = Ga2;
          Ja2 = re(2, Ga2) | 0;
          Ka2 = re(0, Ga2) | 0;
          g[b2 + 440 >> 2] = T(me(b2, Ja2, m2));
          g[b2 + 444 >> 2] = T(ne(b2, Ja2, m2));
          g[b2 + 428 >> 2] = T(me(b2, Ka2, m2));
          g[b2 + 436 >> 2] = T(ne(b2, Ka2, m2));
          g[b2 + 464 >> 2] = T(se(b2, Ja2));
          g[b2 + 468 >> 2] = T(te(b2, Ja2));
          g[b2 + 452 >> 2] = T(se(b2, Ka2));
          g[b2 + 460 >> 2] = T(te(b2, Ka2));
          g[b2 + 488 >> 2] = T(ue(b2, Ja2, m2));
          g[b2 + 492 >> 2] = T(ve(b2, Ja2, m2));
          g[b2 + 476 >> 2] = T(ue(b2, Ka2, m2));
          g[b2 + 484 >> 2] = T(ve(b2, Ka2, m2));
          do
            if (!(c[b2 + 964 >> 2] | 0)) {
              Ha2 = b2 + 948 | 0;
              Ia2 = (c[b2 + 952 >> 2] | 0) - (c[Ha2 >> 2] | 0) >> 2;
              if (!Ia2) {
                xe(b2, e2, f2, i3, k2, m2, n2);
                break;
              }
              if (!o2 ? ye(b2, e2, f2, i3, k2, m2, n2) | 0 : 0)
                break;
              lc(b2);
              Y2 = b2 + 508 | 0;
              a[Y2 >> 0] = 0;
              Ja2 = re(c[b2 + 4 >> 2] | 0, Ga2) | 0;
              Ka2 = ze(Ja2, Ga2) | 0;
              Fa2 = oe(Ja2) | 0;
              Z2 = c[b2 + 8 >> 2] | 0;
              Ba2 = b2 + 28 | 0;
              _2 = (c[Ba2 >> 2] | 0) != 0;
              ua2 = Fa2 ? m2 : n2;
              ya2 = Fa2 ? n2 : m2;
              $2 = T(Ae(b2, Ja2, m2));
              aa2 = T(Be(b2, Ja2, m2));
              u2 = T(Ae(b2, Ka2, m2));
              va2 = T(Ce(b2, Ja2, m2));
              za2 = T(Ce(b2, Ka2, m2));
              D2 = Fa2 ? i3 : k2;
              Aa2 = Fa2 ? k2 : i3;
              Ea2 = Fa2 ? va2 : za2;
              y2 = Fa2 ? za2 : va2;
              ta2 = T(Ud(b2, 2, m2));
              x2 = T(Ud(b2, 0, m2));
              v2 = T(T(be(b2 + 364 | 0, m2)) - Ea2);
              w2 = T(T(be(b2 + 380 | 0, m2)) - Ea2);
              z2 = T(T(be(b2 + 372 | 0, n2)) - y2);
              A2 = T(T(be(b2 + 388 | 0, n2)) - y2);
              ba2 = Fa2 ? v2 : z2;
              ca2 = Fa2 ? w2 : A2;
              ta2 = T(e2 - ta2);
              e2 = T(ta2 - Ea2);
              if (Sb(e2) | 0)
                Ea2 = e2;
              else
                Ea2 = T(cC(T(eC(e2, w2)), v2));
              ra2 = T(f2 - x2);
              e2 = T(ra2 - y2);
              if (Sb(e2) | 0)
                sa2 = e2;
              else
                sa2 = T(cC(T(eC(e2, A2)), z2));
              v2 = Fa2 ? Ea2 : sa2;
              qa2 = Fa2 ? sa2 : Ea2;
              a:
                do
                  if ((D2 | 0) == 1) {
                    h2 = 0;
                    r2 = 0;
                    while (1) {
                      q2 = ac(b2, r2) | 0;
                      if (!h2) {
                        if (T(Ee(q2)) > T(0) ? T(Fe(q2)) > T(0) : 0)
                          h2 = q2;
                        else
                          h2 = 0;
                      } else if (De(q2) | 0) {
                        t2 = 0;
                        break a;
                      }
                      r2 = r2 + 1 | 0;
                      if (r2 >>> 0 >= Ia2 >>> 0) {
                        t2 = h2;
                        break;
                      }
                    }
                  } else
                    t2 = 0;
                while (0);
              B2 = t2 + 500 | 0;
              C2 = t2 + 504 | 0;
              h2 = 0;
              q2 = 0;
              e2 = T(0);
              s2 = 0;
              do {
                r2 = c[(c[Ha2 >> 2] | 0) + (s2 << 2) >> 2] | 0;
                if ((c[r2 + 36 >> 2] | 0) == 1) {
                  Ge(r2);
                  a[r2 + 985 >> 0] = 1;
                  a[r2 + 984 >> 0] = 0;
                } else {
                  $d(r2);
                  if (o2)
                    ce(r2, qe(r2, Ga2) | 0, v2, qa2, Ea2);
                  do
                    if ((c[r2 + 24 >> 2] | 0) != 1) {
                      if ((r2 | 0) == (t2 | 0)) {
                        c[B2 >> 2] = c[2278];
                        g[C2 >> 2] = T(0);
                        break;
                      } else {
                        He(b2, r2, Ea2, i3, sa2, Ea2, sa2, k2, Ga2, p2);
                        break;
                      }
                    } else {
                      if (q2 | 0)
                        c[q2 + 960 >> 2] = r2;
                      c[r2 + 960 >> 2] = 0;
                      q2 = r2;
                      h2 = (h2 | 0) == 0 ? r2 : h2;
                    }
                  while (0);
                  oa2 = T(g[r2 + 504 >> 2]);
                  e2 = T(e2 + T(oa2 + T(Ud(r2, Ja2, Ea2))));
                }
                s2 = s2 + 1 | 0;
              } while ((s2 | 0) != (Ia2 | 0));
              K2 = e2 > v2;
              pa2 = _2 & ((D2 | 0) == 2 & K2) ? 1 : D2;
              I2 = (Aa2 | 0) == 1;
              M2 = I2 & (o2 ^ 1);
              N2 = (pa2 | 0) == 1;
              O2 = (pa2 | 0) == 2;
              P2 = 976 + (Ja2 << 2) | 0;
              Q2 = (Aa2 | 2 | 0) == 2;
              W2 = I2 & (_2 ^ 1);
              R2 = 1040 + (Ka2 << 2) | 0;
              S2 = 1040 + (Ja2 << 2) | 0;
              U2 = 976 + (Ka2 << 2) | 0;
              V2 = (Aa2 | 0) != 1;
              K2 = _2 & ((D2 | 0) != 0 & K2);
              J2 = b2 + 976 | 0;
              I2 = I2 ^ 1;
              e2 = v2;
              G2 = 0;
              L2 = 0;
              oa2 = T(0);
              da2 = T(0);
              while (1) {
                b:
                  do
                    if (G2 >>> 0 < Ia2 >>> 0) {
                      C2 = c[Ha2 >> 2] | 0;
                      s2 = 0;
                      A2 = T(0);
                      z2 = T(0);
                      w2 = T(0);
                      v2 = T(0);
                      r2 = 0;
                      q2 = 0;
                      t2 = G2;
                      while (1) {
                        B2 = c[C2 + (t2 << 2) >> 2] | 0;
                        if ((c[B2 + 36 >> 2] | 0) != 1 ? (c[B2 + 940 >> 2] = L2, (c[B2 + 24 >> 2] | 0) != 1) : 0) {
                          x2 = T(Ud(B2, Ja2, Ea2));
                          X2 = c[P2 >> 2] | 0;
                          f2 = T(be(B2 + 380 + (X2 << 3) | 0, ua2));
                          y2 = T(g[B2 + 504 >> 2]);
                          f2 = T(eC(f2, y2));
                          f2 = T(cC(T(be(B2 + 364 + (X2 << 3) | 0, ua2)), f2));
                          if (_2 & (s2 | 0) != 0 & T(x2 + T(z2 + f2)) > e2) {
                            k2 = s2;
                            x2 = A2;
                            D2 = t2;
                            break b;
                          }
                          x2 = T(x2 + f2);
                          f2 = T(z2 + x2);
                          x2 = T(A2 + x2);
                          if (De(B2) | 0) {
                            w2 = T(w2 + T(Ee(B2)));
                            v2 = T(v2 - T(y2 * T(Fe(B2))));
                          }
                          if (q2 | 0)
                            c[q2 + 960 >> 2] = B2;
                          c[B2 + 960 >> 2] = 0;
                          s2 = s2 + 1 | 0;
                          q2 = B2;
                          r2 = (r2 | 0) == 0 ? B2 : r2;
                        } else {
                          x2 = A2;
                          f2 = z2;
                        }
                        t2 = t2 + 1 | 0;
                        if (t2 >>> 0 < Ia2 >>> 0) {
                          A2 = x2;
                          z2 = f2;
                        } else {
                          k2 = s2;
                          D2 = t2;
                          break;
                        }
                      }
                    } else {
                      k2 = 0;
                      x2 = T(0);
                      w2 = T(0);
                      v2 = T(0);
                      r2 = 0;
                      D2 = G2;
                    }
                  while (0);
                X2 = w2 > T(0) & w2 < T(1);
                E2 = X2 ? T(1) : w2;
                X2 = v2 > T(0) & v2 < T(1);
                A2 = X2 ? T(1) : v2;
                do
                  if (!N2) {
                    if (!(x2 < ba2 & ((Sb(ba2) | 0) ^ 1))) {
                      if (!(x2 > ca2 & ((Sb(ca2) | 0) ^ 1))) {
                        if (!(a[(c[J2 >> 2] | 0) + 3 >> 0] | 0)) {
                          if (!(E2 == T(0)) ? !(T(Ee(b2)) == T(0)) : 0) {
                            X2 = 53;
                            break;
                          }
                          e2 = x2;
                          X2 = 53;
                        } else
                          X2 = 51;
                      } else {
                        e2 = ca2;
                        X2 = 51;
                      }
                    } else {
                      e2 = ba2;
                      X2 = 51;
                    }
                  } else
                    X2 = 51;
                while (0);
                if ((X2 | 0) == 51) {
                  X2 = 0;
                  if (Sb(e2) | 0)
                    X2 = 53;
                  else {
                    F2 = T(e2 - x2);
                    H2 = e2;
                  }
                }
                if ((X2 | 0) == 53) {
                  X2 = 0;
                  if (x2 < T(0)) {
                    F2 = T(-x2);
                    H2 = e2;
                  } else {
                    F2 = T(0);
                    H2 = e2;
                  }
                }
                if (!M2 ? (ia2 = (r2 | 0) == 0, !ia2) : 0) {
                  s2 = c[P2 >> 2] | 0;
                  t2 = F2 < T(0);
                  y2 = T(F2 / A2);
                  B2 = F2 > T(0);
                  z2 = T(F2 / E2);
                  w2 = T(0);
                  x2 = T(0);
                  e2 = T(0);
                  q2 = r2;
                  do {
                    f2 = T(be(q2 + 380 + (s2 << 3) | 0, ua2));
                    v2 = T(be(q2 + 364 + (s2 << 3) | 0, ua2));
                    v2 = T(eC(f2, T(cC(v2, T(g[q2 + 504 >> 2])))));
                    if (t2) {
                      f2 = T(v2 * T(Fe(q2)));
                      if (f2 != T(-0) ? (Ma2 = T(v2 - T(y2 * f2)), ja2 = T(Ie(q2, Ja2, Ma2, H2, Ea2)), Ma2 != ja2) : 0) {
                        w2 = T(w2 - T(ja2 - v2));
                        e2 = T(e2 + f2);
                      }
                    } else if ((B2 ? (ka2 = T(Ee(q2)), ka2 != T(0)) : 0) ? (Ma2 = T(v2 + T(z2 * ka2)), la2 = T(Ie(q2, Ja2, Ma2, H2, Ea2)), Ma2 != la2) : 0) {
                      w2 = T(w2 - T(la2 - v2));
                      x2 = T(x2 - ka2);
                    }
                    q2 = c[q2 + 960 >> 2] | 0;
                  } while ((q2 | 0) != 0);
                  e2 = T(A2 + e2);
                  v2 = T(F2 + w2);
                  if (!ia2) {
                    y2 = T(E2 + x2);
                    t2 = c[P2 >> 2] | 0;
                    B2 = v2 < T(0);
                    C2 = e2 == T(0);
                    z2 = T(v2 / e2);
                    s2 = v2 > T(0);
                    y2 = T(v2 / y2);
                    e2 = T(0);
                    do {
                      Ma2 = T(be(r2 + 380 + (t2 << 3) | 0, ua2));
                      w2 = T(be(r2 + 364 + (t2 << 3) | 0, ua2));
                      w2 = T(eC(Ma2, T(cC(w2, T(g[r2 + 504 >> 2])))));
                      if (B2) {
                        Ma2 = T(w2 * T(Fe(r2)));
                        v2 = T(-Ma2);
                        if (Ma2 != T(-0)) {
                          Ma2 = T(z2 * v2);
                          v2 = T(Ie(r2, Ja2, T(w2 + (C2 ? v2 : Ma2)), H2, Ea2));
                        } else
                          v2 = w2;
                      } else if (s2 ? (ma2 = T(Ee(r2)), ma2 != T(0)) : 0)
                        v2 = T(Ie(r2, Ja2, T(w2 + T(y2 * ma2)), H2, Ea2));
                      else
                        v2 = w2;
                      e2 = T(e2 - T(v2 - w2));
                      x2 = T(Ud(r2, Ja2, Ea2));
                      f2 = T(Ud(r2, Ka2, Ea2));
                      v2 = T(v2 + x2);
                      g[fa2 >> 2] = v2;
                      c[ha2 >> 2] = 1;
                      w2 = T(g[r2 + 396 >> 2]);
                      c:
                        do
                          if (Sb(w2) | 0) {
                            q2 = Sb(qa2) | 0;
                            do
                              if (!q2) {
                                if (K2 | (ae(r2, Ka2, qa2) | 0 | I2))
                                  break;
                                if ((Je(b2, r2) | 0) != 4)
                                  break;
                                if ((c[(Ke(r2, Ka2) | 0) + 4 >> 2] | 0) == 3)
                                  break;
                                if ((c[(Le(r2, Ka2) | 0) + 4 >> 2] | 0) == 3)
                                  break;
                                g[ea2 >> 2] = qa2;
                                c[ga2 >> 2] = 1;
                                break c;
                              }
                            while (0);
                            if (ae(r2, Ka2, qa2) | 0) {
                              q2 = c[r2 + 992 + (c[U2 >> 2] << 2) >> 2] | 0;
                              Ma2 = T(f2 + T(be(q2, qa2)));
                              g[ea2 >> 2] = Ma2;
                              q2 = V2 & (c[q2 + 4 >> 2] | 0) == 2;
                              c[ga2 >> 2] = ((Sb(Ma2) | 0 | q2) ^ 1) & 1;
                              break;
                            } else {
                              g[ea2 >> 2] = qa2;
                              c[ga2 >> 2] = q2 ? 0 : 2;
                              break;
                            }
                          } else {
                            Ma2 = T(v2 - x2);
                            E2 = T(Ma2 / w2);
                            Ma2 = T(w2 * Ma2);
                            c[ga2 >> 2] = 1;
                            g[ea2 >> 2] = T(f2 + (Fa2 ? E2 : Ma2));
                          }
                        while (0);
                      Me(r2, Ja2, H2, Ea2, ha2, fa2);
                      Me(r2, Ka2, qa2, Ea2, ga2, ea2);
                      do
                        if (!(ae(r2, Ka2, qa2) | 0) ? (Je(b2, r2) | 0) == 4 : 0) {
                          if ((c[(Ke(r2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                            q2 = 0;
                            break;
                          }
                          q2 = (c[(Le(r2, Ka2) | 0) + 4 >> 2] | 0) != 3;
                        } else
                          q2 = 0;
                      while (0);
                      Ma2 = T(g[fa2 >> 2]);
                      E2 = T(g[ea2 >> 2]);
                      Na2 = c[ha2 >> 2] | 0;
                      Oa2 = c[ga2 >> 2] | 0;
                      Td(r2, Fa2 ? Ma2 : E2, Fa2 ? E2 : Ma2, Ga2, Fa2 ? Na2 : Oa2, Fa2 ? Oa2 : Na2, Ea2, sa2, o2 & (q2 ^ 1), 3488, p2) | 0;
                      a[Y2 >> 0] = a[Y2 >> 0] | a[r2 + 508 >> 0];
                      r2 = c[r2 + 960 >> 2] | 0;
                    } while ((r2 | 0) != 0);
                  } else
                    e2 = T(0);
                } else
                  e2 = T(0);
                e2 = T(F2 + e2);
                Oa2 = e2 < T(0) & 1;
                a[Y2 >> 0] = Oa2 | d[Y2 >> 0];
                if (O2 & e2 > T(0)) {
                  q2 = c[P2 >> 2] | 0;
                  if ((c[b2 + 364 + (q2 << 3) + 4 >> 2] | 0) != 0 ? (na2 = T(be(b2 + 364 + (q2 << 3) | 0, ua2)), na2 >= T(0)) : 0)
                    v2 = T(cC(T(0), T(na2 - T(H2 - e2))));
                  else
                    v2 = T(0);
                } else
                  v2 = e2;
                B2 = G2 >>> 0 < D2 >>> 0;
                if (B2) {
                  t2 = c[Ha2 >> 2] | 0;
                  s2 = G2;
                  q2 = 0;
                  do {
                    r2 = c[t2 + (s2 << 2) >> 2] | 0;
                    if (!(c[r2 + 24 >> 2] | 0)) {
                      q2 = ((c[(Ke(r2, Ja2) | 0) + 4 >> 2] | 0) == 3 & 1) + q2 | 0;
                      q2 = q2 + ((c[(Le(r2, Ja2) | 0) + 4 >> 2] | 0) == 3 & 1) | 0;
                    }
                    s2 = s2 + 1 | 0;
                  } while ((s2 | 0) != (D2 | 0));
                  if (q2) {
                    x2 = T(0);
                    f2 = T(0);
                  } else
                    X2 = 101;
                } else
                  X2 = 101;
                d:
                  do
                    if ((X2 | 0) == 101) {
                      X2 = 0;
                      switch (Z2 | 0) {
                        case 1: {
                          q2 = 0;
                          x2 = T(v2 * T(0.5));
                          f2 = T(0);
                          break d;
                        }
                        case 2: {
                          q2 = 0;
                          x2 = v2;
                          f2 = T(0);
                          break d;
                        }
                        case 3: {
                          if (k2 >>> 0 <= 1) {
                            q2 = 0;
                            x2 = T(0);
                            f2 = T(0);
                            break d;
                          }
                          f2 = T((k2 + -1 | 0) >>> 0);
                          q2 = 0;
                          x2 = T(0);
                          f2 = T(T(cC(v2, T(0))) / f2);
                          break d;
                        }
                        case 5: {
                          f2 = T(v2 / T((k2 + 1 | 0) >>> 0));
                          q2 = 0;
                          x2 = f2;
                          break d;
                        }
                        case 4: {
                          f2 = T(v2 / T(k2 >>> 0));
                          q2 = 0;
                          x2 = T(f2 * T(0.5));
                          break d;
                        }
                        default: {
                          q2 = 0;
                          x2 = T(0);
                          f2 = T(0);
                          break d;
                        }
                      }
                    }
                  while (0);
                e2 = T($2 + x2);
                if (B2) {
                  w2 = T(v2 / T(q2 | 0));
                  s2 = c[Ha2 >> 2] | 0;
                  r2 = G2;
                  v2 = T(0);
                  do {
                    q2 = c[s2 + (r2 << 2) >> 2] | 0;
                    e:
                      do
                        if ((c[q2 + 36 >> 2] | 0) != 1) {
                          switch (c[q2 + 24 >> 2] | 0) {
                            case 1: {
                              if (Ne(q2, Ja2) | 0) {
                                if (!o2)
                                  break e;
                                Ma2 = T(Oe(q2, Ja2, H2));
                                Ma2 = T(Ma2 + T(se(b2, Ja2)));
                                Ma2 = T(Ma2 + T(me(q2, Ja2, Ea2)));
                                g[q2 + 400 + (c[S2 >> 2] << 2) >> 2] = Ma2;
                                break e;
                              }
                              break;
                            }
                            case 0: {
                              Oa2 = (c[(Ke(q2, Ja2) | 0) + 4 >> 2] | 0) == 3;
                              Ma2 = T(w2 + e2);
                              e2 = Oa2 ? Ma2 : e2;
                              if (o2) {
                                Oa2 = q2 + 400 + (c[S2 >> 2] << 2) | 0;
                                g[Oa2 >> 2] = T(e2 + T(g[Oa2 >> 2]));
                              }
                              Oa2 = (c[(Le(q2, Ja2) | 0) + 4 >> 2] | 0) == 3;
                              Ma2 = T(w2 + e2);
                              e2 = Oa2 ? Ma2 : e2;
                              if (M2) {
                                Ma2 = T(f2 + T(Ud(q2, Ja2, Ea2)));
                                v2 = qa2;
                                e2 = T(e2 + T(Ma2 + T(g[q2 + 504 >> 2])));
                                break e;
                              } else {
                                e2 = T(e2 + T(f2 + T(Pe(q2, Ja2, Ea2))));
                                v2 = T(cC(v2, T(Pe(q2, Ka2, Ea2))));
                                break e;
                              }
                            }
                            default: {
                            }
                          }
                          if (o2) {
                            Ma2 = T(x2 + T(se(b2, Ja2)));
                            Oa2 = q2 + 400 + (c[S2 >> 2] << 2) | 0;
                            g[Oa2 >> 2] = T(Ma2 + T(g[Oa2 >> 2]));
                          }
                        }
                      while (0);
                    r2 = r2 + 1 | 0;
                  } while ((r2 | 0) != (D2 | 0));
                } else
                  v2 = T(0);
                f2 = T(aa2 + e2);
                if (Q2)
                  x2 = T(T(Ie(b2, Ka2, T(za2 + v2), ya2, m2)) - za2);
                else
                  x2 = qa2;
                w2 = T(T(Ie(b2, Ka2, T(za2 + (W2 ? qa2 : v2)), ya2, m2)) - za2);
                if (B2 & o2) {
                  r2 = G2;
                  do {
                    s2 = c[(c[Ha2 >> 2] | 0) + (r2 << 2) >> 2] | 0;
                    do
                      if ((c[s2 + 36 >> 2] | 0) != 1) {
                        if ((c[s2 + 24 >> 2] | 0) == 1) {
                          if (Ne(s2, Ka2) | 0) {
                            Ma2 = T(Oe(s2, Ka2, qa2));
                            Ma2 = T(Ma2 + T(se(b2, Ka2)));
                            Ma2 = T(Ma2 + T(me(s2, Ka2, Ea2)));
                            q2 = c[R2 >> 2] | 0;
                            g[s2 + 400 + (q2 << 2) >> 2] = Ma2;
                            if (!(Sb(Ma2) | 0))
                              break;
                          } else
                            q2 = c[R2 >> 2] | 0;
                          Ma2 = T(se(b2, Ka2));
                          g[s2 + 400 + (q2 << 2) >> 2] = T(Ma2 + T(me(s2, Ka2, Ea2)));
                          break;
                        }
                        q2 = Je(b2, s2) | 0;
                        do
                          if ((q2 | 0) == 4) {
                            if ((c[(Ke(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                              X2 = 139;
                              break;
                            }
                            if ((c[(Le(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                              X2 = 139;
                              break;
                            }
                            if (ae(s2, Ka2, qa2) | 0) {
                              e2 = u2;
                              break;
                            }
                            Na2 = c[s2 + 908 + (c[P2 >> 2] << 2) >> 2] | 0;
                            c[ea2 >> 2] = Na2;
                            e2 = T(g[s2 + 396 >> 2]);
                            Oa2 = Sb(e2) | 0;
                            v2 = (c[j >> 2] = Na2, T(g[j >> 2]));
                            if (Oa2)
                              e2 = w2;
                            else {
                              F2 = T(Ud(s2, Ka2, Ea2));
                              Ma2 = T(v2 / e2);
                              e2 = T(e2 * v2);
                              e2 = T(F2 + (Fa2 ? Ma2 : e2));
                            }
                            g[fa2 >> 2] = e2;
                            g[ea2 >> 2] = T(T(Ud(s2, Ja2, Ea2)) + v2);
                            c[ga2 >> 2] = 1;
                            c[ha2 >> 2] = 1;
                            Me(s2, Ja2, H2, Ea2, ga2, ea2);
                            Me(s2, Ka2, qa2, Ea2, ha2, fa2);
                            e2 = T(g[ea2 >> 2]);
                            F2 = T(g[fa2 >> 2]);
                            Ma2 = Fa2 ? e2 : F2;
                            e2 = Fa2 ? F2 : e2;
                            Oa2 = ((Sb(Ma2) | 0) ^ 1) & 1;
                            Td(s2, Ma2, e2, Ga2, Oa2, ((Sb(e2) | 0) ^ 1) & 1, Ea2, sa2, 1, 3493, p2) | 0;
                            e2 = u2;
                          } else
                            X2 = 139;
                        while (0);
                        f:
                          do
                            if ((X2 | 0) == 139) {
                              X2 = 0;
                              e2 = T(x2 - T(Pe(s2, Ka2, Ea2)));
                              do
                                if ((c[(Ke(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                  if ((c[(Le(s2, Ka2) | 0) + 4 >> 2] | 0) != 3)
                                    break;
                                  e2 = T(u2 + T(cC(T(0), T(e2 * T(0.5)))));
                                  break f;
                                }
                              while (0);
                              if ((c[(Le(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                e2 = u2;
                                break;
                              }
                              if ((c[(Ke(s2, Ka2) | 0) + 4 >> 2] | 0) == 3) {
                                e2 = T(u2 + T(cC(T(0), e2)));
                                break;
                              }
                              switch (q2 | 0) {
                                case 1: {
                                  e2 = u2;
                                  break f;
                                }
                                case 2: {
                                  e2 = T(u2 + T(e2 * T(0.5)));
                                  break f;
                                }
                                default: {
                                  e2 = T(u2 + e2);
                                  break f;
                                }
                              }
                            }
                          while (0);
                        Ma2 = T(oa2 + e2);
                        Oa2 = s2 + 400 + (c[R2 >> 2] << 2) | 0;
                        g[Oa2 >> 2] = T(Ma2 + T(g[Oa2 >> 2]));
                      }
                    while (0);
                    r2 = r2 + 1 | 0;
                  } while ((r2 | 0) != (D2 | 0));
                }
                oa2 = T(oa2 + w2);
                da2 = T(cC(da2, f2));
                k2 = L2 + 1 | 0;
                if (D2 >>> 0 >= Ia2 >>> 0)
                  break;
                else {
                  e2 = H2;
                  G2 = D2;
                  L2 = k2;
                }
              }
              do
                if (o2) {
                  q2 = k2 >>> 0 > 1;
                  if (!q2 ? !(Qe(b2) | 0) : 0)
                    break;
                  if (!(Sb(qa2) | 0)) {
                    e2 = T(qa2 - oa2);
                    g:
                      do
                        switch (c[b2 + 12 >> 2] | 0) {
                          case 3: {
                            u2 = T(u2 + e2);
                            z2 = T(0);
                            break;
                          }
                          case 2: {
                            u2 = T(u2 + T(e2 * T(0.5)));
                            z2 = T(0);
                            break;
                          }
                          case 4: {
                            if (qa2 > oa2)
                              z2 = T(e2 / T(k2 >>> 0));
                            else
                              z2 = T(0);
                            break;
                          }
                          case 7:
                            if (qa2 > oa2) {
                              u2 = T(u2 + T(e2 / T(k2 << 1 >>> 0)));
                              z2 = T(e2 / T(k2 >>> 0));
                              z2 = q2 ? z2 : T(0);
                              break g;
                            } else {
                              u2 = T(u2 + T(e2 * T(0.5)));
                              z2 = T(0);
                              break g;
                            }
                          case 6: {
                            z2 = T(e2 / T(L2 >>> 0));
                            z2 = qa2 > oa2 & q2 ? z2 : T(0);
                            break;
                          }
                          default:
                            z2 = T(0);
                        }
                      while (0);
                    if (k2 | 0) {
                      B2 = 1040 + (Ka2 << 2) | 0;
                      C2 = 976 + (Ka2 << 2) | 0;
                      t2 = 0;
                      r2 = 0;
                      while (1) {
                        h:
                          do
                            if (r2 >>> 0 < Ia2 >>> 0) {
                              v2 = T(0);
                              w2 = T(0);
                              e2 = T(0);
                              s2 = r2;
                              while (1) {
                                q2 = c[(c[Ha2 >> 2] | 0) + (s2 << 2) >> 2] | 0;
                                do
                                  if ((c[q2 + 36 >> 2] | 0) != 1 ? (c[q2 + 24 >> 2] | 0) == 0 : 0) {
                                    if ((c[q2 + 940 >> 2] | 0) != (t2 | 0))
                                      break h;
                                    if (Re(q2, Ka2) | 0) {
                                      Ma2 = T(g[q2 + 908 + (c[C2 >> 2] << 2) >> 2]);
                                      e2 = T(cC(e2, T(Ma2 + T(Ud(q2, Ka2, Ea2)))));
                                    }
                                    if ((Je(b2, q2) | 0) != 5)
                                      break;
                                    na2 = T(Se(q2));
                                    na2 = T(na2 + T(me(q2, 0, Ea2)));
                                    Ma2 = T(g[q2 + 912 >> 2]);
                                    Ma2 = T(T(Ma2 + T(Ud(q2, 0, Ea2))) - na2);
                                    na2 = T(cC(w2, na2));
                                    Ma2 = T(cC(v2, Ma2));
                                    v2 = Ma2;
                                    w2 = na2;
                                    e2 = T(cC(e2, T(na2 + Ma2)));
                                  }
                                while (0);
                                q2 = s2 + 1 | 0;
                                if (q2 >>> 0 < Ia2 >>> 0)
                                  s2 = q2;
                                else {
                                  s2 = q2;
                                  break;
                                }
                              }
                            } else {
                              w2 = T(0);
                              e2 = T(0);
                              s2 = r2;
                            }
                          while (0);
                        y2 = T(z2 + e2);
                        f2 = u2;
                        u2 = T(u2 + y2);
                        if (r2 >>> 0 < s2 >>> 0) {
                          x2 = T(f2 + w2);
                          q2 = r2;
                          do {
                            r2 = c[(c[Ha2 >> 2] | 0) + (q2 << 2) >> 2] | 0;
                            i:
                              do
                                if ((c[r2 + 36 >> 2] | 0) != 1 ? (c[r2 + 24 >> 2] | 0) == 0 : 0)
                                  switch (Je(b2, r2) | 0) {
                                    case 1: {
                                      Ma2 = T(f2 + T(me(r2, Ka2, Ea2)));
                                      g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                      break i;
                                    }
                                    case 3: {
                                      Ma2 = T(T(u2 - T(ne(r2, Ka2, Ea2))) - T(g[r2 + 908 + (c[C2 >> 2] << 2) >> 2]));
                                      g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                      break i;
                                    }
                                    case 2: {
                                      Ma2 = T(f2 + T(T(y2 - T(g[r2 + 908 + (c[C2 >> 2] << 2) >> 2])) * T(0.5)));
                                      g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                      break i;
                                    }
                                    case 4: {
                                      Ma2 = T(f2 + T(me(r2, Ka2, Ea2)));
                                      g[r2 + 400 + (c[B2 >> 2] << 2) >> 2] = Ma2;
                                      if (ae(r2, Ka2, qa2) | 0)
                                        break i;
                                      if (Fa2) {
                                        v2 = T(g[r2 + 908 >> 2]);
                                        e2 = T(v2 + T(Ud(r2, Ja2, Ea2)));
                                        w2 = y2;
                                      } else {
                                        w2 = T(g[r2 + 912 >> 2]);
                                        w2 = T(w2 + T(Ud(r2, Ka2, Ea2)));
                                        e2 = y2;
                                        v2 = T(g[r2 + 908 >> 2]);
                                      }
                                      if (Ld(e2, v2) | 0 ? Ld(w2, T(g[r2 + 912 >> 2])) | 0 : 0)
                                        break i;
                                      Td(r2, e2, w2, Ga2, 1, 1, Ea2, sa2, 1, 3501, p2) | 0;
                                      break i;
                                    }
                                    case 5: {
                                      g[r2 + 404 >> 2] = T(T(x2 - T(Se(r2))) + T(Oe(r2, 0, qa2)));
                                      break i;
                                    }
                                    default:
                                      break i;
                                  }
                              while (0);
                            q2 = q2 + 1 | 0;
                          } while ((q2 | 0) != (s2 | 0));
                        }
                        t2 = t2 + 1 | 0;
                        if ((t2 | 0) == (k2 | 0))
                          break;
                        else
                          r2 = s2;
                      }
                    }
                  }
                }
              while (0);
              g[b2 + 908 >> 2] = T(Ie(b2, 2, ta2, m2, m2));
              g[b2 + 912 >> 2] = T(Ie(b2, 0, ra2, n2, m2));
              if ((pa2 | 0) != 0 ? (wa2 = c[b2 + 32 >> 2] | 0, xa2 = (pa2 | 0) == 2, !(xa2 & (wa2 | 0) != 2)) : 0) {
                if (xa2 & (wa2 | 0) == 2) {
                  e2 = T(va2 + H2);
                  e2 = T(cC(T(eC(e2, T(Te(b2, Ja2, da2, ua2)))), va2));
                  X2 = 198;
                }
              } else {
                e2 = T(Ie(b2, Ja2, da2, ua2, m2));
                X2 = 198;
              }
              if ((X2 | 0) == 198)
                g[b2 + 908 + (c[976 + (Ja2 << 2) >> 2] << 2) >> 2] = e2;
              if ((Aa2 | 0) != 0 ? (Ca2 = c[b2 + 32 >> 2] | 0, Da2 = (Aa2 | 0) == 2, !(Da2 & (Ca2 | 0) != 2)) : 0) {
                if (Da2 & (Ca2 | 0) == 2) {
                  e2 = T(za2 + qa2);
                  e2 = T(cC(T(eC(e2, T(Te(b2, Ka2, T(za2 + oa2), ya2)))), za2));
                  X2 = 204;
                }
              } else {
                e2 = T(Ie(b2, Ka2, T(za2 + oa2), ya2, m2));
                X2 = 204;
              }
              if ((X2 | 0) == 204)
                g[b2 + 908 + (c[976 + (Ka2 << 2) >> 2] << 2) >> 2] = e2;
              if (o2) {
                if ((c[Ba2 >> 2] | 0) == 2) {
                  r2 = 976 + (Ka2 << 2) | 0;
                  s2 = 1040 + (Ka2 << 2) | 0;
                  q2 = 0;
                  do {
                    t2 = ac(b2, q2) | 0;
                    if (!(c[t2 + 24 >> 2] | 0)) {
                      Na2 = c[r2 >> 2] | 0;
                      Ma2 = T(g[b2 + 908 + (Na2 << 2) >> 2]);
                      Oa2 = t2 + 400 + (c[s2 >> 2] << 2) | 0;
                      Ma2 = T(Ma2 - T(g[Oa2 >> 2]));
                      g[Oa2 >> 2] = T(Ma2 - T(g[t2 + 908 + (Na2 << 2) >> 2]));
                    }
                    q2 = q2 + 1 | 0;
                  } while ((q2 | 0) != (Ia2 | 0));
                }
                if (h2 | 0) {
                  q2 = Fa2 ? pa2 : i3;
                  do {
                    Ue(b2, h2, Ea2, q2, sa2, Ga2, p2);
                    h2 = c[h2 + 960 >> 2] | 0;
                  } while ((h2 | 0) != 0);
                }
                q2 = (Ja2 | 2 | 0) == 3;
                r2 = (Ka2 | 2 | 0) == 3;
                if (q2 | r2) {
                  h2 = 0;
                  do {
                    s2 = c[(c[Ha2 >> 2] | 0) + (h2 << 2) >> 2] | 0;
                    if ((c[s2 + 36 >> 2] | 0) != 1) {
                      if (q2)
                        Ve(b2, s2, Ja2);
                      if (r2)
                        Ve(b2, s2, Ka2);
                    }
                    h2 = h2 + 1 | 0;
                  } while ((h2 | 0) != (Ia2 | 0));
                }
              }
            } else
              we(b2, e2, f2, i3, k2, m2, n2);
          while (0);
          l = La2;
          return;
        }
        function Zd(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          var c2 = 0;
          Vb(a2, b2 >= T(0), 3147);
          c2 = b2 == T(0);
          g[a2 + 4 >> 2] = c2 ? T(0) : b2;
          return;
        }
        function _d(b2, d2, e2, f2) {
          b2 = b2 | 0;
          d2 = T(d2);
          e2 = T(e2);
          f2 = f2 | 0;
          var h2 = ib, i3 = ib, j2 = 0, k2 = 0, l2 = 0;
          c[2278] = (c[2278] | 0) + 1;
          $d(b2);
          if (!(ae(b2, 2, d2) | 0)) {
            h2 = T(be(b2 + 380 | 0, d2));
            if (!(h2 >= T(0))) {
              l2 = ((Sb(d2) | 0) ^ 1) & 1;
              h2 = d2;
            } else
              l2 = 2;
          } else {
            h2 = T(be(c[b2 + 992 >> 2] | 0, d2));
            l2 = 1;
            h2 = T(h2 + T(Ud(b2, 2, d2)));
          }
          if (!(ae(b2, 0, e2) | 0)) {
            i3 = T(be(b2 + 388 | 0, e2));
            if (!(i3 >= T(0))) {
              k2 = ((Sb(e2) | 0) ^ 1) & 1;
              i3 = e2;
            } else
              k2 = 2;
          } else {
            i3 = T(be(c[b2 + 996 >> 2] | 0, e2));
            k2 = 1;
            i3 = T(i3 + T(Ud(b2, 0, d2)));
          }
          j2 = b2 + 976 | 0;
          if (Td(b2, h2, i3, f2, l2, k2, d2, e2, 1, 3189, c[j2 >> 2] | 0) | 0 ? (ce(b2, c[b2 + 496 >> 2] | 0, d2, e2, d2), de(b2, T(g[(c[j2 >> 2] | 0) + 4 >> 2]), T(0), T(0)), a[11696] | 0) : 0)
            Md(b2, 7);
          return;
        }
        function $d(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          h2 = i3 + 24 | 0;
          g2 = i3 + 16 | 0;
          e2 = i3 + 8 | 0;
          f2 = i3;
          d2 = 0;
          do {
            b2 = a2 + 380 + (d2 << 3) | 0;
            if (!((c[a2 + 380 + (d2 << 3) + 4 >> 2] | 0) != 0 ? (j2 = b2, k2 = c[j2 + 4 >> 2] | 0, m2 = e2, c[m2 >> 2] = c[j2 >> 2], c[m2 + 4 >> 2] = k2, m2 = a2 + 364 + (d2 << 3) | 0, k2 = c[m2 + 4 >> 2] | 0, j2 = f2, c[j2 >> 2] = c[m2 >> 2], c[j2 + 4 >> 2] = k2, c[g2 >> 2] = c[e2 >> 2], c[g2 + 4 >> 2] = c[e2 + 4 >> 2], c[h2 >> 2] = c[f2 >> 2], c[h2 + 4 >> 2] = c[f2 + 4 >> 2], Kd(g2, h2) | 0) : 0))
              b2 = a2 + 348 + (d2 << 3) | 0;
            c[a2 + 992 + (d2 << 2) >> 2] = b2;
            d2 = d2 + 1 | 0;
          } while ((d2 | 0) != 2);
          l = i3;
          return;
        }
        function ae(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0;
          a2 = c[a2 + 992 + (c[976 + (b2 << 2) >> 2] << 2) >> 2] | 0;
          switch (c[a2 + 4 >> 2] | 0) {
            case 0:
            case 3: {
              a2 = 0;
              break;
            }
            case 1: {
              if (T(g[a2 >> 2]) < T(0))
                a2 = 0;
              else
                e2 = 5;
              break;
            }
            case 2: {
              if (T(g[a2 >> 2]) < T(0))
                a2 = 0;
              else
                a2 = (Sb(d2) | 0) ^ 1;
              break;
            }
            default:
              e2 = 5;
          }
          if ((e2 | 0) == 5)
            a2 = 1;
          return a2 | 0;
        }
        function be(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          switch (c[a2 + 4 >> 2] | 0) {
            case 2: {
              b2 = T(T(T(g[a2 >> 2]) * b2) / T(100));
              break;
            }
            case 1: {
              b2 = T(g[a2 >> 2]);
              break;
            }
            default:
              b2 = T(t);
          }
          return T(b2);
        }
        function ce(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          e2 = T(e2);
          f2 = T(f2);
          var h2 = 0, i3 = ib;
          b2 = c[a2 + 944 >> 2] | 0 ? b2 : 1;
          h2 = re(c[a2 + 4 >> 2] | 0, b2) | 0;
          b2 = ze(h2, b2) | 0;
          d2 = T($e(a2, h2, d2));
          e2 = T($e(a2, b2, e2));
          i3 = T(d2 + T(me(a2, h2, f2)));
          g[a2 + 400 + (c[1040 + (h2 << 2) >> 2] << 2) >> 2] = i3;
          d2 = T(d2 + T(ne(a2, h2, f2)));
          g[a2 + 400 + (c[1e3 + (h2 << 2) >> 2] << 2) >> 2] = d2;
          d2 = T(e2 + T(me(a2, b2, f2)));
          g[a2 + 400 + (c[1040 + (b2 << 2) >> 2] << 2) >> 2] = d2;
          f2 = T(e2 + T(ne(a2, b2, f2)));
          g[a2 + 400 + (c[1e3 + (b2 << 2) >> 2] << 2) >> 2] = f2;
          return;
        }
        function de(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = T(b2);
          d2 = T(d2);
          e2 = T(e2);
          var f2 = 0, h2 = 0, i3 = ib, j2 = ib, k2 = 0, l2 = 0, m2 = ib, n2 = 0, o2 = ib, p2 = ib, q2 = ib, r2 = ib;
          if (!(b2 == T(0))) {
            f2 = a2 + 400 | 0;
            r2 = T(g[f2 >> 2]);
            h2 = a2 + 404 | 0;
            q2 = T(g[h2 >> 2]);
            n2 = a2 + 416 | 0;
            p2 = T(g[n2 >> 2]);
            l2 = a2 + 420 | 0;
            i3 = T(g[l2 >> 2]);
            o2 = T(r2 + d2);
            m2 = T(q2 + e2);
            e2 = T(o2 + p2);
            j2 = T(m2 + i3);
            k2 = (c[a2 + 988 >> 2] | 0) == 1;
            g[f2 >> 2] = T(Od(r2, b2, 0, k2));
            g[h2 >> 2] = T(Od(q2, b2, 0, k2));
            d2 = T(gC(T(p2 * b2), T(1)));
            if (Ld(d2, T(0)) | 0)
              h2 = 0;
            else
              h2 = (Ld(d2, T(1)) | 0) ^ 1;
            d2 = T(gC(T(i3 * b2), T(1)));
            if (Ld(d2, T(0)) | 0)
              f2 = 0;
            else
              f2 = (Ld(d2, T(1)) | 0) ^ 1;
            r2 = T(Od(e2, b2, k2 & h2, k2 & (h2 ^ 1)));
            g[n2 >> 2] = T(r2 - T(Od(o2, b2, 0, k2)));
            r2 = T(Od(j2, b2, k2 & f2, k2 & (f2 ^ 1)));
            g[l2 >> 2] = T(r2 - T(Od(m2, b2, 0, k2)));
            h2 = (c[a2 + 952 >> 2] | 0) - (c[a2 + 948 >> 2] | 0) >> 2;
            if (h2 | 0) {
              f2 = 0;
              do {
                de(ac(a2, f2) | 0, b2, o2, m2);
                f2 = f2 + 1 | 0;
              } while ((f2 | 0) != (h2 | 0));
            }
          }
          return;
        }
        function ee(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          switch (d2 | 0) {
            case 5:
            case 0: {
              a2 = CB(c[489] | 0, e2, f2) | 0;
              break;
            }
            default:
              a2 = iC(e2, f2) | 0;
          }
          return a2 | 0;
        }
        function fe(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          f2 = l;
          l = l + 16 | 0;
          g2 = f2;
          c[g2 >> 2] = e2;
          ge(a2, 0, b2, d2, g2);
          l = f2;
          return;
        }
        function ge(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          a2 = a2 | 0 ? a2 : 956;
          Bb[c[a2 + 8 >> 2] & 1](a2, b2, d2, e2, f2) | 0;
          if ((d2 | 0) == 5)
            Ta();
          else
            return;
        }
        function he(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          a[b2 + c2 >> 0] = d2 & 1;
          return;
        }
        function ie(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          c[a2 >> 2] = 0;
          c[a2 + 4 >> 2] = 0;
          c[a2 + 8 >> 2] = 0;
          d2 = b2 + 4 | 0;
          e2 = (c[d2 >> 2] | 0) - (c[b2 >> 2] | 0) >> 2;
          if (e2 | 0) {
            je(a2, e2);
            ke(a2, c[b2 >> 2] | 0, c[d2 >> 2] | 0, e2);
          }
          return;
        }
        function je(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          if ((le(a2) | 0) >>> 0 < b2 >>> 0)
            jC(a2);
          if (b2 >>> 0 > 1073741823)
            Ta();
          else {
            d2 = qC(b2 << 2) | 0;
            c[a2 + 4 >> 2] = d2;
            c[a2 >> 2] = d2;
            c[a2 + 8 >> 2] = d2 + (b2 << 2);
            return;
          }
        }
        function ke(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          e2 = a2 + 4 | 0;
          a2 = d2 - b2 | 0;
          if ((a2 | 0) > 0) {
            BC(c[e2 >> 2] | 0, b2 | 0, a2 | 0) | 0;
            c[e2 >> 2] = (c[e2 >> 2] | 0) + (a2 >>> 2 << 2);
          }
          return;
        }
        function le(a2) {
          a2 = a2 | 0;
          return 1073741823;
        }
        function me(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          if (oe(b2) | 0 ? (c[a2 + 96 >> 2] | 0) != 0 : 0)
            a2 = a2 + 92 | 0;
          else
            a2 = Tb(a2 + 60 | 0, c[1040 + (b2 << 2) >> 2] | 0, 992) | 0;
          return T(pe(a2, d2));
        }
        function ne(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          if (oe(b2) | 0 ? (c[a2 + 104 >> 2] | 0) != 0 : 0)
            a2 = a2 + 100 | 0;
          else
            a2 = Tb(a2 + 60 | 0, c[1e3 + (b2 << 2) >> 2] | 0, 992) | 0;
          return T(pe(a2, d2));
        }
        function oe(a2) {
          a2 = a2 | 0;
          return (a2 | 1 | 0) == 3 | 0;
        }
        function pe(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          if ((c[a2 + 4 >> 2] | 0) == 3)
            b2 = T(0);
          else
            b2 = T(be(a2, b2));
          return T(b2);
        }
        function qe(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          a2 = c[a2 >> 2] | 0;
          return ((a2 | 0) == 0 ? (b2 | 0) > 1 ? b2 : 1 : a2) | 0;
        }
        function re(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0;
          a:
            do
              if ((b2 | 0) == 2) {
                switch (a2 | 0) {
                  case 2: {
                    a2 = 3;
                    break a;
                  }
                  case 3:
                    break;
                  default: {
                    c2 = 4;
                    break a;
                  }
                }
                a2 = 2;
              } else
                c2 = 4;
            while (0);
          return a2 | 0;
        }
        function se(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = ib;
          if (!((oe(b2) | 0 ? (c[a2 + 312 >> 2] | 0) != 0 : 0) ? (d2 = T(g[a2 + 308 >> 2]), d2 >= T(0)) : 0))
            d2 = T(cC(T(g[(Tb(a2 + 276 | 0, c[1040 + (b2 << 2) >> 2] | 0, 992) | 0) >> 2]), T(0)));
          return T(d2);
        }
        function te(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = ib;
          if (!((oe(b2) | 0 ? (c[a2 + 320 >> 2] | 0) != 0 : 0) ? (d2 = T(g[a2 + 316 >> 2]), d2 >= T(0)) : 0))
            d2 = T(cC(T(g[(Tb(a2 + 276 | 0, c[1e3 + (b2 << 2) >> 2] | 0, 992) | 0) >> 2]), T(0)));
          return T(d2);
        }
        function ue(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = ib;
          if (!((oe(b2) | 0 ? (c[a2 + 240 >> 2] | 0) != 0 : 0) ? (e2 = T(be(a2 + 236 | 0, d2)), e2 >= T(0)) : 0))
            e2 = T(cC(T(be(Tb(a2 + 204 | 0, c[1040 + (b2 << 2) >> 2] | 0, 992) | 0, d2)), T(0)));
          return T(e2);
        }
        function ve(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = ib;
          if (!((oe(b2) | 0 ? (c[a2 + 248 >> 2] | 0) != 0 : 0) ? (e2 = T(be(a2 + 244 | 0, d2)), e2 >= T(0)) : 0))
            e2 = T(cC(T(be(Tb(a2 + 204 | 0, c[1e3 + (b2 << 2) >> 2] | 0, 992) | 0, d2)), T(0)));
          return T(e2);
        }
        function we(a2, b2, d2, e2, f2, h2, i3) {
          a2 = a2 | 0;
          b2 = T(b2);
          d2 = T(d2);
          e2 = e2 | 0;
          f2 = f2 | 0;
          h2 = T(h2);
          i3 = T(i3);
          var j2 = ib, k2 = ib, m2 = ib, n2 = ib, o2 = ib, p2 = ib, q2 = 0, r2 = 0, s2 = 0;
          s2 = l;
          l = l + 16 | 0;
          q2 = s2;
          r2 = a2 + 964 | 0;
          ec(a2, (c[r2 >> 2] | 0) != 0, 3519);
          j2 = T(Ce(a2, 2, b2));
          k2 = T(Ce(a2, 0, b2));
          m2 = T(Ud(a2, 2, b2));
          n2 = T(Ud(a2, 0, b2));
          if (Sb(b2) | 0)
            o2 = b2;
          else
            o2 = T(cC(T(0), T(T(b2 - m2) - j2)));
          if (Sb(d2) | 0)
            p2 = d2;
          else
            p2 = T(cC(T(0), T(T(d2 - n2) - k2)));
          if ((e2 | 0) == 1 & (f2 | 0) == 1) {
            g[a2 + 908 >> 2] = T(Ie(a2, 2, T(b2 - m2), h2, h2));
            b2 = T(Ie(a2, 0, T(d2 - n2), i3, h2));
          } else {
            Db[c[r2 >> 2] & 1](q2, a2, o2, e2, p2, f2);
            o2 = T(j2 + T(g[q2 >> 2]));
            p2 = T(b2 - m2);
            g[a2 + 908 >> 2] = T(Ie(a2, 2, (e2 | 2 | 0) == 2 ? o2 : p2, h2, h2));
            p2 = T(k2 + T(g[q2 + 4 >> 2]));
            b2 = T(d2 - n2);
            b2 = T(Ie(a2, 0, (f2 | 2 | 0) == 2 ? p2 : b2, i3, h2));
          }
          g[a2 + 912 >> 2] = b2;
          l = s2;
          return;
        }
        function xe(a2, b2, c2, d2, e2, f2, h2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = T(c2);
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = T(f2);
          h2 = T(h2);
          var i3 = ib, j2 = ib, k2 = ib, l2 = ib;
          k2 = T(Ce(a2, 2, f2));
          i3 = T(Ce(a2, 0, f2));
          l2 = T(Ud(a2, 2, f2));
          j2 = T(Ud(a2, 0, f2));
          b2 = T(b2 - l2);
          g[a2 + 908 >> 2] = T(Ie(a2, 2, (d2 | 2 | 0) == 2 ? k2 : b2, f2, f2));
          c2 = T(c2 - j2);
          g[a2 + 912 >> 2] = T(Ie(a2, 0, (e2 | 2 | 0) == 2 ? i3 : c2, h2, f2));
          return;
        }
        function ye(a2, b2, c2, d2, e2, f2, h2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = T(c2);
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = T(f2);
          h2 = T(h2);
          var i3 = 0, j2 = ib, k2 = ib;
          i3 = (d2 | 0) == 2;
          if ((!(b2 <= T(0) & i3) ? !(c2 <= T(0) & (e2 | 0) == 2) : 0) ? !((d2 | 0) == 1 & (e2 | 0) == 1) : 0)
            a2 = 0;
          else {
            j2 = T(Ud(a2, 0, f2));
            k2 = T(Ud(a2, 2, f2));
            i3 = b2 < T(0) & i3 | (Sb(b2) | 0);
            b2 = T(b2 - k2);
            g[a2 + 908 >> 2] = T(Ie(a2, 2, i3 ? T(0) : b2, f2, f2));
            b2 = T(c2 - j2);
            i3 = c2 < T(0) & (e2 | 0) == 2 | (Sb(c2) | 0);
            g[a2 + 912 >> 2] = T(Ie(a2, 0, i3 ? T(0) : b2, h2, f2));
            a2 = 1;
          }
          return a2 | 0;
        }
        function ze(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (We(a2) | 0)
            a2 = re(2, b2) | 0;
          else
            a2 = 0;
          return a2 | 0;
        }
        function Ae(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          c2 = T(ue(a2, b2, c2));
          return T(c2 + T(se(a2, b2)));
        }
        function Be(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          c2 = T(ve(a2, b2, c2));
          return T(c2 + T(te(a2, b2)));
        }
        function Ce(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          var d2 = ib;
          d2 = T(Ae(a2, b2, c2));
          return T(d2 + T(Be(a2, b2, c2)));
        }
        function De(a2) {
          a2 = a2 | 0;
          if (!(c[a2 + 24 >> 2] | 0)) {
            if (T(Ee(a2)) != T(0))
              a2 = 1;
            else
              a2 = T(Fe(a2)) != T(0);
          } else
            a2 = 0;
          return a2 | 0;
        }
        function Ee(a2) {
          a2 = a2 | 0;
          var b2 = ib;
          if (c[a2 + 944 >> 2] | 0) {
            b2 = T(g[a2 + 44 >> 2]);
            if (Sb(b2) | 0) {
              b2 = T(g[a2 + 40 >> 2]);
              a2 = b2 > T(0) & ((Sb(b2) | 0) ^ 1);
              return T(a2 ? b2 : T(0));
            }
          } else
            b2 = T(0);
          return T(b2);
        }
        function Fe(b2) {
          b2 = b2 | 0;
          var d2 = ib, e2 = 0, f2 = ib;
          do
            if (c[b2 + 944 >> 2] | 0) {
              d2 = T(g[b2 + 48 >> 2]);
              if (Sb(d2) | 0) {
                e2 = a[(c[b2 + 976 >> 2] | 0) + 2 >> 0] | 0;
                if (e2 << 24 >> 24 == 0 ? (f2 = T(g[b2 + 40 >> 2]), f2 < T(0) & ((Sb(f2) | 0) ^ 1)) : 0) {
                  d2 = T(-f2);
                  break;
                }
                d2 = e2 << 24 >> 24 ? T(1) : T(0);
              }
            } else
              d2 = T(0);
          while (0);
          return T(d2);
        }
        function Ge(b2) {
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          yC(b2 + 400 | 0, 0, 540) | 0;
          a[b2 + 985 >> 0] = 1;
          lc(b2);
          e2 = $b(b2) | 0;
          if (e2 | 0) {
            d2 = b2 + 948 | 0;
            b2 = 0;
            do {
              Ge(c[(c[d2 >> 2] | 0) + (b2 << 2) >> 2] | 0);
              b2 = b2 + 1 | 0;
            } while ((b2 | 0) != (e2 | 0));
          }
          return;
        }
        function He(a2, b2, d2, e2, f2, h2, i3, j2, k2, m2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          e2 = e2 | 0;
          f2 = T(f2);
          h2 = T(h2);
          i3 = T(i3);
          j2 = j2 | 0;
          k2 = k2 | 0;
          m2 = m2 | 0;
          var n2 = 0, o2 = ib, p2 = 0, q2 = 0, r2 = ib, s2 = ib, u2 = 0, v2 = ib, w2 = 0, x2 = ib, y2 = 0, z2 = 0, A2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0;
          G2 = l;
          l = l + 16 | 0;
          A2 = G2 + 12 | 0;
          B2 = G2 + 8 | 0;
          C2 = G2 + 4 | 0;
          D2 = G2;
          F2 = re(c[a2 + 4 >> 2] | 0, k2) | 0;
          y2 = oe(F2) | 0;
          o2 = T(be(Xe(b2) | 0, y2 ? h2 : i3));
          z2 = ae(b2, 2, h2) | 0;
          E2 = ae(b2, 0, i3) | 0;
          do
            if (!(Sb(o2) | 0) ? !(Sb(y2 ? d2 : f2) | 0) : 0) {
              n2 = b2 + 504 | 0;
              if (!(Sb(T(g[n2 >> 2])) | 0)) {
                if (!(Ye(c[b2 + 976 >> 2] | 0, 0) | 0))
                  break;
                if ((c[b2 + 500 >> 2] | 0) == (c[2278] | 0))
                  break;
              }
              g[n2 >> 2] = T(cC(o2, T(Ce(b2, F2, h2))));
            } else
              p2 = 7;
          while (0);
          do
            if ((p2 | 0) == 7) {
              w2 = y2 ^ 1;
              if (!(w2 | z2 ^ 1)) {
                i3 = T(be(c[b2 + 992 >> 2] | 0, h2));
                g[b2 + 504 >> 2] = T(cC(i3, T(Ce(b2, 2, h2))));
                break;
              }
              if (!(y2 | E2 ^ 1)) {
                i3 = T(be(c[b2 + 996 >> 2] | 0, i3));
                g[b2 + 504 >> 2] = T(cC(i3, T(Ce(b2, 0, h2))));
                break;
              }
              g[A2 >> 2] = T(t);
              g[B2 >> 2] = T(t);
              c[C2 >> 2] = 0;
              c[D2 >> 2] = 0;
              v2 = T(Ud(b2, 2, h2));
              x2 = T(Ud(b2, 0, h2));
              if (z2) {
                r2 = T(v2 + T(be(c[b2 + 992 >> 2] | 0, h2)));
                g[A2 >> 2] = r2;
                c[C2 >> 2] = 1;
                q2 = 1;
              } else {
                q2 = 0;
                r2 = T(t);
              }
              if (E2) {
                o2 = T(x2 + T(be(c[b2 + 996 >> 2] | 0, i3)));
                g[B2 >> 2] = o2;
                c[D2 >> 2] = 1;
                n2 = 1;
              } else {
                n2 = 0;
                o2 = T(t);
              }
              p2 = c[a2 + 32 >> 2] | 0;
              if (!(y2 & (p2 | 0) == 2)) {
                if (Sb(r2) | 0 ? !(Sb(d2) | 0) : 0) {
                  g[A2 >> 2] = d2;
                  c[C2 >> 2] = 2;
                  q2 = 2;
                  r2 = d2;
                }
              } else
                p2 = 2;
              if ((!((p2 | 0) == 2 & w2) ? Sb(o2) | 0 : 0) ? !(Sb(f2) | 0) : 0) {
                g[B2 >> 2] = f2;
                c[D2 >> 2] = 2;
                n2 = 2;
                o2 = f2;
              }
              s2 = T(g[b2 + 396 >> 2]);
              u2 = Sb(s2) | 0;
              do
                if (!u2) {
                  if ((q2 | 0) == 1 & w2) {
                    g[B2 >> 2] = T(T(r2 - v2) / s2);
                    c[D2 >> 2] = 1;
                    n2 = 1;
                    p2 = 1;
                    break;
                  }
                  if (y2 & (n2 | 0) == 1) {
                    g[A2 >> 2] = T(s2 * T(o2 - x2));
                    c[C2 >> 2] = 1;
                    n2 = 1;
                    p2 = 1;
                  } else
                    p2 = q2;
                } else
                  p2 = q2;
              while (0);
              H2 = Sb(d2) | 0;
              q2 = (Je(a2, b2) | 0) != 4;
              if (!(y2 | z2 | ((e2 | 0) != 1 | H2) | (q2 | (p2 | 0) == 1)) ? (g[A2 >> 2] = d2, c[C2 >> 2] = 1, !u2) : 0) {
                g[B2 >> 2] = T(T(d2 - v2) / s2);
                c[D2 >> 2] = 1;
                n2 = 1;
              }
              if (!(E2 | w2 | ((j2 | 0) != 1 | (Sb(f2) | 0)) | (q2 | (n2 | 0) == 1)) ? (g[B2 >> 2] = f2, c[D2 >> 2] = 1, !u2) : 0) {
                g[A2 >> 2] = T(s2 * T(f2 - x2));
                c[C2 >> 2] = 1;
              }
              Me(b2, 2, h2, h2, C2, A2);
              Me(b2, 0, i3, h2, D2, B2);
              d2 = T(g[A2 >> 2]);
              f2 = T(g[B2 >> 2]);
              Td(b2, d2, f2, k2, c[C2 >> 2] | 0, c[D2 >> 2] | 0, h2, i3, 0, 3565, m2) | 0;
              i3 = T(g[b2 + 908 + (c[976 + (F2 << 2) >> 2] << 2) >> 2]);
              g[b2 + 504 >> 2] = T(cC(i3, T(Ce(b2, F2, h2))));
            }
          while (0);
          c[b2 + 500 >> 2] = c[2278];
          l = G2;
          return;
        }
        function Ie(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          d2 = T(d2);
          e2 = T(e2);
          d2 = T(Te(a2, b2, c2, d2));
          return T(cC(d2, T(Ce(a2, b2, e2))));
        }
        function Je(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = b2 + 20 | 0;
          b2 = c[((c[b2 >> 2] | 0) == 0 ? a2 + 16 | 0 : b2) >> 2] | 0;
          if ((b2 | 0) == 5 ? We(c[a2 + 4 >> 2] | 0) | 0 : 0)
            b2 = 1;
          return b2 | 0;
        }
        function Ke(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (oe(b2) | 0 ? (c[a2 + 96 >> 2] | 0) != 0 : 0)
            b2 = 4;
          else
            b2 = c[1040 + (b2 << 2) >> 2] | 0;
          return a2 + 60 + (b2 << 3) | 0;
        }
        function Le(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (oe(b2) | 0 ? (c[a2 + 104 >> 2] | 0) != 0 : 0)
            b2 = 5;
          else
            b2 = c[1e3 + (b2 << 2) >> 2] | 0;
          return a2 + 60 + (b2 << 3) | 0;
        }
        function Me(a2, b2, d2, e2, f2, h2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          e2 = T(e2);
          f2 = f2 | 0;
          h2 = h2 | 0;
          d2 = T(be(a2 + 380 + (c[976 + (b2 << 2) >> 2] << 3) | 0, d2));
          d2 = T(d2 + T(Ud(a2, b2, e2)));
          switch (c[f2 >> 2] | 0) {
            case 2:
            case 1: {
              f2 = Sb(d2) | 0;
              e2 = T(g[h2 >> 2]);
              g[h2 >> 2] = f2 | e2 < d2 ? e2 : d2;
              break;
            }
            case 0: {
              if (!(Sb(d2) | 0)) {
                c[f2 >> 2] = 2;
                g[h2 >> 2] = d2;
              }
              break;
            }
            default: {
            }
          }
          return;
        }
        function Ne(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          a2 = a2 + 132 | 0;
          if (oe(b2) | 0 ? (c[(Tb(a2, 4, 948) | 0) + 4 >> 2] | 0) != 0 : 0)
            a2 = 1;
          else
            a2 = (c[(Tb(a2, c[1040 + (b2 << 2) >> 2] | 0, 948) | 0) + 4 >> 2] | 0) != 0;
          return a2 | 0;
        }
        function Oe(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0;
          a2 = a2 + 132 | 0;
          if (oe(b2) | 0 ? (e2 = Tb(a2, 4, 948) | 0, (c[e2 + 4 >> 2] | 0) != 0) : 0)
            f2 = 4;
          else {
            e2 = Tb(a2, c[1040 + (b2 << 2) >> 2] | 0, 948) | 0;
            if (!(c[e2 + 4 >> 2] | 0))
              d2 = T(0);
            else
              f2 = 4;
          }
          if ((f2 | 0) == 4)
            d2 = T(be(e2, d2));
          return T(d2);
        }
        function Pe(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = ib;
          e2 = T(g[a2 + 908 + (c[976 + (b2 << 2) >> 2] << 2) >> 2]);
          e2 = T(e2 + T(me(a2, b2, d2)));
          return T(e2 + T(ne(a2, b2, d2)));
        }
        function Qe(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          a:
            do
              if (!(We(c[a2 + 4 >> 2] | 0) | 0)) {
                if ((c[a2 + 16 >> 2] | 0) != 5) {
                  d2 = $b(a2) | 0;
                  if (!d2)
                    b2 = 0;
                  else {
                    b2 = 0;
                    while (1) {
                      e2 = ac(a2, b2) | 0;
                      if ((c[e2 + 24 >> 2] | 0) == 0 ? (c[e2 + 20 >> 2] | 0) == 5 : 0) {
                        b2 = 1;
                        break a;
                      }
                      b2 = b2 + 1 | 0;
                      if (b2 >>> 0 >= d2 >>> 0) {
                        b2 = 0;
                        break;
                      }
                    }
                  }
                } else
                  b2 = 1;
              } else
                b2 = 0;
            while (0);
          return b2 | 0;
        }
        function Re(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = ib;
          d2 = T(g[a2 + 908 + (c[976 + (b2 << 2) >> 2] << 2) >> 2]);
          return d2 >= T(0) & ((Sb(d2) | 0) ^ 1) | 0;
        }
        function Se(a2) {
          a2 = a2 | 0;
          var b2 = ib, d2 = 0, e2 = 0, f2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = ib;
          d2 = c[a2 + 968 >> 2] | 0;
          if (!d2) {
            h2 = $b(a2) | 0;
            do
              if (h2 | 0) {
                d2 = 0;
                f2 = 0;
                while (1) {
                  e2 = ac(a2, f2) | 0;
                  if (c[e2 + 940 >> 2] | 0) {
                    i3 = 8;
                    break;
                  }
                  if ((c[e2 + 24 >> 2] | 0) != 1) {
                    j2 = (Je(a2, e2) | 0) == 5;
                    if (j2) {
                      d2 = e2;
                      break;
                    } else
                      d2 = (d2 | 0) == 0 ? e2 : d2;
                  }
                  f2 = f2 + 1 | 0;
                  if (f2 >>> 0 >= h2 >>> 0) {
                    i3 = 8;
                    break;
                  }
                }
                if ((i3 | 0) == 8) {
                  if (!d2)
                    break;
                }
                b2 = T(Se(d2));
                return T(b2 + T(g[d2 + 404 >> 2]));
              }
            while (0);
            b2 = T(g[a2 + 912 >> 2]);
          } else {
            k2 = T(g[a2 + 908 >> 2]);
            b2 = T(g[a2 + 912 >> 2]);
            b2 = T(mb[d2 & 0](a2, k2, b2));
            ec(a2, (Sb(b2) | 0) ^ 1, 3573);
          }
          return T(b2);
        }
        function Te(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          d2 = T(d2);
          var e2 = ib, f2 = 0;
          if (!(We(b2) | 0)) {
            if (oe(b2) | 0) {
              b2 = 0;
              f2 = 3;
            } else {
              d2 = T(t);
              e2 = T(t);
            }
          } else {
            b2 = 1;
            f2 = 3;
          }
          if ((f2 | 0) == 3) {
            e2 = T(be(a2 + 364 + (b2 << 3) | 0, d2));
            d2 = T(be(a2 + 380 + (b2 << 3) | 0, d2));
          }
          f2 = d2 < c2 & (d2 >= T(0) & ((Sb(d2) | 0) ^ 1));
          c2 = f2 ? d2 : c2;
          f2 = e2 >= T(0) & ((Sb(e2) | 0) ^ 1) & c2 < e2;
          return T(f2 ? e2 : c2);
        }
        function Ue(a2, b2, d2, e2, f2, h2, i3) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          e2 = e2 | 0;
          f2 = T(f2);
          h2 = h2 | 0;
          i3 = i3 | 0;
          var j2 = ib, k2 = ib, l2 = 0, m2 = 0, n2 = ib, o2 = ib, p2 = ib, q2 = 0, r2 = 0, s2 = 0, u2 = 0, v2 = ib, w2 = 0;
          s2 = re(c[a2 + 4 >> 2] | 0, h2) | 0;
          q2 = ze(s2, h2) | 0;
          r2 = oe(s2) | 0;
          n2 = T(Ud(b2, 2, d2));
          o2 = T(Ud(b2, 0, d2));
          if (!(ae(b2, 2, d2) | 0)) {
            if (Ne(b2, 2) | 0 ? Ze(b2, 2) | 0 : 0) {
              j2 = T(g[a2 + 908 >> 2]);
              k2 = T(se(a2, 2));
              k2 = T(j2 - T(k2 + T(te(a2, 2))));
              j2 = T(Oe(b2, 2, d2));
              j2 = T(Ie(b2, 2, T(k2 - T(j2 + T(_e(b2, 2, d2)))), d2, d2));
            } else
              j2 = T(t);
          } else
            j2 = T(n2 + T(be(c[b2 + 992 >> 2] | 0, d2)));
          if (!(ae(b2, 0, f2) | 0)) {
            if (Ne(b2, 0) | 0 ? Ze(b2, 0) | 0 : 0) {
              k2 = T(g[a2 + 912 >> 2]);
              v2 = T(se(a2, 0));
              v2 = T(k2 - T(v2 + T(te(a2, 0))));
              k2 = T(Oe(b2, 0, f2));
              k2 = T(Ie(b2, 0, T(v2 - T(k2 + T(_e(b2, 0, f2)))), f2, d2));
            } else
              k2 = T(t);
          } else
            k2 = T(o2 + T(be(c[b2 + 996 >> 2] | 0, f2)));
          l2 = Sb(j2) | 0;
          m2 = Sb(k2) | 0;
          do
            if (l2 ^ m2 ? (p2 = T(g[b2 + 396 >> 2]), !(Sb(p2) | 0)) : 0)
              if (l2) {
                j2 = T(n2 + T(T(k2 - o2) * p2));
                break;
              } else {
                v2 = T(o2 + T(T(j2 - n2) / p2));
                k2 = m2 ? v2 : k2;
                break;
              }
          while (0);
          m2 = Sb(j2) | 0;
          l2 = Sb(k2) | 0;
          if (m2 | l2) {
            w2 = (m2 ^ 1) & 1;
            e2 = d2 > T(0) & ((e2 | 0) != 0 & m2);
            j2 = r2 ? j2 : e2 ? d2 : j2;
            Td(b2, j2, k2, h2, r2 ? w2 : e2 ? 2 : w2, m2 & (l2 ^ 1) & 1, j2, k2, 0, 3623, i3) | 0;
            j2 = T(g[b2 + 908 >> 2]);
            j2 = T(j2 + T(Ud(b2, 2, d2)));
            k2 = T(g[b2 + 912 >> 2]);
            k2 = T(k2 + T(Ud(b2, 0, d2)));
          }
          Td(b2, j2, k2, h2, 1, 1, j2, k2, 1, 3635, i3) | 0;
          if (Ze(b2, s2) | 0 ? !(Ne(b2, s2) | 0) : 0) {
            w2 = c[976 + (s2 << 2) >> 2] | 0;
            v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
            v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
            v2 = T(v2 - T(te(a2, s2)));
            v2 = T(v2 - T(ne(b2, s2, d2)));
            v2 = T(v2 - T(_e(b2, s2, r2 ? d2 : f2)));
            g[b2 + 400 + (c[1040 + (s2 << 2) >> 2] << 2) >> 2] = v2;
          } else
            u2 = 21;
          do
            if ((u2 | 0) == 21) {
              if (!(Ne(b2, s2) | 0) ? (c[a2 + 8 >> 2] | 0) == 1 : 0) {
                w2 = c[976 + (s2 << 2) >> 2] | 0;
                v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
                v2 = T(T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2])) * T(0.5));
                g[b2 + 400 + (c[1040 + (s2 << 2) >> 2] << 2) >> 2] = v2;
                break;
              }
              if (!(Ne(b2, s2) | 0) ? (c[a2 + 8 >> 2] | 0) == 2 : 0) {
                w2 = c[976 + (s2 << 2) >> 2] | 0;
                v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
                v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
                g[b2 + 400 + (c[1040 + (s2 << 2) >> 2] << 2) >> 2] = v2;
              }
            }
          while (0);
          if (Ze(b2, q2) | 0 ? !(Ne(b2, q2) | 0) : 0) {
            w2 = c[976 + (q2 << 2) >> 2] | 0;
            v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
            v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
            v2 = T(v2 - T(te(a2, q2)));
            v2 = T(v2 - T(ne(b2, q2, d2)));
            v2 = T(v2 - T(_e(b2, q2, r2 ? f2 : d2)));
            g[b2 + 400 + (c[1040 + (q2 << 2) >> 2] << 2) >> 2] = v2;
          } else
            u2 = 30;
          do
            if ((u2 | 0) == 30 ? !(Ne(b2, q2) | 0) : 0) {
              if ((Je(a2, b2) | 0) == 2) {
                w2 = c[976 + (q2 << 2) >> 2] | 0;
                v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
                v2 = T(T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2])) * T(0.5));
                g[b2 + 400 + (c[1040 + (q2 << 2) >> 2] << 2) >> 2] = v2;
                break;
              }
              w2 = (Je(a2, b2) | 0) == 3;
              if (w2 ^ (c[a2 + 28 >> 2] | 0) == 2) {
                w2 = c[976 + (q2 << 2) >> 2] | 0;
                v2 = T(g[a2 + 908 + (w2 << 2) >> 2]);
                v2 = T(v2 - T(g[b2 + 908 + (w2 << 2) >> 2]));
                g[b2 + 400 + (c[1040 + (q2 << 2) >> 2] << 2) >> 2] = v2;
              }
            }
          while (0);
          return;
        }
        function Ve(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = ib, f2 = 0;
          f2 = c[976 + (d2 << 2) >> 2] | 0;
          e2 = T(g[b2 + 908 + (f2 << 2) >> 2]);
          e2 = T(T(g[a2 + 908 + (f2 << 2) >> 2]) - e2);
          e2 = T(e2 - T(g[b2 + 400 + (c[1040 + (d2 << 2) >> 2] << 2) >> 2]));
          g[b2 + 400 + (c[1e3 + (d2 << 2) >> 2] << 2) >> 2] = e2;
          return;
        }
        function We(a2) {
          a2 = a2 | 0;
          return (a2 | 1 | 0) == 1 | 0;
        }
        function Xe(b2) {
          b2 = b2 | 0;
          var d2 = ib;
          switch (c[b2 + 56 >> 2] | 0) {
            case 0:
            case 3: {
              d2 = T(g[b2 + 40 >> 2]);
              if (d2 > T(0) & ((Sb(d2) | 0) ^ 1))
                b2 = a[(c[b2 + 976 >> 2] | 0) + 2 >> 0] | 0 ? 1056 : 992;
              else
                b2 = 1056;
              break;
            }
            default:
              b2 = b2 + 52 | 0;
          }
          return b2 | 0;
        }
        function Ye(b2, c2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          return (a[b2 + c2 >> 0] | 0) != 0 | 0;
        }
        function Ze(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          a2 = a2 + 132 | 0;
          if (oe(b2) | 0 ? (c[(Tb(a2, 5, 948) | 0) + 4 >> 2] | 0) != 0 : 0)
            a2 = 1;
          else
            a2 = (c[(Tb(a2, c[1e3 + (b2 << 2) >> 2] | 0, 948) | 0) + 4 >> 2] | 0) != 0;
          return a2 | 0;
        }
        function _e(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = T(d2);
          var e2 = 0, f2 = 0;
          a2 = a2 + 132 | 0;
          if (oe(b2) | 0 ? (e2 = Tb(a2, 5, 948) | 0, (c[e2 + 4 >> 2] | 0) != 0) : 0)
            f2 = 4;
          else {
            e2 = Tb(a2, c[1e3 + (b2 << 2) >> 2] | 0, 948) | 0;
            if (!(c[e2 + 4 >> 2] | 0))
              d2 = T(0);
            else
              f2 = 4;
          }
          if ((f2 | 0) == 4)
            d2 = T(be(e2, d2));
          return T(d2);
        }
        function $e(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          if (Ne(a2, b2) | 0)
            c2 = T(Oe(a2, b2, c2));
          else
            c2 = T(-T(_e(a2, b2, c2)));
          return T(c2);
        }
        function af(a2) {
          a2 = T(a2);
          return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
        }
        function bf(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 1073741823)
                Ta();
              else {
                f2 = qC(b2 << 2) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 2) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 2);
          return;
        }
        function cf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 2) << 2) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function df(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -4 - b2 | 0) >>> 2) << 2);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function ef(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          h2 = a2 + 4 | 0;
          i3 = c[h2 >> 2] | 0;
          f2 = i3 - e2 | 0;
          g2 = f2 >> 2;
          a2 = b2 + (g2 << 2) | 0;
          if (a2 >>> 0 < d2 >>> 0) {
            e2 = i3;
            do {
              c[e2 >> 2] = c[a2 >> 2];
              a2 = a2 + 4 | 0;
              e2 = (c[h2 >> 2] | 0) + 4 | 0;
              c[h2 >> 2] = e2;
            } while (a2 >>> 0 < d2 >>> 0);
          }
          if (g2 | 0)
            GC(i3 + (0 - g2 << 2) | 0, b2 | 0, f2 | 0) | 0;
          return;
        }
        function ff(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = b2 + 4 | 0;
          j2 = c[i3 >> 2] | 0;
          f2 = c[a2 >> 2] | 0;
          h2 = d2;
          g2 = h2 - f2 | 0;
          e2 = j2 + (0 - (g2 >> 2) << 2) | 0;
          c[i3 >> 2] = e2;
          if ((g2 | 0) > 0)
            BC(e2 | 0, f2 | 0, g2 | 0) | 0;
          f2 = a2 + 4 | 0;
          g2 = b2 + 8 | 0;
          e2 = (c[f2 >> 2] | 0) - h2 | 0;
          if ((e2 | 0) > 0) {
            BC(c[g2 >> 2] | 0, d2 | 0, e2 | 0) | 0;
            c[g2 >> 2] = (c[g2 >> 2] | 0) + (e2 >>> 2 << 2);
          }
          h2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = c[i3 >> 2];
          c[i3 >> 2] = h2;
          h2 = c[f2 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = h2;
          h2 = a2 + 8 | 0;
          d2 = b2 + 12 | 0;
          a2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[d2 >> 2];
          c[d2 >> 2] = a2;
          c[b2 >> 2] = c[i3 >> 2];
          return j2 | 0;
        }
        function gf(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          h2 = c[b2 >> 2] | 0;
          g2 = c[d2 >> 2] | 0;
          if ((h2 | 0) != (g2 | 0)) {
            f2 = a2 + 8 | 0;
            d2 = ((g2 + -4 - h2 | 0) >>> 2) + 1 | 0;
            a2 = h2;
            e2 = c[f2 >> 2] | 0;
            do {
              c[e2 >> 2] = c[a2 >> 2];
              e2 = (c[f2 >> 2] | 0) + 4 | 0;
              c[f2 >> 2] = e2;
              a2 = a2 + 4 | 0;
            } while ((a2 | 0) != (g2 | 0));
            c[b2 >> 2] = h2 + (d2 << 2);
          }
          return;
        }
        function hf() {
          Qb();
          return;
        }
        function jf() {
          var a2 = 0;
          a2 = qC(4) | 0;
          kf(a2);
          return a2 | 0;
        }
        function kf(a2) {
          a2 = a2 | 0;
          c[a2 >> 2] = gc() | 0;
          return;
        }
        function lf(a2) {
          a2 = a2 | 0;
          if (a2 | 0) {
            mf(a2);
            sC(a2);
          }
          return;
        }
        function mf(a2) {
          a2 = a2 | 0;
          ic(c[a2 >> 2] | 0);
          return;
        }
        function nf(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          he(c[a2 >> 2] | 0, b2, d2);
          return;
        }
        function of(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          Zd(c[a2 >> 2] | 0, b2);
          return;
        }
        function pf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Ye(c[a2 >> 2] | 0, b2) | 0;
        }
        function qf() {
          var a2 = 0;
          a2 = qC(8) | 0;
          rf(a2, 0);
          return a2 | 0;
        }
        function rf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (!b2)
            b2 = Wb() | 0;
          else
            b2 = Ub(c[b2 >> 2] | 0) | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = 0;
          vc(b2, a2);
          return;
        }
        function sf(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = qC(8) | 0;
          rf(b2, a2);
          return b2 | 0;
        }
        function tf(a2) {
          a2 = a2 | 0;
          if (a2 | 0) {
            uf(a2);
            sC(a2);
          }
          return;
        }
        function uf(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          Zb(c[a2 >> 2] | 0);
          b2 = a2 + 4 | 0;
          a2 = c[b2 >> 2] | 0;
          c[b2 >> 2] = 0;
          if (a2 | 0) {
            vf(a2);
            sC(a2);
          }
          return;
        }
        function vf(a2) {
          a2 = a2 | 0;
          wf(a2);
          return;
        }
        function wf(a2) {
          a2 = a2 | 0;
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            ab(a2 | 0);
          return;
        }
        function xf(a2) {
          a2 = a2 | 0;
          return wc(a2) | 0;
        }
        function yf(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          d2 = a2 + 4 | 0;
          b2 = c[d2 >> 2] | 0;
          c[d2 >> 2] = 0;
          if (b2 | 0) {
            vf(b2);
            sC(b2);
          }
          dc(c[a2 >> 2] | 0);
          return;
        }
        function zf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          sc(c[a2 >> 2] | 0, c[b2 >> 2] | 0);
          return;
        }
        function Af(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Hc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Bf(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          Vc(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function Cf(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          Wc(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function Df(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Bc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Ef(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Dc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Ff(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Fc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Gf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          xc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Hf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Jc(c[a2 >> 2] | 0, b2);
          return;
        }
        function If(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          zc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Jf(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          Yc(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function Kf(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          Zc(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function Lf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          $c(c[a2 >> 2] | 0, b2);
          return;
        }
        function Mf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Lc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Nf(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Nc(c[a2 >> 2] | 0, b2);
          return;
        }
        function Of(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          Pc(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Pf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          Sc(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Qf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          Tc(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Rf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          Qc(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Sf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          Rc(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Tf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          fd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Uf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          gd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Vf(a2) {
          a2 = a2 | 0;
          hd(c[a2 >> 2] | 0);
          return;
        }
        function Wf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          jd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Xf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          kd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function Yf(a2) {
          a2 = a2 | 0;
          ld(c[a2 >> 2] | 0);
          return;
        }
        function Zf(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          nd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function _f(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          od(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function $f(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          qd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function ag(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          rd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function bg(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          td(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function cg(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          ud(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function dg(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          wd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function eg(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          xd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function fg(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          zd(c[a2 >> 2] | 0, T(b2));
          return;
        }
        function gg(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          dd(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function hg(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          ad(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function ig(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          bd(c[a2 >> 2] | 0, b2, T(d2));
          return;
        }
        function jg(a2) {
          a2 = a2 | 0;
          return Ic(c[a2 >> 2] | 0) | 0;
        }
        function kg(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2;
          Xc(f2, c[b2 >> 2] | 0, d2);
          lg(a2, f2);
          l = e2;
          return;
        }
        function lg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          mg(a2, c[b2 + 4 >> 2] | 0, +T(g[b2 >> 2]));
          return;
        }
        function mg(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          c[a2 >> 2] = b2;
          h[a2 + 8 >> 3] = d2;
          return;
        }
        function ng(a2) {
          a2 = a2 | 0;
          return Cc(c[a2 >> 2] | 0) | 0;
        }
        function og(a2) {
          a2 = a2 | 0;
          return Ec(c[a2 >> 2] | 0) | 0;
        }
        function pg(a2) {
          a2 = a2 | 0;
          return Gc(c[a2 >> 2] | 0) | 0;
        }
        function qg(a2) {
          a2 = a2 | 0;
          return yc(c[a2 >> 2] | 0) | 0;
        }
        function rg(a2) {
          a2 = a2 | 0;
          return Kc(c[a2 >> 2] | 0) | 0;
        }
        function sg(a2) {
          a2 = a2 | 0;
          return Ac(c[a2 >> 2] | 0) | 0;
        }
        function tg(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2;
          _c(f2, c[b2 >> 2] | 0, d2);
          lg(a2, f2);
          l = e2;
          return;
        }
        function ug(a2) {
          a2 = a2 | 0;
          return Mc(c[a2 >> 2] | 0) | 0;
        }
        function vg(a2) {
          a2 = a2 | 0;
          return Oc(c[a2 >> 2] | 0) | 0;
        }
        function wg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          Uc(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function xg(a2) {
          a2 = a2 | 0;
          return + +T(tc(c[a2 >> 2] | 0));
        }
        function yg(a2) {
          a2 = a2 | 0;
          return + +T(uc(c[a2 >> 2] | 0));
        }
        function zg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          id(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function Ag(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          md(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function Bg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          pd(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function Cg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          sd(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function Dg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          vd(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function Eg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          yd(e2, c[b2 >> 2] | 0);
          lg(a2, e2);
          l = d2;
          return;
        }
        function Fg(a2) {
          a2 = a2 | 0;
          return + +T(Ad(c[a2 >> 2] | 0));
        }
        function Gg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return + +T(ed(c[a2 >> 2] | 0, b2));
        }
        function Hg(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2;
          cd(f2, c[b2 >> 2] | 0, d2);
          lg(a2, f2);
          l = e2;
          return;
        }
        function Ig(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          kc(c[a2 >> 2] | 0, c[b2 >> 2] | 0, d2);
          return;
        }
        function Jg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          cc(c[a2 >> 2] | 0, c[b2 >> 2] | 0);
          return;
        }
        function Kg(a2) {
          a2 = a2 | 0;
          return $b(c[a2 >> 2] | 0) | 0;
        }
        function Lg(a2) {
          a2 = a2 | 0;
          a2 = pc(c[a2 >> 2] | 0) | 0;
          if (!a2)
            a2 = 0;
          else
            a2 = xf(a2) | 0;
          return a2 | 0;
        }
        function Mg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          a2 = ac(c[a2 >> 2] | 0, b2) | 0;
          if (!a2)
            a2 = 0;
          else
            a2 = xf(a2) | 0;
          return a2 | 0;
        }
        function Ng(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          e2 = qC(4) | 0;
          Og(e2, b2);
          d2 = a2 + 4 | 0;
          b2 = c[d2 >> 2] | 0;
          c[d2 >> 2] = e2;
          if (b2 | 0) {
            vf(b2);
            sC(b2);
          }
          jc(c[a2 >> 2] | 0, 1);
          return;
        }
        function Og(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          gh(a2, b2);
          return;
        }
        function Pg(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          d2 = d2 | 0;
          e2 = T(e2);
          f2 = f2 | 0;
          var i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          j2 = i3;
          Qg(j2, wc(b2) | 0, +c2, d2, +e2, f2);
          g[a2 >> 2] = T(+h[j2 >> 3]);
          g[a2 + 4 >> 2] = T(+h[j2 + 8 >> 3]);
          l = i3;
          return;
        }
        function Qg(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          e2 = e2 | 0;
          f2 = +f2;
          g2 = g2 | 0;
          var i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          i3 = l;
          l = l + 32 | 0;
          n2 = i3 + 8 | 0;
          m2 = i3 + 20 | 0;
          k2 = i3;
          j2 = i3 + 16 | 0;
          h[n2 >> 3] = d2;
          c[m2 >> 2] = e2;
          h[k2 >> 3] = f2;
          c[j2 >> 2] = g2;
          Rg(a2, c[b2 + 4 >> 2] | 0, n2, m2, k2, j2);
          l = i3;
          return;
        }
        function Rg(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          j2 = i3;
          UA(j2);
          b2 = Sg(b2) | 0;
          Tg(a2, b2, +h[d2 >> 3], c[e2 >> 2] | 0, +h[f2 >> 3], c[g2 >> 2] | 0);
          WA(j2);
          l = i3;
          return;
        }
        function Sg(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function Tg(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          d2 = d2 | 0;
          e2 = +e2;
          f2 = f2 | 0;
          var g2 = 0;
          g2 = Vg(Ug() | 0) | 0;
          c2 = +Wg(c2);
          d2 = Xg(d2) | 0;
          e2 = +Wg(e2);
          Yg(a2, cb2(0, g2 | 0, b2 | 0, +c2, d2 | 0, +e2, Xg(f2) | 0) | 0);
          return;
        }
        function Ug() {
          var b2 = 0;
          if (!(a[7608] | 0)) {
            dh(9120);
            b2 = 7608;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 9120;
        }
        function Vg(a2) {
          a2 = a2 | 0;
          return c[a2 + 8 >> 2] | 0;
        }
        function Wg(a2) {
          a2 = +a2;
          return + +ch(a2);
        }
        function Xg(a2) {
          a2 = a2 | 0;
          return bh(a2) | 0;
        }
        function Yg(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = l;
          l = l + 32 | 0;
          d2 = f2;
          e2 = b2;
          if (!(e2 & 1)) {
            c[a2 >> 2] = c[b2 >> 2];
            c[a2 + 4 >> 2] = c[b2 + 4 >> 2];
            c[a2 + 8 >> 2] = c[b2 + 8 >> 2];
            c[a2 + 12 >> 2] = c[b2 + 12 >> 2];
          } else {
            Zg(d2, 0);
            Ja(e2 | 0, d2 | 0) | 0;
            _g(a2, d2);
            $g(d2);
          }
          l = f2;
          return;
        }
        function Zg(b2, d2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          ah(b2, d2);
          c[b2 + 8 >> 2] = 0;
          a[b2 + 24 >> 0] = 0;
          return;
        }
        function _g(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = b2 + 8 | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = c[b2 + 4 >> 2];
          c[a2 + 8 >> 2] = c[b2 + 8 >> 2];
          c[a2 + 12 >> 2] = c[b2 + 12 >> 2];
          return;
        }
        function $g(b2) {
          b2 = b2 | 0;
          a[b2 + 24 >> 0] = 0;
          return;
        }
        function ah(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = b2;
          return;
        }
        function bh(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function ch(a2) {
          a2 = +a2;
          return +a2;
        }
        function dh(a2) {
          a2 = a2 | 0;
          fh(a2, eh() | 0, 4);
          return;
        }
        function eh() {
          return 1064;
        }
        function fh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          c[a2 + 8 >> 2] = _a2(b2 | 0, d2 + 1 | 0) | 0;
          return;
        }
        function gh(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = c[b2 >> 2] | 0;
          c[a2 >> 2] = b2;
          Aa(b2 | 0);
          return;
        }
        function hh(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          d2 = a2 + 4 | 0;
          b2 = c[d2 >> 2] | 0;
          c[d2 >> 2] = 0;
          if (b2 | 0) {
            vf(b2);
            sC(b2);
          }
          jc(c[a2 >> 2] | 0, 0);
          return;
        }
        function ih(a2) {
          a2 = a2 | 0;
          qc(c[a2 >> 2] | 0);
          return;
        }
        function jh(a2) {
          a2 = a2 | 0;
          return rc(c[a2 >> 2] | 0) | 0;
        }
        function kh(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = +b2;
          d2 = +d2;
          e2 = e2 | 0;
          _d(c[a2 >> 2] | 0, T(b2), T(d2), e2);
          return;
        }
        function lh(a2) {
          a2 = a2 | 0;
          return + +T(Bd(c[a2 >> 2] | 0));
        }
        function mh(a2) {
          a2 = a2 | 0;
          return + +T(Dd(c[a2 >> 2] | 0));
        }
        function nh(a2) {
          a2 = a2 | 0;
          return + +T(Cd(c[a2 >> 2] | 0));
        }
        function oh(a2) {
          a2 = a2 | 0;
          return + +T(Ed(c[a2 >> 2] | 0));
        }
        function ph(a2) {
          a2 = a2 | 0;
          return + +T(Fd(c[a2 >> 2] | 0));
        }
        function qh(a2) {
          a2 = a2 | 0;
          return + +T(Gd(c[a2 >> 2] | 0));
        }
        function rh(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          h[a2 >> 3] = +T(Bd(c[b2 >> 2] | 0));
          h[a2 + 8 >> 3] = +T(Dd(c[b2 >> 2] | 0));
          h[a2 + 16 >> 3] = +T(Cd(c[b2 >> 2] | 0));
          h[a2 + 24 >> 3] = +T(Ed(c[b2 >> 2] | 0));
          h[a2 + 32 >> 3] = +T(Fd(c[b2 >> 2] | 0));
          h[a2 + 40 >> 3] = +T(Gd(c[b2 >> 2] | 0));
          return;
        }
        function sh(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return + +T(Hd(c[a2 >> 2] | 0, b2));
        }
        function th(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return + +T(Id(c[a2 >> 2] | 0, b2));
        }
        function uh(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return + +T(Jd(c[a2 >> 2] | 0, b2));
        }
        function vh() {
          return fc() | 0;
        }
        function wh() {
          xh();
          yh();
          zh();
          Ah();
          Bh();
          Ch();
          return;
        }
        function xh() {
          kv(11713, 4938, 1);
          return;
        }
        function yh() {
          yu(10448);
          return;
        }
        function zh() {
          eu(10408);
          return;
        }
        function Ah() {
          vt(10324);
          return;
        }
        function Bh() {
          or(10096);
          return;
        }
        function Ch() {
          Dh(9132);
          return;
        }
        function Dh(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, A2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0, I2 = 0, J2 = 0, K2 = 0, L2 = 0, M2 = 0, N2 = 0, O2 = 0, P2 = 0, Q2 = 0, R2 = 0, S2 = 0, T2 = 0, U2 = 0, V2 = 0, W2 = 0, X2 = 0, Y2 = 0, Z2 = 0, _2 = 0, $2 = 0, aa2 = 0, ba2 = 0, ca2 = 0, da2 = 0, ea2 = 0, fa2 = 0, ga2 = 0, ha2 = 0, ia2 = 0, ja2 = 0, ka2 = 0, la2 = 0, ma2 = 0, na2 = 0, oa2 = 0, pa2 = 0, qa2 = 0, ra2 = 0, sa2 = 0, ta2 = 0, ua2 = 0, va2 = 0, wa2 = 0, xa2 = 0, ya2 = 0, za2 = 0, Aa2 = 0, Ba2 = 0, Ca2 = 0, Da2 = 0, Ea2 = 0, Fa2 = 0, Ga2 = 0;
          b2 = l;
          l = l + 672 | 0;
          d2 = b2 + 656 | 0;
          Ga2 = b2 + 648 | 0;
          Fa2 = b2 + 640 | 0;
          Ea2 = b2 + 632 | 0;
          Da2 = b2 + 624 | 0;
          Ca2 = b2 + 616 | 0;
          Ba2 = b2 + 608 | 0;
          Aa2 = b2 + 600 | 0;
          za2 = b2 + 592 | 0;
          ya2 = b2 + 584 | 0;
          xa2 = b2 + 576 | 0;
          wa2 = b2 + 568 | 0;
          va2 = b2 + 560 | 0;
          ua2 = b2 + 552 | 0;
          ta2 = b2 + 544 | 0;
          sa2 = b2 + 536 | 0;
          ra2 = b2 + 528 | 0;
          qa2 = b2 + 520 | 0;
          pa2 = b2 + 512 | 0;
          oa2 = b2 + 504 | 0;
          na2 = b2 + 496 | 0;
          ma2 = b2 + 488 | 0;
          la2 = b2 + 480 | 0;
          ka2 = b2 + 472 | 0;
          ja2 = b2 + 464 | 0;
          ia2 = b2 + 456 | 0;
          ha2 = b2 + 448 | 0;
          ga2 = b2 + 440 | 0;
          fa2 = b2 + 432 | 0;
          ea2 = b2 + 424 | 0;
          da2 = b2 + 416 | 0;
          ca2 = b2 + 408 | 0;
          ba2 = b2 + 400 | 0;
          aa2 = b2 + 392 | 0;
          $2 = b2 + 384 | 0;
          _2 = b2 + 376 | 0;
          Z2 = b2 + 368 | 0;
          Y2 = b2 + 360 | 0;
          X2 = b2 + 352 | 0;
          W2 = b2 + 344 | 0;
          V2 = b2 + 336 | 0;
          U2 = b2 + 328 | 0;
          T2 = b2 + 320 | 0;
          S2 = b2 + 312 | 0;
          R2 = b2 + 304 | 0;
          Q2 = b2 + 296 | 0;
          P2 = b2 + 288 | 0;
          O2 = b2 + 280 | 0;
          N2 = b2 + 272 | 0;
          M2 = b2 + 264 | 0;
          L2 = b2 + 256 | 0;
          K2 = b2 + 248 | 0;
          J2 = b2 + 240 | 0;
          I2 = b2 + 232 | 0;
          H2 = b2 + 224 | 0;
          G2 = b2 + 216 | 0;
          F2 = b2 + 208 | 0;
          E2 = b2 + 200 | 0;
          D2 = b2 + 192 | 0;
          C2 = b2 + 184 | 0;
          B2 = b2 + 176 | 0;
          A2 = b2 + 168 | 0;
          z2 = b2 + 160 | 0;
          y2 = b2 + 152 | 0;
          x2 = b2 + 144 | 0;
          w2 = b2 + 136 | 0;
          v2 = b2 + 128 | 0;
          u2 = b2 + 120 | 0;
          t2 = b2 + 112 | 0;
          s2 = b2 + 104 | 0;
          r2 = b2 + 96 | 0;
          q2 = b2 + 88 | 0;
          p2 = b2 + 80 | 0;
          o2 = b2 + 72 | 0;
          n2 = b2 + 64 | 0;
          m2 = b2 + 56 | 0;
          k2 = b2 + 48 | 0;
          j2 = b2 + 40 | 0;
          i3 = b2 + 32 | 0;
          h2 = b2 + 24 | 0;
          g2 = b2 + 16 | 0;
          f2 = b2 + 8 | 0;
          e2 = b2;
          Eh(a2, 3646);
          Fh(a2, 3651, 2) | 0;
          Gh(a2, 3665, 2) | 0;
          Hh(a2, 3682, 18) | 0;
          c[Ga2 >> 2] = 19;
          c[Ga2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Ga2 >> 2];
          c[d2 + 4 >> 2] = c[Ga2 + 4 >> 2];
          Ih(a2, 3690, d2) | 0;
          c[Fa2 >> 2] = 1;
          c[Fa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Fa2 >> 2];
          c[d2 + 4 >> 2] = c[Fa2 + 4 >> 2];
          Jh(a2, 3696, d2) | 0;
          c[Ea2 >> 2] = 2;
          c[Ea2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Ea2 >> 2];
          c[d2 + 4 >> 2] = c[Ea2 + 4 >> 2];
          Kh(a2, 3706, d2) | 0;
          c[Da2 >> 2] = 1;
          c[Da2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Da2 >> 2];
          c[d2 + 4 >> 2] = c[Da2 + 4 >> 2];
          Lh(a2, 3722, d2) | 0;
          c[Ca2 >> 2] = 2;
          c[Ca2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Ca2 >> 2];
          c[d2 + 4 >> 2] = c[Ca2 + 4 >> 2];
          Lh(a2, 3734, d2) | 0;
          c[Ba2 >> 2] = 3;
          c[Ba2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Ba2 >> 2];
          c[d2 + 4 >> 2] = c[Ba2 + 4 >> 2];
          Kh(a2, 3753, d2) | 0;
          c[Aa2 >> 2] = 4;
          c[Aa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Aa2 >> 2];
          c[d2 + 4 >> 2] = c[Aa2 + 4 >> 2];
          Kh(a2, 3769, d2) | 0;
          c[za2 >> 2] = 5;
          c[za2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[za2 >> 2];
          c[d2 + 4 >> 2] = c[za2 + 4 >> 2];
          Kh(a2, 3783, d2) | 0;
          c[ya2 >> 2] = 6;
          c[ya2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ya2 >> 2];
          c[d2 + 4 >> 2] = c[ya2 + 4 >> 2];
          Kh(a2, 3796, d2) | 0;
          c[xa2 >> 2] = 7;
          c[xa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[xa2 >> 2];
          c[d2 + 4 >> 2] = c[xa2 + 4 >> 2];
          Kh(a2, 3813, d2) | 0;
          c[wa2 >> 2] = 8;
          c[wa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[wa2 >> 2];
          c[d2 + 4 >> 2] = c[wa2 + 4 >> 2];
          Kh(a2, 3825, d2) | 0;
          c[va2 >> 2] = 3;
          c[va2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[va2 >> 2];
          c[d2 + 4 >> 2] = c[va2 + 4 >> 2];
          Lh(a2, 3843, d2) | 0;
          c[ua2 >> 2] = 4;
          c[ua2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ua2 >> 2];
          c[d2 + 4 >> 2] = c[ua2 + 4 >> 2];
          Lh(a2, 3853, d2) | 0;
          c[ta2 >> 2] = 9;
          c[ta2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ta2 >> 2];
          c[d2 + 4 >> 2] = c[ta2 + 4 >> 2];
          Kh(a2, 3870, d2) | 0;
          c[sa2 >> 2] = 10;
          c[sa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[sa2 >> 2];
          c[d2 + 4 >> 2] = c[sa2 + 4 >> 2];
          Kh(a2, 3884, d2) | 0;
          c[ra2 >> 2] = 11;
          c[ra2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ra2 >> 2];
          c[d2 + 4 >> 2] = c[ra2 + 4 >> 2];
          Kh(a2, 3896, d2) | 0;
          c[qa2 >> 2] = 1;
          c[qa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[qa2 >> 2];
          c[d2 + 4 >> 2] = c[qa2 + 4 >> 2];
          Mh(a2, 3907, d2) | 0;
          c[pa2 >> 2] = 2;
          c[pa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[pa2 >> 2];
          c[d2 + 4 >> 2] = c[pa2 + 4 >> 2];
          Mh(a2, 3915, d2) | 0;
          c[oa2 >> 2] = 3;
          c[oa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[oa2 >> 2];
          c[d2 + 4 >> 2] = c[oa2 + 4 >> 2];
          Mh(a2, 3928, d2) | 0;
          c[na2 >> 2] = 4;
          c[na2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[na2 >> 2];
          c[d2 + 4 >> 2] = c[na2 + 4 >> 2];
          Mh(a2, 3948, d2) | 0;
          c[ma2 >> 2] = 5;
          c[ma2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ma2 >> 2];
          c[d2 + 4 >> 2] = c[ma2 + 4 >> 2];
          Mh(a2, 3960, d2) | 0;
          c[la2 >> 2] = 6;
          c[la2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[la2 >> 2];
          c[d2 + 4 >> 2] = c[la2 + 4 >> 2];
          Mh(a2, 3974, d2) | 0;
          c[ka2 >> 2] = 7;
          c[ka2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ka2 >> 2];
          c[d2 + 4 >> 2] = c[ka2 + 4 >> 2];
          Mh(a2, 3983, d2) | 0;
          c[ja2 >> 2] = 20;
          c[ja2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ja2 >> 2];
          c[d2 + 4 >> 2] = c[ja2 + 4 >> 2];
          Ih(a2, 3999, d2) | 0;
          c[ia2 >> 2] = 8;
          c[ia2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ia2 >> 2];
          c[d2 + 4 >> 2] = c[ia2 + 4 >> 2];
          Mh(a2, 4012, d2) | 0;
          c[ha2 >> 2] = 9;
          c[ha2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ha2 >> 2];
          c[d2 + 4 >> 2] = c[ha2 + 4 >> 2];
          Mh(a2, 4022, d2) | 0;
          c[ga2 >> 2] = 21;
          c[ga2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ga2 >> 2];
          c[d2 + 4 >> 2] = c[ga2 + 4 >> 2];
          Ih(a2, 4039, d2) | 0;
          c[fa2 >> 2] = 10;
          c[fa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[fa2 >> 2];
          c[d2 + 4 >> 2] = c[fa2 + 4 >> 2];
          Mh(a2, 4053, d2) | 0;
          c[ea2 >> 2] = 11;
          c[ea2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ea2 >> 2];
          c[d2 + 4 >> 2] = c[ea2 + 4 >> 2];
          Mh(a2, 4065, d2) | 0;
          c[da2 >> 2] = 12;
          c[da2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[da2 >> 2];
          c[d2 + 4 >> 2] = c[da2 + 4 >> 2];
          Mh(a2, 4084, d2) | 0;
          c[ca2 >> 2] = 13;
          c[ca2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ca2 >> 2];
          c[d2 + 4 >> 2] = c[ca2 + 4 >> 2];
          Mh(a2, 4097, d2) | 0;
          c[ba2 >> 2] = 14;
          c[ba2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[ba2 >> 2];
          c[d2 + 4 >> 2] = c[ba2 + 4 >> 2];
          Mh(a2, 4117, d2) | 0;
          c[aa2 >> 2] = 15;
          c[aa2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[aa2 >> 2];
          c[d2 + 4 >> 2] = c[aa2 + 4 >> 2];
          Mh(a2, 4129, d2) | 0;
          c[$2 >> 2] = 16;
          c[$2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[$2 >> 2];
          c[d2 + 4 >> 2] = c[$2 + 4 >> 2];
          Mh(a2, 4148, d2) | 0;
          c[_2 >> 2] = 17;
          c[_2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[_2 >> 2];
          c[d2 + 4 >> 2] = c[_2 + 4 >> 2];
          Mh(a2, 4161, d2) | 0;
          c[Z2 >> 2] = 18;
          c[Z2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Z2 >> 2];
          c[d2 + 4 >> 2] = c[Z2 + 4 >> 2];
          Mh(a2, 4181, d2) | 0;
          c[Y2 >> 2] = 5;
          c[Y2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Y2 >> 2];
          c[d2 + 4 >> 2] = c[Y2 + 4 >> 2];
          Lh(a2, 4196, d2) | 0;
          c[X2 >> 2] = 6;
          c[X2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[X2 >> 2];
          c[d2 + 4 >> 2] = c[X2 + 4 >> 2];
          Lh(a2, 4206, d2) | 0;
          c[W2 >> 2] = 7;
          c[W2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[W2 >> 2];
          c[d2 + 4 >> 2] = c[W2 + 4 >> 2];
          Lh(a2, 4217, d2) | 0;
          c[V2 >> 2] = 3;
          c[V2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[V2 >> 2];
          c[d2 + 4 >> 2] = c[V2 + 4 >> 2];
          Nh(a2, 4235, d2) | 0;
          c[U2 >> 2] = 1;
          c[U2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[U2 >> 2];
          c[d2 + 4 >> 2] = c[U2 + 4 >> 2];
          Oh(a2, 4251, d2) | 0;
          c[T2 >> 2] = 4;
          c[T2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[T2 >> 2];
          c[d2 + 4 >> 2] = c[T2 + 4 >> 2];
          Nh(a2, 4263, d2) | 0;
          c[S2 >> 2] = 5;
          c[S2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[S2 >> 2];
          c[d2 + 4 >> 2] = c[S2 + 4 >> 2];
          Nh(a2, 4279, d2) | 0;
          c[R2 >> 2] = 6;
          c[R2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[R2 >> 2];
          c[d2 + 4 >> 2] = c[R2 + 4 >> 2];
          Nh(a2, 4293, d2) | 0;
          c[Q2 >> 2] = 7;
          c[Q2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[Q2 >> 2];
          c[d2 + 4 >> 2] = c[Q2 + 4 >> 2];
          Nh(a2, 4306, d2) | 0;
          c[P2 >> 2] = 8;
          c[P2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[P2 >> 2];
          c[d2 + 4 >> 2] = c[P2 + 4 >> 2];
          Nh(a2, 4323, d2) | 0;
          c[O2 >> 2] = 9;
          c[O2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[O2 >> 2];
          c[d2 + 4 >> 2] = c[O2 + 4 >> 2];
          Nh(a2, 4335, d2) | 0;
          c[N2 >> 2] = 2;
          c[N2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[N2 >> 2];
          c[d2 + 4 >> 2] = c[N2 + 4 >> 2];
          Oh(a2, 4353, d2) | 0;
          c[M2 >> 2] = 12;
          c[M2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[M2 >> 2];
          c[d2 + 4 >> 2] = c[M2 + 4 >> 2];
          Ph(a2, 4363, d2) | 0;
          c[L2 >> 2] = 1;
          c[L2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[L2 >> 2];
          c[d2 + 4 >> 2] = c[L2 + 4 >> 2];
          Qh(a2, 4376, d2) | 0;
          c[K2 >> 2] = 2;
          c[K2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[K2 >> 2];
          c[d2 + 4 >> 2] = c[K2 + 4 >> 2];
          Qh(a2, 4388, d2) | 0;
          c[J2 >> 2] = 13;
          c[J2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[J2 >> 2];
          c[d2 + 4 >> 2] = c[J2 + 4 >> 2];
          Ph(a2, 4402, d2) | 0;
          c[I2 >> 2] = 14;
          c[I2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[I2 >> 2];
          c[d2 + 4 >> 2] = c[I2 + 4 >> 2];
          Ph(a2, 4411, d2) | 0;
          c[H2 >> 2] = 15;
          c[H2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[H2 >> 2];
          c[d2 + 4 >> 2] = c[H2 + 4 >> 2];
          Ph(a2, 4421, d2) | 0;
          c[G2 >> 2] = 16;
          c[G2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[G2 >> 2];
          c[d2 + 4 >> 2] = c[G2 + 4 >> 2];
          Ph(a2, 4433, d2) | 0;
          c[F2 >> 2] = 17;
          c[F2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[F2 >> 2];
          c[d2 + 4 >> 2] = c[F2 + 4 >> 2];
          Ph(a2, 4446, d2) | 0;
          c[E2 >> 2] = 18;
          c[E2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[E2 >> 2];
          c[d2 + 4 >> 2] = c[E2 + 4 >> 2];
          Ph(a2, 4458, d2) | 0;
          c[D2 >> 2] = 3;
          c[D2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[D2 >> 2];
          c[d2 + 4 >> 2] = c[D2 + 4 >> 2];
          Qh(a2, 4471, d2) | 0;
          c[C2 >> 2] = 1;
          c[C2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[C2 >> 2];
          c[d2 + 4 >> 2] = c[C2 + 4 >> 2];
          Rh(a2, 4486, d2) | 0;
          c[B2 >> 2] = 10;
          c[B2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[B2 >> 2];
          c[d2 + 4 >> 2] = c[B2 + 4 >> 2];
          Nh(a2, 4496, d2) | 0;
          c[A2 >> 2] = 11;
          c[A2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[A2 >> 2];
          c[d2 + 4 >> 2] = c[A2 + 4 >> 2];
          Nh(a2, 4508, d2) | 0;
          c[z2 >> 2] = 3;
          c[z2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[z2 >> 2];
          c[d2 + 4 >> 2] = c[z2 + 4 >> 2];
          Oh(a2, 4519, d2) | 0;
          c[y2 >> 2] = 4;
          c[y2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[y2 >> 2];
          c[d2 + 4 >> 2] = c[y2 + 4 >> 2];
          Sh(a2, 4530, d2) | 0;
          c[x2 >> 2] = 19;
          c[x2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[x2 >> 2];
          c[d2 + 4 >> 2] = c[x2 + 4 >> 2];
          Th(a2, 4542, d2) | 0;
          c[w2 >> 2] = 12;
          c[w2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[w2 >> 2];
          c[d2 + 4 >> 2] = c[w2 + 4 >> 2];
          Uh(a2, 4554, d2) | 0;
          c[v2 >> 2] = 13;
          c[v2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[v2 >> 2];
          c[d2 + 4 >> 2] = c[v2 + 4 >> 2];
          Vh(a2, 4568, d2) | 0;
          c[u2 >> 2] = 2;
          c[u2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[u2 >> 2];
          c[d2 + 4 >> 2] = c[u2 + 4 >> 2];
          Wh(a2, 4578, d2) | 0;
          c[t2 >> 2] = 20;
          c[t2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[t2 >> 2];
          c[d2 + 4 >> 2] = c[t2 + 4 >> 2];
          Xh(a2, 4587, d2) | 0;
          c[s2 >> 2] = 22;
          c[s2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[s2 >> 2];
          c[d2 + 4 >> 2] = c[s2 + 4 >> 2];
          Ih(a2, 4602, d2) | 0;
          c[r2 >> 2] = 23;
          c[r2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[r2 >> 2];
          c[d2 + 4 >> 2] = c[r2 + 4 >> 2];
          Ih(a2, 4619, d2) | 0;
          c[q2 >> 2] = 14;
          c[q2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[q2 >> 2];
          c[d2 + 4 >> 2] = c[q2 + 4 >> 2];
          Yh(a2, 4629, d2) | 0;
          c[p2 >> 2] = 1;
          c[p2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[p2 >> 2];
          c[d2 + 4 >> 2] = c[p2 + 4 >> 2];
          Zh(a2, 4637, d2) | 0;
          c[o2 >> 2] = 4;
          c[o2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[o2 >> 2];
          c[d2 + 4 >> 2] = c[o2 + 4 >> 2];
          Qh(a2, 4653, d2) | 0;
          c[n2 >> 2] = 5;
          c[n2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[n2 >> 2];
          c[d2 + 4 >> 2] = c[n2 + 4 >> 2];
          Qh(a2, 4669, d2) | 0;
          c[m2 >> 2] = 6;
          c[m2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[m2 >> 2];
          c[d2 + 4 >> 2] = c[m2 + 4 >> 2];
          Qh(a2, 4686, d2) | 0;
          c[k2 >> 2] = 7;
          c[k2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[k2 >> 2];
          c[d2 + 4 >> 2] = c[k2 + 4 >> 2];
          Qh(a2, 4701, d2) | 0;
          c[j2 >> 2] = 8;
          c[j2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[j2 >> 2];
          c[d2 + 4 >> 2] = c[j2 + 4 >> 2];
          Qh(a2, 4719, d2) | 0;
          c[i3 >> 2] = 9;
          c[i3 + 4 >> 2] = 0;
          c[d2 >> 2] = c[i3 >> 2];
          c[d2 + 4 >> 2] = c[i3 + 4 >> 2];
          Qh(a2, 4736, d2) | 0;
          c[h2 >> 2] = 21;
          c[h2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[h2 >> 2];
          c[d2 + 4 >> 2] = c[h2 + 4 >> 2];
          _h(a2, 4754, d2) | 0;
          c[g2 >> 2] = 2;
          c[g2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[g2 >> 2];
          c[d2 + 4 >> 2] = c[g2 + 4 >> 2];
          Rh(a2, 4772, d2) | 0;
          c[f2 >> 2] = 3;
          c[f2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[f2 >> 2];
          c[d2 + 4 >> 2] = c[f2 + 4 >> 2];
          Rh(a2, 4790, d2) | 0;
          c[e2 >> 2] = 4;
          c[e2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[e2 >> 2];
          c[d2 + 4 >> 2] = c[e2 + 4 >> 2];
          Rh(a2, 4808, d2) | 0;
          l = b2;
          return;
        }
        function Eh(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = dr() | 0;
          c[a2 >> 2] = d2;
          er(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function Fh(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Oq(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function Gh(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          tq(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function Hh(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          cq(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function Ih(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Lp(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Jh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          pp(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Kh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Yo(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Lh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Fo(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Mh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          mo(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Nh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Un(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Oh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Bn(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Ph(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Um(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Qh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Bm(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Rh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          im(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Sh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Rl(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Th(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          vl(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Uh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          bl(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Vh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Kk(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Wh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          nk(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Xh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Rj(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Yh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          xj(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function Zh(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          _i(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function _h(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          $h(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function $h(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          bi(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function ai(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function bi(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = ci() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = di(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, ei(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function ci() {
          var b2 = 0, d2 = 0;
          if (!(a[7616] | 0)) {
            qi(9136);
            Ha(24, 9136, o | 0) | 0;
            d2 = 7616;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9136) | 0)) {
            b2 = 9136;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            qi(9136);
          }
          return 9136;
        }
        function di(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function ei(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = ci() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            ki(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            li(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function fi(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
          h2 = l;
          l = l + 32 | 0;
          o2 = h2 + 24 | 0;
          n2 = h2 + 20 | 0;
          j2 = h2 + 16 | 0;
          m2 = h2 + 12 | 0;
          k2 = h2 + 8 | 0;
          i3 = h2 + 4 | 0;
          p2 = h2;
          c[n2 >> 2] = b2;
          c[j2 >> 2] = d2;
          c[m2 >> 2] = e2;
          c[k2 >> 2] = f2;
          c[i3 >> 2] = g2;
          g2 = a2 + 28 | 0;
          c[p2 >> 2] = c[g2 >> 2];
          c[o2 >> 2] = c[p2 >> 2];
          gi(a2 + 24 | 0, o2, n2, m2, k2, j2, i3) | 0;
          c[g2 >> 2] = c[c[g2 >> 2] >> 2];
          l = h2;
          return;
        }
        function gi(a2, b2, d2, e2, f2, g2, h2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          h2 = h2 | 0;
          a2 = hi(b2) | 0;
          b2 = qC(24) | 0;
          ii(b2 + 4 | 0, c[d2 >> 2] | 0, c[e2 >> 2] | 0, c[f2 >> 2] | 0, c[g2 >> 2] | 0, c[h2 >> 2] | 0);
          c[b2 >> 2] = c[a2 >> 2];
          c[a2 >> 2] = b2;
          return b2 | 0;
        }
        function hi(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function ii(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 12 >> 2] = f2;
          c[a2 + 16 >> 2] = g2;
          return;
        }
        function ji(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return b2 | a2 | 0;
        }
        function ki(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function li(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = mi(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            ni(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            ki(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            oi(a2, i3);
            pi(i3);
            l = k2;
            return;
          }
        }
        function mi(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function ni(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function oi(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function pi(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function qi(a2) {
          a2 = a2 | 0;
          ui(a2);
          return;
        }
        function ri(a2) {
          a2 = a2 | 0;
          ti(a2 + 24 | 0);
          return;
        }
        function si(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function ti(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function ui(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 3, b2, wi() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function vi() {
          return 9228;
        }
        function wi() {
          return 1140;
        }
        function xi(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = zi(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          b2 = Ai(b2, e2) | 0;
          l = d2;
          return b2 | 0;
        }
        function yi(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 12 >> 2] = f2;
          c[a2 + 16 >> 2] = g2;
          return;
        }
        function zi(a2) {
          a2 = a2 | 0;
          return (c[(ci() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Ai(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = l;
          l = l + 48 | 0;
          e2 = f2;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          ob[d2 & 31](e2, a2);
          e2 = Bi(e2) | 0;
          l = f2;
          return e2 | 0;
        }
        function Bi(a2) {
          a2 = a2 | 0;
          var b2 = 0, c2 = 0, d2 = 0, e2 = 0;
          e2 = l;
          l = l + 32 | 0;
          b2 = e2 + 12 | 0;
          c2 = e2;
          d2 = Di(Ci() | 0) | 0;
          if (!d2)
            a2 = Ii(a2) | 0;
          else {
            Ei(b2, d2);
            Fi(c2, b2);
            Gi(a2, c2);
            a2 = Hi(b2) | 0;
          }
          l = e2;
          return a2 | 0;
        }
        function Ci() {
          var b2 = 0;
          if (!(a[7632] | 0)) {
            Ti(9184);
            Ha(25, 9184, o | 0) | 0;
            b2 = 7632;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 9184;
        }
        function Di(a2) {
          a2 = a2 | 0;
          return c[a2 + 36 >> 2] | 0;
        }
        function Ei(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = a2;
          c[a2 + 8 >> 2] = 0;
          return;
        }
        function Fi(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = c[b2 + 4 >> 2];
          c[a2 + 8 >> 2] = 0;
          return;
        }
        function Gi(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Ni(b2, a2, a2 + 8 | 0, a2 + 16 | 0, a2 + 24 | 0, a2 + 32 | 0, a2 + 40 | 0) | 0;
          return;
        }
        function Hi(a2) {
          a2 = a2 | 0;
          return c[(c[a2 + 4 >> 2] | 0) + 8 >> 2] | 0;
        }
        function Ii(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          j2 = l;
          l = l + 16 | 0;
          d2 = j2 + 4 | 0;
          e2 = j2;
          f2 = jy(8) | 0;
          g2 = f2;
          h2 = qC(48) | 0;
          i3 = h2;
          b2 = i3 + 48 | 0;
          do {
            c[i3 >> 2] = c[a2 >> 2];
            i3 = i3 + 4 | 0;
            a2 = a2 + 4 | 0;
          } while ((i3 | 0) < (b2 | 0));
          b2 = g2 + 4 | 0;
          c[b2 >> 2] = h2;
          i3 = qC(8) | 0;
          h2 = c[b2 >> 2] | 0;
          c[e2 >> 2] = 0;
          c[d2 >> 2] = c[e2 >> 2];
          Ji(i3, h2, d2);
          c[f2 >> 2] = i3;
          l = j2;
          return g2 | 0;
        }
        function Ji(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          d2 = qC(16) | 0;
          c[d2 + 4 >> 2] = 0;
          c[d2 + 8 >> 2] = 0;
          c[d2 >> 2] = 1092;
          c[d2 + 12 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Ki(a2) {
          a2 = a2 | 0;
          kC(a2);
          sC(a2);
          return;
        }
        function Li(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 12 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Mi(a2) {
          a2 = a2 | 0;
          sC(a2);
          return;
        }
        function Ni(a2, b2, d2, e2, f2, g2, h2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          h2 = h2 | 0;
          g2 = Oi(c[a2 >> 2] | 0, b2, d2, e2, f2, g2, h2) | 0;
          h2 = a2 + 4 | 0;
          c[(c[h2 >> 2] | 0) + 8 >> 2] = g2;
          return c[(c[h2 >> 2] | 0) + 8 >> 2] | 0;
        }
        function Oi(a2, b2, c2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          j2 = i3;
          UA(j2);
          a2 = Sg(a2) | 0;
          g2 = Pi(a2, +h[b2 >> 3], +h[c2 >> 3], +h[d2 >> 3], +h[e2 >> 3], +h[f2 >> 3], +h[g2 >> 3]) | 0;
          WA(j2);
          l = i3;
          return g2 | 0;
        }
        function Pi(a2, b2, c2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          d2 = +d2;
          e2 = +e2;
          f2 = +f2;
          g2 = +g2;
          var h2 = 0;
          h2 = Vg(Qi() | 0) | 0;
          b2 = +Wg(b2);
          c2 = +Wg(c2);
          d2 = +Wg(d2);
          e2 = +Wg(e2);
          f2 = +Wg(f2);
          return ya(0, h2 | 0, a2 | 0, +b2, +c2, +d2, +e2, +f2, + +Wg(g2)) | 0;
        }
        function Qi() {
          var b2 = 0;
          if (!(a[7624] | 0)) {
            Ri(9172);
            b2 = 7624;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 9172;
        }
        function Ri(a2) {
          a2 = a2 | 0;
          fh(a2, Si() | 0, 6);
          return;
        }
        function Si() {
          return 1112;
        }
        function Ti(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function Ui(a2) {
          a2 = a2 | 0;
          Vi(a2 + 24 | 0);
          Wi(a2 + 16 | 0);
          return;
        }
        function Vi(a2) {
          a2 = a2 | 0;
          Yi(a2);
          return;
        }
        function Wi(a2) {
          a2 = a2 | 0;
          Xi(a2);
          return;
        }
        function Xi(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          b2 = c[a2 >> 2] | 0;
          if (b2 | 0)
            do {
              d2 = b2;
              b2 = c[b2 >> 2] | 0;
              sC(d2);
            } while ((b2 | 0) != 0);
          c[a2 >> 2] = 0;
          return;
        }
        function Yi(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          b2 = c[a2 >> 2] | 0;
          if (b2 | 0)
            do {
              d2 = b2;
              b2 = c[b2 >> 2] | 0;
              sC(d2);
            } while ((b2 | 0) != 0);
          c[a2 >> 2] = 0;
          return;
        }
        function Zi(b2) {
          b2 = b2 | 0;
          var d2 = 0;
          c[b2 + 16 >> 2] = 0;
          c[b2 + 20 >> 2] = 0;
          d2 = b2 + 24 | 0;
          c[d2 >> 2] = 0;
          c[b2 + 28 >> 2] = d2;
          c[b2 + 36 >> 2] = 0;
          a[b2 + 40 >> 0] = 0;
          a[b2 + 41 >> 0] = 0;
          return;
        }
        function _i(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          $i(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function $i(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = aj() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = bj(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, cj(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function aj() {
          var b2 = 0, d2 = 0;
          if (!(a[7640] | 0)) {
            jj(9232);
            Ha(26, 9232, o | 0) | 0;
            d2 = 7640;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9232) | 0)) {
            b2 = 9232;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            jj(9232);
          }
          return 9232;
        }
        function bj(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function cj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = aj() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            dj(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            ej(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function dj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function ej(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = fj(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            gj(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            dj(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            hj(a2, i3);
            ij(i3);
            l = k2;
            return;
          }
        }
        function fj(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function gj(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function hj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function ij(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function jj(a2) {
          a2 = a2 | 0;
          mj(a2);
          return;
        }
        function kj(a2) {
          a2 = a2 | 0;
          lj(a2 + 24 | 0);
          return;
        }
        function lj(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function mj(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 1, b2, nj() | 0, 3);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function nj() {
          return 1144;
        }
        function oj(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          e2 = +e2;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          g2 = l;
          l = l + 16 | 0;
          h2 = g2 + 8 | 0;
          i3 = g2;
          j2 = pj(a2) | 0;
          a2 = c[j2 + 4 >> 2] | 0;
          c[i3 >> 2] = c[j2 >> 2];
          c[i3 + 4 >> 2] = a2;
          c[h2 >> 2] = c[i3 >> 2];
          c[h2 + 4 >> 2] = c[i3 + 4 >> 2];
          qj(b2, h2, d2, e2, f2);
          l = g2;
          return;
        }
        function pj(a2) {
          a2 = a2 | 0;
          return (c[(aj() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function qj(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          e2 = +e2;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0;
          k2 = l;
          l = l + 16 | 0;
          h2 = k2 + 2 | 0;
          i3 = k2 + 1 | 0;
          j2 = k2;
          g2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            g2 = c[(c[a2 >> 2] | 0) + g2 >> 2] | 0;
          rj(h2, d2);
          d2 = +sj(h2, d2);
          rj(i3, e2);
          e2 = +sj(i3, e2);
          tj(j2, f2);
          j2 = uj(j2, f2) | 0;
          qb[g2 & 1](a2, d2, e2, j2);
          l = k2;
          return;
        }
        function rj(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          return;
        }
        function sj(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          return + +wj(b2);
        }
        function tj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function uj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return vj(b2) | 0;
        }
        function vj(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function wj(a2) {
          a2 = +a2;
          return +a2;
        }
        function xj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          yj(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function yj(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = zj() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Aj(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Bj(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function zj() {
          var b2 = 0, d2 = 0;
          if (!(a[7648] | 0)) {
            Ij(9268);
            Ha(27, 9268, o | 0) | 0;
            d2 = 7648;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9268) | 0)) {
            b2 = 9268;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Ij(9268);
          }
          return 9268;
        }
        function Aj(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Bj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = zj() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Cj(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Dj(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Cj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Dj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Ej(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Fj(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Cj(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Gj(a2, i3);
            Hj(i3);
            l = k2;
            return;
          }
        }
        function Ej(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Fj(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Gj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Hj(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Ij(a2) {
          a2 = a2 | 0;
          Lj(a2);
          return;
        }
        function Jj(a2) {
          a2 = a2 | 0;
          Kj(a2 + 24 | 0);
          return;
        }
        function Kj(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Lj(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 4, b2, Mj() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Mj() {
          return 1160;
        }
        function Nj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = Oj(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          b2 = Pj(b2, e2) | 0;
          l = d2;
          return b2 | 0;
        }
        function Oj(a2) {
          a2 = a2 | 0;
          return (c[(zj() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Pj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          return Qj(pb[d2 & 31](a2) | 0) | 0;
        }
        function Qj(a2) {
          a2 = a2 | 0;
          return a2 & 1 | 0;
        }
        function Rj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Sj(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Sj(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Tj() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Uj(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Vj(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Tj() {
          var b2 = 0, d2 = 0;
          if (!(a[7656] | 0)) {
            ak(9304);
            Ha(28, 9304, o | 0) | 0;
            d2 = 7656;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9304) | 0)) {
            b2 = 9304;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            ak(9304);
          }
          return 9304;
        }
        function Uj(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Vj(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Tj() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Wj(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Xj(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Wj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Xj(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Yj(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Zj(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Wj(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            _j(a2, i3);
            $j(i3);
            l = k2;
            return;
          }
        }
        function Yj(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Zj(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function _j(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function $j(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function ak(a2) {
          a2 = a2 | 0;
          dk(a2);
          return;
        }
        function bk(a2) {
          a2 = a2 | 0;
          ck(a2 + 24 | 0);
          return;
        }
        function ck(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function dk(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 5, b2, ek() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function ek() {
          return 1164;
        }
        function fk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = gk(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          hk(b2, f2, d2);
          l = e2;
          return;
        }
        function gk(a2) {
          a2 = a2 | 0;
          return (c[(Tj() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function hk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          ik(f2, d2);
          d2 = jk(f2, d2) | 0;
          ob[e2 & 31](a2, d2);
          kk(f2);
          l = g2;
          return;
        }
        function ik(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          lk(a2, b2);
          return;
        }
        function jk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return a2 | 0;
        }
        function kk(a2) {
          a2 = a2 | 0;
          vf(a2);
          return;
        }
        function lk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          mk(a2, b2);
          return;
        }
        function mk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = b2;
          return;
        }
        function nk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          ok(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function ok(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = pk() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = qk(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, rk(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function pk() {
          var b2 = 0, d2 = 0;
          if (!(a[7664] | 0)) {
            yk(9340);
            Ha(29, 9340, o | 0) | 0;
            d2 = 7664;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9340) | 0)) {
            b2 = 9340;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            yk(9340);
          }
          return 9340;
        }
        function qk(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function rk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = pk() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            sk(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            tk(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function sk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function tk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = uk(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            vk(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            sk(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            wk(a2, i3);
            xk(i3);
            l = k2;
            return;
          }
        }
        function uk(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function vk(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function wk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function xk(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function yk(a2) {
          a2 = a2 | 0;
          Bk(a2);
          return;
        }
        function zk(a2) {
          a2 = a2 | 0;
          Ak(a2 + 24 | 0);
          return;
        }
        function Ak(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Bk(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 4, b2, Ck() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Ck() {
          return 1180;
        }
        function Dk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Ek(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          d2 = Fk(b2, f2, d2) | 0;
          l = e2;
          return d2 | 0;
        }
        function Ek(a2) {
          a2 = a2 | 0;
          return (c[(pk() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Fk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          Gk(f2, d2);
          f2 = Hk(f2, d2) | 0;
          f2 = Ik(wb[e2 & 15](a2, f2) | 0) | 0;
          l = g2;
          return f2 | 0;
        }
        function Gk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function Hk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Jk(b2) | 0;
        }
        function Ik(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Jk(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Kk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Lk(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Lk(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Mk() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Nk(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Ok(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Mk() {
          var b2 = 0, d2 = 0;
          if (!(a[7672] | 0)) {
            Vk(9376);
            Ha(30, 9376, o | 0) | 0;
            d2 = 7672;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9376) | 0)) {
            b2 = 9376;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Vk(9376);
          }
          return 9376;
        }
        function Nk(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Ok(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Mk() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Pk(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Qk(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Pk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Qk(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Rk(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Sk(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Pk(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Tk(a2, i3);
            Uk(i3);
            l = k2;
            return;
          }
        }
        function Rk(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Sk(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Tk(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Uk(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Vk(a2) {
          a2 = a2 | 0;
          Yk(a2);
          return;
        }
        function Wk(a2) {
          a2 = a2 | 0;
          Xk(a2 + 24 | 0);
          return;
        }
        function Xk(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Yk(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 5, b2, Zk() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Zk() {
          return 1196;
        }
        function _k(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = $k(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          b2 = al(b2, e2) | 0;
          l = d2;
          return b2 | 0;
        }
        function $k(a2) {
          a2 = a2 | 0;
          return (c[(Mk() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function al(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          return Ik(pb[d2 & 31](a2) | 0) | 0;
        }
        function bl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          cl(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function cl(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = dl() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = el(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, fl(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function dl() {
          var b2 = 0, d2 = 0;
          if (!(a[7680] | 0)) {
            ml(9412);
            Ha(31, 9412, o | 0) | 0;
            d2 = 7680;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9412) | 0)) {
            b2 = 9412;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            ml(9412);
          }
          return 9412;
        }
        function el(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function fl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = dl() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            gl(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            hl(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function gl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function hl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = il(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            jl(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            gl(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            kl(a2, i3);
            ll(i3);
            l = k2;
            return;
          }
        }
        function il(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function jl(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function kl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function ll(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function ml(a2) {
          a2 = a2 | 0;
          pl(a2);
          return;
        }
        function nl(a2) {
          a2 = a2 | 0;
          ol(a2 + 24 | 0);
          return;
        }
        function ol(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function pl(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 6, b2, ql() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function ql() {
          return 1200;
        }
        function rl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = sl(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          b2 = tl(b2, e2) | 0;
          l = d2;
          return b2 | 0;
        }
        function sl(a2) {
          a2 = a2 | 0;
          return (c[(dl() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function tl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          return ul(pb[d2 & 31](a2) | 0) | 0;
        }
        function ul(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function vl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          wl(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function wl(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = xl() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = yl(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, zl(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function xl() {
          var b2 = 0, d2 = 0;
          if (!(a[7688] | 0)) {
            Gl(9448);
            Ha(32, 9448, o | 0) | 0;
            d2 = 7688;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9448) | 0)) {
            b2 = 9448;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Gl(9448);
          }
          return 9448;
        }
        function yl(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function zl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = xl() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Al(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Bl(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Al(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Bl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Cl(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Dl(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Al(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            El(a2, i3);
            Fl(i3);
            l = k2;
            return;
          }
        }
        function Cl(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Dl(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function El(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Fl(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Gl(a2) {
          a2 = a2 | 0;
          Jl(a2);
          return;
        }
        function Hl(a2) {
          a2 = a2 | 0;
          Il(a2 + 24 | 0);
          return;
        }
        function Il(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Jl(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 6, b2, Kl() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Kl() {
          return 1204;
        }
        function Ll(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Ml(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Nl(b2, f2, d2);
          l = e2;
          return;
        }
        function Ml(a2) {
          a2 = a2 | 0;
          return (c[(xl() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Nl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          Ol(f2, d2);
          f2 = Pl(f2, d2) | 0;
          ob[e2 & 31](a2, f2);
          l = g2;
          return;
        }
        function Ol(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function Pl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Ql(b2) | 0;
        }
        function Ql(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Rl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Sl(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Sl(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Tl() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Ul(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Vl(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Tl() {
          var b2 = 0, d2 = 0;
          if (!(a[7696] | 0)) {
            am(9484);
            Ha(33, 9484, o | 0) | 0;
            d2 = 7696;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9484) | 0)) {
            b2 = 9484;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            am(9484);
          }
          return 9484;
        }
        function Ul(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Vl(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Tl() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Wl(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Xl(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Wl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Xl(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Yl(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Zl(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Wl(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            _l(a2, i3);
            $l(i3);
            l = k2;
            return;
          }
        }
        function Yl(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Zl(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function _l(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function $l(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function am(a2) {
          a2 = a2 | 0;
          dm(a2);
          return;
        }
        function bm(a2) {
          a2 = a2 | 0;
          cm(a2 + 24 | 0);
          return;
        }
        function cm(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function dm(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 1, b2, em() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function em() {
          return 1212;
        }
        function fm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          f2 = l;
          l = l + 16 | 0;
          g2 = f2 + 8 | 0;
          h2 = f2;
          i3 = gm(a2) | 0;
          a2 = c[i3 + 4 >> 2] | 0;
          c[h2 >> 2] = c[i3 >> 2];
          c[h2 + 4 >> 2] = a2;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
          hm(b2, g2, d2, e2);
          l = f2;
          return;
        }
        function gm(a2) {
          a2 = a2 | 0;
          return (c[(Tl() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function hm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          i3 = l;
          l = l + 16 | 0;
          g2 = i3 + 1 | 0;
          h2 = i3;
          f2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            f2 = c[(c[a2 >> 2] | 0) + f2 >> 2] | 0;
          Ol(g2, d2);
          g2 = Pl(g2, d2) | 0;
          Gk(h2, e2);
          h2 = Hk(h2, e2) | 0;
          Eb[f2 & 15](a2, g2, h2);
          l = i3;
          return;
        }
        function im(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          jm(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function jm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = km() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = lm(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, mm(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function km() {
          var b2 = 0, d2 = 0;
          if (!(a[7704] | 0)) {
            tm(9520);
            Ha(34, 9520, o | 0) | 0;
            d2 = 7704;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9520) | 0)) {
            b2 = 9520;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            tm(9520);
          }
          return 9520;
        }
        function lm(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function mm(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = km() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            nm(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            om(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function nm(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function om(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = pm(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            qm(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            nm(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            rm(a2, i3);
            sm(i3);
            l = k2;
            return;
          }
        }
        function pm(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function qm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function rm(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function sm(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function tm(a2) {
          a2 = a2 | 0;
          wm(a2);
          return;
        }
        function um(a2) {
          a2 = a2 | 0;
          vm(a2 + 24 | 0);
          return;
        }
        function vm(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function wm(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 1, b2, xm() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function xm() {
          return 1224;
        }
        function ym(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          f2 = l;
          l = l + 16 | 0;
          g2 = f2 + 8 | 0;
          h2 = f2;
          i3 = zm(a2) | 0;
          a2 = c[i3 + 4 >> 2] | 0;
          c[h2 >> 2] = c[i3 >> 2];
          c[h2 + 4 >> 2] = a2;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
          e2 = +Am(b2, g2, d2);
          l = f2;
          return +e2;
        }
        function zm(a2) {
          a2 = a2 | 0;
          return (c[(km() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Am(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          tj(f2, d2);
          f2 = uj(f2, d2) | 0;
          h2 = +ch(+zb[e2 & 7](a2, f2));
          l = g2;
          return +h2;
        }
        function Bm(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Cm(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function Cm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Dm() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Em(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Fm(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Dm() {
          var b2 = 0, d2 = 0;
          if (!(a[7712] | 0)) {
            Mm(9556);
            Ha(35, 9556, o | 0) | 0;
            d2 = 7712;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9556) | 0)) {
            b2 = 9556;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Mm(9556);
          }
          return 9556;
        }
        function Em(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Fm(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Dm() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Gm(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Hm(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Gm(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Hm(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Im(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Jm(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Gm(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Km(a2, i3);
            Lm(i3);
            l = k2;
            return;
          }
        }
        function Im(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Jm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Km(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Lm(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Mm(a2) {
          a2 = a2 | 0;
          Pm(a2);
          return;
        }
        function Nm(a2) {
          a2 = a2 | 0;
          Om(a2 + 24 | 0);
          return;
        }
        function Om(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Pm(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 5, b2, Qm() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Qm() {
          return 1232;
        }
        function Rm(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Sm(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          d2 = +Tm(b2, f2);
          l = e2;
          return +d2;
        }
        function Sm(a2) {
          a2 = a2 | 0;
          return (c[(Dm() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Tm(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          return + +ch(+ub[d2 & 15](a2));
        }
        function Um(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Vm(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function Vm(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Wm() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Xm(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Ym(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Wm() {
          var b2 = 0, d2 = 0;
          if (!(a[7720] | 0)) {
            dn(9592);
            Ha(36, 9592, o | 0) | 0;
            d2 = 7720;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9592) | 0)) {
            b2 = 9592;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            dn(9592);
          }
          return 9592;
        }
        function Xm(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Ym(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Wm() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Zm(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            _m(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Zm(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function _m(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = $m(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            an(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Zm(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            bn(a2, i3);
            cn(i3);
            l = k2;
            return;
          }
        }
        function $m(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function an(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function bn(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function cn(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function dn(a2) {
          a2 = a2 | 0;
          gn(a2);
          return;
        }
        function en(a2) {
          a2 = a2 | 0;
          fn(a2 + 24 | 0);
          return;
        }
        function fn(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function gn(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 7, b2, hn() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function hn() {
          return 1276;
        }
        function jn(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = kn(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          b2 = ln(b2, e2) | 0;
          l = d2;
          return b2 | 0;
        }
        function kn(a2) {
          a2 = a2 | 0;
          return (c[(Wm() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function ln(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = l;
          l = l + 16 | 0;
          e2 = f2;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          ob[d2 & 31](e2, a2);
          e2 = mn(e2) | 0;
          l = f2;
          return e2 | 0;
        }
        function mn(a2) {
          a2 = a2 | 0;
          var b2 = 0, c2 = 0, d2 = 0, e2 = 0;
          e2 = l;
          l = l + 32 | 0;
          b2 = e2 + 12 | 0;
          c2 = e2;
          d2 = Di(nn() | 0) | 0;
          if (!d2)
            a2 = pn(a2) | 0;
          else {
            Ei(b2, d2);
            Fi(c2, b2);
            on(a2, c2);
            a2 = Hi(b2) | 0;
          }
          l = e2;
          return a2 | 0;
        }
        function nn() {
          var b2 = 0;
          if (!(a[7736] | 0)) {
            An(9640);
            Ha(25, 9640, o | 0) | 0;
            b2 = 7736;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 9640;
        }
        function on(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          un(b2, a2, a2 + 8 | 0) | 0;
          return;
        }
        function pn(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          d2 = l;
          l = l + 16 | 0;
          f2 = d2 + 4 | 0;
          h2 = d2;
          e2 = jy(8) | 0;
          b2 = e2;
          i3 = qC(16) | 0;
          c[i3 >> 2] = c[a2 >> 2];
          c[i3 + 4 >> 2] = c[a2 + 4 >> 2];
          c[i3 + 8 >> 2] = c[a2 + 8 >> 2];
          c[i3 + 12 >> 2] = c[a2 + 12 >> 2];
          g2 = b2 + 4 | 0;
          c[g2 >> 2] = i3;
          a2 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[h2 >> 2] = 0;
          c[f2 >> 2] = c[h2 >> 2];
          qn(a2, g2, f2);
          c[e2 >> 2] = a2;
          l = d2;
          return b2 | 0;
        }
        function qn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          d2 = qC(16) | 0;
          c[d2 + 4 >> 2] = 0;
          c[d2 + 8 >> 2] = 0;
          c[d2 >> 2] = 1244;
          c[d2 + 12 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function rn(a2) {
          a2 = a2 | 0;
          kC(a2);
          sC(a2);
          return;
        }
        function sn(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 12 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function tn(a2) {
          a2 = a2 | 0;
          sC(a2);
          return;
        }
        function un(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          b2 = vn(c[a2 >> 2] | 0, b2, d2) | 0;
          d2 = a2 + 4 | 0;
          c[(c[d2 >> 2] | 0) + 8 >> 2] = b2;
          return c[(c[d2 >> 2] | 0) + 8 >> 2] | 0;
        }
        function vn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2;
          UA(f2);
          a2 = Sg(a2) | 0;
          d2 = wn(a2, c[b2 >> 2] | 0, +h[d2 >> 3]) | 0;
          WA(f2);
          l = e2;
          return d2 | 0;
        }
        function wn(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          var d2 = 0;
          d2 = Vg(xn() | 0) | 0;
          b2 = Xg(b2) | 0;
          return za(0, d2 | 0, a2 | 0, b2 | 0, + +Wg(c2)) | 0;
        }
        function xn() {
          var b2 = 0;
          if (!(a[7728] | 0)) {
            yn(9628);
            b2 = 7728;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 9628;
        }
        function yn(a2) {
          a2 = a2 | 0;
          fh(a2, zn() | 0, 2);
          return;
        }
        function zn() {
          return 1264;
        }
        function An(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function Bn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Cn(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function Cn(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Dn() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = En(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Fn(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Dn() {
          var b2 = 0, d2 = 0;
          if (!(a[7744] | 0)) {
            Mn(9684);
            Ha(37, 9684, o | 0) | 0;
            d2 = 7744;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9684) | 0)) {
            b2 = 9684;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Mn(9684);
          }
          return 9684;
        }
        function En(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Fn(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Dn() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Gn(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Hn(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Gn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Hn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = In(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Jn(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Gn(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Kn(a2, i3);
            Ln(i3);
            l = k2;
            return;
          }
        }
        function In(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Jn(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Kn(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Ln(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Mn(a2) {
          a2 = a2 | 0;
          Pn(a2);
          return;
        }
        function Nn(a2) {
          a2 = a2 | 0;
          On(a2 + 24 | 0);
          return;
        }
        function On(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Pn(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 5, b2, Qn() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Qn() {
          return 1280;
        }
        function Rn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Sn(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          d2 = Tn(b2, f2, d2) | 0;
          l = e2;
          return d2 | 0;
        }
        function Sn(a2) {
          a2 = a2 | 0;
          return (c[(Dn() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Tn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          h2 = l;
          l = l + 32 | 0;
          f2 = h2;
          g2 = h2 + 16 | 0;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          tj(g2, d2);
          g2 = uj(g2, d2) | 0;
          Eb[e2 & 15](f2, a2, g2);
          g2 = mn(f2) | 0;
          l = h2;
          return g2 | 0;
        }
        function Un(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Vn(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function Vn(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Wn() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Xn(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Yn(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Wn() {
          var b2 = 0, d2 = 0;
          if (!(a[7752] | 0)) {
            eo(9720);
            Ha(38, 9720, o | 0) | 0;
            d2 = 7752;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9720) | 0)) {
            b2 = 9720;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            eo(9720);
          }
          return 9720;
        }
        function Xn(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Yn(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Wn() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Zn(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            _n(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Zn(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function _n(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = $n(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            ao(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Zn(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            bo(a2, i3);
            co(i3);
            l = k2;
            return;
          }
        }
        function $n(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function ao(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function bo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function co(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function eo(a2) {
          a2 = a2 | 0;
          ho(a2);
          return;
        }
        function fo(a2) {
          a2 = a2 | 0;
          go(a2 + 24 | 0);
          return;
        }
        function go(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function ho(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 8, b2, io() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function io() {
          return 1288;
        }
        function jo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = ko(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          b2 = lo(b2, e2) | 0;
          l = d2;
          return b2 | 0;
        }
        function ko(a2) {
          a2 = a2 | 0;
          return (c[(Wn() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function lo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          return bh(pb[d2 & 31](a2) | 0) | 0;
        }
        function mo(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          no(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function no(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = oo() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = po(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, qo(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function oo() {
          var b2 = 0, d2 = 0;
          if (!(a[7760] | 0)) {
            xo(9756);
            Ha(39, 9756, o | 0) | 0;
            d2 = 7760;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9756) | 0)) {
            b2 = 9756;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            xo(9756);
          }
          return 9756;
        }
        function po(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function qo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = oo() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            ro(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            so(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function ro(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function so(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = to(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            uo(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            ro(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            vo(a2, i3);
            wo(i3);
            l = k2;
            return;
          }
        }
        function to(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function uo(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function vo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function wo(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function xo(a2) {
          a2 = a2 | 0;
          Ao(a2);
          return;
        }
        function yo(a2) {
          a2 = a2 | 0;
          zo(a2 + 24 | 0);
          return;
        }
        function zo(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Ao(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 8, b2, Bo() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Bo() {
          return 1292;
        }
        function Co(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Do(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Eo(b2, f2, d2);
          l = e2;
          return;
        }
        function Do(a2) {
          a2 = a2 | 0;
          return (c[(oo() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Eo(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          rj(f2, d2);
          d2 = +sj(f2, d2);
          lb[e2 & 31](a2, d2);
          l = g2;
          return;
        }
        function Fo(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Go(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Go(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Ho() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Io(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Jo(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Ho() {
          var b2 = 0, d2 = 0;
          if (!(a[7768] | 0)) {
            Qo(9792);
            Ha(40, 9792, o | 0) | 0;
            d2 = 7768;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9792) | 0)) {
            b2 = 9792;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Qo(9792);
          }
          return 9792;
        }
        function Io(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Jo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Ho() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Ko(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Lo(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Ko(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Lo(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Mo(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            No(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Ko(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Oo(a2, i3);
            Po(i3);
            l = k2;
            return;
          }
        }
        function Mo(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function No(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Oo(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Po(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Qo(a2) {
          a2 = a2 | 0;
          To(a2);
          return;
        }
        function Ro(a2) {
          a2 = a2 | 0;
          So(a2 + 24 | 0);
          return;
        }
        function So(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function To(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 1, b2, Uo() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Uo() {
          return 1300;
        }
        function Vo(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = +e2;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          f2 = l;
          l = l + 16 | 0;
          g2 = f2 + 8 | 0;
          h2 = f2;
          i3 = Wo(a2) | 0;
          a2 = c[i3 + 4 >> 2] | 0;
          c[h2 >> 2] = c[i3 >> 2];
          c[h2 + 4 >> 2] = a2;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
          Xo(b2, g2, d2, e2);
          l = f2;
          return;
        }
        function Wo(a2) {
          a2 = a2 | 0;
          return (c[(Ho() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Xo(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = +e2;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          i3 = l;
          l = l + 16 | 0;
          g2 = i3 + 1 | 0;
          h2 = i3;
          f2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            f2 = c[(c[a2 >> 2] | 0) + f2 >> 2] | 0;
          tj(g2, d2);
          g2 = uj(g2, d2) | 0;
          rj(h2, e2);
          e2 = +sj(h2, e2);
          Gb[f2 & 15](a2, g2, e2);
          l = i3;
          return;
        }
        function Yo(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Zo(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Zo(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = _o() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = $o(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, ap(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function _o() {
          var b2 = 0, d2 = 0;
          if (!(a[7776] | 0)) {
            hp(9828);
            Ha(41, 9828, o | 0) | 0;
            d2 = 7776;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9828) | 0)) {
            b2 = 9828;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            hp(9828);
          }
          return 9828;
        }
        function $o(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function ap(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = _o() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            bp(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            cp(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function bp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function cp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = dp(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            ep(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            bp(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            fp(a2, i3);
            gp(i3);
            l = k2;
            return;
          }
        }
        function dp(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function ep(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function fp(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function gp(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function hp(a2) {
          a2 = a2 | 0;
          kp(a2);
          return;
        }
        function ip(a2) {
          a2 = a2 | 0;
          jp(a2 + 24 | 0);
          return;
        }
        function jp(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function kp(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 7, b2, lp() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function lp() {
          return 1312;
        }
        function mp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = np(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          op(b2, f2, d2);
          l = e2;
          return;
        }
        function np(a2) {
          a2 = a2 | 0;
          return (c[(_o() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function op(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          tj(f2, d2);
          f2 = uj(f2, d2) | 0;
          ob[e2 & 31](a2, f2);
          l = g2;
          return;
        }
        function pp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          qp(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function qp(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = rp() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = sp(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, tp(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function rp() {
          var b2 = 0, d2 = 0;
          if (!(a[7784] | 0)) {
            Ap(9864);
            Ha(42, 9864, o | 0) | 0;
            d2 = 7784;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9864) | 0)) {
            b2 = 9864;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Ap(9864);
          }
          return 9864;
        }
        function sp(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function tp(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = rp() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            up(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            vp(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function up(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function vp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = wp(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            xp(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            up(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            yp(a2, i3);
            zp(i3);
            l = k2;
            return;
          }
        }
        function wp(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function xp(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function yp(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function zp(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Ap(a2) {
          a2 = a2 | 0;
          Dp(a2);
          return;
        }
        function Bp(a2) {
          a2 = a2 | 0;
          Cp(a2 + 24 | 0);
          return;
        }
        function Cp(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Dp(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 8, b2, Ep() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Ep() {
          return 1320;
        }
        function Fp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Gp(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Hp(b2, f2, d2);
          l = e2;
          return;
        }
        function Gp(a2) {
          a2 = a2 | 0;
          return (c[(rp() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Hp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          Ip(f2, d2);
          f2 = Jp(f2, d2) | 0;
          ob[e2 & 31](a2, f2);
          l = g2;
          return;
        }
        function Ip(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function Jp(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Kp(b2) | 0;
        }
        function Kp(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Lp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Mp(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Mp(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Np() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Op(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Pp(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Np() {
          var b2 = 0, d2 = 0;
          if (!(a[7792] | 0)) {
            Wp(9900);
            Ha(43, 9900, o | 0) | 0;
            d2 = 7792;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9900) | 0)) {
            b2 = 9900;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Wp(9900);
          }
          return 9900;
        }
        function Op(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Pp(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Np() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Qp(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Rp(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Qp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Rp(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Sp(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Tp(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Qp(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Up(a2, i3);
            Vp(i3);
            l = k2;
            return;
          }
        }
        function Sp(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Tp(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Up(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Vp(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Wp(a2) {
          a2 = a2 | 0;
          Zp(a2);
          return;
        }
        function Xp(a2) {
          a2 = a2 | 0;
          Yp(a2 + 24 | 0);
          return;
        }
        function Yp(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Zp(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 22, b2, _p() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function _p() {
          return 1344;
        }
        function $p(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2 + 8 | 0;
          f2 = d2;
          g2 = aq(a2) | 0;
          a2 = c[g2 + 4 >> 2] | 0;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = a2;
          c[e2 >> 2] = c[f2 >> 2];
          c[e2 + 4 >> 2] = c[f2 + 4 >> 2];
          bq(b2, e2);
          l = d2;
          return;
        }
        function aq(a2) {
          a2 = a2 | 0;
          return (c[(Np() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function bq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            d2 = c[(c[a2 >> 2] | 0) + d2 >> 2] | 0;
          nb[d2 & 127](a2);
          return;
        }
        function cq(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = dq() | 0;
          a2 = eq(d2) | 0;
          fi(g2, b2, f2, a2, fq(d2, e2) | 0, e2);
          return;
        }
        function dq() {
          var b2 = 0, d2 = 0;
          if (!(a[7800] | 0)) {
            mq(9936);
            Ha(44, 9936, o | 0) | 0;
            d2 = 7800;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9936) | 0)) {
            b2 = 9936;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            mq(9936);
          }
          return 9936;
        }
        function eq(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function fq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = dq() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            gq(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            hq(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function gq(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function hq(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = iq(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            jq(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            gq(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            kq(a2, f2);
            lq(f2);
            l = i3;
            return;
          }
        }
        function iq(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function jq(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function kq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function lq(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function mq(a2) {
          a2 = a2 | 0;
          pq(a2);
          return;
        }
        function nq(a2) {
          a2 = a2 | 0;
          oq(a2 + 24 | 0);
          return;
        }
        function oq(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function pq(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 23, b2, Kl() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function qq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          sq(c[(rq(a2) | 0) >> 2] | 0, b2);
          return;
        }
        function rq(a2) {
          a2 = a2 | 0;
          return (c[(dq() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function sq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0;
          c2 = l;
          l = l + 16 | 0;
          d2 = c2;
          Ol(d2, b2);
          b2 = Pl(d2, b2) | 0;
          nb[a2 & 127](b2);
          l = c2;
          return;
        }
        function tq(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = uq() | 0;
          a2 = vq(d2) | 0;
          fi(g2, b2, f2, a2, wq(d2, e2) | 0, e2);
          return;
        }
        function uq() {
          var b2 = 0, d2 = 0;
          if (!(a[7808] | 0)) {
            Dq(9972);
            Ha(45, 9972, o | 0) | 0;
            d2 = 7808;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(9972) | 0)) {
            b2 = 9972;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Dq(9972);
          }
          return 9972;
        }
        function vq(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function wq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = uq() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            xq(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            yq(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function xq(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function yq(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = zq(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            Aq(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            xq(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            Bq(a2, f2);
            Cq(f2);
            l = i3;
            return;
          }
        }
        function zq(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function Aq(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function Bq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Cq(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Dq(a2) {
          a2 = a2 | 0;
          Gq(a2);
          return;
        }
        function Eq(a2) {
          a2 = a2 | 0;
          Fq(a2 + 24 | 0);
          return;
        }
        function Fq(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Gq(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 9, b2, Hq() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Hq() {
          return 1348;
        }
        function Iq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Kq(c[(Jq(a2) | 0) >> 2] | 0, b2) | 0;
        }
        function Jq(a2) {
          a2 = a2 | 0;
          return (c[(uq() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function Kq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0;
          c2 = l;
          l = l + 16 | 0;
          d2 = c2;
          Lq(d2, b2);
          b2 = Mq(d2, b2) | 0;
          b2 = Ik(pb[a2 & 31](b2) | 0) | 0;
          l = c2;
          return b2 | 0;
        }
        function Lq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function Mq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Nq(b2) | 0;
        }
        function Nq(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Oq(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Pq() | 0;
          a2 = Qq(d2) | 0;
          fi(g2, b2, f2, a2, Rq(d2, e2) | 0, e2);
          return;
        }
        function Pq() {
          var b2 = 0, d2 = 0;
          if (!(a[7816] | 0)) {
            Yq(10008);
            Ha(46, 10008, o | 0) | 0;
            d2 = 7816;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10008) | 0)) {
            b2 = 10008;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Yq(10008);
          }
          return 10008;
        }
        function Qq(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Rq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Pq() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            Sq(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            Tq(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Sq(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Tq(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Uq(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            Vq(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            Sq(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            Wq(a2, f2);
            Xq(f2);
            l = i3;
            return;
          }
        }
        function Uq(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function Vq(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function Wq(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Xq(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Yq(a2) {
          a2 = a2 | 0;
          $q(a2);
          return;
        }
        function Zq(a2) {
          a2 = a2 | 0;
          _q(a2 + 24 | 0);
          return;
        }
        function _q(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function $q(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 15, b2, Zk() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function ar(a2) {
          a2 = a2 | 0;
          return cr(c[(br(a2) | 0) >> 2] | 0) | 0;
        }
        function br(a2) {
          a2 = a2 | 0;
          return (c[(Pq() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function cr(a2) {
          a2 = a2 | 0;
          return Ik(Ab[a2 & 7]() | 0) | 0;
        }
        function dr() {
          var b2 = 0;
          if (!(a[7832] | 0)) {
            nr(10052);
            Ha(25, 10052, o | 0) | 0;
            b2 = 7832;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10052;
        }
        function er(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = fr() | 0;
          c[a2 + 4 >> 2] = gr() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = hr() | 0;
          c[a2 + 32 >> 2] = 2;
          return;
        }
        function fr() {
          return 11709;
        }
        function gr() {
          return 1188;
        }
        function hr() {
          return lr() | 0;
        }
        function ir(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              kr(c2);
              sC(c2);
            }
          } else if (b2 | 0) {
            uf(b2);
            sC(b2);
          }
          return;
        }
        function jr(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return b2 & a2 | 0;
        }
        function kr(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function lr() {
          var b2 = 0;
          if (!(a[7824] | 0)) {
            c[2511] = mr() | 0;
            c[2512] = 0;
            b2 = 7824;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10044;
        }
        function mr() {
          return 0;
        }
        function nr(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function or(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0;
          b2 = l;
          l = l + 32 | 0;
          d2 = b2 + 24 | 0;
          g2 = b2 + 16 | 0;
          f2 = b2 + 8 | 0;
          e2 = b2;
          pr(a2, 4827);
          qr(a2, 4834, 3) | 0;
          rr(a2, 3682, 47) | 0;
          c[g2 >> 2] = 9;
          c[g2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[g2 >> 2];
          c[d2 + 4 >> 2] = c[g2 + 4 >> 2];
          sr(a2, 4841, d2) | 0;
          c[f2 >> 2] = 1;
          c[f2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[f2 >> 2];
          c[d2 + 4 >> 2] = c[f2 + 4 >> 2];
          tr(a2, 4871, d2) | 0;
          c[e2 >> 2] = 10;
          c[e2 + 4 >> 2] = 0;
          c[d2 >> 2] = c[e2 >> 2];
          c[d2 + 4 >> 2] = c[e2 + 4 >> 2];
          ur(a2, 4891, d2) | 0;
          l = b2;
          return;
        }
        function pr(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = nt() | 0;
          c[a2 >> 2] = d2;
          ot(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function qr(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Ws(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function rr(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Es(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function sr(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          is(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function tr(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Or(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function ur(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = c[d2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[d2 >> 2];
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          vr(a2, b2, f2);
          l = e2;
          return a2 | 0;
        }
        function vr(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          wr(a2, d2, f2, 1);
          l = e2;
          return;
        }
        function wr(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = xr() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = yr(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, zr(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function xr() {
          var b2 = 0, d2 = 0;
          if (!(a[7840] | 0)) {
            Gr(10100);
            Ha(48, 10100, o | 0) | 0;
            d2 = 7840;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10100) | 0)) {
            b2 = 10100;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Gr(10100);
          }
          return 10100;
        }
        function yr(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function zr(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = xr() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Ar(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Br(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Ar(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Br(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Cr(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Dr(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Ar(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Er(a2, i3);
            Fr(i3);
            l = k2;
            return;
          }
        }
        function Cr(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Dr(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Er(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Fr(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Gr(a2) {
          a2 = a2 | 0;
          Jr(a2);
          return;
        }
        function Hr(a2) {
          a2 = a2 | 0;
          Ir(a2 + 24 | 0);
          return;
        }
        function Ir(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function Jr(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 6, b2, Kr() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Kr() {
          return 1364;
        }
        function Lr(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = Mr(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          d2 = Nr(b2, f2, d2) | 0;
          l = e2;
          return d2 | 0;
        }
        function Mr(a2) {
          a2 = a2 | 0;
          return (c[(xr() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function Nr(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          tj(f2, d2);
          f2 = uj(f2, d2) | 0;
          f2 = Qj(wb[e2 & 15](a2, f2) | 0) | 0;
          l = g2;
          return f2 | 0;
        }
        function Or(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          Pr(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function Pr(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = Qr() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = Rr(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, Sr(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function Qr() {
          var b2 = 0, d2 = 0;
          if (!(a[7848] | 0)) {
            Zr(10136);
            Ha(49, 10136, o | 0) | 0;
            d2 = 7848;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10136) | 0)) {
            b2 = 10136;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Zr(10136);
          }
          return 10136;
        }
        function Rr(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function Sr(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = Qr() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            Tr(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            Ur(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function Tr(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function Ur(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = Vr(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            Wr(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            Tr(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            Xr(a2, i3);
            Yr(i3);
            l = k2;
            return;
          }
        }
        function Vr(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function Wr(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function Xr(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Yr(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Zr(a2) {
          a2 = a2 | 0;
          as(a2);
          return;
        }
        function _r(a2) {
          a2 = a2 | 0;
          $r(a2 + 24 | 0);
          return;
        }
        function $r(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function as(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 9, b2, bs() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function bs() {
          return 1372;
        }
        function cs(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          h2 = ds(a2) | 0;
          a2 = c[h2 + 4 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = a2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          es(b2, f2, d2);
          l = e2;
          return;
        }
        function ds(a2) {
          a2 = a2 | 0;
          return (c[(Qr() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function es(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          var e2 = 0, f2 = 0, g2 = 0, h2 = ib;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2;
          e2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            e2 = c[(c[a2 >> 2] | 0) + e2 >> 2] | 0;
          fs2(f2, d2);
          h2 = T(gs(f2, d2));
          kb[e2 & 1](a2, h2);
          l = g2;
          return;
        }
        function fs2(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          return;
        }
        function gs(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          return T(hs(b2));
        }
        function hs(a2) {
          a2 = +a2;
          return T(a2);
        }
        function is(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2 + 8 | 0;
          g2 = e2;
          i3 = c[d2 >> 2] | 0;
          h2 = c[d2 + 4 >> 2] | 0;
          d2 = ai(b2) | 0;
          c[g2 >> 2] = i3;
          c[g2 + 4 >> 2] = h2;
          c[f2 >> 2] = c[g2 >> 2];
          c[f2 + 4 >> 2] = c[g2 + 4 >> 2];
          js(a2, d2, f2, 0);
          l = e2;
          return;
        }
        function js(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2 + 16 | 0;
          m2 = f2 + 8 | 0;
          i3 = f2;
          k2 = c[d2 >> 2] | 0;
          j2 = c[d2 + 4 >> 2] | 0;
          h2 = c[a2 >> 2] | 0;
          a2 = ks() | 0;
          c[m2 >> 2] = k2;
          c[m2 + 4 >> 2] = j2;
          c[g2 >> 2] = c[m2 >> 2];
          c[g2 + 4 >> 2] = c[m2 + 4 >> 2];
          d2 = ls(g2) | 0;
          c[i3 >> 2] = k2;
          c[i3 + 4 >> 2] = j2;
          c[g2 >> 2] = c[i3 >> 2];
          c[g2 + 4 >> 2] = c[i3 + 4 >> 2];
          fi(h2, b2, a2, d2, ms(g2, e2) | 0, e2);
          l = f2;
          return;
        }
        function ks() {
          var b2 = 0, d2 = 0;
          if (!(a[7856] | 0)) {
            ts(10172);
            Ha(50, 10172, o | 0) | 0;
            d2 = 7856;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10172) | 0)) {
            b2 = 10172;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            ts(10172);
          }
          return 10172;
        }
        function ls(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function ms(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          m2 = l;
          l = l + 32 | 0;
          f2 = m2 + 24 | 0;
          h2 = m2 + 16 | 0;
          i3 = m2;
          j2 = m2 + 8 | 0;
          g2 = c[a2 >> 2] | 0;
          e2 = c[a2 + 4 >> 2] | 0;
          c[i3 >> 2] = g2;
          c[i3 + 4 >> 2] = e2;
          n2 = ks() | 0;
          k2 = n2 + 24 | 0;
          a2 = ji(b2, 4) | 0;
          c[j2 >> 2] = a2;
          b2 = n2 + 28 | 0;
          d2 = c[b2 >> 2] | 0;
          if (d2 >>> 0 < (c[n2 + 32 >> 2] | 0) >>> 0) {
            c[h2 >> 2] = g2;
            c[h2 + 4 >> 2] = e2;
            c[f2 >> 2] = c[h2 >> 2];
            c[f2 + 4 >> 2] = c[h2 + 4 >> 2];
            ns(d2, f2, a2);
            a2 = (c[b2 >> 2] | 0) + 12 | 0;
            c[b2 >> 2] = a2;
          } else {
            os2(k2, i3, j2);
            a2 = c[b2 >> 2] | 0;
          }
          l = m2;
          return ((a2 - (c[k2 >> 2] | 0) | 0) / 12 | 0) + -1 | 0;
        }
        function ns(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          e2 = c[b2 + 4 >> 2] | 0;
          c[a2 >> 2] = c[b2 >> 2];
          c[a2 + 4 >> 2] = e2;
          c[a2 + 8 >> 2] = d2;
          return;
        }
        function os2(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0;
          k2 = l;
          l = l + 48 | 0;
          e2 = k2 + 32 | 0;
          h2 = k2 + 24 | 0;
          i3 = k2;
          j2 = a2 + 4 | 0;
          f2 = (((c[j2 >> 2] | 0) - (c[a2 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
          g2 = ps(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            m2 = c[a2 >> 2] | 0;
            o2 = ((c[a2 + 8 >> 2] | 0) - m2 | 0) / 12 | 0;
            n2 = o2 << 1;
            qs(i3, o2 >>> 0 < g2 >>> 1 >>> 0 ? n2 >>> 0 < f2 >>> 0 ? f2 : n2 : g2, ((c[j2 >> 2] | 0) - m2 | 0) / 12 | 0, a2 + 8 | 0);
            j2 = i3 + 8 | 0;
            g2 = c[j2 >> 2] | 0;
            f2 = c[b2 + 4 >> 2] | 0;
            d2 = c[d2 >> 2] | 0;
            c[h2 >> 2] = c[b2 >> 2];
            c[h2 + 4 >> 2] = f2;
            c[e2 >> 2] = c[h2 >> 2];
            c[e2 + 4 >> 2] = c[h2 + 4 >> 2];
            ns(g2, e2, d2);
            c[j2 >> 2] = (c[j2 >> 2] | 0) + 12;
            rs(a2, i3);
            ss(i3);
            l = k2;
            return;
          }
        }
        function ps(a2) {
          a2 = a2 | 0;
          return 357913941;
        }
        function qs(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 357913941)
                Ta();
              else {
                f2 = qC(b2 * 12 | 0) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 * 12 | 0) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 * 12 | 0);
          return;
        }
        function rs(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (((f2 | 0) / -12 | 0) * 12 | 0) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function ss(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~(((e2 + -12 - b2 | 0) >>> 0) / 12 | 0) * 12 | 0);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function ts(a2) {
          a2 = a2 | 0;
          ws(a2);
          return;
        }
        function us(a2) {
          a2 = a2 | 0;
          vs(a2 + 24 | 0);
          return;
        }
        function vs(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~(((b2 + -12 - e2 | 0) >>> 0) / 12 | 0) * 12 | 0);
            sC(d2);
          }
          return;
        }
        function ws(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 2, 3, b2, xs() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function xs() {
          return 1380;
        }
        function ys(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          f2 = l;
          l = l + 16 | 0;
          g2 = f2 + 8 | 0;
          h2 = f2;
          i3 = zs(a2) | 0;
          a2 = c[i3 + 4 >> 2] | 0;
          c[h2 >> 2] = c[i3 >> 2];
          c[h2 + 4 >> 2] = a2;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = c[h2 + 4 >> 2];
          As(b2, g2, d2, e2);
          l = f2;
          return;
        }
        function zs(a2) {
          a2 = a2 | 0;
          return (c[(ks() | 0) + 24 >> 2] | 0) + (a2 * 12 | 0) | 0;
        }
        function As(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          i3 = l;
          l = l + 16 | 0;
          g2 = i3 + 1 | 0;
          h2 = i3;
          f2 = c[b2 >> 2] | 0;
          b2 = c[b2 + 4 >> 2] | 0;
          a2 = a2 + (b2 >> 1) | 0;
          if (b2 & 1)
            f2 = c[(c[a2 >> 2] | 0) + f2 >> 2] | 0;
          tj(g2, d2);
          g2 = uj(g2, d2) | 0;
          Bs(h2, e2);
          h2 = Cs(h2, e2) | 0;
          Eb[f2 & 15](a2, g2, h2);
          l = i3;
          return;
        }
        function Bs(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function Cs(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return Ds(b2) | 0;
        }
        function Ds(a2) {
          a2 = a2 | 0;
          return (a2 | 0) != 0 | 0;
        }
        function Es(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Fs() | 0;
          a2 = Gs(d2) | 0;
          fi(g2, b2, f2, a2, Hs(d2, e2) | 0, e2);
          return;
        }
        function Fs() {
          var b2 = 0, d2 = 0;
          if (!(a[7864] | 0)) {
            Os(10208);
            Ha(51, 10208, o | 0) | 0;
            d2 = 7864;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10208) | 0)) {
            b2 = 10208;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Os(10208);
          }
          return 10208;
        }
        function Gs(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Hs(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Fs() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            Is(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            Js(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Is(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Js(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Ks(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            Ls(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            Is(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            Ms(a2, f2);
            Ns(f2);
            l = i3;
            return;
          }
        }
        function Ks(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function Ls(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function Ms(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Ns(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Os(a2) {
          a2 = a2 | 0;
          Rs(a2);
          return;
        }
        function Ps(a2) {
          a2 = a2 | 0;
          Qs(a2 + 24 | 0);
          return;
        }
        function Qs(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Rs(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 24, b2, Ss() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Ss() {
          return 1392;
        }
        function Ts(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          Vs(c[(Us(a2) | 0) >> 2] | 0, b2);
          return;
        }
        function Us(a2) {
          a2 = a2 | 0;
          return (c[(Fs() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function Vs(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0;
          c2 = l;
          l = l + 16 | 0;
          d2 = c2;
          Lq(d2, b2);
          b2 = Mq(d2, b2) | 0;
          nb[a2 & 127](b2);
          l = c2;
          return;
        }
        function Ws(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Xs() | 0;
          a2 = Ys(d2) | 0;
          fi(g2, b2, f2, a2, Zs(d2, e2) | 0, e2);
          return;
        }
        function Xs() {
          var b2 = 0, d2 = 0;
          if (!(a[7872] | 0)) {
            et(10244);
            Ha(52, 10244, o | 0) | 0;
            d2 = 7872;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10244) | 0)) {
            b2 = 10244;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            et(10244);
          }
          return 10244;
        }
        function Ys(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Zs(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Xs() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            _s(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            $s(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function _s(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function $s(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = at(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            bt(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            _s(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            ct(a2, f2);
            dt(f2);
            l = i3;
            return;
          }
        }
        function at(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function bt(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function ct(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function dt(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function et(a2) {
          a2 = a2 | 0;
          ht(a2);
          return;
        }
        function ft(a2) {
          a2 = a2 | 0;
          gt(a2 + 24 | 0);
          return;
        }
        function gt(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function ht(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 16, b2, it() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function it() {
          return 1400;
        }
        function jt(a2) {
          a2 = a2 | 0;
          return lt(c[(kt(a2) | 0) >> 2] | 0) | 0;
        }
        function kt(a2) {
          a2 = a2 | 0;
          return (c[(Xs() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function lt(a2) {
          a2 = a2 | 0;
          return mt(Ab[a2 & 7]() | 0) | 0;
        }
        function mt(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function nt() {
          var b2 = 0;
          if (!(a[7880] | 0)) {
            ut(10280);
            Ha(25, 10280, o | 0) | 0;
            b2 = 7880;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10280;
        }
        function ot(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = pt() | 0;
          c[a2 + 4 >> 2] = qt() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = rt() | 0;
          c[a2 + 32 >> 2] = 4;
          return;
        }
        function pt() {
          return 11711;
        }
        function qt() {
          return 1356;
        }
        function rt() {
          return lr() | 0;
        }
        function st(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              tt(c2);
              sC(c2);
            }
          } else if (b2 | 0) {
            mf(b2);
            sC(b2);
          }
          return;
        }
        function tt(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function ut(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function vt(a2) {
          a2 = a2 | 0;
          wt(a2, 4920);
          xt(a2) | 0;
          yt(a2) | 0;
          return;
        }
        function wt(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = nn() | 0;
          c[a2 >> 2] = d2;
          Yt(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function xt(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, Mt() | 0);
          return a2 | 0;
        }
        function yt(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, zt() | 0);
          return a2 | 0;
        }
        function zt() {
          var b2 = 0;
          if (!(a[7888] | 0)) {
            Bt(10328);
            Ha(53, 10328, o | 0) | 0;
            b2 = 7888;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(10328) | 0))
            Bt(10328);
          return 10328;
        }
        function At(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          fi(a2, 0, b2, 0, 0, 0);
          return;
        }
        function Bt(a2) {
          a2 = a2 | 0;
          Et(a2);
          Gt(a2, 10);
          return;
        }
        function Ct(a2) {
          a2 = a2 | 0;
          Dt(a2 + 24 | 0);
          return;
        }
        function Dt(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Et(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 1, b2, Jt() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Ft(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          Ht(a2, b2, c2);
          return;
        }
        function Gt(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 + 20 >> 2] = b2;
          return;
        }
        function Ht(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = +d2;
          var e2 = 0, f2 = 0, g2 = 0, i3 = 0, j2 = 0;
          e2 = l;
          l = l + 16 | 0;
          g2 = e2 + 8 | 0;
          j2 = e2 + 13 | 0;
          f2 = e2;
          i3 = e2 + 12 | 0;
          tj(j2, b2);
          c[g2 >> 2] = uj(j2, b2) | 0;
          rj(i3, d2);
          h[f2 >> 3] = +sj(i3, d2);
          It(a2, g2, f2);
          l = e2;
          return;
        }
        function It(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          mg(b2 + 8 | 0, c[d2 >> 2] | 0, +h[e2 >> 3]);
          a[b2 + 24 >> 0] = 1;
          return;
        }
        function Jt() {
          return 1404;
        }
        function Kt(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          return Lt(a2, b2) | 0;
        }
        function Lt(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          e2 = l;
          l = l + 16 | 0;
          g2 = e2 + 4 | 0;
          h2 = e2 + 8 | 0;
          i3 = e2;
          f2 = jy(8) | 0;
          d2 = f2;
          j2 = qC(16) | 0;
          tj(g2, a2);
          a2 = uj(g2, a2) | 0;
          rj(h2, b2);
          mg(j2, a2, +sj(h2, b2));
          h2 = d2 + 4 | 0;
          c[h2 >> 2] = j2;
          a2 = qC(8) | 0;
          h2 = c[h2 >> 2] | 0;
          c[i3 >> 2] = 0;
          c[g2 >> 2] = c[i3 >> 2];
          qn(a2, h2, g2);
          c[f2 >> 2] = a2;
          l = e2;
          return d2 | 0;
        }
        function Mt() {
          var b2 = 0;
          if (!(a[7896] | 0)) {
            Nt(10364);
            Ha(54, 10364, o | 0) | 0;
            b2 = 7896;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(10364) | 0))
            Nt(10364);
          return 10364;
        }
        function Nt(a2) {
          a2 = a2 | 0;
          Qt(a2);
          Gt(a2, 55);
          return;
        }
        function Ot(a2) {
          a2 = a2 | 0;
          Pt(a2 + 24 | 0);
          return;
        }
        function Pt(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Qt(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 4, b2, Vt() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Rt(a2) {
          a2 = a2 | 0;
          St(a2);
          return;
        }
        function St(a2) {
          a2 = a2 | 0;
          Tt(a2);
          return;
        }
        function Tt(b2) {
          b2 = b2 | 0;
          Ut(b2 + 8 | 0);
          a[b2 + 24 >> 0] = 1;
          return;
        }
        function Ut(a2) {
          a2 = a2 | 0;
          c[a2 >> 2] = 0;
          h[a2 + 8 >> 3] = 0;
          return;
        }
        function Vt() {
          return 1424;
        }
        function Wt() {
          return Xt() | 0;
        }
        function Xt() {
          var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          b2 = l;
          l = l + 16 | 0;
          f2 = b2 + 4 | 0;
          h2 = b2;
          d2 = jy(8) | 0;
          a2 = d2;
          e2 = qC(16) | 0;
          Ut(e2);
          g2 = a2 + 4 | 0;
          c[g2 >> 2] = e2;
          e2 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[h2 >> 2] = 0;
          c[f2 >> 2] = c[h2 >> 2];
          qn(e2, g2, f2);
          c[d2 >> 2] = e2;
          l = b2;
          return a2 | 0;
        }
        function Yt(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = Zt() | 0;
          c[a2 + 4 >> 2] = _t() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = $t() | 0;
          c[a2 + 32 >> 2] = 5;
          return;
        }
        function Zt() {
          return 11710;
        }
        function _t() {
          return 1416;
        }
        function $t() {
          return cu() | 0;
        }
        function au(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              bu(c2);
              sC(c2);
            }
          } else if (b2 | 0)
            sC(b2);
          return;
        }
        function bu(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function cu() {
          var b2 = 0;
          if (!(a[7904] | 0)) {
            c[2600] = du() | 0;
            c[2601] = 0;
            b2 = 7904;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10400;
        }
        function du() {
          return c[357] | 0;
        }
        function eu(a2) {
          a2 = a2 | 0;
          fu(a2, 4926);
          gu(a2) | 0;
          return;
        }
        function fu(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = Ci() | 0;
          c[a2 >> 2] = d2;
          su(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function gu(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, hu() | 0);
          return a2 | 0;
        }
        function hu() {
          var b2 = 0;
          if (!(a[7912] | 0)) {
            iu(10412);
            Ha(56, 10412, o | 0) | 0;
            b2 = 7912;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(10412) | 0))
            iu(10412);
          return 10412;
        }
        function iu(a2) {
          a2 = a2 | 0;
          lu(a2);
          Gt(a2, 57);
          return;
        }
        function ju(a2) {
          a2 = a2 | 0;
          ku(a2 + 24 | 0);
          return;
        }
        function ku(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function lu(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 5, b2, pu() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function mu(a2) {
          a2 = a2 | 0;
          nu(a2);
          return;
        }
        function nu(a2) {
          a2 = a2 | 0;
          ou(a2);
          return;
        }
        function ou(b2) {
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = b2 + 8 | 0;
          e2 = d2 + 48 | 0;
          do {
            c[d2 >> 2] = 0;
            d2 = d2 + 4 | 0;
          } while ((d2 | 0) < (e2 | 0));
          a[b2 + 56 >> 0] = 1;
          return;
        }
        function pu() {
          return 1432;
        }
        function qu() {
          return ru() | 0;
        }
        function ru() {
          var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          h2 = l;
          l = l + 16 | 0;
          a2 = h2 + 4 | 0;
          b2 = h2;
          d2 = jy(8) | 0;
          e2 = d2;
          f2 = qC(48) | 0;
          g2 = f2;
          i3 = g2 + 48 | 0;
          do {
            c[g2 >> 2] = 0;
            g2 = g2 + 4 | 0;
          } while ((g2 | 0) < (i3 | 0));
          g2 = e2 + 4 | 0;
          c[g2 >> 2] = f2;
          i3 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[b2 >> 2] = 0;
          c[a2 >> 2] = c[b2 >> 2];
          Ji(i3, g2, a2);
          c[d2 >> 2] = i3;
          l = h2;
          return e2 | 0;
        }
        function su(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = tu() | 0;
          c[a2 + 4 >> 2] = uu() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = vu() | 0;
          c[a2 + 32 >> 2] = 6;
          return;
        }
        function tu() {
          return 11704;
        }
        function uu() {
          return 1436;
        }
        function vu() {
          return cu() | 0;
        }
        function wu(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              xu(c2);
              sC(c2);
            }
          } else if (b2 | 0)
            sC(b2);
          return;
        }
        function xu(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function yu(a2) {
          a2 = a2 | 0;
          zu(a2, 4933);
          Au(a2) | 0;
          Bu(a2) | 0;
          return;
        }
        function zu(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = cv() | 0;
          c[a2 >> 2] = d2;
          dv(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function Au(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, Su() | 0);
          return a2 | 0;
        }
        function Bu(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, Cu() | 0);
          return a2 | 0;
        }
        function Cu() {
          var b2 = 0;
          if (!(a[7920] | 0)) {
            Du(10452);
            Ha(58, 10452, o | 0) | 0;
            b2 = 7920;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(10452) | 0))
            Du(10452);
          return 10452;
        }
        function Du(a2) {
          a2 = a2 | 0;
          Gu(a2);
          Gt(a2, 1);
          return;
        }
        function Eu(a2) {
          a2 = a2 | 0;
          Fu(a2 + 24 | 0);
          return;
        }
        function Fu(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Gu(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 1, b2, Lu() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Hu(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          Iu(a2, b2, c2);
          return;
        }
        function Iu(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, i3 = 0;
          d2 = l;
          l = l + 32 | 0;
          f2 = d2 + 8 | 0;
          i3 = d2 + 17 | 0;
          e2 = d2;
          g2 = d2 + 16 | 0;
          rj(i3, b2);
          h[f2 >> 3] = +sj(i3, b2);
          rj(g2, c2);
          h[e2 >> 3] = +sj(g2, c2);
          Ju(a2, f2, e2);
          l = d2;
          return;
        }
        function Ju(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          Ku(b2 + 8 | 0, +h[c2 >> 3], +h[d2 >> 3]);
          a[b2 + 24 >> 0] = 1;
          return;
        }
        function Ku(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          h[a2 >> 3] = b2;
          h[a2 + 8 >> 3] = c2;
          return;
        }
        function Lu() {
          return 1472;
        }
        function Mu(a2, b2) {
          a2 = +a2;
          b2 = +b2;
          return Nu(a2, b2) | 0;
        }
        function Nu(a2, b2) {
          a2 = +a2;
          b2 = +b2;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          e2 = l;
          l = l + 16 | 0;
          h2 = e2 + 4 | 0;
          i3 = e2 + 8 | 0;
          j2 = e2;
          f2 = jy(8) | 0;
          d2 = f2;
          g2 = qC(16) | 0;
          rj(h2, a2);
          a2 = +sj(h2, a2);
          rj(i3, b2);
          Ku(g2, a2, +sj(i3, b2));
          i3 = d2 + 4 | 0;
          c[i3 >> 2] = g2;
          g2 = qC(8) | 0;
          i3 = c[i3 >> 2] | 0;
          c[j2 >> 2] = 0;
          c[h2 >> 2] = c[j2 >> 2];
          Ou(g2, i3, h2);
          c[f2 >> 2] = g2;
          l = e2;
          return d2 | 0;
        }
        function Ou(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          d2 = qC(16) | 0;
          c[d2 + 4 >> 2] = 0;
          c[d2 + 8 >> 2] = 0;
          c[d2 >> 2] = 1452;
          c[d2 + 12 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Pu(a2) {
          a2 = a2 | 0;
          kC(a2);
          sC(a2);
          return;
        }
        function Qu(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 12 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Ru(a2) {
          a2 = a2 | 0;
          sC(a2);
          return;
        }
        function Su() {
          var b2 = 0;
          if (!(a[7928] | 0)) {
            Tu(10488);
            Ha(59, 10488, o | 0) | 0;
            b2 = 7928;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(10488) | 0))
            Tu(10488);
          return 10488;
        }
        function Tu(a2) {
          a2 = a2 | 0;
          Wu(a2);
          Gt(a2, 60);
          return;
        }
        function Uu(a2) {
          a2 = a2 | 0;
          Vu(a2 + 24 | 0);
          return;
        }
        function Vu(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Wu(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 6, b2, $u() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Xu(a2) {
          a2 = a2 | 0;
          Yu(a2);
          return;
        }
        function Yu(a2) {
          a2 = a2 | 0;
          Zu(a2);
          return;
        }
        function Zu(b2) {
          b2 = b2 | 0;
          _u(b2 + 8 | 0);
          a[b2 + 24 >> 0] = 1;
          return;
        }
        function _u(a2) {
          a2 = a2 | 0;
          c[a2 >> 2] = 0;
          c[a2 + 4 >> 2] = 0;
          c[a2 + 8 >> 2] = 0;
          c[a2 + 12 >> 2] = 0;
          return;
        }
        function $u() {
          return 1492;
        }
        function av() {
          return bv() | 0;
        }
        function bv() {
          var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          b2 = l;
          l = l + 16 | 0;
          f2 = b2 + 4 | 0;
          h2 = b2;
          d2 = jy(8) | 0;
          a2 = d2;
          e2 = qC(16) | 0;
          _u(e2);
          g2 = a2 + 4 | 0;
          c[g2 >> 2] = e2;
          e2 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[h2 >> 2] = 0;
          c[f2 >> 2] = c[h2 >> 2];
          Ou(e2, g2, f2);
          c[d2 >> 2] = e2;
          l = b2;
          return a2 | 0;
        }
        function cv() {
          var b2 = 0;
          if (!(a[7936] | 0)) {
            jv(10524);
            Ha(25, 10524, o | 0) | 0;
            b2 = 7936;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10524;
        }
        function dv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = ev() | 0;
          c[a2 + 4 >> 2] = fv() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = gv() | 0;
          c[a2 + 32 >> 2] = 7;
          return;
        }
        function ev() {
          return 11700;
        }
        function fv() {
          return 1484;
        }
        function gv() {
          return cu() | 0;
        }
        function hv(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              iv(c2);
              sC(c2);
            }
          } else if (b2 | 0)
            sC(b2);
          return;
        }
        function iv(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function jv(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function kv(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          a2 = ai(b2) | 0;
          b2 = lv(c2) | 0;
          c2 = mv(c2, 0) | 0;
          Zv(a2, b2, c2, nv() | 0, 0);
          return;
        }
        function lv(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function mv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = nv() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            vv(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            wv(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function nv() {
          var b2 = 0, d2 = 0;
          if (!(a[7944] | 0)) {
            ov(10568);
            Ha(61, 10568, o | 0) | 0;
            d2 = 7944;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10568) | 0)) {
            b2 = 10568;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            ov(10568);
          }
          return 10568;
        }
        function ov(a2) {
          a2 = a2 | 0;
          rv(a2);
          return;
        }
        function pv(a2) {
          a2 = a2 | 0;
          qv(a2 + 24 | 0);
          return;
        }
        function qv(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function rv(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 17, b2, ql() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function sv(a2) {
          a2 = a2 | 0;
          return uv(c[(tv(a2) | 0) >> 2] | 0) | 0;
        }
        function tv(a2) {
          a2 = a2 | 0;
          return (c[(nv() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function uv(a2) {
          a2 = a2 | 0;
          return ul(Ab[a2 & 7]() | 0) | 0;
        }
        function vv(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function wv(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = xv(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            yv(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            vv(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            zv(a2, f2);
            Av(f2);
            l = i3;
            return;
          }
        }
        function xv(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function yv(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function zv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Av(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Bv() {
          Cv();
          return;
        }
        function Cv() {
          Dv(10604);
          return;
        }
        function Dv(a2) {
          a2 = a2 | 0;
          Ev(a2, 4955);
          return;
        }
        function Ev(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = Fv() | 0;
          c[a2 >> 2] = d2;
          Gv(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function Fv() {
          var b2 = 0;
          if (!(a[7952] | 0)) {
            Rv(10612);
            Ha(25, 10612, o | 0) | 0;
            b2 = 7952;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10612;
        }
        function Gv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = Mv() | 0;
          c[a2 + 4 >> 2] = Nv() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = Ov() | 0;
          c[a2 + 32 >> 2] = 8;
          return;
        }
        function Hv(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          b2 = l;
          l = l + 16 | 0;
          d2 = b2;
          Iv() | 0;
          c[d2 >> 2] = a2;
          Jv(10608, d2);
          l = b2;
          return;
        }
        function Iv() {
          if (!(a[11714] | 0)) {
            c[2652] = 0;
            Ha(62, 10608, o | 0) | 0;
            a[11714] = 1;
          }
          return 10608;
        }
        function Jv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = qC(8) | 0;
          c[d2 + 4 >> 2] = c[b2 >> 2];
          c[d2 >> 2] = c[a2 >> 2];
          c[a2 >> 2] = d2;
          return;
        }
        function Kv(a2) {
          a2 = a2 | 0;
          Lv(a2);
          return;
        }
        function Lv(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          b2 = c[a2 >> 2] | 0;
          if (b2 | 0)
            do {
              d2 = b2;
              b2 = c[b2 >> 2] | 0;
              sC(d2);
            } while ((b2 | 0) != 0);
          c[a2 >> 2] = 0;
          return;
        }
        function Mv() {
          return 11715;
        }
        function Nv() {
          return 1496;
        }
        function Ov() {
          return lr() | 0;
        }
        function Pv(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              Qv(c2);
              sC(c2);
            }
          } else if (b2 | 0)
            sC(b2);
          return;
        }
        function Qv(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function Rv(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function Sv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          Iv() | 0;
          d2 = c[2652] | 0;
          a:
            do
              if (d2 | 0) {
                while (1) {
                  e2 = c[d2 + 4 >> 2] | 0;
                  if (e2 | 0 ? (AB(Tv(e2) | 0, a2) | 0) == 0 : 0)
                    break;
                  d2 = c[d2 >> 2] | 0;
                  if (!d2)
                    break a;
                }
                Uv(e2, b2);
              }
            while (0);
          return;
        }
        function Tv(a2) {
          a2 = a2 | 0;
          return c[a2 + 12 >> 2] | 0;
        }
        function Uv(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          a2 = a2 + 36 | 0;
          d2 = c[a2 >> 2] | 0;
          if (d2 | 0) {
            vf(d2);
            sC(d2);
          }
          d2 = qC(4) | 0;
          Og(d2, b2);
          c[a2 >> 2] = d2;
          return;
        }
        function Vv() {
          if (!(a[11716] | 0)) {
            c[2664] = 0;
            Ha(63, 10656, o | 0) | 0;
            a[11716] = 1;
          }
          return 10656;
        }
        function Wv() {
          var b2 = 0;
          if (!(a[11717] | 0)) {
            Xv();
            c[2665] = 1504;
            a[11717] = 1;
            b2 = 1504;
          } else
            b2 = c[2665] | 0;
          return b2 | 0;
        }
        function Xv() {
          if (!(a[11740] | 0)) {
            a[11718] = ji(ji(8, 0) | 0, 0) | 0;
            a[11719] = ji(ji(0, 0) | 0, 0) | 0;
            a[11720] = ji(ji(0, 16) | 0, 0) | 0;
            a[11721] = ji(ji(8, 0) | 0, 0) | 0;
            a[11722] = ji(ji(0, 0) | 0, 0) | 0;
            a[11723] = ji(ji(8, 0) | 0, 0) | 0;
            a[11724] = ji(ji(0, 0) | 0, 0) | 0;
            a[11725] = ji(ji(8, 0) | 0, 0) | 0;
            a[11726] = ji(ji(0, 0) | 0, 0) | 0;
            a[11727] = ji(ji(8, 0) | 0, 0) | 0;
            a[11728] = ji(ji(0, 0) | 0, 0) | 0;
            a[11729] = ji(ji(0, 0) | 0, 32) | 0;
            a[11730] = ji(ji(0, 0) | 0, 32) | 0;
            a[11740] = 1;
          }
          return;
        }
        function Yv() {
          return 1572;
        }
        function Zv(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          g2 = l;
          l = l + 32 | 0;
          m2 = g2 + 16 | 0;
          k2 = g2 + 12 | 0;
          j2 = g2 + 8 | 0;
          i3 = g2 + 4 | 0;
          h2 = g2;
          c[m2 >> 2] = a2;
          c[k2 >> 2] = b2;
          c[j2 >> 2] = d2;
          c[i3 >> 2] = e2;
          c[h2 >> 2] = f2;
          Vv() | 0;
          _v(10656, m2, k2, j2, i3, h2);
          l = g2;
          return;
        }
        function _v(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h2 = 0;
          h2 = qC(24) | 0;
          ii(h2 + 4 | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0, c[e2 >> 2] | 0, c[f2 >> 2] | 0, c[g2 >> 2] | 0);
          c[h2 >> 2] = c[a2 >> 2];
          c[a2 >> 2] = h2;
          return;
        }
        function $v(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0;
          u2 = l;
          l = l + 32 | 0;
          q2 = u2 + 20 | 0;
          r2 = u2 + 8 | 0;
          s2 = u2 + 4 | 0;
          t2 = u2;
          b2 = c[b2 >> 2] | 0;
          if (b2 | 0) {
            p2 = q2 + 4 | 0;
            j2 = q2 + 8 | 0;
            k2 = r2 + 4 | 0;
            m2 = r2 + 8 | 0;
            n2 = r2 + 8 | 0;
            o2 = q2 + 8 | 0;
            do {
              h2 = b2 + 4 | 0;
              i3 = aw(h2) | 0;
              if (i3 | 0) {
                f2 = bw(i3) | 0;
                c[q2 >> 2] = 0;
                c[p2 >> 2] = 0;
                c[j2 >> 2] = 0;
                e2 = (cw(i3) | 0) + 1 | 0;
                dw(q2, e2);
                if (e2 | 0)
                  while (1) {
                    e2 = e2 + -1 | 0;
                    OA(r2, c[f2 >> 2] | 0);
                    g2 = c[p2 >> 2] | 0;
                    if (g2 >>> 0 < (c[o2 >> 2] | 0) >>> 0) {
                      c[g2 >> 2] = c[r2 >> 2];
                      c[p2 >> 2] = (c[p2 >> 2] | 0) + 4;
                    } else
                      ew(q2, r2);
                    if (!e2)
                      break;
                    else
                      f2 = f2 + 4 | 0;
                  }
                e2 = fw(i3) | 0;
                c[r2 >> 2] = 0;
                c[k2 >> 2] = 0;
                c[m2 >> 2] = 0;
                a:
                  do
                    if (c[e2 >> 2] | 0) {
                      f2 = 0;
                      g2 = 0;
                      while (1) {
                        if ((f2 | 0) == (g2 | 0))
                          gw(r2, e2);
                        else {
                          c[f2 >> 2] = c[e2 >> 2];
                          c[k2 >> 2] = (c[k2 >> 2] | 0) + 4;
                        }
                        e2 = e2 + 4 | 0;
                        if (!(c[e2 >> 2] | 0))
                          break a;
                        f2 = c[k2 >> 2] | 0;
                        g2 = c[n2 >> 2] | 0;
                      }
                    }
                  while (0);
                c[s2 >> 2] = hw(h2) | 0;
                c[t2 >> 2] = si(i3) | 0;
                iw(d2, a2, s2, t2, q2, r2);
                jw(r2);
                kw(q2);
              }
              b2 = c[b2 >> 2] | 0;
            } while ((b2 | 0) != 0);
          }
          l = u2;
          return;
        }
        function aw(a2) {
          a2 = a2 | 0;
          return c[a2 + 12 >> 2] | 0;
        }
        function bw(a2) {
          a2 = a2 | 0;
          return c[a2 + 12 >> 2] | 0;
        }
        function cw(a2) {
          a2 = a2 | 0;
          return c[a2 + 16 >> 2] | 0;
        }
        function dw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = l;
          l = l + 32 | 0;
          d2 = f2;
          e2 = c[a2 >> 2] | 0;
          if ((c[a2 + 8 >> 2] | 0) - e2 >> 2 >>> 0 < b2 >>> 0) {
            Rw(d2, b2, (c[a2 + 4 >> 2] | 0) - e2 >> 2, a2 + 8 | 0);
            Sw(a2, d2);
            Tw(d2);
          }
          l = f2;
          return;
        }
        function ew(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0;
          h2 = l;
          l = l + 32 | 0;
          d2 = h2;
          e2 = a2 + 4 | 0;
          f2 = ((c[e2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 2) + 1 | 0;
          g2 = Nw(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            i3 = c[a2 >> 2] | 0;
            k2 = (c[a2 + 8 >> 2] | 0) - i3 | 0;
            j2 = k2 >> 1;
            Rw(d2, k2 >> 2 >>> 0 < g2 >>> 1 >>> 0 ? j2 >>> 0 < f2 >>> 0 ? f2 : j2 : g2, (c[e2 >> 2] | 0) - i3 >> 2, a2 + 8 | 0);
            g2 = d2 + 8 | 0;
            c[c[g2 >> 2] >> 2] = c[b2 >> 2];
            c[g2 >> 2] = (c[g2 >> 2] | 0) + 4;
            Sw(a2, d2);
            Tw(d2);
            l = h2;
            return;
          }
        }
        function fw(a2) {
          a2 = a2 | 0;
          return c[a2 + 8 >> 2] | 0;
        }
        function gw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0;
          h2 = l;
          l = l + 32 | 0;
          d2 = h2;
          e2 = a2 + 4 | 0;
          f2 = ((c[e2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 2) + 1 | 0;
          g2 = Kw(a2) | 0;
          if (g2 >>> 0 < f2 >>> 0)
            jC(a2);
          else {
            i3 = c[a2 >> 2] | 0;
            k2 = (c[a2 + 8 >> 2] | 0) - i3 | 0;
            j2 = k2 >> 1;
            Ow(d2, k2 >> 2 >>> 0 < g2 >>> 1 >>> 0 ? j2 >>> 0 < f2 >>> 0 ? f2 : j2 : g2, (c[e2 >> 2] | 0) - i3 >> 2, a2 + 8 | 0);
            g2 = d2 + 8 | 0;
            c[c[g2 >> 2] >> 2] = c[b2 >> 2];
            c[g2 >> 2] = (c[g2 >> 2] | 0) + 4;
            Pw(a2, d2);
            Qw(d2);
            l = h2;
            return;
          }
        }
        function hw(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function iw(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          lw(a2, b2, c2, d2, e2, f2);
          return;
        }
        function jw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
            sC(d2);
          }
          return;
        }
        function kw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -4 - e2 | 0) >>> 2) << 2);
            sC(d2);
          }
          return;
        }
        function lw(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          h2 = l;
          l = l + 48 | 0;
          m2 = h2 + 40 | 0;
          i3 = h2 + 32 | 0;
          n2 = h2 + 24 | 0;
          j2 = h2 + 12 | 0;
          k2 = h2;
          UA(i3);
          a2 = Sg(a2) | 0;
          c[n2 >> 2] = c[b2 >> 2];
          d2 = c[d2 >> 2] | 0;
          e2 = c[e2 >> 2] | 0;
          mw(j2, f2);
          nw(k2, g2);
          c[m2 >> 2] = c[n2 >> 2];
          ow(a2, m2, d2, e2, j2, k2);
          jw(k2);
          kw(j2);
          WA(i3);
          l = h2;
          return;
        }
        function mw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          c[a2 >> 2] = 0;
          c[a2 + 4 >> 2] = 0;
          c[a2 + 8 >> 2] = 0;
          d2 = b2 + 4 | 0;
          e2 = (c[d2 >> 2] | 0) - (c[b2 >> 2] | 0) >> 2;
          if (e2 | 0) {
            Lw(a2, e2);
            Mw(a2, c[b2 >> 2] | 0, c[d2 >> 2] | 0, e2);
          }
          return;
        }
        function nw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          c[a2 >> 2] = 0;
          c[a2 + 4 >> 2] = 0;
          c[a2 + 8 >> 2] = 0;
          d2 = b2 + 4 | 0;
          e2 = (c[d2 >> 2] | 0) - (c[b2 >> 2] | 0) >> 2;
          if (e2 | 0) {
            Iw(a2, e2);
            Jw(a2, c[b2 >> 2] | 0, c[d2 >> 2] | 0, e2);
          }
          return;
        }
        function ow(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0;
          h2 = l;
          l = l + 32 | 0;
          m2 = h2 + 28 | 0;
          n2 = h2 + 24 | 0;
          i3 = h2 + 12 | 0;
          j2 = h2;
          k2 = Vg(pw() | 0) | 0;
          c[n2 >> 2] = c[b2 >> 2];
          c[m2 >> 2] = c[n2 >> 2];
          b2 = qw(m2) | 0;
          d2 = rw(d2) | 0;
          e2 = sw(e2) | 0;
          c[i3 >> 2] = c[f2 >> 2];
          m2 = f2 + 4 | 0;
          c[i3 + 4 >> 2] = c[m2 >> 2];
          n2 = f2 + 8 | 0;
          c[i3 + 8 >> 2] = c[n2 >> 2];
          c[n2 >> 2] = 0;
          c[m2 >> 2] = 0;
          c[f2 >> 2] = 0;
          f2 = tw(i3) | 0;
          c[j2 >> 2] = c[g2 >> 2];
          m2 = g2 + 4 | 0;
          c[j2 + 4 >> 2] = c[m2 >> 2];
          n2 = g2 + 8 | 0;
          c[j2 + 8 >> 2] = c[n2 >> 2];
          c[n2 >> 2] = 0;
          c[m2 >> 2] = 0;
          c[g2 >> 2] = 0;
          Ba(0, k2 | 0, a2 | 0, b2 | 0, d2 | 0, e2 | 0, f2 | 0, uw(j2) | 0) | 0;
          jw(j2);
          kw(i3);
          l = h2;
          return;
        }
        function pw() {
          var b2 = 0;
          if (!(a[7968] | 0)) {
            Gw(10708);
            b2 = 7968;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10708;
        }
        function qw(a2) {
          a2 = a2 | 0;
          return yw(a2) | 0;
        }
        function rw(a2) {
          a2 = a2 | 0;
          return ww(a2) | 0;
        }
        function sw(a2) {
          a2 = a2 | 0;
          return ul(a2) | 0;
        }
        function tw(a2) {
          a2 = a2 | 0;
          return xw(a2) | 0;
        }
        function uw(a2) {
          a2 = a2 | 0;
          return vw(a2) | 0;
        }
        function vw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          e2 = (c[a2 + 4 >> 2] | 0) - (c[a2 >> 2] | 0) | 0;
          d2 = e2 >> 2;
          e2 = jy(e2 + 4 | 0) | 0;
          c[e2 >> 2] = d2;
          if (d2 | 0) {
            b2 = 0;
            do {
              c[e2 + 4 + (b2 << 2) >> 2] = ww(c[(c[a2 >> 2] | 0) + (b2 << 2) >> 2] | 0) | 0;
              b2 = b2 + 1 | 0;
            } while ((b2 | 0) != (d2 | 0));
          }
          return e2 | 0;
        }
        function ww(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function xw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          e2 = (c[a2 + 4 >> 2] | 0) - (c[a2 >> 2] | 0) | 0;
          d2 = e2 >> 2;
          e2 = jy(e2 + 4 | 0) | 0;
          c[e2 >> 2] = d2;
          if (d2 | 0) {
            b2 = 0;
            do {
              c[e2 + 4 + (b2 << 2) >> 2] = yw((c[a2 >> 2] | 0) + (b2 << 2) | 0) | 0;
              b2 = b2 + 1 | 0;
            } while ((b2 | 0) != (d2 | 0));
          }
          return e2 | 0;
        }
        function yw(a2) {
          a2 = a2 | 0;
          var b2 = 0, c2 = 0, d2 = 0, e2 = 0;
          e2 = l;
          l = l + 32 | 0;
          b2 = e2 + 12 | 0;
          c2 = e2;
          d2 = Di(zw() | 0) | 0;
          if (!d2)
            a2 = Aw(a2) | 0;
          else {
            Ei(b2, d2);
            Fi(c2, b2);
            RA(a2, c2);
            a2 = Hi(b2) | 0;
          }
          l = e2;
          return a2 | 0;
        }
        function zw() {
          var b2 = 0;
          if (!(a[7960] | 0)) {
            Fw(10664);
            Ha(25, 10664, o | 0) | 0;
            b2 = 7960;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10664;
        }
        function Aw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          d2 = l;
          l = l + 16 | 0;
          f2 = d2 + 4 | 0;
          h2 = d2;
          e2 = jy(8) | 0;
          b2 = e2;
          i3 = qC(4) | 0;
          c[i3 >> 2] = c[a2 >> 2];
          g2 = b2 + 4 | 0;
          c[g2 >> 2] = i3;
          a2 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[h2 >> 2] = 0;
          c[f2 >> 2] = c[h2 >> 2];
          Bw(a2, g2, f2);
          c[e2 >> 2] = a2;
          l = d2;
          return b2 | 0;
        }
        function Bw(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          d2 = qC(16) | 0;
          c[d2 + 4 >> 2] = 0;
          c[d2 + 8 >> 2] = 0;
          c[d2 >> 2] = 1656;
          c[d2 + 12 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Cw(a2) {
          a2 = a2 | 0;
          kC(a2);
          sC(a2);
          return;
        }
        function Dw(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 12 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Ew(a2) {
          a2 = a2 | 0;
          sC(a2);
          return;
        }
        function Fw(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function Gw(a2) {
          a2 = a2 | 0;
          fh(a2, Hw() | 0, 5);
          return;
        }
        function Hw() {
          return 1676;
        }
        function Iw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          if ((Kw(a2) | 0) >>> 0 < b2 >>> 0)
            jC(a2);
          if (b2 >>> 0 > 1073741823)
            Ta();
          else {
            d2 = qC(b2 << 2) | 0;
            c[a2 + 4 >> 2] = d2;
            c[a2 >> 2] = d2;
            c[a2 + 8 >> 2] = d2 + (b2 << 2);
            return;
          }
        }
        function Jw(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          e2 = a2 + 4 | 0;
          a2 = d2 - b2 | 0;
          if ((a2 | 0) > 0) {
            BC(c[e2 >> 2] | 0, b2 | 0, a2 | 0) | 0;
            c[e2 >> 2] = (c[e2 >> 2] | 0) + (a2 >>> 2 << 2);
          }
          return;
        }
        function Kw(a2) {
          a2 = a2 | 0;
          return 1073741823;
        }
        function Lw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          if ((Nw(a2) | 0) >>> 0 < b2 >>> 0)
            jC(a2);
          if (b2 >>> 0 > 1073741823)
            Ta();
          else {
            d2 = qC(b2 << 2) | 0;
            c[a2 + 4 >> 2] = d2;
            c[a2 >> 2] = d2;
            c[a2 + 8 >> 2] = d2 + (b2 << 2);
            return;
          }
        }
        function Mw(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          e2 = a2 + 4 | 0;
          a2 = d2 - b2 | 0;
          if ((a2 | 0) > 0) {
            BC(c[e2 >> 2] | 0, b2 | 0, a2 | 0) | 0;
            c[e2 >> 2] = (c[e2 >> 2] | 0) + (a2 >>> 2 << 2);
          }
          return;
        }
        function Nw(a2) {
          a2 = a2 | 0;
          return 1073741823;
        }
        function Ow(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 1073741823)
                Ta();
              else {
                f2 = qC(b2 << 2) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 2) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 2);
          return;
        }
        function Pw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 2) << 2) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Qw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -4 - b2 | 0) >>> 2) << 2);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Rw(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 1073741823)
                Ta();
              else {
                f2 = qC(b2 << 2) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 2) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 2);
          return;
        }
        function Sw(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 2) << 2) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Tw(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -4 - b2 | 0) >>> 2) << 2);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Uw(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0;
          r2 = l;
          l = l + 32 | 0;
          m2 = r2 + 20 | 0;
          n2 = r2 + 12 | 0;
          k2 = r2 + 16 | 0;
          o2 = r2 + 4 | 0;
          p2 = r2;
          q2 = r2 + 8 | 0;
          i3 = Wv() | 0;
          g2 = c[i3 >> 2] | 0;
          h2 = c[g2 >> 2] | 0;
          if (h2 | 0) {
            j2 = c[i3 + 8 >> 2] | 0;
            i3 = c[i3 + 4 >> 2] | 0;
            while (1) {
              OA(m2, h2);
              Vw(a2, m2, i3, j2);
              g2 = g2 + 4 | 0;
              h2 = c[g2 >> 2] | 0;
              if (!h2)
                break;
              else {
                j2 = j2 + 1 | 0;
                i3 = i3 + 1 | 0;
              }
            }
          }
          g2 = Yv() | 0;
          h2 = c[g2 >> 2] | 0;
          if (h2 | 0)
            do {
              OA(m2, h2);
              c[n2 >> 2] = c[g2 + 4 >> 2];
              Ww(b2, m2, n2);
              g2 = g2 + 8 | 0;
              h2 = c[g2 >> 2] | 0;
            } while ((h2 | 0) != 0);
          g2 = c[(Iv() | 0) >> 2] | 0;
          if (g2 | 0)
            do {
              b2 = c[g2 + 4 >> 2] | 0;
              OA(m2, c[(Xw(b2) | 0) >> 2] | 0);
              c[n2 >> 2] = Tv(b2) | 0;
              Yw(d2, m2, n2);
              g2 = c[g2 >> 2] | 0;
            } while ((g2 | 0) != 0);
          OA(k2, 0);
          g2 = Vv() | 0;
          c[m2 >> 2] = c[k2 >> 2];
          $v(m2, g2, f2);
          g2 = c[(Iv() | 0) >> 2] | 0;
          if (g2 | 0) {
            a2 = m2 + 4 | 0;
            b2 = m2 + 8 | 0;
            d2 = m2 + 8 | 0;
            do {
              j2 = c[g2 + 4 >> 2] | 0;
              OA(n2, c[(Xw(j2) | 0) >> 2] | 0);
              _w(o2, Zw(j2) | 0);
              h2 = c[o2 >> 2] | 0;
              if (h2 | 0) {
                c[m2 >> 2] = 0;
                c[a2 >> 2] = 0;
                c[b2 >> 2] = 0;
                do {
                  OA(p2, c[(Xw(c[h2 + 4 >> 2] | 0) | 0) >> 2] | 0);
                  i3 = c[a2 >> 2] | 0;
                  if (i3 >>> 0 < (c[d2 >> 2] | 0) >>> 0) {
                    c[i3 >> 2] = c[p2 >> 2];
                    c[a2 >> 2] = (c[a2 >> 2] | 0) + 4;
                  } else
                    ew(m2, p2);
                  h2 = c[h2 >> 2] | 0;
                } while ((h2 | 0) != 0);
                $w(e2, n2, m2);
                kw(m2);
              }
              c[q2 >> 2] = c[n2 >> 2];
              k2 = ax(j2) | 0;
              c[m2 >> 2] = c[q2 >> 2];
              $v(m2, k2, f2);
              Wi(o2);
              g2 = c[g2 >> 2] | 0;
            } while ((g2 | 0) != 0);
          }
          l = r2;
          return;
        }
        function Vw(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          ox(a2, b2, c2, d2);
          return;
        }
        function Ww(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          nx(a2, b2, c2);
          return;
        }
        function Xw(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Yw(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          ix(a2, b2, c2);
          return;
        }
        function Zw(a2) {
          a2 = a2 | 0;
          return a2 + 16 | 0;
        }
        function _w(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2 + 8 | 0;
          d2 = g2;
          c[a2 >> 2] = 0;
          e2 = c[b2 >> 2] | 0;
          c[f2 >> 2] = e2;
          c[d2 >> 2] = a2;
          d2 = gx(d2) | 0;
          if (e2 | 0) {
            e2 = qC(12) | 0;
            h2 = (hx(f2) | 0) + 4 | 0;
            a2 = c[h2 + 4 >> 2] | 0;
            b2 = e2 + 4 | 0;
            c[b2 >> 2] = c[h2 >> 2];
            c[b2 + 4 >> 2] = a2;
            b2 = c[c[f2 >> 2] >> 2] | 0;
            c[f2 >> 2] = b2;
            if (!b2)
              a2 = e2;
            else {
              b2 = e2;
              while (1) {
                a2 = qC(12) | 0;
                j2 = (hx(f2) | 0) + 4 | 0;
                i3 = c[j2 + 4 >> 2] | 0;
                h2 = a2 + 4 | 0;
                c[h2 >> 2] = c[j2 >> 2];
                c[h2 + 4 >> 2] = i3;
                c[b2 >> 2] = a2;
                h2 = c[c[f2 >> 2] >> 2] | 0;
                c[f2 >> 2] = h2;
                if (!h2)
                  break;
                else
                  b2 = a2;
              }
            }
            c[a2 >> 2] = c[d2 >> 2];
            c[d2 >> 2] = e2;
          }
          l = g2;
          return;
        }
        function $w(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          bx(a2, b2, c2);
          return;
        }
        function ax(a2) {
          a2 = a2 | 0;
          return a2 + 24 | 0;
        }
        function bx(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 32 | 0;
          h2 = e2 + 24 | 0;
          f2 = e2 + 16 | 0;
          i3 = e2 + 12 | 0;
          g2 = e2;
          UA(f2);
          a2 = Sg(a2) | 0;
          c[i3 >> 2] = c[b2 >> 2];
          mw(g2, d2);
          c[h2 >> 2] = c[i3 >> 2];
          cx(a2, h2, g2);
          kw(g2);
          WA(f2);
          l = e2;
          return;
        }
        function cx(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          e2 = l;
          l = l + 32 | 0;
          h2 = e2 + 16 | 0;
          i3 = e2 + 12 | 0;
          f2 = e2;
          g2 = Vg(dx() | 0) | 0;
          c[i3 >> 2] = c[b2 >> 2];
          c[h2 >> 2] = c[i3 >> 2];
          b2 = qw(h2) | 0;
          c[f2 >> 2] = c[d2 >> 2];
          h2 = d2 + 4 | 0;
          c[f2 + 4 >> 2] = c[h2 >> 2];
          i3 = d2 + 8 | 0;
          c[f2 + 8 >> 2] = c[i3 >> 2];
          c[i3 >> 2] = 0;
          c[h2 >> 2] = 0;
          c[d2 >> 2] = 0;
          xa(0, g2 | 0, a2 | 0, b2 | 0, tw(f2) | 0) | 0;
          kw(f2);
          l = e2;
          return;
        }
        function dx() {
          var b2 = 0;
          if (!(a[7976] | 0)) {
            ex(10720);
            b2 = 7976;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10720;
        }
        function ex(a2) {
          a2 = a2 | 0;
          fh(a2, fx() | 0, 2);
          return;
        }
        function fx() {
          return 1732;
        }
        function gx(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function hx(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function ix(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 32 | 0;
          g2 = e2 + 16 | 0;
          f2 = e2 + 8 | 0;
          h2 = e2;
          UA(f2);
          a2 = Sg(a2) | 0;
          c[h2 >> 2] = c[b2 >> 2];
          d2 = c[d2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          jx(a2, g2, d2);
          WA(f2);
          l = e2;
          return;
        }
        function jx(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 16 | 0;
          g2 = e2 + 4 | 0;
          h2 = e2;
          f2 = Vg(kx() | 0) | 0;
          c[h2 >> 2] = c[b2 >> 2];
          c[g2 >> 2] = c[h2 >> 2];
          b2 = qw(g2) | 0;
          xa(0, f2 | 0, a2 | 0, b2 | 0, rw(d2) | 0) | 0;
          l = e2;
          return;
        }
        function kx() {
          var b2 = 0;
          if (!(a[7984] | 0)) {
            lx(10732);
            b2 = 7984;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10732;
        }
        function lx(a2) {
          a2 = a2 | 0;
          fh(a2, mx() | 0, 2);
          return;
        }
        function mx() {
          return 1744;
        }
        function nx(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = l;
          l = l + 32 | 0;
          g2 = e2 + 16 | 0;
          f2 = e2 + 8 | 0;
          h2 = e2;
          UA(f2);
          a2 = Sg(a2) | 0;
          c[h2 >> 2] = c[b2 >> 2];
          d2 = c[d2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          jx(a2, g2, d2);
          WA(f2);
          l = e2;
          return;
        }
        function ox(b2, d2, e2, f2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          g2 = l;
          l = l + 32 | 0;
          i3 = g2 + 16 | 0;
          h2 = g2 + 8 | 0;
          j2 = g2;
          UA(h2);
          b2 = Sg(b2) | 0;
          c[j2 >> 2] = c[d2 >> 2];
          e2 = a[e2 >> 0] | 0;
          f2 = a[f2 >> 0] | 0;
          c[i3 >> 2] = c[j2 >> 2];
          px(b2, i3, e2, f2);
          WA(h2);
          l = g2;
          return;
        }
        function px(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          f2 = l;
          l = l + 16 | 0;
          h2 = f2 + 4 | 0;
          i3 = f2;
          g2 = Vg(qx() | 0) | 0;
          c[i3 >> 2] = c[b2 >> 2];
          c[h2 >> 2] = c[i3 >> 2];
          b2 = qw(h2) | 0;
          d2 = rx(d2) | 0;
          $a(0, g2 | 0, a2 | 0, b2 | 0, d2 | 0, rx(e2) | 0) | 0;
          l = f2;
          return;
        }
        function qx() {
          var b2 = 0;
          if (!(a[7992] | 0)) {
            tx(10744);
            b2 = 7992;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10744;
        }
        function rx(a2) {
          a2 = a2 | 0;
          return sx(a2) | 0;
        }
        function sx(a2) {
          a2 = a2 | 0;
          return a2 & 255 | 0;
        }
        function tx(a2) {
          a2 = a2 | 0;
          fh(a2, ux() | 0, 3);
          return;
        }
        function ux() {
          return 1756;
        }
        function vx(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
          p2 = l;
          l = l + 32 | 0;
          j2 = p2 + 8 | 0;
          k2 = p2 + 4 | 0;
          m2 = p2 + 20 | 0;
          n2 = p2;
          mk(b2, 0);
          f2 = QA(d2) | 0;
          c[j2 >> 2] = 0;
          o2 = j2 + 4 | 0;
          c[o2 >> 2] = 0;
          c[j2 + 8 >> 2] = 0;
          switch (f2 << 24 >> 24) {
            case 0: {
              a[m2 >> 0] = 0;
              wx(k2, e2, m2);
              xx(b2, k2) | 0;
              wf(k2);
              break;
            }
            case 8: {
              o2 = PA(d2) | 0;
              a[m2 >> 0] = 8;
              OA(n2, c[o2 + 4 >> 2] | 0);
              yx(k2, e2, m2, n2, o2 + 8 | 0);
              xx(b2, k2) | 0;
              wf(k2);
              break;
            }
            case 9: {
              h2 = PA(d2) | 0;
              d2 = c[h2 + 4 >> 2] | 0;
              if (d2 | 0) {
                i3 = j2 + 8 | 0;
                g2 = h2 + 12 | 0;
                while (1) {
                  d2 = d2 + -1 | 0;
                  OA(k2, c[g2 >> 2] | 0);
                  f2 = c[o2 >> 2] | 0;
                  if (f2 >>> 0 < (c[i3 >> 2] | 0) >>> 0) {
                    c[f2 >> 2] = c[k2 >> 2];
                    c[o2 >> 2] = (c[o2 >> 2] | 0) + 4;
                  } else
                    ew(j2, k2);
                  if (!d2)
                    break;
                  else
                    g2 = g2 + 4 | 0;
                }
              }
              a[m2 >> 0] = 9;
              OA(n2, c[h2 + 8 >> 2] | 0);
              zx(k2, e2, m2, n2, j2);
              xx(b2, k2) | 0;
              wf(k2);
              break;
            }
            default: {
              o2 = PA(d2) | 0;
              a[m2 >> 0] = f2;
              OA(n2, c[o2 + 4 >> 2] | 0);
              Ax(k2, e2, m2, n2);
              xx(b2, k2) | 0;
              wf(k2);
            }
          }
          kw(j2);
          l = p2;
          return;
        }
        function wx(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          e2 = l;
          l = l + 16 | 0;
          f2 = e2;
          UA(f2);
          c2 = Sg(c2) | 0;
          Ox(b2, c2, a[d2 >> 0] | 0);
          WA(f2);
          l = e2;
          return;
        }
        function xx(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = c[a2 >> 2] | 0;
          if (d2 | 0)
            ab(d2 | 0);
          c[a2 >> 2] = c[b2 >> 2];
          c[b2 >> 2] = 0;
          return a2 | 0;
        }
        function yx(b2, d2, e2, f2, g2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h2 = 0, i3 = 0, j2 = 0, k2 = 0;
          h2 = l;
          l = l + 32 | 0;
          j2 = h2 + 16 | 0;
          i3 = h2 + 8 | 0;
          k2 = h2;
          UA(i3);
          d2 = Sg(d2) | 0;
          e2 = a[e2 >> 0] | 0;
          c[k2 >> 2] = c[f2 >> 2];
          g2 = c[g2 >> 2] | 0;
          c[j2 >> 2] = c[k2 >> 2];
          Kx(b2, d2, e2, j2, g2);
          WA(i3);
          l = h2;
          return;
        }
        function zx(b2, d2, e2, f2, g2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          var h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          h2 = l;
          l = l + 32 | 0;
          k2 = h2 + 24 | 0;
          i3 = h2 + 16 | 0;
          m2 = h2 + 12 | 0;
          j2 = h2;
          UA(i3);
          d2 = Sg(d2) | 0;
          e2 = a[e2 >> 0] | 0;
          c[m2 >> 2] = c[f2 >> 2];
          mw(j2, g2);
          c[k2 >> 2] = c[m2 >> 2];
          Gx(b2, d2, e2, k2, j2);
          kw(j2);
          WA(i3);
          l = h2;
          return;
        }
        function Ax(b2, d2, e2, f2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          g2 = l;
          l = l + 32 | 0;
          i3 = g2 + 16 | 0;
          h2 = g2 + 8 | 0;
          j2 = g2;
          UA(h2);
          d2 = Sg(d2) | 0;
          e2 = a[e2 >> 0] | 0;
          c[j2 >> 2] = c[f2 >> 2];
          c[i3 >> 2] = c[j2 >> 2];
          Bx(b2, d2, e2, i3);
          WA(h2);
          l = g2;
          return;
        }
        function Bx(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          f2 = l;
          l = l + 16 | 0;
          g2 = f2 + 4 | 0;
          i3 = f2;
          h2 = Vg(Cx() | 0) | 0;
          d2 = rx(d2) | 0;
          c[i3 >> 2] = c[e2 >> 2];
          c[g2 >> 2] = c[i3 >> 2];
          Dx(a2, xa(0, h2 | 0, b2 | 0, d2 | 0, qw(g2) | 0) | 0);
          l = f2;
          return;
        }
        function Cx() {
          var b2 = 0;
          if (!(a[8e3] | 0)) {
            Ex(10756);
            b2 = 8e3;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10756;
        }
        function Dx(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          mk(a2, b2);
          return;
        }
        function Ex(a2) {
          a2 = a2 | 0;
          fh(a2, Fx() | 0, 2);
          return;
        }
        function Fx() {
          return 1772;
        }
        function Gx(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0;
          g2 = l;
          l = l + 32 | 0;
          j2 = g2 + 16 | 0;
          k2 = g2 + 12 | 0;
          h2 = g2;
          i3 = Vg(Hx() | 0) | 0;
          d2 = rx(d2) | 0;
          c[k2 >> 2] = c[e2 >> 2];
          c[j2 >> 2] = c[k2 >> 2];
          e2 = qw(j2) | 0;
          c[h2 >> 2] = c[f2 >> 2];
          j2 = f2 + 4 | 0;
          c[h2 + 4 >> 2] = c[j2 >> 2];
          k2 = f2 + 8 | 0;
          c[h2 + 8 >> 2] = c[k2 >> 2];
          c[k2 >> 2] = 0;
          c[j2 >> 2] = 0;
          c[f2 >> 2] = 0;
          Dx(a2, $a(0, i3 | 0, b2 | 0, d2 | 0, e2 | 0, tw(h2) | 0) | 0);
          kw(h2);
          l = g2;
          return;
        }
        function Hx() {
          var b2 = 0;
          if (!(a[8008] | 0)) {
            Ix(10768);
            b2 = 8008;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10768;
        }
        function Ix(a2) {
          a2 = a2 | 0;
          fh(a2, Jx() | 0, 3);
          return;
        }
        function Jx() {
          return 1784;
        }
        function Kx(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          g2 = l;
          l = l + 16 | 0;
          i3 = g2 + 4 | 0;
          j2 = g2;
          h2 = Vg(Lx() | 0) | 0;
          d2 = rx(d2) | 0;
          c[j2 >> 2] = c[e2 >> 2];
          c[i3 >> 2] = c[j2 >> 2];
          e2 = qw(i3) | 0;
          Dx(a2, $a(0, h2 | 0, b2 | 0, d2 | 0, e2 | 0, sw(f2) | 0) | 0);
          l = g2;
          return;
        }
        function Lx() {
          var b2 = 0;
          if (!(a[8016] | 0)) {
            Mx(10780);
            b2 = 8016;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10780;
        }
        function Mx(a2) {
          a2 = a2 | 0;
          fh(a2, Nx() | 0, 3);
          return;
        }
        function Nx() {
          return 1800;
        }
        function Ox(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0;
          d2 = Vg(Px() | 0) | 0;
          Dx(a2, bb(0, d2 | 0, b2 | 0, rx(c2) | 0) | 0);
          return;
        }
        function Px() {
          var b2 = 0;
          if (!(a[8024] | 0)) {
            Qx(10792);
            b2 = 8024;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 10792;
        }
        function Qx(a2) {
          a2 = a2 | 0;
          fh(a2, Rx() | 0, 1);
          return;
        }
        function Rx() {
          return 1816;
        }
        function Sx() {
          Tx();
          Ux();
          Vx();
          return;
        }
        function Tx() {
          c[2702] = rC(65536) | 0;
          return;
        }
        function Ux() {
          qy(10856);
          return;
        }
        function Vx() {
          Wx(10816);
          return;
        }
        function Wx(a2) {
          a2 = a2 | 0;
          Xx(a2, 5044);
          Yx(a2) | 0;
          return;
        }
        function Xx(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = zw() | 0;
          c[a2 >> 2] = d2;
          ky(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function Yx(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, Zx() | 0);
          return a2 | 0;
        }
        function Zx() {
          var b2 = 0;
          if (!(a[8032] | 0)) {
            _x(10820);
            Ha(64, 10820, o | 0) | 0;
            b2 = 8032;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(10820) | 0))
            _x(10820);
          return 10820;
        }
        function _x(a2) {
          a2 = a2 | 0;
          by(a2);
          Gt(a2, 25);
          return;
        }
        function $x(a2) {
          a2 = a2 | 0;
          ay(a2 + 24 | 0);
          return;
        }
        function ay(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function by(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 18, b2, gy() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function cy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          dy(a2, b2);
          return;
        }
        function dy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          f2 = d2 + 4 | 0;
          Gk(f2, b2);
          c[e2 >> 2] = Hk(f2, b2) | 0;
          ey(a2, e2);
          l = d2;
          return;
        }
        function ey(b2, d2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          fy(b2 + 4 | 0, c[d2 >> 2] | 0);
          a[b2 + 8 >> 0] = 1;
          return;
        }
        function fy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = b2;
          return;
        }
        function gy() {
          return 1824;
        }
        function hy(a2) {
          a2 = a2 | 0;
          return iy(a2) | 0;
        }
        function iy(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          d2 = l;
          l = l + 16 | 0;
          f2 = d2 + 4 | 0;
          h2 = d2;
          e2 = jy(8) | 0;
          b2 = e2;
          i3 = qC(4) | 0;
          Gk(f2, a2);
          fy(i3, Hk(f2, a2) | 0);
          g2 = b2 + 4 | 0;
          c[g2 >> 2] = i3;
          a2 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[h2 >> 2] = 0;
          c[f2 >> 2] = c[h2 >> 2];
          Bw(a2, g2, f2);
          c[e2 >> 2] = a2;
          l = d2;
          return b2 | 0;
        }
        function jy(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          a2 = a2 + 7 & -8;
          if (a2 >>> 0 <= 32768 ? (b2 = c[2701] | 0, a2 >>> 0 <= (65536 - b2 | 0) >>> 0) : 0) {
            d2 = (c[2702] | 0) + b2 | 0;
            c[2701] = b2 + a2;
            a2 = d2;
          } else {
            a2 = rC(a2 + 8 | 0) | 0;
            c[a2 >> 2] = c[2703];
            c[2703] = a2;
            a2 = a2 + 8 | 0;
          }
          return a2 | 0;
        }
        function ky(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = ly() | 0;
          c[a2 + 4 >> 2] = my() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = ny() | 0;
          c[a2 + 32 >> 2] = 9;
          return;
        }
        function ly() {
          return 11744;
        }
        function my() {
          return 1832;
        }
        function ny() {
          return cu() | 0;
        }
        function oy(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              py(c2);
              sC(c2);
            }
          } else if (b2 | 0)
            sC(b2);
          return;
        }
        function py(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function qy(a2) {
          a2 = a2 | 0;
          ry(a2, 5052);
          sy(a2) | 0;
          ty(a2, 5058, 26) | 0;
          uy(a2, 5069, 1) | 0;
          vy(a2, 5077, 10) | 0;
          wy(a2, 5087, 19) | 0;
          yy(a2, 5094, 27) | 0;
          return;
        }
        function ry(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = GA() | 0;
          c[a2 >> 2] = d2;
          HA(d2, b2);
          Hv(c[a2 >> 2] | 0);
          return;
        }
        function sy(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          At(b2, rA() | 0);
          return a2 | 0;
        }
        function ty(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Yz(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function uy(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Gz(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function vy(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          hz(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function wy(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Ry(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function xy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          a:
            while (1) {
              d2 = c[2703] | 0;
              while (1) {
                if ((d2 | 0) == (b2 | 0))
                  break a;
                e2 = c[d2 >> 2] | 0;
                c[2703] = e2;
                if (!d2)
                  d2 = e2;
                else
                  break;
              }
              sC(d2);
            }
          c[2701] = a2;
          return;
        }
        function yy(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          zy(a2, ai(b2) | 0, c2, 0);
          return a2 | 0;
        }
        function zy(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Ay() | 0;
          a2 = By(d2) | 0;
          fi(g2, b2, f2, a2, Cy(d2, e2) | 0, e2);
          return;
        }
        function Ay() {
          var b2 = 0, d2 = 0;
          if (!(a[8040] | 0)) {
            Jy(10860);
            Ha(65, 10860, o | 0) | 0;
            d2 = 8040;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10860) | 0)) {
            b2 = 10860;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Jy(10860);
          }
          return 10860;
        }
        function By(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Cy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Ay() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            Dy(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            Ey(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Dy(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Ey(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Fy(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            Gy(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            Dy(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            Hy(a2, f2);
            Iy(f2);
            l = i3;
            return;
          }
        }
        function Fy(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function Gy(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function Hy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Iy(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Jy(a2) {
          a2 = a2 | 0;
          My(a2);
          return;
        }
        function Ky(a2) {
          a2 = a2 | 0;
          Ly(a2 + 24 | 0);
          return;
        }
        function Ly(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function My(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 11, b2, Ny() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Ny() {
          return 1840;
        }
        function Oy(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          Qy(c[(Py(a2) | 0) >> 2] | 0, b2, d2);
          return;
        }
        function Py(a2) {
          a2 = a2 | 0;
          return (c[(Ay() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function Qy(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          d2 = l;
          l = l + 16 | 0;
          f2 = d2 + 1 | 0;
          e2 = d2;
          Gk(f2, b2);
          b2 = Hk(f2, b2) | 0;
          Gk(e2, c2);
          c2 = Hk(e2, c2) | 0;
          ob[a2 & 31](b2, c2);
          l = d2;
          return;
        }
        function Ry(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Sy() | 0;
          a2 = Ty(d2) | 0;
          fi(g2, b2, f2, a2, Uy(d2, e2) | 0, e2);
          return;
        }
        function Sy() {
          var b2 = 0, d2 = 0;
          if (!(a[8048] | 0)) {
            $y(10896);
            Ha(66, 10896, o | 0) | 0;
            d2 = 8048;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10896) | 0)) {
            b2 = 10896;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            $y(10896);
          }
          return 10896;
        }
        function Ty(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Uy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Sy() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            Vy(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            Wy(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Vy(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Wy(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Xy(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            Yy(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            Vy(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            Zy(a2, f2);
            _y(f2);
            l = i3;
            return;
          }
        }
        function Xy(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function Yy(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function Zy(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function _y(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function $y(a2) {
          a2 = a2 | 0;
          cz(a2);
          return;
        }
        function az(a2) {
          a2 = a2 | 0;
          bz(a2 + 24 | 0);
          return;
        }
        function bz(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function cz(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 11, b2, dz() | 0, 1);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function dz() {
          return 1852;
        }
        function ez(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return gz(c[(fz(a2) | 0) >> 2] | 0, b2) | 0;
        }
        function fz(a2) {
          a2 = a2 | 0;
          return (c[(Sy() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function gz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0, d2 = 0;
          c2 = l;
          l = l + 16 | 0;
          d2 = c2;
          Gk(d2, b2);
          b2 = Hk(d2, b2) | 0;
          b2 = ul(pb[a2 & 31](b2) | 0) | 0;
          l = c2;
          return b2 | 0;
        }
        function hz(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = iz() | 0;
          a2 = jz(d2) | 0;
          fi(g2, b2, f2, a2, kz(d2, e2) | 0, e2);
          return;
        }
        function iz() {
          var b2 = 0, d2 = 0;
          if (!(a[8056] | 0)) {
            rz(10932);
            Ha(67, 10932, o | 0) | 0;
            d2 = 8056;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10932) | 0)) {
            b2 = 10932;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            rz(10932);
          }
          return 10932;
        }
        function jz(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function kz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = iz() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            lz(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            mz(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function lz(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function mz(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = nz(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            oz(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            lz(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            pz(a2, f2);
            qz(f2);
            l = i3;
            return;
          }
        }
        function nz(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function oz(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function pz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function qz(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function rz(a2) {
          a2 = a2 | 0;
          uz(a2);
          return;
        }
        function sz(a2) {
          a2 = a2 | 0;
          tz(a2 + 24 | 0);
          return;
        }
        function tz(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function uz(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 7, b2, vz() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function vz() {
          return 1860;
        }
        function wz(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          return yz(c[(xz(a2) | 0) >> 2] | 0, b2, d2) | 0;
        }
        function xz(a2) {
          a2 = a2 | 0;
          return (c[(iz() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function yz(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          e2 = l;
          l = l + 32 | 0;
          h2 = e2 + 12 | 0;
          g2 = e2 + 8 | 0;
          i3 = e2;
          j2 = e2 + 16 | 0;
          f2 = e2 + 4 | 0;
          zz(j2, b2);
          Az(i3, j2, b2);
          ik(f2, d2);
          d2 = jk(f2, d2) | 0;
          c[h2 >> 2] = c[i3 >> 2];
          Eb[a2 & 15](g2, h2, d2);
          d2 = Bz(g2) | 0;
          wf(g2);
          kk(f2);
          l = e2;
          return d2 | 0;
        }
        function zz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function Az(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          Cz(a2, c2);
          return;
        }
        function Bz(a2) {
          a2 = a2 | 0;
          return Sg(a2) | 0;
        }
        function Cz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          f2 = l;
          l = l + 16 | 0;
          d2 = f2;
          e2 = b2;
          if (!(e2 & 1))
            c[a2 >> 2] = c[b2 >> 2];
          else {
            Dz(d2, 0);
            Ja(e2 | 0, d2 | 0) | 0;
            Ez(a2, d2);
            Fz(d2);
          }
          l = f2;
          return;
        }
        function Dz(b2, d2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          ah(b2, d2);
          c[b2 + 4 >> 2] = 0;
          a[b2 + 8 >> 0] = 0;
          return;
        }
        function Ez(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = c[b2 + 4 >> 2];
          return;
        }
        function Fz(b2) {
          b2 = b2 | 0;
          a[b2 + 8 >> 0] = 0;
          return;
        }
        function Gz(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Hz() | 0;
          a2 = Iz(d2) | 0;
          fi(g2, b2, f2, a2, Jz(d2, e2) | 0, e2);
          return;
        }
        function Hz() {
          var b2 = 0, d2 = 0;
          if (!(a[8064] | 0)) {
            Qz(10968);
            Ha(68, 10968, o | 0) | 0;
            d2 = 8064;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(10968) | 0)) {
            b2 = 10968;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            Qz(10968);
          }
          return 10968;
        }
        function Iz(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function Jz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Hz() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            Kz(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            Lz(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function Kz(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function Lz(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = Mz(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            Nz(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            Kz(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            Oz(a2, f2);
            Pz(f2);
            l = i3;
            return;
          }
        }
        function Mz(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function Nz(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function Oz(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function Pz(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function Qz(a2) {
          a2 = a2 | 0;
          Tz(a2);
          return;
        }
        function Rz(a2) {
          a2 = a2 | 0;
          Sz(a2 + 24 | 0);
          return;
        }
        function Sz(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function Tz(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 1, b2, Uz() | 0, 5);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function Uz() {
          return 1872;
        }
        function Vz(a2, b2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          Xz(c[(Wz(a2) | 0) >> 2] | 0, b2, d2, e2, f2, g2);
          return;
        }
        function Wz(a2) {
          a2 = a2 | 0;
          return (c[(Hz() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function Xz(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          g2 = l;
          l = l + 32 | 0;
          h2 = g2 + 16 | 0;
          i3 = g2 + 12 | 0;
          j2 = g2 + 8 | 0;
          k2 = g2 + 4 | 0;
          m2 = g2;
          ik(h2, b2);
          b2 = jk(h2, b2) | 0;
          ik(i3, c2);
          c2 = jk(i3, c2) | 0;
          ik(j2, d2);
          d2 = jk(j2, d2) | 0;
          ik(k2, e2);
          e2 = jk(k2, e2) | 0;
          ik(m2, f2);
          f2 = jk(m2, f2) | 0;
          jb[a2 & 1](b2, c2, d2, e2, f2);
          kk(m2);
          kk(k2);
          kk(j2);
          kk(i3);
          kk(h2);
          l = g2;
          return;
        }
        function Yz(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = c[a2 >> 2] | 0;
          f2 = Zz() | 0;
          a2 = _z(d2) | 0;
          fi(g2, b2, f2, a2, $z(d2, e2) | 0, e2);
          return;
        }
        function Zz() {
          var b2 = 0, d2 = 0;
          if (!(a[8072] | 0)) {
            gA(11004);
            Ha(69, 11004, o | 0) | 0;
            d2 = 8072;
            c[d2 >> 2] = 1;
            c[d2 + 4 >> 2] = 0;
          }
          if (!(si(11004) | 0)) {
            b2 = 11004;
            d2 = b2 + 36 | 0;
            do {
              c[b2 >> 2] = 0;
              b2 = b2 + 4 | 0;
            } while ((b2 | 0) < (d2 | 0));
            gA(11004);
          }
          return 11004;
        }
        function _z(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function $z(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          i3 = l;
          l = l + 16 | 0;
          f2 = i3;
          g2 = i3 + 4 | 0;
          c[f2 >> 2] = a2;
          j2 = Zz() | 0;
          h2 = j2 + 24 | 0;
          b2 = ji(b2, 4) | 0;
          c[g2 >> 2] = b2;
          d2 = j2 + 28 | 0;
          e2 = c[d2 >> 2] | 0;
          if (e2 >>> 0 < (c[j2 + 32 >> 2] | 0) >>> 0) {
            aA(e2, a2, b2);
            b2 = (c[d2 >> 2] | 0) + 8 | 0;
            c[d2 >> 2] = b2;
          } else {
            bA(h2, f2, g2);
            b2 = c[d2 >> 2] | 0;
          }
          l = i3;
          return (b2 - (c[h2 >> 2] | 0) >> 3) + -1 | 0;
        }
        function aA(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function bA(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0;
          i3 = l;
          l = l + 32 | 0;
          f2 = i3;
          g2 = a2 + 4 | 0;
          h2 = ((c[g2 >> 2] | 0) - (c[a2 >> 2] | 0) >> 3) + 1 | 0;
          e2 = cA(a2) | 0;
          if (e2 >>> 0 < h2 >>> 0)
            jC(a2);
          else {
            j2 = c[a2 >> 2] | 0;
            m2 = (c[a2 + 8 >> 2] | 0) - j2 | 0;
            k2 = m2 >> 2;
            dA(f2, m2 >> 3 >>> 0 < e2 >>> 1 >>> 0 ? k2 >>> 0 < h2 >>> 0 ? h2 : k2 : e2, (c[g2 >> 2] | 0) - j2 >> 3, a2 + 8 | 0);
            h2 = f2 + 8 | 0;
            aA(c[h2 >> 2] | 0, c[b2 >> 2] | 0, c[d2 >> 2] | 0);
            c[h2 >> 2] = (c[h2 >> 2] | 0) + 8;
            eA(a2, f2);
            fA(f2);
            l = i3;
            return;
          }
        }
        function cA(a2) {
          a2 = a2 | 0;
          return 536870911;
        }
        function dA(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0;
          c[a2 + 12 >> 2] = 0;
          c[a2 + 16 >> 2] = e2;
          do
            if (b2) {
              if (b2 >>> 0 > 536870911)
                Ta();
              else {
                f2 = qC(b2 << 3) | 0;
                break;
              }
            } else
              f2 = 0;
          while (0);
          c[a2 >> 2] = f2;
          e2 = f2 + (d2 << 3) | 0;
          c[a2 + 8 >> 2] = e2;
          c[a2 + 4 >> 2] = e2;
          c[a2 + 12 >> 2] = f2 + (b2 << 3);
          return;
        }
        function eA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          e2 = c[a2 >> 2] | 0;
          h2 = a2 + 4 | 0;
          g2 = b2 + 4 | 0;
          f2 = (c[h2 >> 2] | 0) - e2 | 0;
          d2 = (c[g2 >> 2] | 0) + (0 - (f2 >> 3) << 3) | 0;
          c[g2 >> 2] = d2;
          if ((f2 | 0) > 0) {
            BC(d2 | 0, e2 | 0, f2 | 0) | 0;
            e2 = g2;
            d2 = c[g2 >> 2] | 0;
          } else
            e2 = g2;
          g2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = d2;
          c[e2 >> 2] = g2;
          g2 = b2 + 8 | 0;
          f2 = c[h2 >> 2] | 0;
          c[h2 >> 2] = c[g2 >> 2];
          c[g2 >> 2] = f2;
          g2 = a2 + 8 | 0;
          h2 = b2 + 12 | 0;
          a2 = c[g2 >> 2] | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[h2 >> 2] = a2;
          c[b2 >> 2] = c[e2 >> 2];
          return;
        }
        function fA(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          b2 = c[a2 + 4 >> 2] | 0;
          d2 = a2 + 8 | 0;
          e2 = c[d2 >> 2] | 0;
          if ((e2 | 0) != (b2 | 0))
            c[d2 >> 2] = e2 + (~((e2 + -8 - b2 | 0) >>> 3) << 3);
          a2 = c[a2 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function gA(a2) {
          a2 = a2 | 0;
          jA(a2);
          return;
        }
        function hA(a2) {
          a2 = a2 | 0;
          iA(a2 + 24 | 0);
          return;
        }
        function iA(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function jA(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 1, 12, b2, kA() | 0, 2);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function kA() {
          return 1896;
        }
        function lA(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          nA(c[(mA(a2) | 0) >> 2] | 0, b2, d2);
          return;
        }
        function mA(a2) {
          a2 = a2 | 0;
          return (c[(Zz() | 0) + 24 >> 2] | 0) + (a2 << 3) | 0;
        }
        function nA(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          d2 = l;
          l = l + 16 | 0;
          f2 = d2 + 4 | 0;
          e2 = d2;
          oA(f2, b2);
          b2 = pA(f2, b2) | 0;
          ik(e2, c2);
          c2 = jk(e2, c2) | 0;
          ob[a2 & 31](b2, c2);
          kk(e2);
          l = d2;
          return;
        }
        function oA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return;
        }
        function pA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return qA(b2) | 0;
        }
        function qA(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function rA() {
          var b2 = 0;
          if (!(a[8080] | 0)) {
            sA(11040);
            Ha(70, 11040, o | 0) | 0;
            b2 = 8080;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          if (!(si(11040) | 0))
            sA(11040);
          return 11040;
        }
        function sA(a2) {
          a2 = a2 | 0;
          vA(a2);
          Gt(a2, 71);
          return;
        }
        function tA(a2) {
          a2 = a2 | 0;
          uA(a2 + 24 | 0);
          return;
        }
        function uA(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0;
          d2 = c[a2 >> 2] | 0;
          e2 = d2;
          if (d2 | 0) {
            a2 = a2 + 4 | 0;
            b2 = c[a2 >> 2] | 0;
            if ((b2 | 0) != (d2 | 0))
              c[a2 >> 2] = b2 + (~((b2 + -8 - e2 | 0) >>> 3) << 3);
            sC(d2);
          }
          return;
        }
        function vA(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = vi() | 0;
          yi(a2, 5, 7, b2, zA() | 0, 0);
          c[a2 + 24 >> 2] = 0;
          c[a2 + 28 >> 2] = 0;
          c[a2 + 32 >> 2] = 0;
          return;
        }
        function wA(a2) {
          a2 = a2 | 0;
          xA(a2);
          return;
        }
        function xA(a2) {
          a2 = a2 | 0;
          yA(a2);
          return;
        }
        function yA(b2) {
          b2 = b2 | 0;
          a[b2 + 8 >> 0] = 1;
          return;
        }
        function zA() {
          return 1936;
        }
        function AA() {
          return BA() | 0;
        }
        function BA() {
          var a2 = 0, b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0;
          b2 = l;
          l = l + 16 | 0;
          f2 = b2 + 4 | 0;
          h2 = b2;
          d2 = jy(8) | 0;
          a2 = d2;
          g2 = a2 + 4 | 0;
          c[g2 >> 2] = qC(1) | 0;
          e2 = qC(8) | 0;
          g2 = c[g2 >> 2] | 0;
          c[h2 >> 2] = 0;
          c[f2 >> 2] = c[h2 >> 2];
          CA(e2, g2, f2);
          c[d2 >> 2] = e2;
          l = b2;
          return a2 | 0;
        }
        function CA(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          c[a2 >> 2] = b2;
          d2 = qC(16) | 0;
          c[d2 + 4 >> 2] = 0;
          c[d2 + 8 >> 2] = 0;
          c[d2 >> 2] = 1916;
          c[d2 + 12 >> 2] = b2;
          c[a2 + 4 >> 2] = d2;
          return;
        }
        function DA(a2) {
          a2 = a2 | 0;
          kC(a2);
          sC(a2);
          return;
        }
        function EA(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 12 >> 2] | 0;
          if (a2 | 0)
            sC(a2);
          return;
        }
        function FA(a2) {
          a2 = a2 | 0;
          sC(a2);
          return;
        }
        function GA() {
          var b2 = 0;
          if (!(a[8088] | 0)) {
            NA(11076);
            Ha(25, 11076, o | 0) | 0;
            b2 = 8088;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 11076;
        }
        function HA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = IA() | 0;
          c[a2 + 4 >> 2] = JA() | 0;
          c[a2 + 12 >> 2] = b2;
          c[a2 + 8 >> 2] = KA() | 0;
          c[a2 + 32 >> 2] = 10;
          return;
        }
        function IA() {
          return 11745;
        }
        function JA() {
          return 1940;
        }
        function KA() {
          return lr() | 0;
        }
        function LA(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if ((jr(d2, 896) | 0) == 512) {
            if (c2 | 0) {
              MA(c2);
              sC(c2);
            }
          } else if (b2 | 0)
            sC(b2);
          return;
        }
        function MA(a2) {
          a2 = a2 | 0;
          a2 = c[a2 + 4 >> 2] | 0;
          if (a2 | 0)
            oC(a2);
          return;
        }
        function NA(a2) {
          a2 = a2 | 0;
          Zi(a2);
          return;
        }
        function OA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c[a2 >> 2] = b2;
          return;
        }
        function PA(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function QA(b2) {
          b2 = b2 | 0;
          return a[c[b2 >> 2] >> 0] | 0;
        }
        function RA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          c[e2 >> 2] = c[a2 >> 2];
          SA(b2, e2) | 0;
          l = d2;
          return;
        }
        function SA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0;
          d2 = TA(c[a2 >> 2] | 0, b2) | 0;
          b2 = a2 + 4 | 0;
          c[(c[b2 >> 2] | 0) + 8 >> 2] = d2;
          return c[(c[b2 >> 2] | 0) + 8 >> 2] | 0;
        }
        function TA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = l;
          l = l + 16 | 0;
          e2 = d2;
          UA(e2);
          a2 = Sg(a2) | 0;
          b2 = VA(a2, c[b2 >> 2] | 0) | 0;
          WA(e2);
          l = d2;
          return b2 | 0;
        }
        function UA(a2) {
          a2 = a2 | 0;
          c[a2 >> 2] = c[2701];
          c[a2 + 4 >> 2] = c[2703];
          return;
        }
        function VA(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0;
          c2 = Vg(XA() | 0) | 0;
          return bb(0, c2 | 0, a2 | 0, sw(b2) | 0) | 0;
        }
        function WA(a2) {
          a2 = a2 | 0;
          xy(c[a2 >> 2] | 0, c[a2 + 4 >> 2] | 0);
          return;
        }
        function XA() {
          var b2 = 0;
          if (!(a[8096] | 0)) {
            YA(11120);
            b2 = 8096;
            c[b2 >> 2] = 1;
            c[b2 + 4 >> 2] = 0;
          }
          return 11120;
        }
        function YA(a2) {
          a2 = a2 | 0;
          fh(a2, ZA() | 0, 1);
          return;
        }
        function ZA() {
          return 1948;
        }
        function _A() {
          $A();
          return;
        }
        function $A() {
          var b2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0;
          s2 = l;
          l = l + 16 | 0;
          o2 = s2 + 4 | 0;
          p2 = s2;
          Ea(65536, 10804, c[2702] | 0, 10812);
          f2 = Wv() | 0;
          e2 = c[f2 >> 2] | 0;
          b2 = c[e2 >> 2] | 0;
          if (b2 | 0) {
            g2 = c[f2 + 8 >> 2] | 0;
            f2 = c[f2 + 4 >> 2] | 0;
            while (1) {
              Ma(b2 | 0, d[f2 >> 0] | 0 | 0, a[g2 >> 0] | 0);
              e2 = e2 + 4 | 0;
              b2 = c[e2 >> 2] | 0;
              if (!b2)
                break;
              else {
                g2 = g2 + 1 | 0;
                f2 = f2 + 1 | 0;
              }
            }
          }
          b2 = Yv() | 0;
          e2 = c[b2 >> 2] | 0;
          if (e2 | 0)
            do {
              Na(e2 | 0, c[b2 + 4 >> 2] | 0);
              b2 = b2 + 8 | 0;
              e2 = c[b2 >> 2] | 0;
            } while ((e2 | 0) != 0);
          Na(aB() | 0, 5167);
          n2 = Iv() | 0;
          b2 = c[n2 >> 2] | 0;
          a:
            do
              if (b2 | 0) {
                do {
                  bB(c[b2 + 4 >> 2] | 0);
                  b2 = c[b2 >> 2] | 0;
                } while ((b2 | 0) != 0);
                b2 = c[n2 >> 2] | 0;
                if (b2 | 0) {
                  m2 = n2;
                  do {
                    while (1) {
                      h2 = b2;
                      b2 = c[b2 >> 2] | 0;
                      h2 = c[h2 + 4 >> 2] | 0;
                      if (!(cB(h2) | 0))
                        break;
                      c[p2 >> 2] = m2;
                      c[o2 >> 2] = c[p2 >> 2];
                      dB(n2, o2) | 0;
                      if (!b2)
                        break a;
                    }
                    eB(h2);
                    m2 = c[m2 >> 2] | 0;
                    e2 = fB(h2) | 0;
                    i3 = Va() | 0;
                    j2 = l;
                    l = l + ((1 * (e2 << 2) | 0) + 15 & -16) | 0;
                    k2 = l;
                    l = l + ((1 * (e2 << 2) | 0) + 15 & -16) | 0;
                    e2 = c[(Zw(h2) | 0) >> 2] | 0;
                    if (e2 | 0) {
                      f2 = j2;
                      g2 = k2;
                      while (1) {
                        c[f2 >> 2] = c[(Xw(c[e2 + 4 >> 2] | 0) | 0) >> 2];
                        c[g2 >> 2] = c[e2 + 8 >> 2];
                        e2 = c[e2 >> 2] | 0;
                        if (!e2)
                          break;
                        else {
                          f2 = f2 + 4 | 0;
                          g2 = g2 + 4 | 0;
                        }
                      }
                    }
                    t2 = Xw(h2) | 0;
                    e2 = gB(h2) | 0;
                    f2 = fB(h2) | 0;
                    g2 = hB(h2) | 0;
                    Ra(t2 | 0, e2 | 0, j2 | 0, k2 | 0, f2 | 0, g2 | 0, Tv(h2) | 0);
                    Ga(i3 | 0);
                  } while ((b2 | 0) != 0);
                }
              }
            while (0);
          b2 = c[(Vv() | 0) >> 2] | 0;
          if (b2 | 0)
            do {
              t2 = b2 + 4 | 0;
              n2 = aw(t2) | 0;
              h2 = fw(n2) | 0;
              i3 = bw(n2) | 0;
              j2 = (cw(n2) | 0) + 1 | 0;
              k2 = iB(n2) | 0;
              m2 = jB(t2) | 0;
              n2 = si(n2) | 0;
              o2 = hw(t2) | 0;
              p2 = kB(t2) | 0;
              Pa(0, h2 | 0, i3 | 0, j2 | 0, k2 | 0, m2 | 0, n2 | 0, o2 | 0, p2 | 0, lB(t2) | 0);
              b2 = c[b2 >> 2] | 0;
            } while ((b2 | 0) != 0);
          b2 = c[(Iv() | 0) >> 2] | 0;
          b:
            do
              if (b2 | 0) {
                c:
                  while (1) {
                    e2 = c[b2 + 4 >> 2] | 0;
                    if (e2 | 0 ? (q2 = c[(Xw(e2) | 0) >> 2] | 0, r2 = c[(ax(e2) | 0) >> 2] | 0, r2 | 0) : 0) {
                      f2 = r2;
                      do {
                        e2 = f2 + 4 | 0;
                        g2 = aw(e2) | 0;
                        d:
                          do
                            if (g2 | 0)
                              switch (si(g2) | 0) {
                                case 0:
                                  break c;
                                case 4:
                                case 3:
                                case 2: {
                                  k2 = fw(g2) | 0;
                                  m2 = bw(g2) | 0;
                                  n2 = (cw(g2) | 0) + 1 | 0;
                                  o2 = iB(g2) | 0;
                                  p2 = si(g2) | 0;
                                  t2 = hw(e2) | 0;
                                  Pa(q2 | 0, k2 | 0, m2 | 0, n2 | 0, o2 | 0, 0, p2 | 0, t2 | 0, kB(e2) | 0, lB(e2) | 0);
                                  break d;
                                }
                                case 1: {
                                  j2 = fw(g2) | 0;
                                  k2 = bw(g2) | 0;
                                  m2 = (cw(g2) | 0) + 1 | 0;
                                  n2 = iB(g2) | 0;
                                  o2 = jB(e2) | 0;
                                  p2 = si(g2) | 0;
                                  t2 = hw(e2) | 0;
                                  Pa(q2 | 0, j2 | 0, k2 | 0, m2 | 0, n2 | 0, o2 | 0, p2 | 0, t2 | 0, kB(e2) | 0, lB(e2) | 0);
                                  break d;
                                }
                                case 5: {
                                  n2 = fw(g2) | 0;
                                  o2 = bw(g2) | 0;
                                  p2 = (cw(g2) | 0) + 1 | 0;
                                  t2 = iB(g2) | 0;
                                  Pa(q2 | 0, n2 | 0, o2 | 0, p2 | 0, t2 | 0, mB(g2) | 0, si(g2) | 0, 0, 0, 0);
                                  break d;
                                }
                                default:
                                  break d;
                              }
                          while (0);
                        f2 = c[f2 >> 2] | 0;
                      } while ((f2 | 0) != 0);
                    }
                    b2 = c[b2 >> 2] | 0;
                    if (!b2)
                      break b;
                  }
                Ta();
              }
            while (0);
          Sa();
          l = s2;
          return;
        }
        function aB() {
          return 11703;
        }
        function bB(b2) {
          b2 = b2 | 0;
          a[b2 + 40 >> 0] = 0;
          return;
        }
        function cB(b2) {
          b2 = b2 | 0;
          return (a[b2 + 40 >> 0] | 0) != 0 | 0;
        }
        function dB(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          b2 = nB(b2) | 0;
          a2 = c[b2 >> 2] | 0;
          c[b2 >> 2] = c[a2 >> 2];
          sC(a2);
          return c[b2 >> 2] | 0;
        }
        function eB(b2) {
          b2 = b2 | 0;
          a[b2 + 40 >> 0] = 1;
          return;
        }
        function fB(a2) {
          a2 = a2 | 0;
          return c[a2 + 20 >> 2] | 0;
        }
        function gB(a2) {
          a2 = a2 | 0;
          return c[a2 + 8 >> 2] | 0;
        }
        function hB(a2) {
          a2 = a2 | 0;
          return c[a2 + 32 >> 2] | 0;
        }
        function iB(a2) {
          a2 = a2 | 0;
          return c[a2 + 4 >> 2] | 0;
        }
        function jB(a2) {
          a2 = a2 | 0;
          return c[a2 + 4 >> 2] | 0;
        }
        function kB(a2) {
          a2 = a2 | 0;
          return c[a2 + 8 >> 2] | 0;
        }
        function lB(a2) {
          a2 = a2 | 0;
          return c[a2 + 16 >> 2] | 0;
        }
        function mB(a2) {
          a2 = a2 | 0;
          return c[a2 + 20 >> 2] | 0;
        }
        function nB(a2) {
          a2 = a2 | 0;
          return c[a2 >> 2] | 0;
        }
        function oB(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0;
          x2 = l;
          l = l + 16 | 0;
          o2 = x2;
          do
            if (a2 >>> 0 < 245) {
              k2 = a2 >>> 0 < 11 ? 16 : a2 + 11 & -8;
              a2 = k2 >>> 3;
              n2 = c[2783] | 0;
              d2 = n2 >>> a2;
              if (d2 & 3 | 0) {
                b2 = (d2 & 1 ^ 1) + a2 | 0;
                a2 = 11172 + (b2 << 1 << 2) | 0;
                d2 = a2 + 8 | 0;
                e2 = c[d2 >> 2] | 0;
                f2 = e2 + 8 | 0;
                g2 = c[f2 >> 2] | 0;
                if ((a2 | 0) == (g2 | 0))
                  c[2783] = n2 & ~(1 << b2);
                else {
                  c[g2 + 12 >> 2] = a2;
                  c[d2 >> 2] = g2;
                }
                w2 = b2 << 3;
                c[e2 + 4 >> 2] = w2 | 3;
                w2 = e2 + w2 + 4 | 0;
                c[w2 >> 2] = c[w2 >> 2] | 1;
                w2 = f2;
                l = x2;
                return w2 | 0;
              }
              m2 = c[2785] | 0;
              if (k2 >>> 0 > m2 >>> 0) {
                if (d2 | 0) {
                  b2 = 2 << a2;
                  b2 = d2 << a2 & (b2 | 0 - b2);
                  b2 = (b2 & 0 - b2) + -1 | 0;
                  h2 = b2 >>> 12 & 16;
                  b2 = b2 >>> h2;
                  d2 = b2 >>> 5 & 8;
                  b2 = b2 >>> d2;
                  f2 = b2 >>> 2 & 4;
                  b2 = b2 >>> f2;
                  a2 = b2 >>> 1 & 2;
                  b2 = b2 >>> a2;
                  e2 = b2 >>> 1 & 1;
                  e2 = (d2 | h2 | f2 | a2 | e2) + (b2 >>> e2) | 0;
                  b2 = 11172 + (e2 << 1 << 2) | 0;
                  a2 = b2 + 8 | 0;
                  f2 = c[a2 >> 2] | 0;
                  h2 = f2 + 8 | 0;
                  d2 = c[h2 >> 2] | 0;
                  if ((b2 | 0) == (d2 | 0)) {
                    a2 = n2 & ~(1 << e2);
                    c[2783] = a2;
                  } else {
                    c[d2 + 12 >> 2] = b2;
                    c[a2 >> 2] = d2;
                    a2 = n2;
                  }
                  g2 = (e2 << 3) - k2 | 0;
                  c[f2 + 4 >> 2] = k2 | 3;
                  e2 = f2 + k2 | 0;
                  c[e2 + 4 >> 2] = g2 | 1;
                  c[e2 + g2 >> 2] = g2;
                  if (m2 | 0) {
                    f2 = c[2788] | 0;
                    b2 = m2 >>> 3;
                    d2 = 11172 + (b2 << 1 << 2) | 0;
                    b2 = 1 << b2;
                    if (!(a2 & b2)) {
                      c[2783] = a2 | b2;
                      b2 = d2;
                      a2 = d2 + 8 | 0;
                    } else {
                      a2 = d2 + 8 | 0;
                      b2 = c[a2 >> 2] | 0;
                    }
                    c[a2 >> 2] = f2;
                    c[b2 + 12 >> 2] = f2;
                    c[f2 + 8 >> 2] = b2;
                    c[f2 + 12 >> 2] = d2;
                  }
                  c[2785] = g2;
                  c[2788] = e2;
                  w2 = h2;
                  l = x2;
                  return w2 | 0;
                }
                i3 = c[2784] | 0;
                if (i3) {
                  d2 = (i3 & 0 - i3) + -1 | 0;
                  h2 = d2 >>> 12 & 16;
                  d2 = d2 >>> h2;
                  g2 = d2 >>> 5 & 8;
                  d2 = d2 >>> g2;
                  j2 = d2 >>> 2 & 4;
                  d2 = d2 >>> j2;
                  e2 = d2 >>> 1 & 2;
                  d2 = d2 >>> e2;
                  a2 = d2 >>> 1 & 1;
                  a2 = c[11436 + ((g2 | h2 | j2 | e2 | a2) + (d2 >>> a2) << 2) >> 2] | 0;
                  d2 = (c[a2 + 4 >> 2] & -8) - k2 | 0;
                  e2 = c[a2 + 16 + (((c[a2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                  if (!e2) {
                    j2 = a2;
                    g2 = d2;
                  } else {
                    do {
                      h2 = (c[e2 + 4 >> 2] & -8) - k2 | 0;
                      j2 = h2 >>> 0 < d2 >>> 0;
                      d2 = j2 ? h2 : d2;
                      a2 = j2 ? e2 : a2;
                      e2 = c[e2 + 16 + (((c[e2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                    } while ((e2 | 0) != 0);
                    j2 = a2;
                    g2 = d2;
                  }
                  h2 = j2 + k2 | 0;
                  if (j2 >>> 0 < h2 >>> 0) {
                    f2 = c[j2 + 24 >> 2] | 0;
                    b2 = c[j2 + 12 >> 2] | 0;
                    do
                      if ((b2 | 0) == (j2 | 0)) {
                        a2 = j2 + 20 | 0;
                        b2 = c[a2 >> 2] | 0;
                        if (!b2) {
                          a2 = j2 + 16 | 0;
                          b2 = c[a2 >> 2] | 0;
                          if (!b2) {
                            d2 = 0;
                            break;
                          }
                        }
                        while (1) {
                          d2 = b2 + 20 | 0;
                          e2 = c[d2 >> 2] | 0;
                          if (e2 | 0) {
                            b2 = e2;
                            a2 = d2;
                            continue;
                          }
                          d2 = b2 + 16 | 0;
                          e2 = c[d2 >> 2] | 0;
                          if (!e2)
                            break;
                          else {
                            b2 = e2;
                            a2 = d2;
                          }
                        }
                        c[a2 >> 2] = 0;
                        d2 = b2;
                      } else {
                        d2 = c[j2 + 8 >> 2] | 0;
                        c[d2 + 12 >> 2] = b2;
                        c[b2 + 8 >> 2] = d2;
                        d2 = b2;
                      }
                    while (0);
                    do
                      if (f2 | 0) {
                        b2 = c[j2 + 28 >> 2] | 0;
                        a2 = 11436 + (b2 << 2) | 0;
                        if ((j2 | 0) == (c[a2 >> 2] | 0)) {
                          c[a2 >> 2] = d2;
                          if (!d2) {
                            c[2784] = i3 & ~(1 << b2);
                            break;
                          }
                        } else {
                          c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) != (j2 | 0) & 1) << 2) >> 2] = d2;
                          if (!d2)
                            break;
                        }
                        c[d2 + 24 >> 2] = f2;
                        b2 = c[j2 + 16 >> 2] | 0;
                        if (b2 | 0) {
                          c[d2 + 16 >> 2] = b2;
                          c[b2 + 24 >> 2] = d2;
                        }
                        b2 = c[j2 + 20 >> 2] | 0;
                        if (b2 | 0) {
                          c[d2 + 20 >> 2] = b2;
                          c[b2 + 24 >> 2] = d2;
                        }
                      }
                    while (0);
                    if (g2 >>> 0 < 16) {
                      w2 = g2 + k2 | 0;
                      c[j2 + 4 >> 2] = w2 | 3;
                      w2 = j2 + w2 + 4 | 0;
                      c[w2 >> 2] = c[w2 >> 2] | 1;
                    } else {
                      c[j2 + 4 >> 2] = k2 | 3;
                      c[h2 + 4 >> 2] = g2 | 1;
                      c[h2 + g2 >> 2] = g2;
                      if (m2 | 0) {
                        e2 = c[2788] | 0;
                        b2 = m2 >>> 3;
                        d2 = 11172 + (b2 << 1 << 2) | 0;
                        b2 = 1 << b2;
                        if (!(n2 & b2)) {
                          c[2783] = n2 | b2;
                          b2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          b2 = c[a2 >> 2] | 0;
                        }
                        c[a2 >> 2] = e2;
                        c[b2 + 12 >> 2] = e2;
                        c[e2 + 8 >> 2] = b2;
                        c[e2 + 12 >> 2] = d2;
                      }
                      c[2785] = g2;
                      c[2788] = h2;
                    }
                    w2 = j2 + 8 | 0;
                    l = x2;
                    return w2 | 0;
                  } else
                    n2 = k2;
                } else
                  n2 = k2;
              } else
                n2 = k2;
            } else if (a2 >>> 0 <= 4294967231) {
              a2 = a2 + 11 | 0;
              k2 = a2 & -8;
              j2 = c[2784] | 0;
              if (j2) {
                e2 = 0 - k2 | 0;
                a2 = a2 >>> 8;
                if (a2) {
                  if (k2 >>> 0 > 16777215)
                    i3 = 31;
                  else {
                    n2 = (a2 + 1048320 | 0) >>> 16 & 8;
                    v2 = a2 << n2;
                    m2 = (v2 + 520192 | 0) >>> 16 & 4;
                    v2 = v2 << m2;
                    i3 = (v2 + 245760 | 0) >>> 16 & 2;
                    i3 = 14 - (m2 | n2 | i3) + (v2 << i3 >>> 15) | 0;
                    i3 = k2 >>> (i3 + 7 | 0) & 1 | i3 << 1;
                  }
                } else
                  i3 = 0;
                d2 = c[11436 + (i3 << 2) >> 2] | 0;
                a:
                  do
                    if (!d2) {
                      d2 = 0;
                      a2 = 0;
                      v2 = 57;
                    } else {
                      a2 = 0;
                      h2 = k2 << ((i3 | 0) == 31 ? 0 : 25 - (i3 >>> 1) | 0);
                      g2 = 0;
                      while (1) {
                        f2 = (c[d2 + 4 >> 2] & -8) - k2 | 0;
                        if (f2 >>> 0 < e2 >>> 0)
                          if (!f2) {
                            a2 = d2;
                            e2 = 0;
                            f2 = d2;
                            v2 = 61;
                            break a;
                          } else {
                            a2 = d2;
                            e2 = f2;
                          }
                        f2 = c[d2 + 20 >> 2] | 0;
                        d2 = c[d2 + 16 + (h2 >>> 31 << 2) >> 2] | 0;
                        g2 = (f2 | 0) == 0 | (f2 | 0) == (d2 | 0) ? g2 : f2;
                        f2 = (d2 | 0) == 0;
                        if (f2) {
                          d2 = g2;
                          v2 = 57;
                          break;
                        } else
                          h2 = h2 << ((f2 ^ 1) & 1);
                      }
                    }
                  while (0);
                if ((v2 | 0) == 57) {
                  if ((d2 | 0) == 0 & (a2 | 0) == 0) {
                    a2 = 2 << i3;
                    a2 = j2 & (a2 | 0 - a2);
                    if (!a2) {
                      n2 = k2;
                      break;
                    }
                    n2 = (a2 & 0 - a2) + -1 | 0;
                    h2 = n2 >>> 12 & 16;
                    n2 = n2 >>> h2;
                    g2 = n2 >>> 5 & 8;
                    n2 = n2 >>> g2;
                    i3 = n2 >>> 2 & 4;
                    n2 = n2 >>> i3;
                    m2 = n2 >>> 1 & 2;
                    n2 = n2 >>> m2;
                    d2 = n2 >>> 1 & 1;
                    a2 = 0;
                    d2 = c[11436 + ((g2 | h2 | i3 | m2 | d2) + (n2 >>> d2) << 2) >> 2] | 0;
                  }
                  if (!d2) {
                    i3 = a2;
                    h2 = e2;
                  } else {
                    f2 = d2;
                    v2 = 61;
                  }
                }
                if ((v2 | 0) == 61)
                  while (1) {
                    v2 = 0;
                    d2 = (c[f2 + 4 >> 2] & -8) - k2 | 0;
                    n2 = d2 >>> 0 < e2 >>> 0;
                    d2 = n2 ? d2 : e2;
                    a2 = n2 ? f2 : a2;
                    f2 = c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
                    if (!f2) {
                      i3 = a2;
                      h2 = d2;
                      break;
                    } else {
                      e2 = d2;
                      v2 = 61;
                    }
                  }
                if ((i3 | 0) != 0 ? h2 >>> 0 < ((c[2785] | 0) - k2 | 0) >>> 0 : 0) {
                  g2 = i3 + k2 | 0;
                  if (i3 >>> 0 >= g2 >>> 0) {
                    w2 = 0;
                    l = x2;
                    return w2 | 0;
                  }
                  f2 = c[i3 + 24 >> 2] | 0;
                  b2 = c[i3 + 12 >> 2] | 0;
                  do
                    if ((b2 | 0) == (i3 | 0)) {
                      a2 = i3 + 20 | 0;
                      b2 = c[a2 >> 2] | 0;
                      if (!b2) {
                        a2 = i3 + 16 | 0;
                        b2 = c[a2 >> 2] | 0;
                        if (!b2) {
                          b2 = 0;
                          break;
                        }
                      }
                      while (1) {
                        d2 = b2 + 20 | 0;
                        e2 = c[d2 >> 2] | 0;
                        if (e2 | 0) {
                          b2 = e2;
                          a2 = d2;
                          continue;
                        }
                        d2 = b2 + 16 | 0;
                        e2 = c[d2 >> 2] | 0;
                        if (!e2)
                          break;
                        else {
                          b2 = e2;
                          a2 = d2;
                        }
                      }
                      c[a2 >> 2] = 0;
                    } else {
                      w2 = c[i3 + 8 >> 2] | 0;
                      c[w2 + 12 >> 2] = b2;
                      c[b2 + 8 >> 2] = w2;
                    }
                  while (0);
                  do
                    if (f2) {
                      a2 = c[i3 + 28 >> 2] | 0;
                      d2 = 11436 + (a2 << 2) | 0;
                      if ((i3 | 0) == (c[d2 >> 2] | 0)) {
                        c[d2 >> 2] = b2;
                        if (!b2) {
                          e2 = j2 & ~(1 << a2);
                          c[2784] = e2;
                          break;
                        }
                      } else {
                        c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) != (i3 | 0) & 1) << 2) >> 2] = b2;
                        if (!b2) {
                          e2 = j2;
                          break;
                        }
                      }
                      c[b2 + 24 >> 2] = f2;
                      a2 = c[i3 + 16 >> 2] | 0;
                      if (a2 | 0) {
                        c[b2 + 16 >> 2] = a2;
                        c[a2 + 24 >> 2] = b2;
                      }
                      a2 = c[i3 + 20 >> 2] | 0;
                      if (a2) {
                        c[b2 + 20 >> 2] = a2;
                        c[a2 + 24 >> 2] = b2;
                        e2 = j2;
                      } else
                        e2 = j2;
                    } else
                      e2 = j2;
                  while (0);
                  do
                    if (h2 >>> 0 >= 16) {
                      c[i3 + 4 >> 2] = k2 | 3;
                      c[g2 + 4 >> 2] = h2 | 1;
                      c[g2 + h2 >> 2] = h2;
                      b2 = h2 >>> 3;
                      if (h2 >>> 0 < 256) {
                        d2 = 11172 + (b2 << 1 << 2) | 0;
                        a2 = c[2783] | 0;
                        b2 = 1 << b2;
                        if (!(a2 & b2)) {
                          c[2783] = a2 | b2;
                          b2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          b2 = c[a2 >> 2] | 0;
                        }
                        c[a2 >> 2] = g2;
                        c[b2 + 12 >> 2] = g2;
                        c[g2 + 8 >> 2] = b2;
                        c[g2 + 12 >> 2] = d2;
                        break;
                      }
                      b2 = h2 >>> 8;
                      if (b2) {
                        if (h2 >>> 0 > 16777215)
                          b2 = 31;
                        else {
                          v2 = (b2 + 1048320 | 0) >>> 16 & 8;
                          w2 = b2 << v2;
                          u2 = (w2 + 520192 | 0) >>> 16 & 4;
                          w2 = w2 << u2;
                          b2 = (w2 + 245760 | 0) >>> 16 & 2;
                          b2 = 14 - (u2 | v2 | b2) + (w2 << b2 >>> 15) | 0;
                          b2 = h2 >>> (b2 + 7 | 0) & 1 | b2 << 1;
                        }
                      } else
                        b2 = 0;
                      d2 = 11436 + (b2 << 2) | 0;
                      c[g2 + 28 >> 2] = b2;
                      a2 = g2 + 16 | 0;
                      c[a2 + 4 >> 2] = 0;
                      c[a2 >> 2] = 0;
                      a2 = 1 << b2;
                      if (!(e2 & a2)) {
                        c[2784] = e2 | a2;
                        c[d2 >> 2] = g2;
                        c[g2 + 24 >> 2] = d2;
                        c[g2 + 12 >> 2] = g2;
                        c[g2 + 8 >> 2] = g2;
                        break;
                      }
                      a2 = h2 << ((b2 | 0) == 31 ? 0 : 25 - (b2 >>> 1) | 0);
                      d2 = c[d2 >> 2] | 0;
                      while (1) {
                        if ((c[d2 + 4 >> 2] & -8 | 0) == (h2 | 0)) {
                          v2 = 97;
                          break;
                        }
                        e2 = d2 + 16 + (a2 >>> 31 << 2) | 0;
                        b2 = c[e2 >> 2] | 0;
                        if (!b2) {
                          v2 = 96;
                          break;
                        } else {
                          a2 = a2 << 1;
                          d2 = b2;
                        }
                      }
                      if ((v2 | 0) == 96) {
                        c[e2 >> 2] = g2;
                        c[g2 + 24 >> 2] = d2;
                        c[g2 + 12 >> 2] = g2;
                        c[g2 + 8 >> 2] = g2;
                        break;
                      } else if ((v2 | 0) == 97) {
                        v2 = d2 + 8 | 0;
                        w2 = c[v2 >> 2] | 0;
                        c[w2 + 12 >> 2] = g2;
                        c[v2 >> 2] = g2;
                        c[g2 + 8 >> 2] = w2;
                        c[g2 + 12 >> 2] = d2;
                        c[g2 + 24 >> 2] = 0;
                        break;
                      }
                    } else {
                      w2 = h2 + k2 | 0;
                      c[i3 + 4 >> 2] = w2 | 3;
                      w2 = i3 + w2 + 4 | 0;
                      c[w2 >> 2] = c[w2 >> 2] | 1;
                    }
                  while (0);
                  w2 = i3 + 8 | 0;
                  l = x2;
                  return w2 | 0;
                } else
                  n2 = k2;
              } else
                n2 = k2;
            } else
              n2 = -1;
          while (0);
          d2 = c[2785] | 0;
          if (d2 >>> 0 >= n2 >>> 0) {
            b2 = d2 - n2 | 0;
            a2 = c[2788] | 0;
            if (b2 >>> 0 > 15) {
              w2 = a2 + n2 | 0;
              c[2788] = w2;
              c[2785] = b2;
              c[w2 + 4 >> 2] = b2 | 1;
              c[w2 + b2 >> 2] = b2;
              c[a2 + 4 >> 2] = n2 | 3;
            } else {
              c[2785] = 0;
              c[2788] = 0;
              c[a2 + 4 >> 2] = d2 | 3;
              w2 = a2 + d2 + 4 | 0;
              c[w2 >> 2] = c[w2 >> 2] | 1;
            }
            w2 = a2 + 8 | 0;
            l = x2;
            return w2 | 0;
          }
          h2 = c[2786] | 0;
          if (h2 >>> 0 > n2 >>> 0) {
            u2 = h2 - n2 | 0;
            c[2786] = u2;
            w2 = c[2789] | 0;
            v2 = w2 + n2 | 0;
            c[2789] = v2;
            c[v2 + 4 >> 2] = u2 | 1;
            c[w2 + 4 >> 2] = n2 | 3;
            w2 = w2 + 8 | 0;
            l = x2;
            return w2 | 0;
          }
          if (!(c[2901] | 0)) {
            c[2903] = 4096;
            c[2902] = 4096;
            c[2904] = -1;
            c[2905] = -1;
            c[2906] = 0;
            c[2894] = 0;
            a2 = o2 & -16 ^ 1431655768;
            c[o2 >> 2] = a2;
            c[2901] = a2;
            a2 = 4096;
          } else
            a2 = c[2903] | 0;
          i3 = n2 + 48 | 0;
          j2 = n2 + 47 | 0;
          g2 = a2 + j2 | 0;
          f2 = 0 - a2 | 0;
          k2 = g2 & f2;
          if (k2 >>> 0 <= n2 >>> 0) {
            w2 = 0;
            l = x2;
            return w2 | 0;
          }
          a2 = c[2893] | 0;
          if (a2 | 0 ? (m2 = c[2891] | 0, o2 = m2 + k2 | 0, o2 >>> 0 <= m2 >>> 0 | o2 >>> 0 > a2 >>> 0) : 0) {
            w2 = 0;
            l = x2;
            return w2 | 0;
          }
          b:
            do
              if (!(c[2894] & 4)) {
                d2 = c[2789] | 0;
                c:
                  do
                    if (d2) {
                      e2 = 11580;
                      while (1) {
                        a2 = c[e2 >> 2] | 0;
                        if (a2 >>> 0 <= d2 >>> 0 ? (r2 = e2 + 4 | 0, (a2 + (c[r2 >> 2] | 0) | 0) >>> 0 > d2 >>> 0) : 0)
                          break;
                        a2 = c[e2 + 8 >> 2] | 0;
                        if (!a2) {
                          v2 = 118;
                          break c;
                        } else
                          e2 = a2;
                      }
                      b2 = g2 - h2 & f2;
                      if (b2 >>> 0 < 2147483647) {
                        a2 = FC(b2 | 0) | 0;
                        if ((a2 | 0) == ((c[e2 >> 2] | 0) + (c[r2 >> 2] | 0) | 0)) {
                          if ((a2 | 0) != (-1 | 0)) {
                            h2 = b2;
                            g2 = a2;
                            v2 = 135;
                            break b;
                          }
                        } else {
                          e2 = a2;
                          v2 = 126;
                        }
                      } else
                        b2 = 0;
                    } else
                      v2 = 118;
                  while (0);
                do
                  if ((v2 | 0) == 118) {
                    d2 = FC(0) | 0;
                    if ((d2 | 0) != (-1 | 0) ? (b2 = d2, p2 = c[2902] | 0, q2 = p2 + -1 | 0, b2 = ((q2 & b2 | 0) == 0 ? 0 : (q2 + b2 & 0 - p2) - b2 | 0) + k2 | 0, p2 = c[2891] | 0, q2 = b2 + p2 | 0, b2 >>> 0 > n2 >>> 0 & b2 >>> 0 < 2147483647) : 0) {
                      r2 = c[2893] | 0;
                      if (r2 | 0 ? q2 >>> 0 <= p2 >>> 0 | q2 >>> 0 > r2 >>> 0 : 0) {
                        b2 = 0;
                        break;
                      }
                      a2 = FC(b2 | 0) | 0;
                      if ((a2 | 0) == (d2 | 0)) {
                        h2 = b2;
                        g2 = d2;
                        v2 = 135;
                        break b;
                      } else {
                        e2 = a2;
                        v2 = 126;
                      }
                    } else
                      b2 = 0;
                  }
                while (0);
                do
                  if ((v2 | 0) == 126) {
                    d2 = 0 - b2 | 0;
                    if (!(i3 >>> 0 > b2 >>> 0 & (b2 >>> 0 < 2147483647 & (e2 | 0) != (-1 | 0))))
                      if ((e2 | 0) == (-1 | 0)) {
                        b2 = 0;
                        break;
                      } else {
                        h2 = b2;
                        g2 = e2;
                        v2 = 135;
                        break b;
                      }
                    a2 = c[2903] | 0;
                    a2 = j2 - b2 + a2 & 0 - a2;
                    if (a2 >>> 0 >= 2147483647) {
                      h2 = b2;
                      g2 = e2;
                      v2 = 135;
                      break b;
                    }
                    if ((FC(a2 | 0) | 0) == (-1 | 0)) {
                      FC(d2 | 0) | 0;
                      b2 = 0;
                      break;
                    } else {
                      h2 = a2 + b2 | 0;
                      g2 = e2;
                      v2 = 135;
                      break b;
                    }
                  }
                while (0);
                c[2894] = c[2894] | 4;
                v2 = 133;
              } else {
                b2 = 0;
                v2 = 133;
              }
            while (0);
          if (((v2 | 0) == 133 ? k2 >>> 0 < 2147483647 : 0) ? (u2 = FC(k2 | 0) | 0, r2 = FC(0) | 0, s2 = r2 - u2 | 0, t2 = s2 >>> 0 > (n2 + 40 | 0) >>> 0, !((u2 | 0) == (-1 | 0) | t2 ^ 1 | u2 >>> 0 < r2 >>> 0 & ((u2 | 0) != (-1 | 0) & (r2 | 0) != (-1 | 0)) ^ 1)) : 0) {
            h2 = t2 ? s2 : b2;
            g2 = u2;
            v2 = 135;
          }
          if ((v2 | 0) == 135) {
            b2 = (c[2891] | 0) + h2 | 0;
            c[2891] = b2;
            if (b2 >>> 0 > (c[2892] | 0) >>> 0)
              c[2892] = b2;
            j2 = c[2789] | 0;
            do
              if (j2) {
                b2 = 11580;
                while (1) {
                  a2 = c[b2 >> 2] | 0;
                  d2 = b2 + 4 | 0;
                  e2 = c[d2 >> 2] | 0;
                  if ((g2 | 0) == (a2 + e2 | 0)) {
                    v2 = 145;
                    break;
                  }
                  f2 = c[b2 + 8 >> 2] | 0;
                  if (!f2)
                    break;
                  else
                    b2 = f2;
                }
                if (((v2 | 0) == 145 ? (c[b2 + 12 >> 2] & 8 | 0) == 0 : 0) ? j2 >>> 0 < g2 >>> 0 & j2 >>> 0 >= a2 >>> 0 : 0) {
                  c[d2 >> 2] = e2 + h2;
                  w2 = j2 + 8 | 0;
                  w2 = (w2 & 7 | 0) == 0 ? 0 : 0 - w2 & 7;
                  v2 = j2 + w2 | 0;
                  w2 = (c[2786] | 0) + (h2 - w2) | 0;
                  c[2789] = v2;
                  c[2786] = w2;
                  c[v2 + 4 >> 2] = w2 | 1;
                  c[v2 + w2 + 4 >> 2] = 40;
                  c[2790] = c[2905];
                  break;
                }
                if (g2 >>> 0 < (c[2787] | 0) >>> 0)
                  c[2787] = g2;
                d2 = g2 + h2 | 0;
                b2 = 11580;
                while (1) {
                  if ((c[b2 >> 2] | 0) == (d2 | 0)) {
                    v2 = 153;
                    break;
                  }
                  a2 = c[b2 + 8 >> 2] | 0;
                  if (!a2)
                    break;
                  else
                    b2 = a2;
                }
                if ((v2 | 0) == 153 ? (c[b2 + 12 >> 2] & 8 | 0) == 0 : 0) {
                  c[b2 >> 2] = g2;
                  m2 = b2 + 4 | 0;
                  c[m2 >> 2] = (c[m2 >> 2] | 0) + h2;
                  m2 = g2 + 8 | 0;
                  m2 = g2 + ((m2 & 7 | 0) == 0 ? 0 : 0 - m2 & 7) | 0;
                  b2 = d2 + 8 | 0;
                  b2 = d2 + ((b2 & 7 | 0) == 0 ? 0 : 0 - b2 & 7) | 0;
                  k2 = m2 + n2 | 0;
                  i3 = b2 - m2 - n2 | 0;
                  c[m2 + 4 >> 2] = n2 | 3;
                  do
                    if ((b2 | 0) != (j2 | 0)) {
                      if ((b2 | 0) == (c[2788] | 0)) {
                        w2 = (c[2785] | 0) + i3 | 0;
                        c[2785] = w2;
                        c[2788] = k2;
                        c[k2 + 4 >> 2] = w2 | 1;
                        c[k2 + w2 >> 2] = w2;
                        break;
                      }
                      a2 = c[b2 + 4 >> 2] | 0;
                      if ((a2 & 3 | 0) == 1) {
                        h2 = a2 & -8;
                        e2 = a2 >>> 3;
                        d:
                          do
                            if (a2 >>> 0 < 256) {
                              a2 = c[b2 + 8 >> 2] | 0;
                              d2 = c[b2 + 12 >> 2] | 0;
                              if ((d2 | 0) == (a2 | 0)) {
                                c[2783] = c[2783] & ~(1 << e2);
                                break;
                              } else {
                                c[a2 + 12 >> 2] = d2;
                                c[d2 + 8 >> 2] = a2;
                                break;
                              }
                            } else {
                              g2 = c[b2 + 24 >> 2] | 0;
                              a2 = c[b2 + 12 >> 2] | 0;
                              do
                                if ((a2 | 0) == (b2 | 0)) {
                                  e2 = b2 + 16 | 0;
                                  d2 = e2 + 4 | 0;
                                  a2 = c[d2 >> 2] | 0;
                                  if (!a2) {
                                    a2 = c[e2 >> 2] | 0;
                                    if (!a2) {
                                      a2 = 0;
                                      break;
                                    } else
                                      d2 = e2;
                                  }
                                  while (1) {
                                    e2 = a2 + 20 | 0;
                                    f2 = c[e2 >> 2] | 0;
                                    if (f2 | 0) {
                                      a2 = f2;
                                      d2 = e2;
                                      continue;
                                    }
                                    e2 = a2 + 16 | 0;
                                    f2 = c[e2 >> 2] | 0;
                                    if (!f2)
                                      break;
                                    else {
                                      a2 = f2;
                                      d2 = e2;
                                    }
                                  }
                                  c[d2 >> 2] = 0;
                                } else {
                                  w2 = c[b2 + 8 >> 2] | 0;
                                  c[w2 + 12 >> 2] = a2;
                                  c[a2 + 8 >> 2] = w2;
                                }
                              while (0);
                              if (!g2)
                                break;
                              d2 = c[b2 + 28 >> 2] | 0;
                              e2 = 11436 + (d2 << 2) | 0;
                              do
                                if ((b2 | 0) != (c[e2 >> 2] | 0)) {
                                  c[g2 + 16 + (((c[g2 + 16 >> 2] | 0) != (b2 | 0) & 1) << 2) >> 2] = a2;
                                  if (!a2)
                                    break d;
                                } else {
                                  c[e2 >> 2] = a2;
                                  if (a2 | 0)
                                    break;
                                  c[2784] = c[2784] & ~(1 << d2);
                                  break d;
                                }
                              while (0);
                              c[a2 + 24 >> 2] = g2;
                              d2 = b2 + 16 | 0;
                              e2 = c[d2 >> 2] | 0;
                              if (e2 | 0) {
                                c[a2 + 16 >> 2] = e2;
                                c[e2 + 24 >> 2] = a2;
                              }
                              d2 = c[d2 + 4 >> 2] | 0;
                              if (!d2)
                                break;
                              c[a2 + 20 >> 2] = d2;
                              c[d2 + 24 >> 2] = a2;
                            }
                          while (0);
                        b2 = b2 + h2 | 0;
                        f2 = h2 + i3 | 0;
                      } else
                        f2 = i3;
                      b2 = b2 + 4 | 0;
                      c[b2 >> 2] = c[b2 >> 2] & -2;
                      c[k2 + 4 >> 2] = f2 | 1;
                      c[k2 + f2 >> 2] = f2;
                      b2 = f2 >>> 3;
                      if (f2 >>> 0 < 256) {
                        d2 = 11172 + (b2 << 1 << 2) | 0;
                        a2 = c[2783] | 0;
                        b2 = 1 << b2;
                        if (!(a2 & b2)) {
                          c[2783] = a2 | b2;
                          b2 = d2;
                          a2 = d2 + 8 | 0;
                        } else {
                          a2 = d2 + 8 | 0;
                          b2 = c[a2 >> 2] | 0;
                        }
                        c[a2 >> 2] = k2;
                        c[b2 + 12 >> 2] = k2;
                        c[k2 + 8 >> 2] = b2;
                        c[k2 + 12 >> 2] = d2;
                        break;
                      }
                      b2 = f2 >>> 8;
                      do
                        if (!b2)
                          b2 = 0;
                        else {
                          if (f2 >>> 0 > 16777215) {
                            b2 = 31;
                            break;
                          }
                          v2 = (b2 + 1048320 | 0) >>> 16 & 8;
                          w2 = b2 << v2;
                          u2 = (w2 + 520192 | 0) >>> 16 & 4;
                          w2 = w2 << u2;
                          b2 = (w2 + 245760 | 0) >>> 16 & 2;
                          b2 = 14 - (u2 | v2 | b2) + (w2 << b2 >>> 15) | 0;
                          b2 = f2 >>> (b2 + 7 | 0) & 1 | b2 << 1;
                        }
                      while (0);
                      e2 = 11436 + (b2 << 2) | 0;
                      c[k2 + 28 >> 2] = b2;
                      a2 = k2 + 16 | 0;
                      c[a2 + 4 >> 2] = 0;
                      c[a2 >> 2] = 0;
                      a2 = c[2784] | 0;
                      d2 = 1 << b2;
                      if (!(a2 & d2)) {
                        c[2784] = a2 | d2;
                        c[e2 >> 2] = k2;
                        c[k2 + 24 >> 2] = e2;
                        c[k2 + 12 >> 2] = k2;
                        c[k2 + 8 >> 2] = k2;
                        break;
                      }
                      a2 = f2 << ((b2 | 0) == 31 ? 0 : 25 - (b2 >>> 1) | 0);
                      d2 = c[e2 >> 2] | 0;
                      while (1) {
                        if ((c[d2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                          v2 = 194;
                          break;
                        }
                        e2 = d2 + 16 + (a2 >>> 31 << 2) | 0;
                        b2 = c[e2 >> 2] | 0;
                        if (!b2) {
                          v2 = 193;
                          break;
                        } else {
                          a2 = a2 << 1;
                          d2 = b2;
                        }
                      }
                      if ((v2 | 0) == 193) {
                        c[e2 >> 2] = k2;
                        c[k2 + 24 >> 2] = d2;
                        c[k2 + 12 >> 2] = k2;
                        c[k2 + 8 >> 2] = k2;
                        break;
                      } else if ((v2 | 0) == 194) {
                        v2 = d2 + 8 | 0;
                        w2 = c[v2 >> 2] | 0;
                        c[w2 + 12 >> 2] = k2;
                        c[v2 >> 2] = k2;
                        c[k2 + 8 >> 2] = w2;
                        c[k2 + 12 >> 2] = d2;
                        c[k2 + 24 >> 2] = 0;
                        break;
                      }
                    } else {
                      w2 = (c[2786] | 0) + i3 | 0;
                      c[2786] = w2;
                      c[2789] = k2;
                      c[k2 + 4 >> 2] = w2 | 1;
                    }
                  while (0);
                  w2 = m2 + 8 | 0;
                  l = x2;
                  return w2 | 0;
                }
                b2 = 11580;
                while (1) {
                  a2 = c[b2 >> 2] | 0;
                  if (a2 >>> 0 <= j2 >>> 0 ? (w2 = a2 + (c[b2 + 4 >> 2] | 0) | 0, w2 >>> 0 > j2 >>> 0) : 0)
                    break;
                  b2 = c[b2 + 8 >> 2] | 0;
                }
                f2 = w2 + -47 | 0;
                a2 = f2 + 8 | 0;
                a2 = f2 + ((a2 & 7 | 0) == 0 ? 0 : 0 - a2 & 7) | 0;
                f2 = j2 + 16 | 0;
                a2 = a2 >>> 0 < f2 >>> 0 ? j2 : a2;
                b2 = a2 + 8 | 0;
                d2 = g2 + 8 | 0;
                d2 = (d2 & 7 | 0) == 0 ? 0 : 0 - d2 & 7;
                v2 = g2 + d2 | 0;
                d2 = h2 + -40 - d2 | 0;
                c[2789] = v2;
                c[2786] = d2;
                c[v2 + 4 >> 2] = d2 | 1;
                c[v2 + d2 + 4 >> 2] = 40;
                c[2790] = c[2905];
                d2 = a2 + 4 | 0;
                c[d2 >> 2] = 27;
                c[b2 >> 2] = c[2895];
                c[b2 + 4 >> 2] = c[2896];
                c[b2 + 8 >> 2] = c[2897];
                c[b2 + 12 >> 2] = c[2898];
                c[2895] = g2;
                c[2896] = h2;
                c[2898] = 0;
                c[2897] = b2;
                b2 = a2 + 24 | 0;
                do {
                  v2 = b2;
                  b2 = b2 + 4 | 0;
                  c[b2 >> 2] = 7;
                } while ((v2 + 8 | 0) >>> 0 < w2 >>> 0);
                if ((a2 | 0) != (j2 | 0)) {
                  g2 = a2 - j2 | 0;
                  c[d2 >> 2] = c[d2 >> 2] & -2;
                  c[j2 + 4 >> 2] = g2 | 1;
                  c[a2 >> 2] = g2;
                  b2 = g2 >>> 3;
                  if (g2 >>> 0 < 256) {
                    d2 = 11172 + (b2 << 1 << 2) | 0;
                    a2 = c[2783] | 0;
                    b2 = 1 << b2;
                    if (!(a2 & b2)) {
                      c[2783] = a2 | b2;
                      b2 = d2;
                      a2 = d2 + 8 | 0;
                    } else {
                      a2 = d2 + 8 | 0;
                      b2 = c[a2 >> 2] | 0;
                    }
                    c[a2 >> 2] = j2;
                    c[b2 + 12 >> 2] = j2;
                    c[j2 + 8 >> 2] = b2;
                    c[j2 + 12 >> 2] = d2;
                    break;
                  }
                  b2 = g2 >>> 8;
                  if (b2) {
                    if (g2 >>> 0 > 16777215)
                      d2 = 31;
                    else {
                      v2 = (b2 + 1048320 | 0) >>> 16 & 8;
                      w2 = b2 << v2;
                      u2 = (w2 + 520192 | 0) >>> 16 & 4;
                      w2 = w2 << u2;
                      d2 = (w2 + 245760 | 0) >>> 16 & 2;
                      d2 = 14 - (u2 | v2 | d2) + (w2 << d2 >>> 15) | 0;
                      d2 = g2 >>> (d2 + 7 | 0) & 1 | d2 << 1;
                    }
                  } else
                    d2 = 0;
                  e2 = 11436 + (d2 << 2) | 0;
                  c[j2 + 28 >> 2] = d2;
                  c[j2 + 20 >> 2] = 0;
                  c[f2 >> 2] = 0;
                  b2 = c[2784] | 0;
                  a2 = 1 << d2;
                  if (!(b2 & a2)) {
                    c[2784] = b2 | a2;
                    c[e2 >> 2] = j2;
                    c[j2 + 24 >> 2] = e2;
                    c[j2 + 12 >> 2] = j2;
                    c[j2 + 8 >> 2] = j2;
                    break;
                  }
                  a2 = g2 << ((d2 | 0) == 31 ? 0 : 25 - (d2 >>> 1) | 0);
                  d2 = c[e2 >> 2] | 0;
                  while (1) {
                    if ((c[d2 + 4 >> 2] & -8 | 0) == (g2 | 0)) {
                      v2 = 216;
                      break;
                    }
                    e2 = d2 + 16 + (a2 >>> 31 << 2) | 0;
                    b2 = c[e2 >> 2] | 0;
                    if (!b2) {
                      v2 = 215;
                      break;
                    } else {
                      a2 = a2 << 1;
                      d2 = b2;
                    }
                  }
                  if ((v2 | 0) == 215) {
                    c[e2 >> 2] = j2;
                    c[j2 + 24 >> 2] = d2;
                    c[j2 + 12 >> 2] = j2;
                    c[j2 + 8 >> 2] = j2;
                    break;
                  } else if ((v2 | 0) == 216) {
                    v2 = d2 + 8 | 0;
                    w2 = c[v2 >> 2] | 0;
                    c[w2 + 12 >> 2] = j2;
                    c[v2 >> 2] = j2;
                    c[j2 + 8 >> 2] = w2;
                    c[j2 + 12 >> 2] = d2;
                    c[j2 + 24 >> 2] = 0;
                    break;
                  }
                }
              } else {
                w2 = c[2787] | 0;
                if ((w2 | 0) == 0 | g2 >>> 0 < w2 >>> 0)
                  c[2787] = g2;
                c[2895] = g2;
                c[2896] = h2;
                c[2898] = 0;
                c[2792] = c[2901];
                c[2791] = -1;
                b2 = 0;
                do {
                  w2 = 11172 + (b2 << 1 << 2) | 0;
                  c[w2 + 12 >> 2] = w2;
                  c[w2 + 8 >> 2] = w2;
                  b2 = b2 + 1 | 0;
                } while ((b2 | 0) != 32);
                w2 = g2 + 8 | 0;
                w2 = (w2 & 7 | 0) == 0 ? 0 : 0 - w2 & 7;
                v2 = g2 + w2 | 0;
                w2 = h2 + -40 - w2 | 0;
                c[2789] = v2;
                c[2786] = w2;
                c[v2 + 4 >> 2] = w2 | 1;
                c[v2 + w2 + 4 >> 2] = 40;
                c[2790] = c[2905];
              }
            while (0);
            b2 = c[2786] | 0;
            if (b2 >>> 0 > n2 >>> 0) {
              u2 = b2 - n2 | 0;
              c[2786] = u2;
              w2 = c[2789] | 0;
              v2 = w2 + n2 | 0;
              c[2789] = v2;
              c[v2 + 4 >> 2] = u2 | 1;
              c[w2 + 4 >> 2] = n2 | 3;
              w2 = w2 + 8 | 0;
              l = x2;
              return w2 | 0;
            }
          }
          c[(vB() | 0) >> 2] = 12;
          w2 = 0;
          l = x2;
          return w2 | 0;
        }
        function pB(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0, e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          if (!a2)
            return;
          d2 = a2 + -8 | 0;
          f2 = c[2787] | 0;
          a2 = c[a2 + -4 >> 2] | 0;
          b2 = a2 & -8;
          j2 = d2 + b2 | 0;
          do
            if (!(a2 & 1)) {
              e2 = c[d2 >> 2] | 0;
              if (!(a2 & 3))
                return;
              h2 = d2 + (0 - e2) | 0;
              g2 = e2 + b2 | 0;
              if (h2 >>> 0 < f2 >>> 0)
                return;
              if ((h2 | 0) == (c[2788] | 0)) {
                a2 = j2 + 4 | 0;
                b2 = c[a2 >> 2] | 0;
                if ((b2 & 3 | 0) != 3) {
                  i3 = h2;
                  b2 = g2;
                  break;
                }
                c[2785] = g2;
                c[a2 >> 2] = b2 & -2;
                c[h2 + 4 >> 2] = g2 | 1;
                c[h2 + g2 >> 2] = g2;
                return;
              }
              d2 = e2 >>> 3;
              if (e2 >>> 0 < 256) {
                a2 = c[h2 + 8 >> 2] | 0;
                b2 = c[h2 + 12 >> 2] | 0;
                if ((b2 | 0) == (a2 | 0)) {
                  c[2783] = c[2783] & ~(1 << d2);
                  i3 = h2;
                  b2 = g2;
                  break;
                } else {
                  c[a2 + 12 >> 2] = b2;
                  c[b2 + 8 >> 2] = a2;
                  i3 = h2;
                  b2 = g2;
                  break;
                }
              }
              f2 = c[h2 + 24 >> 2] | 0;
              a2 = c[h2 + 12 >> 2] | 0;
              do
                if ((a2 | 0) == (h2 | 0)) {
                  d2 = h2 + 16 | 0;
                  b2 = d2 + 4 | 0;
                  a2 = c[b2 >> 2] | 0;
                  if (!a2) {
                    a2 = c[d2 >> 2] | 0;
                    if (!a2) {
                      a2 = 0;
                      break;
                    } else
                      b2 = d2;
                  }
                  while (1) {
                    d2 = a2 + 20 | 0;
                    e2 = c[d2 >> 2] | 0;
                    if (e2 | 0) {
                      a2 = e2;
                      b2 = d2;
                      continue;
                    }
                    d2 = a2 + 16 | 0;
                    e2 = c[d2 >> 2] | 0;
                    if (!e2)
                      break;
                    else {
                      a2 = e2;
                      b2 = d2;
                    }
                  }
                  c[b2 >> 2] = 0;
                } else {
                  i3 = c[h2 + 8 >> 2] | 0;
                  c[i3 + 12 >> 2] = a2;
                  c[a2 + 8 >> 2] = i3;
                }
              while (0);
              if (f2) {
                b2 = c[h2 + 28 >> 2] | 0;
                d2 = 11436 + (b2 << 2) | 0;
                if ((h2 | 0) == (c[d2 >> 2] | 0)) {
                  c[d2 >> 2] = a2;
                  if (!a2) {
                    c[2784] = c[2784] & ~(1 << b2);
                    i3 = h2;
                    b2 = g2;
                    break;
                  }
                } else {
                  c[f2 + 16 + (((c[f2 + 16 >> 2] | 0) != (h2 | 0) & 1) << 2) >> 2] = a2;
                  if (!a2) {
                    i3 = h2;
                    b2 = g2;
                    break;
                  }
                }
                c[a2 + 24 >> 2] = f2;
                b2 = h2 + 16 | 0;
                d2 = c[b2 >> 2] | 0;
                if (d2 | 0) {
                  c[a2 + 16 >> 2] = d2;
                  c[d2 + 24 >> 2] = a2;
                }
                b2 = c[b2 + 4 >> 2] | 0;
                if (b2) {
                  c[a2 + 20 >> 2] = b2;
                  c[b2 + 24 >> 2] = a2;
                  i3 = h2;
                  b2 = g2;
                } else {
                  i3 = h2;
                  b2 = g2;
                }
              } else {
                i3 = h2;
                b2 = g2;
              }
            } else {
              i3 = d2;
              h2 = d2;
            }
          while (0);
          if (h2 >>> 0 >= j2 >>> 0)
            return;
          a2 = j2 + 4 | 0;
          e2 = c[a2 >> 2] | 0;
          if (!(e2 & 1))
            return;
          if (!(e2 & 2)) {
            a2 = c[2788] | 0;
            if ((j2 | 0) == (c[2789] | 0)) {
              j2 = (c[2786] | 0) + b2 | 0;
              c[2786] = j2;
              c[2789] = i3;
              c[i3 + 4 >> 2] = j2 | 1;
              if ((i3 | 0) != (a2 | 0))
                return;
              c[2788] = 0;
              c[2785] = 0;
              return;
            }
            if ((j2 | 0) == (a2 | 0)) {
              j2 = (c[2785] | 0) + b2 | 0;
              c[2785] = j2;
              c[2788] = h2;
              c[i3 + 4 >> 2] = j2 | 1;
              c[h2 + j2 >> 2] = j2;
              return;
            }
            f2 = (e2 & -8) + b2 | 0;
            d2 = e2 >>> 3;
            do
              if (e2 >>> 0 < 256) {
                b2 = c[j2 + 8 >> 2] | 0;
                a2 = c[j2 + 12 >> 2] | 0;
                if ((a2 | 0) == (b2 | 0)) {
                  c[2783] = c[2783] & ~(1 << d2);
                  break;
                } else {
                  c[b2 + 12 >> 2] = a2;
                  c[a2 + 8 >> 2] = b2;
                  break;
                }
              } else {
                g2 = c[j2 + 24 >> 2] | 0;
                a2 = c[j2 + 12 >> 2] | 0;
                do
                  if ((a2 | 0) == (j2 | 0)) {
                    d2 = j2 + 16 | 0;
                    b2 = d2 + 4 | 0;
                    a2 = c[b2 >> 2] | 0;
                    if (!a2) {
                      a2 = c[d2 >> 2] | 0;
                      if (!a2) {
                        d2 = 0;
                        break;
                      } else
                        b2 = d2;
                    }
                    while (1) {
                      d2 = a2 + 20 | 0;
                      e2 = c[d2 >> 2] | 0;
                      if (e2 | 0) {
                        a2 = e2;
                        b2 = d2;
                        continue;
                      }
                      d2 = a2 + 16 | 0;
                      e2 = c[d2 >> 2] | 0;
                      if (!e2)
                        break;
                      else {
                        a2 = e2;
                        b2 = d2;
                      }
                    }
                    c[b2 >> 2] = 0;
                    d2 = a2;
                  } else {
                    d2 = c[j2 + 8 >> 2] | 0;
                    c[d2 + 12 >> 2] = a2;
                    c[a2 + 8 >> 2] = d2;
                    d2 = a2;
                  }
                while (0);
                if (g2 | 0) {
                  a2 = c[j2 + 28 >> 2] | 0;
                  b2 = 11436 + (a2 << 2) | 0;
                  if ((j2 | 0) == (c[b2 >> 2] | 0)) {
                    c[b2 >> 2] = d2;
                    if (!d2) {
                      c[2784] = c[2784] & ~(1 << a2);
                      break;
                    }
                  } else {
                    c[g2 + 16 + (((c[g2 + 16 >> 2] | 0) != (j2 | 0) & 1) << 2) >> 2] = d2;
                    if (!d2)
                      break;
                  }
                  c[d2 + 24 >> 2] = g2;
                  a2 = j2 + 16 | 0;
                  b2 = c[a2 >> 2] | 0;
                  if (b2 | 0) {
                    c[d2 + 16 >> 2] = b2;
                    c[b2 + 24 >> 2] = d2;
                  }
                  a2 = c[a2 + 4 >> 2] | 0;
                  if (a2 | 0) {
                    c[d2 + 20 >> 2] = a2;
                    c[a2 + 24 >> 2] = d2;
                  }
                }
              }
            while (0);
            c[i3 + 4 >> 2] = f2 | 1;
            c[h2 + f2 >> 2] = f2;
            if ((i3 | 0) == (c[2788] | 0)) {
              c[2785] = f2;
              return;
            }
          } else {
            c[a2 >> 2] = e2 & -2;
            c[i3 + 4 >> 2] = b2 | 1;
            c[h2 + b2 >> 2] = b2;
            f2 = b2;
          }
          a2 = f2 >>> 3;
          if (f2 >>> 0 < 256) {
            d2 = 11172 + (a2 << 1 << 2) | 0;
            b2 = c[2783] | 0;
            a2 = 1 << a2;
            if (!(b2 & a2)) {
              c[2783] = b2 | a2;
              a2 = d2;
              b2 = d2 + 8 | 0;
            } else {
              b2 = d2 + 8 | 0;
              a2 = c[b2 >> 2] | 0;
            }
            c[b2 >> 2] = i3;
            c[a2 + 12 >> 2] = i3;
            c[i3 + 8 >> 2] = a2;
            c[i3 + 12 >> 2] = d2;
            return;
          }
          a2 = f2 >>> 8;
          if (a2) {
            if (f2 >>> 0 > 16777215)
              a2 = 31;
            else {
              h2 = (a2 + 1048320 | 0) >>> 16 & 8;
              j2 = a2 << h2;
              g2 = (j2 + 520192 | 0) >>> 16 & 4;
              j2 = j2 << g2;
              a2 = (j2 + 245760 | 0) >>> 16 & 2;
              a2 = 14 - (g2 | h2 | a2) + (j2 << a2 >>> 15) | 0;
              a2 = f2 >>> (a2 + 7 | 0) & 1 | a2 << 1;
            }
          } else
            a2 = 0;
          e2 = 11436 + (a2 << 2) | 0;
          c[i3 + 28 >> 2] = a2;
          c[i3 + 20 >> 2] = 0;
          c[i3 + 16 >> 2] = 0;
          b2 = c[2784] | 0;
          d2 = 1 << a2;
          do
            if (b2 & d2) {
              b2 = f2 << ((a2 | 0) == 31 ? 0 : 25 - (a2 >>> 1) | 0);
              d2 = c[e2 >> 2] | 0;
              while (1) {
                if ((c[d2 + 4 >> 2] & -8 | 0) == (f2 | 0)) {
                  a2 = 73;
                  break;
                }
                e2 = d2 + 16 + (b2 >>> 31 << 2) | 0;
                a2 = c[e2 >> 2] | 0;
                if (!a2) {
                  a2 = 72;
                  break;
                } else {
                  b2 = b2 << 1;
                  d2 = a2;
                }
              }
              if ((a2 | 0) == 72) {
                c[e2 >> 2] = i3;
                c[i3 + 24 >> 2] = d2;
                c[i3 + 12 >> 2] = i3;
                c[i3 + 8 >> 2] = i3;
                break;
              } else if ((a2 | 0) == 73) {
                h2 = d2 + 8 | 0;
                j2 = c[h2 >> 2] | 0;
                c[j2 + 12 >> 2] = i3;
                c[h2 >> 2] = i3;
                c[i3 + 8 >> 2] = j2;
                c[i3 + 12 >> 2] = d2;
                c[i3 + 24 >> 2] = 0;
                break;
              }
            } else {
              c[2784] = b2 | d2;
              c[e2 >> 2] = i3;
              c[i3 + 24 >> 2] = e2;
              c[i3 + 12 >> 2] = i3;
              c[i3 + 8 >> 2] = i3;
            }
          while (0);
          j2 = (c[2791] | 0) + -1 | 0;
          c[2791] = j2;
          if (!j2)
            a2 = 11588;
          else
            return;
          while (1) {
            a2 = c[a2 >> 2] | 0;
            if (!a2)
              break;
            else
              a2 = a2 + 8 | 0;
          }
          c[2791] = -1;
          return;
        }
        function qB() {
          return 11628;
        }
        function rB(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          b2 = l;
          l = l + 16 | 0;
          d2 = b2;
          c[d2 >> 2] = yB(c[a2 + 60 >> 2] | 0) | 0;
          a2 = uB(db(6, d2 | 0) | 0) | 0;
          l = b2;
          return a2 | 0;
        }
        function sB(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
          n2 = l;
          l = l + 48 | 0;
          k2 = n2 + 16 | 0;
          g2 = n2;
          f2 = n2 + 32 | 0;
          i3 = a2 + 28 | 0;
          e2 = c[i3 >> 2] | 0;
          c[f2 >> 2] = e2;
          j2 = a2 + 20 | 0;
          e2 = (c[j2 >> 2] | 0) - e2 | 0;
          c[f2 + 4 >> 2] = e2;
          c[f2 + 8 >> 2] = b2;
          c[f2 + 12 >> 2] = d2;
          e2 = e2 + d2 | 0;
          h2 = a2 + 60 | 0;
          c[g2 >> 2] = c[h2 >> 2];
          c[g2 + 4 >> 2] = f2;
          c[g2 + 8 >> 2] = 2;
          g2 = uB(gb(146, g2 | 0) | 0) | 0;
          a:
            do
              if ((e2 | 0) != (g2 | 0)) {
                b2 = 2;
                while (1) {
                  if ((g2 | 0) < 0)
                    break;
                  e2 = e2 - g2 | 0;
                  p2 = c[f2 + 4 >> 2] | 0;
                  o2 = g2 >>> 0 > p2 >>> 0;
                  f2 = o2 ? f2 + 8 | 0 : f2;
                  b2 = (o2 << 31 >> 31) + b2 | 0;
                  p2 = g2 - (o2 ? p2 : 0) | 0;
                  c[f2 >> 2] = (c[f2 >> 2] | 0) + p2;
                  o2 = f2 + 4 | 0;
                  c[o2 >> 2] = (c[o2 >> 2] | 0) - p2;
                  c[k2 >> 2] = c[h2 >> 2];
                  c[k2 + 4 >> 2] = f2;
                  c[k2 + 8 >> 2] = b2;
                  g2 = uB(gb(146, k2 | 0) | 0) | 0;
                  if ((e2 | 0) == (g2 | 0)) {
                    m2 = 3;
                    break a;
                  }
                }
                c[a2 + 16 >> 2] = 0;
                c[i3 >> 2] = 0;
                c[j2 >> 2] = 0;
                c[a2 >> 2] = c[a2 >> 2] | 32;
                if ((b2 | 0) == 2)
                  d2 = 0;
                else
                  d2 = d2 - (c[f2 + 4 >> 2] | 0) | 0;
              } else
                m2 = 3;
            while (0);
          if ((m2 | 0) == 3) {
            p2 = c[a2 + 44 >> 2] | 0;
            c[a2 + 16 >> 2] = p2 + (c[a2 + 48 >> 2] | 0);
            c[i3 >> 2] = p2;
            c[j2 >> 2] = p2;
          }
          l = n2;
          return d2 | 0;
        }
        function tB(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          f2 = l;
          l = l + 32 | 0;
          g2 = f2;
          e2 = f2 + 20 | 0;
          c[g2 >> 2] = c[a2 + 60 >> 2];
          c[g2 + 4 >> 2] = 0;
          c[g2 + 8 >> 2] = b2;
          c[g2 + 12 >> 2] = e2;
          c[g2 + 16 >> 2] = d2;
          if ((uB(fb(140, g2 | 0) | 0) | 0) < 0) {
            c[e2 >> 2] = -1;
            a2 = -1;
          } else
            a2 = c[e2 >> 2] | 0;
          l = f2;
          return a2 | 0;
        }
        function uB(a2) {
          a2 = a2 | 0;
          if (a2 >>> 0 > 4294963200) {
            c[(vB() | 0) >> 2] = 0 - a2;
            a2 = -1;
          }
          return a2 | 0;
        }
        function vB() {
          return (wB() | 0) + 64 | 0;
        }
        function wB() {
          return xB() | 0;
        }
        function xB() {
          return 2084;
        }
        function yB(a2) {
          a2 = a2 | 0;
          return a2 | 0;
        }
        function zB(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = l;
          l = l + 32 | 0;
          f2 = g2;
          c[b2 + 36 >> 2] = 1;
          if ((c[b2 >> 2] & 64 | 0) == 0 ? (c[f2 >> 2] = c[b2 + 60 >> 2], c[f2 + 4 >> 2] = 21523, c[f2 + 8 >> 2] = g2 + 16, Wa(54, f2 | 0) | 0) : 0)
            a[b2 + 75 >> 0] = -1;
          f2 = sB(b2, d2, e2) | 0;
          l = g2;
          return f2 | 0;
        }
        function AB(b2, c2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          var d2 = 0, e2 = 0;
          d2 = a[b2 >> 0] | 0;
          e2 = a[c2 >> 0] | 0;
          if (d2 << 24 >> 24 == 0 ? 1 : d2 << 24 >> 24 != e2 << 24 >> 24)
            b2 = e2;
          else {
            do {
              b2 = b2 + 1 | 0;
              c2 = c2 + 1 | 0;
              d2 = a[b2 >> 0] | 0;
              e2 = a[c2 >> 0] | 0;
            } while (!(d2 << 24 >> 24 == 0 ? 1 : d2 << 24 >> 24 != e2 << 24 >> 24));
            b2 = e2;
          }
          return (d2 & 255) - (b2 & 255) | 0;
        }
        function BB(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0;
          a:
            do
              if (!d2)
                b2 = 0;
              else {
                while (1) {
                  e2 = a[b2 >> 0] | 0;
                  f2 = a[c2 >> 0] | 0;
                  if (e2 << 24 >> 24 != f2 << 24 >> 24)
                    break;
                  d2 = d2 + -1 | 0;
                  if (!d2) {
                    b2 = 0;
                    break a;
                  } else {
                    b2 = b2 + 1 | 0;
                    c2 = c2 + 1 | 0;
                  }
                }
                b2 = (e2 & 255) - (f2 & 255) | 0;
              }
            while (0);
          return b2 | 0;
        }
        function CB(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0;
          s2 = l;
          l = l + 224 | 0;
          n2 = s2 + 120 | 0;
          o2 = s2 + 80 | 0;
          q2 = s2;
          r2 = s2 + 136 | 0;
          f2 = o2;
          g2 = f2 + 40 | 0;
          do {
            c[f2 >> 2] = 0;
            f2 = f2 + 4 | 0;
          } while ((f2 | 0) < (g2 | 0));
          c[n2 >> 2] = c[e2 >> 2];
          if ((DB(0, d2, n2, q2, o2) | 0) < 0)
            e2 = -1;
          else {
            if ((c[b2 + 76 >> 2] | 0) > -1)
              p2 = EB(b2) | 0;
            else
              p2 = 0;
            e2 = c[b2 >> 2] | 0;
            m2 = e2 & 32;
            if ((a[b2 + 74 >> 0] | 0) < 1)
              c[b2 >> 2] = e2 & -33;
            f2 = b2 + 48 | 0;
            if (!(c[f2 >> 2] | 0)) {
              g2 = b2 + 44 | 0;
              h2 = c[g2 >> 2] | 0;
              c[g2 >> 2] = r2;
              i3 = b2 + 28 | 0;
              c[i3 >> 2] = r2;
              j2 = b2 + 20 | 0;
              c[j2 >> 2] = r2;
              c[f2 >> 2] = 80;
              k2 = b2 + 16 | 0;
              c[k2 >> 2] = r2 + 80;
              e2 = DB(b2, d2, n2, q2, o2) | 0;
              if (h2) {
                sb[c[b2 + 36 >> 2] & 7](b2, 0, 0) | 0;
                e2 = (c[j2 >> 2] | 0) == 0 ? -1 : e2;
                c[g2 >> 2] = h2;
                c[f2 >> 2] = 0;
                c[k2 >> 2] = 0;
                c[i3 >> 2] = 0;
                c[j2 >> 2] = 0;
              }
            } else
              e2 = DB(b2, d2, n2, q2, o2) | 0;
            f2 = c[b2 >> 2] | 0;
            c[b2 >> 2] = f2 | m2;
            if (p2 | 0)
              FB(b2);
            e2 = (f2 & 32 | 0) == 0 ? e2 : -1;
          }
          l = s2;
          return e2 | 0;
        }
        function DB(d2, e2, f2, g2, i3) {
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          i3 = i3 | 0;
          var j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0;
          H2 = l;
          l = l + 64 | 0;
          D2 = H2 + 16 | 0;
          E2 = H2;
          B2 = H2 + 24 | 0;
          F2 = H2 + 8 | 0;
          G2 = H2 + 20 | 0;
          c[D2 >> 2] = e2;
          x2 = (d2 | 0) != 0;
          y2 = B2 + 40 | 0;
          z2 = y2;
          B2 = B2 + 39 | 0;
          C2 = F2 + 4 | 0;
          k2 = 0;
          j2 = 0;
          p2 = 0;
          a:
            while (1) {
              do
                if ((j2 | 0) > -1)
                  if ((k2 | 0) > (2147483647 - j2 | 0)) {
                    c[(vB() | 0) >> 2] = 75;
                    j2 = -1;
                    break;
                  } else {
                    j2 = k2 + j2 | 0;
                    break;
                  }
              while (0);
              k2 = a[e2 >> 0] | 0;
              if (!(k2 << 24 >> 24)) {
                w2 = 87;
                break;
              } else
                m2 = e2;
              b:
                while (1) {
                  switch (k2 << 24 >> 24) {
                    case 37: {
                      k2 = m2;
                      w2 = 9;
                      break b;
                    }
                    case 0: {
                      k2 = m2;
                      break b;
                    }
                    default: {
                    }
                  }
                  v2 = m2 + 1 | 0;
                  c[D2 >> 2] = v2;
                  k2 = a[v2 >> 0] | 0;
                  m2 = v2;
                }
              c:
                do
                  if ((w2 | 0) == 9)
                    while (1) {
                      w2 = 0;
                      if ((a[m2 + 1 >> 0] | 0) != 37)
                        break c;
                      k2 = k2 + 1 | 0;
                      m2 = m2 + 2 | 0;
                      c[D2 >> 2] = m2;
                      if ((a[m2 >> 0] | 0) == 37)
                        w2 = 9;
                      else
                        break;
                    }
                while (0);
              k2 = k2 - e2 | 0;
              if (x2)
                GB(d2, e2, k2);
              if (k2 | 0) {
                e2 = m2;
                continue;
              }
              n2 = m2 + 1 | 0;
              k2 = (a[n2 >> 0] | 0) + -48 | 0;
              if (k2 >>> 0 < 10) {
                v2 = (a[m2 + 2 >> 0] | 0) == 36;
                u2 = v2 ? k2 : -1;
                p2 = v2 ? 1 : p2;
                n2 = v2 ? m2 + 3 | 0 : n2;
              } else
                u2 = -1;
              c[D2 >> 2] = n2;
              k2 = a[n2 >> 0] | 0;
              m2 = (k2 << 24 >> 24) + -32 | 0;
              d:
                do
                  if (m2 >>> 0 < 32) {
                    o2 = 0;
                    q2 = k2;
                    while (1) {
                      k2 = 1 << m2;
                      if (!(k2 & 75913)) {
                        k2 = q2;
                        break d;
                      }
                      o2 = k2 | o2;
                      n2 = n2 + 1 | 0;
                      c[D2 >> 2] = n2;
                      k2 = a[n2 >> 0] | 0;
                      m2 = (k2 << 24 >> 24) + -32 | 0;
                      if (m2 >>> 0 >= 32)
                        break;
                      else
                        q2 = k2;
                    }
                  } else
                    o2 = 0;
                while (0);
              if (k2 << 24 >> 24 == 42) {
                m2 = n2 + 1 | 0;
                k2 = (a[m2 >> 0] | 0) + -48 | 0;
                if (k2 >>> 0 < 10 ? (a[n2 + 2 >> 0] | 0) == 36 : 0) {
                  c[i3 + (k2 << 2) >> 2] = 10;
                  k2 = c[g2 + ((a[m2 >> 0] | 0) + -48 << 3) >> 2] | 0;
                  p2 = 1;
                  n2 = n2 + 3 | 0;
                } else {
                  if (p2 | 0) {
                    j2 = -1;
                    break;
                  }
                  if (x2) {
                    p2 = (c[f2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    k2 = c[p2 >> 2] | 0;
                    c[f2 >> 2] = p2 + 4;
                    p2 = 0;
                    n2 = m2;
                  } else {
                    k2 = 0;
                    p2 = 0;
                    n2 = m2;
                  }
                }
                c[D2 >> 2] = n2;
                v2 = (k2 | 0) < 0;
                k2 = v2 ? 0 - k2 | 0 : k2;
                o2 = v2 ? o2 | 8192 : o2;
              } else {
                k2 = HB(D2) | 0;
                if ((k2 | 0) < 0) {
                  j2 = -1;
                  break;
                }
                n2 = c[D2 >> 2] | 0;
              }
              do
                if ((a[n2 >> 0] | 0) == 46) {
                  if ((a[n2 + 1 >> 0] | 0) != 42) {
                    c[D2 >> 2] = n2 + 1;
                    m2 = HB(D2) | 0;
                    n2 = c[D2 >> 2] | 0;
                    break;
                  }
                  q2 = n2 + 2 | 0;
                  m2 = (a[q2 >> 0] | 0) + -48 | 0;
                  if (m2 >>> 0 < 10 ? (a[n2 + 3 >> 0] | 0) == 36 : 0) {
                    c[i3 + (m2 << 2) >> 2] = 10;
                    m2 = c[g2 + ((a[q2 >> 0] | 0) + -48 << 3) >> 2] | 0;
                    n2 = n2 + 4 | 0;
                    c[D2 >> 2] = n2;
                    break;
                  }
                  if (p2 | 0) {
                    j2 = -1;
                    break a;
                  }
                  if (x2) {
                    v2 = (c[f2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                    m2 = c[v2 >> 2] | 0;
                    c[f2 >> 2] = v2 + 4;
                  } else
                    m2 = 0;
                  c[D2 >> 2] = q2;
                  n2 = q2;
                } else
                  m2 = -1;
              while (0);
              t2 = 0;
              while (1) {
                if (((a[n2 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
                  j2 = -1;
                  break a;
                }
                v2 = n2 + 1 | 0;
                c[D2 >> 2] = v2;
                q2 = a[(a[n2 >> 0] | 0) + -65 + (5178 + (t2 * 58 | 0)) >> 0] | 0;
                r2 = q2 & 255;
                if ((r2 + -1 | 0) >>> 0 < 8) {
                  t2 = r2;
                  n2 = v2;
                } else
                  break;
              }
              if (!(q2 << 24 >> 24)) {
                j2 = -1;
                break;
              }
              s2 = (u2 | 0) > -1;
              do
                if (q2 << 24 >> 24 == 19) {
                  if (s2) {
                    j2 = -1;
                    break a;
                  } else
                    w2 = 49;
                } else {
                  if (s2) {
                    c[i3 + (u2 << 2) >> 2] = r2;
                    s2 = g2 + (u2 << 3) | 0;
                    u2 = c[s2 + 4 >> 2] | 0;
                    w2 = E2;
                    c[w2 >> 2] = c[s2 >> 2];
                    c[w2 + 4 >> 2] = u2;
                    w2 = 49;
                    break;
                  }
                  if (!x2) {
                    j2 = 0;
                    break a;
                  }
                  IB(E2, r2, f2);
                }
              while (0);
              if ((w2 | 0) == 49 ? (w2 = 0, !x2) : 0) {
                k2 = 0;
                e2 = v2;
                continue;
              }
              n2 = a[n2 >> 0] | 0;
              n2 = (t2 | 0) != 0 & (n2 & 15 | 0) == 3 ? n2 & -33 : n2;
              s2 = o2 & -65537;
              u2 = (o2 & 8192 | 0) == 0 ? o2 : s2;
              e:
                do
                  switch (n2 | 0) {
                    case 110:
                      switch ((t2 & 255) << 24 >> 24) {
                        case 0: {
                          c[c[E2 >> 2] >> 2] = j2;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        case 1: {
                          c[c[E2 >> 2] >> 2] = j2;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        case 2: {
                          k2 = c[E2 >> 2] | 0;
                          c[k2 >> 2] = j2;
                          c[k2 + 4 >> 2] = ((j2 | 0) < 0) << 31 >> 31;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        case 3: {
                          b[c[E2 >> 2] >> 1] = j2;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        case 4: {
                          a[c[E2 >> 2] >> 0] = j2;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        case 6: {
                          c[c[E2 >> 2] >> 2] = j2;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        case 7: {
                          k2 = c[E2 >> 2] | 0;
                          c[k2 >> 2] = j2;
                          c[k2 + 4 >> 2] = ((j2 | 0) < 0) << 31 >> 31;
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                        default: {
                          k2 = 0;
                          e2 = v2;
                          continue a;
                        }
                      }
                    case 112: {
                      n2 = 120;
                      m2 = m2 >>> 0 > 8 ? m2 : 8;
                      e2 = u2 | 8;
                      w2 = 61;
                      break;
                    }
                    case 88:
                    case 120: {
                      e2 = u2;
                      w2 = 61;
                      break;
                    }
                    case 111: {
                      n2 = E2;
                      e2 = c[n2 >> 2] | 0;
                      n2 = c[n2 + 4 >> 2] | 0;
                      r2 = KB(e2, n2, y2) | 0;
                      s2 = z2 - r2 | 0;
                      o2 = 0;
                      q2 = 5642;
                      m2 = (u2 & 8 | 0) == 0 | (m2 | 0) > (s2 | 0) ? m2 : s2 + 1 | 0;
                      s2 = u2;
                      w2 = 67;
                      break;
                    }
                    case 105:
                    case 100: {
                      n2 = E2;
                      e2 = c[n2 >> 2] | 0;
                      n2 = c[n2 + 4 >> 2] | 0;
                      if ((n2 | 0) < 0) {
                        e2 = wC(0, 0, e2 | 0, n2 | 0) | 0;
                        n2 = A;
                        o2 = E2;
                        c[o2 >> 2] = e2;
                        c[o2 + 4 >> 2] = n2;
                        o2 = 1;
                        q2 = 5642;
                        w2 = 66;
                        break e;
                      } else {
                        o2 = (u2 & 2049 | 0) != 0 & 1;
                        q2 = (u2 & 2048 | 0) == 0 ? (u2 & 1 | 0) == 0 ? 5642 : 5644 : 5643;
                        w2 = 66;
                        break e;
                      }
                    }
                    case 117: {
                      n2 = E2;
                      o2 = 0;
                      q2 = 5642;
                      e2 = c[n2 >> 2] | 0;
                      n2 = c[n2 + 4 >> 2] | 0;
                      w2 = 66;
                      break;
                    }
                    case 99: {
                      a[B2 >> 0] = c[E2 >> 2];
                      e2 = B2;
                      o2 = 0;
                      q2 = 5642;
                      r2 = y2;
                      n2 = 1;
                      m2 = s2;
                      break;
                    }
                    case 109: {
                      n2 = MB(c[(vB() | 0) >> 2] | 0) | 0;
                      w2 = 71;
                      break;
                    }
                    case 115: {
                      n2 = c[E2 >> 2] | 0;
                      n2 = n2 | 0 ? n2 : 5652;
                      w2 = 71;
                      break;
                    }
                    case 67: {
                      c[F2 >> 2] = c[E2 >> 2];
                      c[C2 >> 2] = 0;
                      c[E2 >> 2] = F2;
                      r2 = -1;
                      n2 = F2;
                      w2 = 75;
                      break;
                    }
                    case 83: {
                      e2 = c[E2 >> 2] | 0;
                      if (!m2) {
                        OB(d2, 32, k2, 0, u2);
                        e2 = 0;
                        w2 = 84;
                      } else {
                        r2 = m2;
                        n2 = e2;
                        w2 = 75;
                      }
                      break;
                    }
                    case 65:
                    case 71:
                    case 70:
                    case 69:
                    case 97:
                    case 103:
                    case 102:
                    case 101: {
                      k2 = QB(d2, +h[E2 >> 3], k2, m2, u2, n2) | 0;
                      e2 = v2;
                      continue a;
                    }
                    default: {
                      o2 = 0;
                      q2 = 5642;
                      r2 = y2;
                      n2 = m2;
                      m2 = u2;
                    }
                  }
                while (0);
              f:
                do
                  if ((w2 | 0) == 61) {
                    u2 = E2;
                    t2 = c[u2 >> 2] | 0;
                    u2 = c[u2 + 4 >> 2] | 0;
                    r2 = JB(t2, u2, y2, n2 & 32) | 0;
                    q2 = (e2 & 8 | 0) == 0 | (t2 | 0) == 0 & (u2 | 0) == 0;
                    o2 = q2 ? 0 : 2;
                    q2 = q2 ? 5642 : 5642 + (n2 >> 4) | 0;
                    s2 = e2;
                    e2 = t2;
                    n2 = u2;
                    w2 = 67;
                  } else if ((w2 | 0) == 66) {
                    r2 = LB(e2, n2, y2) | 0;
                    s2 = u2;
                    w2 = 67;
                  } else if ((w2 | 0) == 71) {
                    w2 = 0;
                    u2 = NB(n2, 0, m2) | 0;
                    t2 = (u2 | 0) == 0;
                    e2 = n2;
                    o2 = 0;
                    q2 = 5642;
                    r2 = t2 ? n2 + m2 | 0 : u2;
                    n2 = t2 ? m2 : u2 - n2 | 0;
                    m2 = s2;
                  } else if ((w2 | 0) == 75) {
                    w2 = 0;
                    q2 = n2;
                    e2 = 0;
                    m2 = 0;
                    while (1) {
                      o2 = c[q2 >> 2] | 0;
                      if (!o2)
                        break;
                      m2 = PB(G2, o2) | 0;
                      if ((m2 | 0) < 0 | m2 >>> 0 > (r2 - e2 | 0) >>> 0)
                        break;
                      e2 = m2 + e2 | 0;
                      if (r2 >>> 0 > e2 >>> 0)
                        q2 = q2 + 4 | 0;
                      else
                        break;
                    }
                    if ((m2 | 0) < 0) {
                      j2 = -1;
                      break a;
                    }
                    OB(d2, 32, k2, e2, u2);
                    if (!e2) {
                      e2 = 0;
                      w2 = 84;
                    } else {
                      o2 = 0;
                      while (1) {
                        m2 = c[n2 >> 2] | 0;
                        if (!m2) {
                          w2 = 84;
                          break f;
                        }
                        m2 = PB(G2, m2) | 0;
                        o2 = m2 + o2 | 0;
                        if ((o2 | 0) > (e2 | 0)) {
                          w2 = 84;
                          break f;
                        }
                        GB(d2, G2, m2);
                        if (o2 >>> 0 >= e2 >>> 0) {
                          w2 = 84;
                          break;
                        } else
                          n2 = n2 + 4 | 0;
                      }
                    }
                  }
                while (0);
              if ((w2 | 0) == 67) {
                w2 = 0;
                n2 = (e2 | 0) != 0 | (n2 | 0) != 0;
                u2 = (m2 | 0) != 0 | n2;
                n2 = ((n2 ^ 1) & 1) + (z2 - r2) | 0;
                e2 = u2 ? r2 : y2;
                r2 = y2;
                n2 = u2 ? (m2 | 0) > (n2 | 0) ? m2 : n2 : m2;
                m2 = (m2 | 0) > -1 ? s2 & -65537 : s2;
              } else if ((w2 | 0) == 84) {
                w2 = 0;
                OB(d2, 32, k2, e2, u2 ^ 8192);
                k2 = (k2 | 0) > (e2 | 0) ? k2 : e2;
                e2 = v2;
                continue;
              }
              t2 = r2 - e2 | 0;
              s2 = (n2 | 0) < (t2 | 0) ? t2 : n2;
              u2 = s2 + o2 | 0;
              k2 = (k2 | 0) < (u2 | 0) ? u2 : k2;
              OB(d2, 32, k2, u2, m2);
              GB(d2, q2, o2);
              OB(d2, 48, k2, u2, m2 ^ 65536);
              OB(d2, 48, s2, t2, 0);
              GB(d2, e2, t2);
              OB(d2, 32, k2, u2, m2 ^ 8192);
              e2 = v2;
            }
          g:
            do
              if ((w2 | 0) == 87) {
                if (!d2)
                  if (!p2)
                    j2 = 0;
                  else {
                    j2 = 1;
                    while (1) {
                      e2 = c[i3 + (j2 << 2) >> 2] | 0;
                      if (!e2)
                        break;
                      IB(g2 + (j2 << 3) | 0, e2, f2);
                      j2 = j2 + 1 | 0;
                      if ((j2 | 0) >= 10) {
                        j2 = 1;
                        break g;
                      }
                    }
                    while (1) {
                      if (c[i3 + (j2 << 2) >> 2] | 0) {
                        j2 = -1;
                        break g;
                      }
                      j2 = j2 + 1 | 0;
                      if ((j2 | 0) >= 10) {
                        j2 = 1;
                        break;
                      }
                    }
                  }
              }
            while (0);
          l = H2;
          return j2 | 0;
        }
        function EB(a2) {
          a2 = a2 | 0;
          return 0;
        }
        function FB(a2) {
          a2 = a2 | 0;
          return;
        }
        function GB(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          if (!(c[a2 >> 2] & 32))
            aC(b2, d2, a2) | 0;
          return;
        }
        function HB(b2) {
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          e2 = c[b2 >> 2] | 0;
          f2 = (a[e2 >> 0] | 0) + -48 | 0;
          if (f2 >>> 0 < 10) {
            d2 = 0;
            do {
              d2 = f2 + (d2 * 10 | 0) | 0;
              e2 = e2 + 1 | 0;
              c[b2 >> 2] = e2;
              f2 = (a[e2 >> 0] | 0) + -48 | 0;
            } while (f2 >>> 0 < 10);
          } else
            d2 = 0;
          return d2 | 0;
        }
        function IB(a2, b2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          var e2 = 0, f2 = 0, g2 = 0;
          a:
            do
              if (b2 >>> 0 <= 20)
                do
                  switch (b2 | 0) {
                    case 9: {
                      e2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      b2 = c[e2 >> 2] | 0;
                      c[d2 >> 2] = e2 + 4;
                      c[a2 >> 2] = b2;
                      break a;
                    }
                    case 10: {
                      e2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      b2 = c[e2 >> 2] | 0;
                      c[d2 >> 2] = e2 + 4;
                      e2 = a2;
                      c[e2 >> 2] = b2;
                      c[e2 + 4 >> 2] = ((b2 | 0) < 0) << 31 >> 31;
                      break a;
                    }
                    case 11: {
                      e2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      b2 = c[e2 >> 2] | 0;
                      c[d2 >> 2] = e2 + 4;
                      e2 = a2;
                      c[e2 >> 2] = b2;
                      c[e2 + 4 >> 2] = 0;
                      break a;
                    }
                    case 12: {
                      e2 = (c[d2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                      b2 = e2;
                      f2 = c[b2 >> 2] | 0;
                      b2 = c[b2 + 4 >> 2] | 0;
                      c[d2 >> 2] = e2 + 8;
                      e2 = a2;
                      c[e2 >> 2] = f2;
                      c[e2 + 4 >> 2] = b2;
                      break a;
                    }
                    case 13: {
                      f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c[f2 >> 2] | 0;
                      c[d2 >> 2] = f2 + 4;
                      e2 = (e2 & 65535) << 16 >> 16;
                      f2 = a2;
                      c[f2 >> 2] = e2;
                      c[f2 + 4 >> 2] = ((e2 | 0) < 0) << 31 >> 31;
                      break a;
                    }
                    case 14: {
                      f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c[f2 >> 2] | 0;
                      c[d2 >> 2] = f2 + 4;
                      f2 = a2;
                      c[f2 >> 2] = e2 & 65535;
                      c[f2 + 4 >> 2] = 0;
                      break a;
                    }
                    case 15: {
                      f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c[f2 >> 2] | 0;
                      c[d2 >> 2] = f2 + 4;
                      e2 = (e2 & 255) << 24 >> 24;
                      f2 = a2;
                      c[f2 >> 2] = e2;
                      c[f2 + 4 >> 2] = ((e2 | 0) < 0) << 31 >> 31;
                      break a;
                    }
                    case 16: {
                      f2 = (c[d2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
                      e2 = c[f2 >> 2] | 0;
                      c[d2 >> 2] = f2 + 4;
                      f2 = a2;
                      c[f2 >> 2] = e2 & 255;
                      c[f2 + 4 >> 2] = 0;
                      break a;
                    }
                    case 17: {
                      f2 = (c[d2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                      g2 = +h[f2 >> 3];
                      c[d2 >> 2] = f2 + 8;
                      h[a2 >> 3] = g2;
                      break a;
                    }
                    case 18: {
                      f2 = (c[d2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
                      g2 = +h[f2 >> 3];
                      c[d2 >> 2] = f2 + 8;
                      h[a2 >> 3] = g2;
                      break a;
                    }
                    default:
                      break a;
                  }
                while (0);
            while (0);
          return;
        }
        function JB(b2, c2, e2, f2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          if (!((b2 | 0) == 0 & (c2 | 0) == 0))
            do {
              e2 = e2 + -1 | 0;
              a[e2 >> 0] = d[5694 + (b2 & 15) >> 0] | 0 | f2;
              b2 = AC(b2 | 0, c2 | 0, 4) | 0;
              c2 = A;
            } while (!((b2 | 0) == 0 & (c2 | 0) == 0));
          return e2 | 0;
        }
        function KB(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          if (!((b2 | 0) == 0 & (c2 | 0) == 0))
            do {
              d2 = d2 + -1 | 0;
              a[d2 >> 0] = b2 & 7 | 48;
              b2 = AC(b2 | 0, c2 | 0, 3) | 0;
              c2 = A;
            } while (!((b2 | 0) == 0 & (c2 | 0) == 0));
          return d2 | 0;
        }
        function LB(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          if (c2 >>> 0 > 0 | (c2 | 0) == 0 & b2 >>> 0 > 4294967295) {
            while (1) {
              e2 = HC(b2 | 0, c2 | 0, 10, 0) | 0;
              d2 = d2 + -1 | 0;
              a[d2 >> 0] = e2 & 255 | 48;
              e2 = b2;
              b2 = EC(b2 | 0, c2 | 0, 10, 0) | 0;
              if (!(c2 >>> 0 > 9 | (c2 | 0) == 9 & e2 >>> 0 > 4294967295))
                break;
              else
                c2 = A;
            }
            c2 = b2;
          } else
            c2 = b2;
          if (c2)
            while (1) {
              d2 = d2 + -1 | 0;
              a[d2 >> 0] = (c2 >>> 0) % 10 | 0 | 48;
              if (c2 >>> 0 < 10)
                break;
              else
                c2 = (c2 >>> 0) / 10 | 0;
            }
          return d2 | 0;
        }
        function MB(a2) {
          a2 = a2 | 0;
          return XB(a2, c[(WB() | 0) + 188 >> 2] | 0) | 0;
        }
        function NB(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          h2 = d2 & 255;
          f2 = (e2 | 0) != 0;
          a:
            do
              if (f2 & (b2 & 3 | 0) != 0) {
                g2 = d2 & 255;
                while (1) {
                  if ((a[b2 >> 0] | 0) == g2 << 24 >> 24) {
                    i3 = 6;
                    break a;
                  }
                  b2 = b2 + 1 | 0;
                  e2 = e2 + -1 | 0;
                  f2 = (e2 | 0) != 0;
                  if (!(f2 & (b2 & 3 | 0) != 0)) {
                    i3 = 5;
                    break;
                  }
                }
              } else
                i3 = 5;
            while (0);
          if ((i3 | 0) == 5)
            if (f2)
              i3 = 6;
            else
              e2 = 0;
          b:
            do
              if ((i3 | 0) == 6) {
                g2 = d2 & 255;
                if ((a[b2 >> 0] | 0) != g2 << 24 >> 24) {
                  f2 = P(h2, 16843009) | 0;
                  c:
                    do
                      if (e2 >>> 0 > 3)
                        while (1) {
                          h2 = c[b2 >> 2] ^ f2;
                          if ((h2 & -2139062144 ^ -2139062144) & h2 + -16843009 | 0)
                            break;
                          b2 = b2 + 4 | 0;
                          e2 = e2 + -4 | 0;
                          if (e2 >>> 0 <= 3) {
                            i3 = 11;
                            break c;
                          }
                        }
                      else
                        i3 = 11;
                    while (0);
                  if ((i3 | 0) == 11) {
                    if (!e2) {
                      e2 = 0;
                      break;
                    }
                  }
                  while (1) {
                    if ((a[b2 >> 0] | 0) == g2 << 24 >> 24)
                      break b;
                    b2 = b2 + 1 | 0;
                    e2 = e2 + -1 | 0;
                    if (!e2) {
                      e2 = 0;
                      break;
                    }
                  }
                }
              }
            while (0);
          return (e2 | 0 ? b2 : 0) | 0;
        }
        function OB(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = l;
          l = l + 256 | 0;
          f2 = g2;
          if ((c2 | 0) > (d2 | 0) & (e2 & 73728 | 0) == 0) {
            e2 = c2 - d2 | 0;
            yC(f2 | 0, b2 | 0, (e2 >>> 0 < 256 ? e2 : 256) | 0) | 0;
            if (e2 >>> 0 > 255) {
              b2 = c2 - d2 | 0;
              do {
                GB(a2, f2, 256);
                e2 = e2 + -256 | 0;
              } while (e2 >>> 0 > 255);
              e2 = b2 & 255;
            }
            GB(a2, f2, e2);
          }
          l = g2;
          return;
        }
        function PB(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (!a2)
            a2 = 0;
          else
            a2 = UB(a2, b2, 0) | 0;
          return a2 | 0;
        }
        function QB(b2, e2, f2, g2, h2, i3) {
          b2 = b2 | 0;
          e2 = +e2;
          f2 = f2 | 0;
          g2 = g2 | 0;
          h2 = h2 | 0;
          i3 = i3 | 0;
          var j2 = 0, k2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0, q2 = 0, r2 = 0, s2 = 0, t2 = 0, u2 = 0, v2 = 0, w2 = 0, x2 = 0, y2 = 0, z2 = 0, B2 = 0, C2 = 0, D2 = 0, E2 = 0, F2 = 0, G2 = 0, H2 = 0;
          H2 = l;
          l = l + 560 | 0;
          m2 = H2 + 8 | 0;
          u2 = H2;
          G2 = H2 + 524 | 0;
          F2 = G2;
          n2 = H2 + 512 | 0;
          c[u2 >> 2] = 0;
          E2 = n2 + 12 | 0;
          RB(e2) | 0;
          if ((A | 0) < 0) {
            e2 = -e2;
            C2 = 1;
            B2 = 5659;
          } else {
            C2 = (h2 & 2049 | 0) != 0 & 1;
            B2 = (h2 & 2048 | 0) == 0 ? (h2 & 1 | 0) == 0 ? 5660 : 5665 : 5662;
          }
          RB(e2) | 0;
          D2 = A & 2146435072;
          do
            if (D2 >>> 0 < 2146435072 | (D2 | 0) == 2146435072 & 0 < 0) {
              r2 = +SB(e2, u2) * 2;
              j2 = r2 != 0;
              if (j2)
                c[u2 >> 2] = (c[u2 >> 2] | 0) + -1;
              w2 = i3 | 32;
              if ((w2 | 0) == 97) {
                s2 = i3 & 32;
                q2 = (s2 | 0) == 0 ? B2 : B2 + 9 | 0;
                p2 = C2 | 2;
                j2 = 12 - g2 | 0;
                do
                  if (!(g2 >>> 0 > 11 | (j2 | 0) == 0)) {
                    e2 = 8;
                    do {
                      j2 = j2 + -1 | 0;
                      e2 = e2 * 16;
                    } while ((j2 | 0) != 0);
                    if ((a[q2 >> 0] | 0) == 45) {
                      e2 = -(e2 + (-r2 - e2));
                      break;
                    } else {
                      e2 = r2 + e2 - e2;
                      break;
                    }
                  } else
                    e2 = r2;
                while (0);
                k2 = c[u2 >> 2] | 0;
                j2 = (k2 | 0) < 0 ? 0 - k2 | 0 : k2;
                j2 = LB(j2, ((j2 | 0) < 0) << 31 >> 31, E2) | 0;
                if ((j2 | 0) == (E2 | 0)) {
                  j2 = n2 + 11 | 0;
                  a[j2 >> 0] = 48;
                }
                a[j2 + -1 >> 0] = (k2 >> 31 & 2) + 43;
                o2 = j2 + -2 | 0;
                a[o2 >> 0] = i3 + 15;
                n2 = (g2 | 0) < 1;
                m2 = (h2 & 8 | 0) == 0;
                j2 = G2;
                do {
                  D2 = ~~e2;
                  k2 = j2 + 1 | 0;
                  a[j2 >> 0] = d[5694 + D2 >> 0] | s2;
                  e2 = (e2 - +(D2 | 0)) * 16;
                  if ((k2 - F2 | 0) == 1 ? !(m2 & (n2 & e2 == 0)) : 0) {
                    a[k2 >> 0] = 46;
                    j2 = j2 + 2 | 0;
                  } else
                    j2 = k2;
                } while (e2 != 0);
                D2 = j2 - F2 | 0;
                F2 = E2 - o2 | 0;
                E2 = (g2 | 0) != 0 & (D2 + -2 | 0) < (g2 | 0) ? g2 + 2 | 0 : D2;
                j2 = F2 + p2 + E2 | 0;
                OB(b2, 32, f2, j2, h2);
                GB(b2, q2, p2);
                OB(b2, 48, f2, j2, h2 ^ 65536);
                GB(b2, G2, D2);
                OB(b2, 48, E2 - D2 | 0, 0, 0);
                GB(b2, o2, F2);
                OB(b2, 32, f2, j2, h2 ^ 8192);
                break;
              }
              k2 = (g2 | 0) < 0 ? 6 : g2;
              if (j2) {
                j2 = (c[u2 >> 2] | 0) + -28 | 0;
                c[u2 >> 2] = j2;
                e2 = r2 * 268435456;
              } else {
                e2 = r2;
                j2 = c[u2 >> 2] | 0;
              }
              D2 = (j2 | 0) < 0 ? m2 : m2 + 288 | 0;
              m2 = D2;
              do {
                y2 = ~~e2 >>> 0;
                c[m2 >> 2] = y2;
                m2 = m2 + 4 | 0;
                e2 = (e2 - +(y2 >>> 0)) * 1e9;
              } while (e2 != 0);
              if ((j2 | 0) > 0) {
                n2 = D2;
                p2 = m2;
                while (1) {
                  o2 = (j2 | 0) < 29 ? j2 : 29;
                  j2 = p2 + -4 | 0;
                  if (j2 >>> 0 >= n2 >>> 0) {
                    m2 = 0;
                    do {
                      x2 = zC(c[j2 >> 2] | 0, 0, o2 | 0) | 0;
                      x2 = xC(x2 | 0, A | 0, m2 | 0, 0) | 0;
                      y2 = A;
                      v2 = HC(x2 | 0, y2 | 0, 1e9, 0) | 0;
                      c[j2 >> 2] = v2;
                      m2 = EC(x2 | 0, y2 | 0, 1e9, 0) | 0;
                      j2 = j2 + -4 | 0;
                    } while (j2 >>> 0 >= n2 >>> 0);
                    if (m2) {
                      n2 = n2 + -4 | 0;
                      c[n2 >> 2] = m2;
                    }
                  }
                  m2 = p2;
                  while (1) {
                    if (m2 >>> 0 <= n2 >>> 0)
                      break;
                    j2 = m2 + -4 | 0;
                    if (!(c[j2 >> 2] | 0))
                      m2 = j2;
                    else
                      break;
                  }
                  j2 = (c[u2 >> 2] | 0) - o2 | 0;
                  c[u2 >> 2] = j2;
                  if ((j2 | 0) > 0)
                    p2 = m2;
                  else
                    break;
                }
              } else
                n2 = D2;
              if ((j2 | 0) < 0) {
                g2 = ((k2 + 25 | 0) / 9 | 0) + 1 | 0;
                t2 = (w2 | 0) == 102;
                do {
                  s2 = 0 - j2 | 0;
                  s2 = (s2 | 0) < 9 ? s2 : 9;
                  if (n2 >>> 0 < m2 >>> 0) {
                    o2 = (1 << s2) + -1 | 0;
                    p2 = 1e9 >>> s2;
                    q2 = 0;
                    j2 = n2;
                    do {
                      y2 = c[j2 >> 2] | 0;
                      c[j2 >> 2] = (y2 >>> s2) + q2;
                      q2 = P(y2 & o2, p2) | 0;
                      j2 = j2 + 4 | 0;
                    } while (j2 >>> 0 < m2 >>> 0);
                    j2 = (c[n2 >> 2] | 0) == 0 ? n2 + 4 | 0 : n2;
                    if (!q2) {
                      n2 = j2;
                      j2 = m2;
                    } else {
                      c[m2 >> 2] = q2;
                      n2 = j2;
                      j2 = m2 + 4 | 0;
                    }
                  } else {
                    n2 = (c[n2 >> 2] | 0) == 0 ? n2 + 4 | 0 : n2;
                    j2 = m2;
                  }
                  m2 = t2 ? D2 : n2;
                  m2 = (j2 - m2 >> 2 | 0) > (g2 | 0) ? m2 + (g2 << 2) | 0 : j2;
                  j2 = (c[u2 >> 2] | 0) + s2 | 0;
                  c[u2 >> 2] = j2;
                } while ((j2 | 0) < 0);
                j2 = n2;
                g2 = m2;
              } else {
                j2 = n2;
                g2 = m2;
              }
              y2 = D2;
              if (j2 >>> 0 < g2 >>> 0) {
                m2 = (y2 - j2 >> 2) * 9 | 0;
                o2 = c[j2 >> 2] | 0;
                if (o2 >>> 0 >= 10) {
                  n2 = 10;
                  do {
                    n2 = n2 * 10 | 0;
                    m2 = m2 + 1 | 0;
                  } while (o2 >>> 0 >= n2 >>> 0);
                }
              } else
                m2 = 0;
              t2 = (w2 | 0) == 103;
              v2 = (k2 | 0) != 0;
              n2 = k2 - ((w2 | 0) != 102 ? m2 : 0) + ((v2 & t2) << 31 >> 31) | 0;
              if ((n2 | 0) < (((g2 - y2 >> 2) * 9 | 0) + -9 | 0)) {
                n2 = n2 + 9216 | 0;
                s2 = D2 + 4 + (((n2 | 0) / 9 | 0) + -1024 << 2) | 0;
                n2 = ((n2 | 0) % 9 | 0) + 1 | 0;
                if ((n2 | 0) < 9) {
                  o2 = 10;
                  do {
                    o2 = o2 * 10 | 0;
                    n2 = n2 + 1 | 0;
                  } while ((n2 | 0) != 9);
                } else
                  o2 = 10;
                p2 = c[s2 >> 2] | 0;
                q2 = (p2 >>> 0) % (o2 >>> 0) | 0;
                n2 = (s2 + 4 | 0) == (g2 | 0);
                if (!(n2 & (q2 | 0) == 0)) {
                  r2 = (((p2 >>> 0) / (o2 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992 : 9007199254740994;
                  x2 = (o2 | 0) / 2 | 0;
                  e2 = q2 >>> 0 < x2 >>> 0 ? 0.5 : n2 & (q2 | 0) == (x2 | 0) ? 1 : 1.5;
                  if (C2) {
                    x2 = (a[B2 >> 0] | 0) == 45;
                    e2 = x2 ? -e2 : e2;
                    r2 = x2 ? -r2 : r2;
                  }
                  n2 = p2 - q2 | 0;
                  c[s2 >> 2] = n2;
                  if (r2 + e2 != r2) {
                    x2 = n2 + o2 | 0;
                    c[s2 >> 2] = x2;
                    if (x2 >>> 0 > 999999999) {
                      m2 = s2;
                      while (1) {
                        n2 = m2 + -4 | 0;
                        c[m2 >> 2] = 0;
                        if (n2 >>> 0 < j2 >>> 0) {
                          j2 = j2 + -4 | 0;
                          c[j2 >> 2] = 0;
                        }
                        x2 = (c[n2 >> 2] | 0) + 1 | 0;
                        c[n2 >> 2] = x2;
                        if (x2 >>> 0 > 999999999)
                          m2 = n2;
                        else
                          break;
                      }
                    } else
                      n2 = s2;
                    m2 = (y2 - j2 >> 2) * 9 | 0;
                    p2 = c[j2 >> 2] | 0;
                    if (p2 >>> 0 >= 10) {
                      o2 = 10;
                      do {
                        o2 = o2 * 10 | 0;
                        m2 = m2 + 1 | 0;
                      } while (p2 >>> 0 >= o2 >>> 0);
                    }
                  } else
                    n2 = s2;
                } else
                  n2 = s2;
                n2 = n2 + 4 | 0;
                n2 = g2 >>> 0 > n2 >>> 0 ? n2 : g2;
                x2 = j2;
              } else {
                n2 = g2;
                x2 = j2;
              }
              w2 = n2;
              while (1) {
                if (w2 >>> 0 <= x2 >>> 0) {
                  u2 = 0;
                  break;
                }
                j2 = w2 + -4 | 0;
                if (!(c[j2 >> 2] | 0))
                  w2 = j2;
                else {
                  u2 = 1;
                  break;
                }
              }
              g2 = 0 - m2 | 0;
              do
                if (t2) {
                  j2 = ((v2 ^ 1) & 1) + k2 | 0;
                  if ((j2 | 0) > (m2 | 0) & (m2 | 0) > -5) {
                    o2 = i3 + -1 | 0;
                    k2 = j2 + -1 - m2 | 0;
                  } else {
                    o2 = i3 + -2 | 0;
                    k2 = j2 + -1 | 0;
                  }
                  j2 = h2 & 8;
                  if (!j2) {
                    if (u2 ? (z2 = c[w2 + -4 >> 2] | 0, (z2 | 0) != 0) : 0) {
                      if (!((z2 >>> 0) % 10 | 0)) {
                        n2 = 0;
                        j2 = 10;
                        do {
                          j2 = j2 * 10 | 0;
                          n2 = n2 + 1 | 0;
                        } while (!((z2 >>> 0) % (j2 >>> 0) | 0 | 0));
                      } else
                        n2 = 0;
                    } else
                      n2 = 9;
                    j2 = ((w2 - y2 >> 2) * 9 | 0) + -9 | 0;
                    if ((o2 | 32 | 0) == 102) {
                      s2 = j2 - n2 | 0;
                      s2 = (s2 | 0) > 0 ? s2 : 0;
                      k2 = (k2 | 0) < (s2 | 0) ? k2 : s2;
                      s2 = 0;
                      break;
                    } else {
                      s2 = j2 + m2 - n2 | 0;
                      s2 = (s2 | 0) > 0 ? s2 : 0;
                      k2 = (k2 | 0) < (s2 | 0) ? k2 : s2;
                      s2 = 0;
                      break;
                    }
                  } else
                    s2 = j2;
                } else {
                  o2 = i3;
                  s2 = h2 & 8;
                }
              while (0);
              t2 = k2 | s2;
              p2 = (t2 | 0) != 0 & 1;
              q2 = (o2 | 32 | 0) == 102;
              if (q2) {
                v2 = 0;
                j2 = (m2 | 0) > 0 ? m2 : 0;
              } else {
                j2 = (m2 | 0) < 0 ? g2 : m2;
                j2 = LB(j2, ((j2 | 0) < 0) << 31 >> 31, E2) | 0;
                n2 = E2;
                if ((n2 - j2 | 0) < 2)
                  do {
                    j2 = j2 + -1 | 0;
                    a[j2 >> 0] = 48;
                  } while ((n2 - j2 | 0) < 2);
                a[j2 + -1 >> 0] = (m2 >> 31 & 2) + 43;
                j2 = j2 + -2 | 0;
                a[j2 >> 0] = o2;
                v2 = j2;
                j2 = n2 - j2 | 0;
              }
              j2 = C2 + 1 + k2 + p2 + j2 | 0;
              OB(b2, 32, f2, j2, h2);
              GB(b2, B2, C2);
              OB(b2, 48, f2, j2, h2 ^ 65536);
              if (q2) {
                o2 = x2 >>> 0 > D2 >>> 0 ? D2 : x2;
                s2 = G2 + 9 | 0;
                p2 = s2;
                q2 = G2 + 8 | 0;
                n2 = o2;
                do {
                  m2 = LB(c[n2 >> 2] | 0, 0, s2) | 0;
                  if ((n2 | 0) == (o2 | 0)) {
                    if ((m2 | 0) == (s2 | 0)) {
                      a[q2 >> 0] = 48;
                      m2 = q2;
                    }
                  } else if (m2 >>> 0 > G2 >>> 0) {
                    yC(G2 | 0, 48, m2 - F2 | 0) | 0;
                    do
                      m2 = m2 + -1 | 0;
                    while (m2 >>> 0 > G2 >>> 0);
                  }
                  GB(b2, m2, p2 - m2 | 0);
                  n2 = n2 + 4 | 0;
                } while (n2 >>> 0 <= D2 >>> 0);
                if (t2 | 0)
                  GB(b2, 5710, 1);
                if (n2 >>> 0 < w2 >>> 0 & (k2 | 0) > 0)
                  while (1) {
                    m2 = LB(c[n2 >> 2] | 0, 0, s2) | 0;
                    if (m2 >>> 0 > G2 >>> 0) {
                      yC(G2 | 0, 48, m2 - F2 | 0) | 0;
                      do
                        m2 = m2 + -1 | 0;
                      while (m2 >>> 0 > G2 >>> 0);
                    }
                    GB(b2, m2, (k2 | 0) < 9 ? k2 : 9);
                    n2 = n2 + 4 | 0;
                    m2 = k2 + -9 | 0;
                    if (!(n2 >>> 0 < w2 >>> 0 & (k2 | 0) > 9)) {
                      k2 = m2;
                      break;
                    } else
                      k2 = m2;
                  }
                OB(b2, 48, k2 + 9 | 0, 9, 0);
              } else {
                t2 = u2 ? w2 : x2 + 4 | 0;
                if ((k2 | 0) > -1) {
                  u2 = G2 + 9 | 0;
                  s2 = (s2 | 0) == 0;
                  g2 = u2;
                  p2 = 0 - F2 | 0;
                  q2 = G2 + 8 | 0;
                  o2 = x2;
                  do {
                    m2 = LB(c[o2 >> 2] | 0, 0, u2) | 0;
                    if ((m2 | 0) == (u2 | 0)) {
                      a[q2 >> 0] = 48;
                      m2 = q2;
                    }
                    do
                      if ((o2 | 0) == (x2 | 0)) {
                        n2 = m2 + 1 | 0;
                        GB(b2, m2, 1);
                        if (s2 & (k2 | 0) < 1) {
                          m2 = n2;
                          break;
                        }
                        GB(b2, 5710, 1);
                        m2 = n2;
                      } else {
                        if (m2 >>> 0 <= G2 >>> 0)
                          break;
                        yC(G2 | 0, 48, m2 + p2 | 0) | 0;
                        do
                          m2 = m2 + -1 | 0;
                        while (m2 >>> 0 > G2 >>> 0);
                      }
                    while (0);
                    F2 = g2 - m2 | 0;
                    GB(b2, m2, (k2 | 0) > (F2 | 0) ? F2 : k2);
                    k2 = k2 - F2 | 0;
                    o2 = o2 + 4 | 0;
                  } while (o2 >>> 0 < t2 >>> 0 & (k2 | 0) > -1);
                }
                OB(b2, 48, k2 + 18 | 0, 18, 0);
                GB(b2, v2, E2 - v2 | 0);
              }
              OB(b2, 32, f2, j2, h2 ^ 8192);
            } else {
              G2 = (i3 & 32 | 0) != 0;
              j2 = C2 + 3 | 0;
              OB(b2, 32, f2, j2, h2 & -65537);
              GB(b2, B2, C2);
              GB(b2, e2 != e2 | false ? G2 ? 5686 : 5690 : G2 ? 5678 : 5682, 3);
              OB(b2, 32, f2, j2, h2 ^ 8192);
            }
          while (0);
          l = H2;
          return ((j2 | 0) < (f2 | 0) ? f2 : j2) | 0;
        }
        function RB(a2) {
          a2 = +a2;
          var b2 = 0;
          h[j >> 3] = a2;
          b2 = c[j >> 2] | 0;
          A = c[j + 4 >> 2] | 0;
          return b2 | 0;
        }
        function SB(a2, b2) {
          a2 = +a2;
          b2 = b2 | 0;
          return + +TB(a2, b2);
        }
        function TB(a2, b2) {
          a2 = +a2;
          b2 = b2 | 0;
          var d2 = 0, e2 = 0, f2 = 0;
          h[j >> 3] = a2;
          d2 = c[j >> 2] | 0;
          e2 = c[j + 4 >> 2] | 0;
          f2 = AC(d2 | 0, e2 | 0, 52) | 0;
          switch (f2 & 2047) {
            case 0: {
              if (a2 != 0) {
                a2 = +TB(a2 * 18446744073709552e3, b2);
                d2 = (c[b2 >> 2] | 0) + -64 | 0;
              } else
                d2 = 0;
              c[b2 >> 2] = d2;
              break;
            }
            case 2047:
              break;
            default: {
              c[b2 >> 2] = (f2 & 2047) + -1022;
              c[j >> 2] = d2;
              c[j + 4 >> 2] = e2 & -2146435073 | 1071644672;
              a2 = +h[j >> 3];
            }
          }
          return +a2;
        }
        function UB(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          do
            if (b2) {
              if (d2 >>> 0 < 128) {
                a[b2 >> 0] = d2;
                b2 = 1;
                break;
              }
              if (!(c[c[(VB() | 0) + 188 >> 2] >> 2] | 0))
                if ((d2 & -128 | 0) == 57216) {
                  a[b2 >> 0] = d2;
                  b2 = 1;
                  break;
                } else {
                  c[(vB() | 0) >> 2] = 84;
                  b2 = -1;
                  break;
                }
              if (d2 >>> 0 < 2048) {
                a[b2 >> 0] = d2 >>> 6 | 192;
                a[b2 + 1 >> 0] = d2 & 63 | 128;
                b2 = 2;
                break;
              }
              if (d2 >>> 0 < 55296 | (d2 & -8192 | 0) == 57344) {
                a[b2 >> 0] = d2 >>> 12 | 224;
                a[b2 + 1 >> 0] = d2 >>> 6 & 63 | 128;
                a[b2 + 2 >> 0] = d2 & 63 | 128;
                b2 = 3;
                break;
              }
              if ((d2 + -65536 | 0) >>> 0 < 1048576) {
                a[b2 >> 0] = d2 >>> 18 | 240;
                a[b2 + 1 >> 0] = d2 >>> 12 & 63 | 128;
                a[b2 + 2 >> 0] = d2 >>> 6 & 63 | 128;
                a[b2 + 3 >> 0] = d2 & 63 | 128;
                b2 = 4;
                break;
              } else {
                c[(vB() | 0) >> 2] = 84;
                b2 = -1;
                break;
              }
            } else
              b2 = 1;
          while (0);
          return b2 | 0;
        }
        function VB() {
          return xB() | 0;
        }
        function WB() {
          return xB() | 0;
        }
        function XB(b2, e2) {
          b2 = b2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = 0;
          while (1) {
            if ((d[5712 + g2 >> 0] | 0) == (b2 | 0)) {
              b2 = 2;
              break;
            }
            f2 = g2 + 1 | 0;
            if ((f2 | 0) == 87) {
              f2 = 5800;
              g2 = 87;
              b2 = 5;
              break;
            } else
              g2 = f2;
          }
          if ((b2 | 0) == 2)
            if (!g2)
              f2 = 5800;
            else {
              f2 = 5800;
              b2 = 5;
            }
          if ((b2 | 0) == 5)
            while (1) {
              do {
                b2 = f2;
                f2 = f2 + 1 | 0;
              } while ((a[b2 >> 0] | 0) != 0);
              g2 = g2 + -1 | 0;
              if (!g2)
                break;
              else
                b2 = 5;
            }
          return YB(f2, c[e2 + 20 >> 2] | 0) | 0;
        }
        function YB(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return ZB(a2, b2) | 0;
        }
        function ZB(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          if (!b2)
            b2 = 0;
          else
            b2 = _B(c[b2 >> 2] | 0, c[b2 + 4 >> 2] | 0, a2) | 0;
          return (b2 | 0 ? b2 : a2) | 0;
        }
        function _B(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0;
          o2 = (c[b2 >> 2] | 0) + 1794895138 | 0;
          h2 = $B(c[b2 + 8 >> 2] | 0, o2) | 0;
          f2 = $B(c[b2 + 12 >> 2] | 0, o2) | 0;
          g2 = $B(c[b2 + 16 >> 2] | 0, o2) | 0;
          a:
            do
              if ((h2 >>> 0 < d2 >>> 2 >>> 0 ? (n2 = d2 - (h2 << 2) | 0, f2 >>> 0 < n2 >>> 0 & g2 >>> 0 < n2 >>> 0) : 0) ? ((g2 | f2) & 3 | 0) == 0 : 0) {
                n2 = f2 >>> 2;
                m2 = g2 >>> 2;
                l2 = 0;
                while (1) {
                  j2 = h2 >>> 1;
                  k2 = l2 + j2 | 0;
                  i3 = k2 << 1;
                  g2 = i3 + n2 | 0;
                  f2 = $B(c[b2 + (g2 << 2) >> 2] | 0, o2) | 0;
                  g2 = $B(c[b2 + (g2 + 1 << 2) >> 2] | 0, o2) | 0;
                  if (!(g2 >>> 0 < d2 >>> 0 & f2 >>> 0 < (d2 - g2 | 0) >>> 0)) {
                    f2 = 0;
                    break a;
                  }
                  if (a[b2 + (g2 + f2) >> 0] | 0) {
                    f2 = 0;
                    break a;
                  }
                  f2 = AB(e2, b2 + g2 | 0) | 0;
                  if (!f2)
                    break;
                  f2 = (f2 | 0) < 0;
                  if ((h2 | 0) == 1) {
                    f2 = 0;
                    break a;
                  } else {
                    l2 = f2 ? l2 : k2;
                    h2 = f2 ? j2 : h2 - j2 | 0;
                  }
                }
                f2 = i3 + m2 | 0;
                g2 = $B(c[b2 + (f2 << 2) >> 2] | 0, o2) | 0;
                f2 = $B(c[b2 + (f2 + 1 << 2) >> 2] | 0, o2) | 0;
                if (f2 >>> 0 < d2 >>> 0 & g2 >>> 0 < (d2 - f2 | 0) >>> 0)
                  f2 = (a[b2 + (f2 + g2) >> 0] | 0) == 0 ? b2 + f2 | 0 : 0;
                else
                  f2 = 0;
              } else
                f2 = 0;
            while (0);
          return f2 | 0;
        }
        function $B(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          var c2 = 0;
          c2 = IC(a2 | 0) | 0;
          return ((b2 | 0) == 0 ? a2 : c2) | 0;
        }
        function aC(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0, j2 = 0;
          f2 = e2 + 16 | 0;
          g2 = c[f2 >> 2] | 0;
          if (!g2) {
            if (!(bC(e2) | 0)) {
              g2 = c[f2 >> 2] | 0;
              h2 = 5;
            } else
              f2 = 0;
          } else
            h2 = 5;
          a:
            do
              if ((h2 | 0) == 5) {
                j2 = e2 + 20 | 0;
                i3 = c[j2 >> 2] | 0;
                f2 = i3;
                if ((g2 - i3 | 0) >>> 0 < d2 >>> 0) {
                  f2 = sb[c[e2 + 36 >> 2] & 7](e2, b2, d2) | 0;
                  break;
                }
                b:
                  do
                    if ((a[e2 + 75 >> 0] | 0) > -1) {
                      i3 = d2;
                      while (1) {
                        if (!i3) {
                          h2 = 0;
                          g2 = b2;
                          break b;
                        }
                        g2 = i3 + -1 | 0;
                        if ((a[b2 + g2 >> 0] | 0) == 10)
                          break;
                        else
                          i3 = g2;
                      }
                      f2 = sb[c[e2 + 36 >> 2] & 7](e2, b2, i3) | 0;
                      if (f2 >>> 0 < i3 >>> 0)
                        break a;
                      h2 = i3;
                      g2 = b2 + i3 | 0;
                      d2 = d2 - i3 | 0;
                      f2 = c[j2 >> 2] | 0;
                    } else {
                      h2 = 0;
                      g2 = b2;
                    }
                  while (0);
                BC(f2 | 0, g2 | 0, d2 | 0) | 0;
                c[j2 >> 2] = (c[j2 >> 2] | 0) + d2;
                f2 = h2 + d2 | 0;
              }
            while (0);
          return f2 | 0;
        }
        function bC(b2) {
          b2 = b2 | 0;
          var d2 = 0, e2 = 0;
          d2 = b2 + 74 | 0;
          e2 = a[d2 >> 0] | 0;
          a[d2 >> 0] = e2 + 255 | e2;
          d2 = c[b2 >> 2] | 0;
          if (!(d2 & 8)) {
            c[b2 + 8 >> 2] = 0;
            c[b2 + 4 >> 2] = 0;
            e2 = c[b2 + 44 >> 2] | 0;
            c[b2 + 28 >> 2] = e2;
            c[b2 + 20 >> 2] = e2;
            c[b2 + 16 >> 2] = e2 + (c[b2 + 48 >> 2] | 0);
            b2 = 0;
          } else {
            c[b2 >> 2] = d2 | 32;
            b2 = -1;
          }
          return b2 | 0;
        }
        function cC(a2, b2) {
          a2 = T(a2);
          b2 = T(b2);
          var c2 = 0, d2 = 0;
          c2 = dC(a2) | 0;
          do
            if ((c2 & 2147483647) >>> 0 <= 2139095040) {
              d2 = dC(b2) | 0;
              if ((d2 & 2147483647) >>> 0 <= 2139095040)
                if ((d2 ^ c2 | 0) < 0) {
                  a2 = (c2 | 0) < 0 ? b2 : a2;
                  break;
                } else {
                  a2 = a2 < b2 ? b2 : a2;
                  break;
                }
            } else
              a2 = b2;
          while (0);
          return T(a2);
        }
        function dC(a2) {
          a2 = T(a2);
          return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
        }
        function eC(a2, b2) {
          a2 = T(a2);
          b2 = T(b2);
          var c2 = 0, d2 = 0;
          c2 = fC(a2) | 0;
          do
            if ((c2 & 2147483647) >>> 0 <= 2139095040) {
              d2 = fC(b2) | 0;
              if ((d2 & 2147483647) >>> 0 <= 2139095040)
                if ((d2 ^ c2 | 0) < 0) {
                  a2 = (c2 | 0) < 0 ? a2 : b2;
                  break;
                } else {
                  a2 = a2 < b2 ? a2 : b2;
                  break;
                }
            } else
              a2 = b2;
          while (0);
          return T(a2);
        }
        function fC(a2) {
          a2 = T(a2);
          return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
        }
        function gC(a2, b2) {
          a2 = T(a2);
          b2 = T(b2);
          var d2 = 0, e2 = 0, f2 = 0, h2 = 0, i3 = 0, k2 = 0, l2 = 0, m2 = 0;
          h2 = (g[j >> 2] = a2, c[j >> 2] | 0);
          k2 = (g[j >> 2] = b2, c[j >> 2] | 0);
          d2 = h2 >>> 23 & 255;
          i3 = k2 >>> 23 & 255;
          l2 = h2 & -2147483648;
          f2 = k2 << 1;
          a:
            do
              if ((f2 | 0) != 0 ? !((d2 | 0) == 255 | ((hC(b2) | 0) & 2147483647) >>> 0 > 2139095040) : 0) {
                e2 = h2 << 1;
                if (e2 >>> 0 <= f2 >>> 0) {
                  b2 = T(a2 * T(0));
                  return T((e2 | 0) == (f2 | 0) ? b2 : a2);
                }
                if (!d2) {
                  d2 = h2 << 9;
                  if ((d2 | 0) > -1) {
                    e2 = d2;
                    d2 = 0;
                    do {
                      d2 = d2 + -1 | 0;
                      e2 = e2 << 1;
                    } while ((e2 | 0) > -1);
                  } else
                    d2 = 0;
                  e2 = h2 << 1 - d2;
                } else
                  e2 = h2 & 8388607 | 8388608;
                if (!i3) {
                  h2 = k2 << 9;
                  if ((h2 | 0) > -1) {
                    f2 = 0;
                    do {
                      f2 = f2 + -1 | 0;
                      h2 = h2 << 1;
                    } while ((h2 | 0) > -1);
                  } else
                    f2 = 0;
                  i3 = f2;
                  k2 = k2 << 1 - f2;
                } else
                  k2 = k2 & 8388607 | 8388608;
                f2 = e2 - k2 | 0;
                h2 = (f2 | 0) > -1;
                b:
                  do
                    if ((d2 | 0) > (i3 | 0)) {
                      while (1) {
                        if (h2)
                          if (!f2)
                            break;
                          else
                            e2 = f2;
                        e2 = e2 << 1;
                        d2 = d2 + -1 | 0;
                        f2 = e2 - k2 | 0;
                        h2 = (f2 | 0) > -1;
                        if ((d2 | 0) <= (i3 | 0))
                          break b;
                      }
                      b2 = T(a2 * T(0));
                      break a;
                    }
                  while (0);
                if (h2)
                  if (!f2) {
                    b2 = T(a2 * T(0));
                    break;
                  } else
                    e2 = f2;
                if (e2 >>> 0 < 8388608)
                  do {
                    e2 = e2 << 1;
                    d2 = d2 + -1 | 0;
                  } while (e2 >>> 0 < 8388608);
                if ((d2 | 0) > 0)
                  d2 = e2 + -8388608 | d2 << 23;
                else
                  d2 = e2 >>> (1 - d2 | 0);
                b2 = (c[j >> 2] = d2 | l2, T(g[j >> 2]));
              } else
                m2 = 3;
            while (0);
          if ((m2 | 0) == 3) {
            b2 = T(a2 * b2);
            b2 = T(b2 / b2);
          }
          return T(b2);
        }
        function hC(a2) {
          a2 = T(a2);
          return (g[j >> 2] = a2, c[j >> 2] | 0) | 0;
        }
        function iC(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return CB(c[582] | 0, a2, b2) | 0;
        }
        function jC(a2) {
          a2 = a2 | 0;
          Ta();
        }
        function kC(a2) {
          a2 = a2 | 0;
          return;
        }
        function lC(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return 0;
        }
        function mC(a2) {
          a2 = a2 | 0;
          if ((nC(a2 + 4 | 0) | 0) == -1) {
            nb[c[(c[a2 >> 2] | 0) + 8 >> 2] & 127](a2);
            a2 = 1;
          } else
            a2 = 0;
          return a2 | 0;
        }
        function nC(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = c[a2 >> 2] | 0;
          c[a2 >> 2] = b2 + -1;
          return b2 + -1 | 0;
        }
        function oC(a2) {
          a2 = a2 | 0;
          if (mC(a2) | 0)
            pC(a2);
          return;
        }
        function pC(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = a2 + 8 | 0;
          if (!((c[b2 >> 2] | 0) != 0 ? (nC(b2) | 0) != -1 : 0))
            nb[c[(c[a2 >> 2] | 0) + 16 >> 2] & 127](a2);
          return;
        }
        function qC(a2) {
          a2 = a2 | 0;
          var b2 = 0;
          b2 = (a2 | 0) == 0 ? 1 : a2;
          while (1) {
            a2 = oB(b2) | 0;
            if (a2 | 0)
              break;
            a2 = uC() | 0;
            if (!a2) {
              a2 = 0;
              break;
            }
            Fb[a2 & 0]();
          }
          return a2 | 0;
        }
        function rC(a2) {
          a2 = a2 | 0;
          return qC(a2) | 0;
        }
        function sC(a2) {
          a2 = a2 | 0;
          pB(a2);
          return;
        }
        function tC(b2) {
          b2 = b2 | 0;
          if ((a[b2 + 11 >> 0] | 0) < 0)
            sC(c[b2 >> 2] | 0);
          return;
        }
        function uC() {
          var a2 = 0;
          a2 = c[2923] | 0;
          c[2923] = a2 + 0;
          return a2 | 0;
        }
        function vC() {
        }
        function wC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          d2 = b2 - d2 - (c2 >>> 0 > a2 >>> 0 | 0) >>> 0;
          return (A = d2, a2 - c2 >>> 0 | 0) | 0;
        }
        function xC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          c2 = a2 + c2 >>> 0;
          return (A = b2 + d2 + (c2 >>> 0 < a2 >>> 0 | 0) >>> 0, c2 | 0) | 0;
        }
        function yC(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0, i3 = 0;
          h2 = b2 + e2 | 0;
          d2 = d2 & 255;
          if ((e2 | 0) >= 67) {
            while (b2 & 3) {
              a[b2 >> 0] = d2;
              b2 = b2 + 1 | 0;
            }
            f2 = h2 & -4 | 0;
            g2 = f2 - 64 | 0;
            i3 = d2 | d2 << 8 | d2 << 16 | d2 << 24;
            while ((b2 | 0) <= (g2 | 0)) {
              c[b2 >> 2] = i3;
              c[b2 + 4 >> 2] = i3;
              c[b2 + 8 >> 2] = i3;
              c[b2 + 12 >> 2] = i3;
              c[b2 + 16 >> 2] = i3;
              c[b2 + 20 >> 2] = i3;
              c[b2 + 24 >> 2] = i3;
              c[b2 + 28 >> 2] = i3;
              c[b2 + 32 >> 2] = i3;
              c[b2 + 36 >> 2] = i3;
              c[b2 + 40 >> 2] = i3;
              c[b2 + 44 >> 2] = i3;
              c[b2 + 48 >> 2] = i3;
              c[b2 + 52 >> 2] = i3;
              c[b2 + 56 >> 2] = i3;
              c[b2 + 60 >> 2] = i3;
              b2 = b2 + 64 | 0;
            }
            while ((b2 | 0) < (f2 | 0)) {
              c[b2 >> 2] = i3;
              b2 = b2 + 4 | 0;
            }
          }
          while ((b2 | 0) < (h2 | 0)) {
            a[b2 >> 0] = d2;
            b2 = b2 + 1 | 0;
          }
          return h2 - e2 | 0;
        }
        function zC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          if ((c2 | 0) < 32) {
            A = b2 << c2 | (a2 & (1 << c2) - 1 << 32 - c2) >>> 32 - c2;
            return a2 << c2;
          }
          A = a2 << c2 - 32;
          return 0;
        }
        function AC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          if ((c2 | 0) < 32) {
            A = b2 >>> c2;
            return a2 >>> c2 | (b2 & (1 << c2) - 1) << 32 - c2;
          }
          A = 0;
          return b2 >>> c2 - 32 | 0;
        }
        function BC(b2, d2, e2) {
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0, h2 = 0;
          if ((e2 | 0) >= 8192)
            return Oa(b2 | 0, d2 | 0, e2 | 0) | 0;
          h2 = b2 | 0;
          g2 = b2 + e2 | 0;
          if ((b2 & 3) == (d2 & 3)) {
            while (b2 & 3) {
              if (!e2)
                return h2 | 0;
              a[b2 >> 0] = a[d2 >> 0] | 0;
              b2 = b2 + 1 | 0;
              d2 = d2 + 1 | 0;
              e2 = e2 - 1 | 0;
            }
            e2 = g2 & -4 | 0;
            f2 = e2 - 64 | 0;
            while ((b2 | 0) <= (f2 | 0)) {
              c[b2 >> 2] = c[d2 >> 2];
              c[b2 + 4 >> 2] = c[d2 + 4 >> 2];
              c[b2 + 8 >> 2] = c[d2 + 8 >> 2];
              c[b2 + 12 >> 2] = c[d2 + 12 >> 2];
              c[b2 + 16 >> 2] = c[d2 + 16 >> 2];
              c[b2 + 20 >> 2] = c[d2 + 20 >> 2];
              c[b2 + 24 >> 2] = c[d2 + 24 >> 2];
              c[b2 + 28 >> 2] = c[d2 + 28 >> 2];
              c[b2 + 32 >> 2] = c[d2 + 32 >> 2];
              c[b2 + 36 >> 2] = c[d2 + 36 >> 2];
              c[b2 + 40 >> 2] = c[d2 + 40 >> 2];
              c[b2 + 44 >> 2] = c[d2 + 44 >> 2];
              c[b2 + 48 >> 2] = c[d2 + 48 >> 2];
              c[b2 + 52 >> 2] = c[d2 + 52 >> 2];
              c[b2 + 56 >> 2] = c[d2 + 56 >> 2];
              c[b2 + 60 >> 2] = c[d2 + 60 >> 2];
              b2 = b2 + 64 | 0;
              d2 = d2 + 64 | 0;
            }
            while ((b2 | 0) < (e2 | 0)) {
              c[b2 >> 2] = c[d2 >> 2];
              b2 = b2 + 4 | 0;
              d2 = d2 + 4 | 0;
            }
          } else {
            e2 = g2 - 4 | 0;
            while ((b2 | 0) < (e2 | 0)) {
              a[b2 >> 0] = a[d2 >> 0] | 0;
              a[b2 + 1 >> 0] = a[d2 + 1 >> 0] | 0;
              a[b2 + 2 >> 0] = a[d2 + 2 >> 0] | 0;
              a[b2 + 3 >> 0] = a[d2 + 3 >> 0] | 0;
              b2 = b2 + 4 | 0;
              d2 = d2 + 4 | 0;
            }
          }
          while ((b2 | 0) < (g2 | 0)) {
            a[b2 >> 0] = a[d2 >> 0] | 0;
            b2 = b2 + 1 | 0;
            d2 = d2 + 1 | 0;
          }
          return h2 | 0;
        }
        function CC(b2) {
          b2 = b2 | 0;
          var c2 = 0;
          c2 = a[n + (b2 & 255) >> 0] | 0;
          if ((c2 | 0) < 8)
            return c2 | 0;
          c2 = a[n + (b2 >> 8 & 255) >> 0] | 0;
          if ((c2 | 0) < 8)
            return c2 + 8 | 0;
          c2 = a[n + (b2 >> 16 & 255) >> 0] | 0;
          if ((c2 | 0) < 8)
            return c2 + 16 | 0;
          return (a[n + (b2 >>> 24) >> 0] | 0) + 24 | 0;
        }
        function DC(a2, b2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          var g2 = 0, h2 = 0, i3 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p2 = 0;
          l2 = a2;
          j2 = b2;
          k2 = j2;
          h2 = d2;
          n2 = e2;
          i3 = n2;
          if (!k2) {
            g2 = (f2 | 0) != 0;
            if (!i3) {
              if (g2) {
                c[f2 >> 2] = (l2 >>> 0) % (h2 >>> 0);
                c[f2 + 4 >> 2] = 0;
              }
              n2 = 0;
              f2 = (l2 >>> 0) / (h2 >>> 0) >>> 0;
              return (A = n2, f2) | 0;
            } else {
              if (!g2) {
                n2 = 0;
                f2 = 0;
                return (A = n2, f2) | 0;
              }
              c[f2 >> 2] = a2 | 0;
              c[f2 + 4 >> 2] = b2 & 0;
              n2 = 0;
              f2 = 0;
              return (A = n2, f2) | 0;
            }
          }
          g2 = (i3 | 0) == 0;
          do
            if (h2) {
              if (!g2) {
                g2 = (S(i3 | 0) | 0) - (S(k2 | 0) | 0) | 0;
                if (g2 >>> 0 <= 31) {
                  m2 = g2 + 1 | 0;
                  i3 = 31 - g2 | 0;
                  b2 = g2 - 31 >> 31;
                  h2 = m2;
                  a2 = l2 >>> (m2 >>> 0) & b2 | k2 << i3;
                  b2 = k2 >>> (m2 >>> 0) & b2;
                  g2 = 0;
                  i3 = l2 << i3;
                  break;
                }
                if (!f2) {
                  n2 = 0;
                  f2 = 0;
                  return (A = n2, f2) | 0;
                }
                c[f2 >> 2] = a2 | 0;
                c[f2 + 4 >> 2] = j2 | b2 & 0;
                n2 = 0;
                f2 = 0;
                return (A = n2, f2) | 0;
              }
              g2 = h2 - 1 | 0;
              if (g2 & h2 | 0) {
                i3 = (S(h2 | 0) | 0) + 33 - (S(k2 | 0) | 0) | 0;
                p2 = 64 - i3 | 0;
                m2 = 32 - i3 | 0;
                j2 = m2 >> 31;
                o2 = i3 - 32 | 0;
                b2 = o2 >> 31;
                h2 = i3;
                a2 = m2 - 1 >> 31 & k2 >>> (o2 >>> 0) | (k2 << m2 | l2 >>> (i3 >>> 0)) & b2;
                b2 = b2 & k2 >>> (i3 >>> 0);
                g2 = l2 << p2 & j2;
                i3 = (k2 << p2 | l2 >>> (o2 >>> 0)) & j2 | l2 << m2 & i3 - 33 >> 31;
                break;
              }
              if (f2 | 0) {
                c[f2 >> 2] = g2 & l2;
                c[f2 + 4 >> 2] = 0;
              }
              if ((h2 | 0) == 1) {
                o2 = j2 | b2 & 0;
                p2 = a2 | 0 | 0;
                return (A = o2, p2) | 0;
              } else {
                p2 = CC(h2 | 0) | 0;
                o2 = k2 >>> (p2 >>> 0) | 0;
                p2 = k2 << 32 - p2 | l2 >>> (p2 >>> 0) | 0;
                return (A = o2, p2) | 0;
              }
            } else {
              if (g2) {
                if (f2 | 0) {
                  c[f2 >> 2] = (k2 >>> 0) % (h2 >>> 0);
                  c[f2 + 4 >> 2] = 0;
                }
                o2 = 0;
                p2 = (k2 >>> 0) / (h2 >>> 0) >>> 0;
                return (A = o2, p2) | 0;
              }
              if (!l2) {
                if (f2 | 0) {
                  c[f2 >> 2] = 0;
                  c[f2 + 4 >> 2] = (k2 >>> 0) % (i3 >>> 0);
                }
                o2 = 0;
                p2 = (k2 >>> 0) / (i3 >>> 0) >>> 0;
                return (A = o2, p2) | 0;
              }
              g2 = i3 - 1 | 0;
              if (!(g2 & i3)) {
                if (f2 | 0) {
                  c[f2 >> 2] = a2 | 0;
                  c[f2 + 4 >> 2] = g2 & k2 | b2 & 0;
                }
                o2 = 0;
                p2 = k2 >>> ((CC(i3 | 0) | 0) >>> 0);
                return (A = o2, p2) | 0;
              }
              g2 = (S(i3 | 0) | 0) - (S(k2 | 0) | 0) | 0;
              if (g2 >>> 0 <= 30) {
                b2 = g2 + 1 | 0;
                i3 = 31 - g2 | 0;
                h2 = b2;
                a2 = k2 << i3 | l2 >>> (b2 >>> 0);
                b2 = k2 >>> (b2 >>> 0);
                g2 = 0;
                i3 = l2 << i3;
                break;
              }
              if (!f2) {
                o2 = 0;
                p2 = 0;
                return (A = o2, p2) | 0;
              }
              c[f2 >> 2] = a2 | 0;
              c[f2 + 4 >> 2] = j2 | b2 & 0;
              o2 = 0;
              p2 = 0;
              return (A = o2, p2) | 0;
            }
          while (0);
          if (!h2) {
            k2 = i3;
            j2 = 0;
            i3 = 0;
          } else {
            m2 = d2 | 0 | 0;
            l2 = n2 | e2 & 0;
            k2 = xC(m2 | 0, l2 | 0, -1, -1) | 0;
            d2 = A;
            j2 = i3;
            i3 = 0;
            do {
              e2 = j2;
              j2 = g2 >>> 31 | j2 << 1;
              g2 = i3 | g2 << 1;
              e2 = a2 << 1 | e2 >>> 31 | 0;
              n2 = a2 >>> 31 | b2 << 1 | 0;
              wC(k2 | 0, d2 | 0, e2 | 0, n2 | 0) | 0;
              p2 = A;
              o2 = p2 >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1;
              i3 = o2 & 1;
              a2 = wC(e2 | 0, n2 | 0, o2 & m2 | 0, (((p2 | 0) < 0 ? -1 : 0) >> 31 | ((p2 | 0) < 0 ? -1 : 0) << 1) & l2 | 0) | 0;
              b2 = A;
              h2 = h2 - 1 | 0;
            } while ((h2 | 0) != 0);
            k2 = j2;
            j2 = 0;
          }
          h2 = 0;
          if (f2 | 0) {
            c[f2 >> 2] = a2;
            c[f2 + 4 >> 2] = b2;
          }
          o2 = (g2 | 0) >>> 31 | (k2 | h2) << 1 | (h2 << 1 | g2 >>> 31) & 0 | j2;
          p2 = (g2 << 1 | 0 >>> 31) & -2 | i3;
          return (A = o2, p2) | 0;
        }
        function EC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          return DC(a2, b2, c2, d2, 0) | 0;
        }
        function FC(a2) {
          a2 = a2 | 0;
          var b2 = 0, d2 = 0;
          d2 = a2 + 15 & -16 | 0;
          b2 = c[i2 >> 2] | 0;
          a2 = b2 + d2 | 0;
          if ((d2 | 0) > 0 & (a2 | 0) < (b2 | 0) | (a2 | 0) < 0) {
            Y() | 0;
            Qa(12);
            return -1;
          }
          c[i2 >> 2] = a2;
          if ((a2 | 0) > (X() | 0) ? (W() | 0) == 0 : 0) {
            c[i2 >> 2] = b2;
            Qa(12);
            return -1;
          }
          return b2 | 0;
        }
        function GC(b2, c2, d2) {
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          var e2 = 0;
          if ((c2 | 0) < (b2 | 0) & (b2 | 0) < (c2 + d2 | 0)) {
            e2 = b2;
            c2 = c2 + d2 | 0;
            b2 = b2 + d2 | 0;
            while ((d2 | 0) > 0) {
              b2 = b2 - 1 | 0;
              c2 = c2 - 1 | 0;
              d2 = d2 - 1 | 0;
              a[b2 >> 0] = a[c2 >> 0] | 0;
            }
            b2 = e2;
          } else
            BC(b2, c2, d2) | 0;
          return b2 | 0;
        }
        function HC(a2, b2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          var f2 = 0, g2 = 0;
          g2 = l;
          l = l + 16 | 0;
          f2 = g2 | 0;
          DC(a2, b2, d2, e2, f2) | 0;
          l = g2;
          return (A = c[f2 + 4 >> 2] | 0, c[f2 >> 2] | 0) | 0;
        }
        function IC(a2) {
          a2 = a2 | 0;
          return (a2 & 255) << 24 | (a2 >> 8 & 255) << 16 | (a2 >> 16 & 255) << 8 | a2 >>> 24 | 0;
        }
        function JC(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          jb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, e2 | 0, f2 | 0);
        }
        function KC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          kb[a2 & 1](b2 | 0, T(c2));
        }
        function LC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          lb[a2 & 31](b2 | 0, +c2);
        }
        function MC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          d2 = T(d2);
          return T(mb[a2 & 0](b2 | 0, T(c2), T(d2)));
        }
        function NC(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          nb[a2 & 127](b2 | 0);
        }
        function OC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          ob[a2 & 31](b2 | 0, c2 | 0);
        }
        function PC(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return pb[a2 & 31](b2 | 0) | 0;
        }
        function QC(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          d2 = +d2;
          e2 = e2 | 0;
          qb[a2 & 1](b2 | 0, +c2, +d2, e2 | 0);
        }
        function RC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          d2 = +d2;
          rb[a2 & 1](b2 | 0, +c2, +d2);
        }
        function SC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          return sb[a2 & 7](b2 | 0, c2 | 0, d2 | 0) | 0;
        }
        function TC(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          return +tb[a2 & 1](b2 | 0, c2 | 0, d2 | 0);
        }
        function UC(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          return +ub[a2 & 15](b2 | 0);
        }
        function VC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          return vb[a2 & 1](b2 | 0, +c2) | 0;
        }
        function WC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          return wb[a2 & 15](b2 | 0, c2 | 0) | 0;
        }
        function XC(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = +d2;
          e2 = +e2;
          f2 = f2 | 0;
          xb[a2 & 1](b2 | 0, c2 | 0, +d2, +e2, f2 | 0);
        }
        function YC(a2, b2, c2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          g2 = g2 | 0;
          yb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, e2 | 0, f2 | 0, g2 | 0);
        }
        function ZC(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          return +zb[a2 & 7](b2 | 0, c2 | 0);
        }
        function _C(a2) {
          a2 = a2 | 0;
          return Ab[a2 & 7]() | 0;
        }
        function $C(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          return Bb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, e2 | 0, f2 | 0) | 0;
        }
        function aD(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = +e2;
          Cb[a2 & 1](b2 | 0, c2 | 0, d2 | 0, +e2);
        }
        function bD(a2, b2, c2, d2, e2, f2, g2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = T(d2);
          e2 = e2 | 0;
          f2 = T(f2);
          g2 = g2 | 0;
          Db[a2 & 1](b2 | 0, c2 | 0, T(d2), e2 | 0, T(f2), g2 | 0);
        }
        function cD(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          Eb[a2 & 15](b2 | 0, c2 | 0, d2 | 0);
        }
        function dD(a2) {
          a2 = a2 | 0;
          Fb[a2 & 0]();
        }
        function eD(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = +d2;
          Gb[a2 & 15](b2 | 0, c2 | 0, +d2);
        }
        function fD(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          return Hb[a2 & 1](+b2, +c2) | 0;
        }
        function gD(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          Ib[a2 & 15](b2 | 0, c2 | 0, d2 | 0, e2 | 0);
        }
        function hD(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          U(0);
        }
        function iD(a2, b2) {
          a2 = a2 | 0;
          b2 = T(b2);
          U(1);
        }
        function jD(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          U(2);
        }
        function kD(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = T(b2);
          c2 = T(c2);
          U(3);
          return ib;
        }
        function lD(a2) {
          a2 = a2 | 0;
          U(4);
        }
        function mD(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          U(5);
        }
        function nD(a2) {
          a2 = a2 | 0;
          U(6);
          return 0;
        }
        function oD(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          d2 = d2 | 0;
          U(7);
        }
        function pD(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = +b2;
          c2 = +c2;
          U(8);
        }
        function qD(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          U(9);
          return 0;
        }
        function rD(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          U(10);
          return 0;
        }
        function sD(a2) {
          a2 = a2 | 0;
          U(11);
          return 0;
        }
        function tD(a2, b2) {
          a2 = a2 | 0;
          b2 = +b2;
          U(12);
          return 0;
        }
        function uD(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          U(13);
          return 0;
        }
        function vD(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          d2 = +d2;
          e2 = e2 | 0;
          U(14);
        }
        function wD(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          f2 = f2 | 0;
          U(15);
        }
        function xD(a2, b2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          U(16);
          return 0;
        }
        function yD() {
          U(17);
          return 0;
        }
        function zD(a2, b2, c2, d2, e2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          e2 = e2 | 0;
          U(18);
          return 0;
        }
        function AD(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = +d2;
          U(19);
        }
        function BD(a2, b2, c2, d2, e2, f2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = T(c2);
          d2 = d2 | 0;
          e2 = T(e2);
          f2 = f2 | 0;
          U(20);
        }
        function CD(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          U(21);
        }
        function DD() {
          U(22);
        }
        function ED(a2, b2, c2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = +c2;
          U(23);
        }
        function FD(a2, b2) {
          a2 = +a2;
          b2 = +b2;
          U(24);
          return 0;
        }
        function GD(a2, b2, c2, d2) {
          a2 = a2 | 0;
          b2 = b2 | 0;
          c2 = c2 | 0;
          d2 = d2 | 0;
          U(25);
        }
        var jb = [hD, Uw];
        var kb = [iD, of];
        var lb = [jD, Of, Pf, Qf, Rf, Sf, Tf, Uf, Wf, Xf, Zf, _f, $f, ag, bg, cg, dg, eg, fg, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD, jD];
        var mb = [kD];
        var nb = [lD, kC, Ki, Li, Mi, rn, sn, tn, Pu, Qu, Ru, Cw, Dw, Ew, DA, EA, FA, Rb, tf, yf, Vf, Yf, hh, ih, ri, Ui, kj, Jj, bk, zk, Wk, nl, Hl, bm, um, Nm, en, Nn, fo, yo, Ro, ip, Bp, Xp, nq, Eq, Zq, lf, Hr, _r, us, Ps, ft, Ct, Ot, Rt, ju, mu, Eu, Uu, Xu, pv, Kv, Vi, $x, Ky, az, sz, Rz, hA, tA, wA, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD, lD];
        var ob = [mD, zf, Af, Df, Ef, Ff, Gf, Hf, If, Lf, Mf, Nf, wg, zg, Ag, Bg, Cg, Dg, Eg, Jg, Ng, rh, $p, qq, Ts, cy, Sv, xy, mD, mD, mD, mD];
        var pb = [nD, rB, sf, jg, ng, og, pg, qg, rg, sg, ug, vg, Kg, Lg, jh, ar, jt, sv, hy, jy, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD, nD];
        var qb = [oD, kh];
        var rb = [pD, Hu];
        var sb = [qD, sB, tB, zB, Dk, Rn, Lr, wz];
        var tb = [rD, ym];
        var ub = [sD, xg, yg, Fg, lh, mh, nh, oh, ph, qh, sD, sD, sD, sD, sD, sD];
        var vb = [tD, Kt];
        var wb = [uD, lC, Mg, xi, Nj, _k, rl, jn, jo, Iq, pf, ez, uD, uD, uD, uD];
        var xb = [vD, oj];
        var yb = [wD, Vz];
        var zb = [xD, Gg, sh, th, uh, Rm, xD, xD];
        var Ab = [yD, vh, qf, jf, Wt, qu, av, AA];
        var Bb = [zD, ee];
        var Cb = [AD, Vo];
        var Db = [BD, Pg];
        var Eb = [CD, kg, tg, Hg, Ig, fk, Ll, mp, Fp, nf, vx, Oy, lA, CD, CD, CD];
        var Fb = [DD];
        var Gb = [ED, Bf, Cf, Jf, Kf, gg, hg, ig, Co, cs, Ft, ED, ED, ED, ED, ED];
        var Hb = [FD, Mu];
        var Ib = [GD, fm, ir, ys, st, au, wu, hv, Pv, oy, LA, GD, GD, GD, GD, GD];
        return { _llvm_bswap_i32: IC, dynCall_idd: fD, dynCall_i: _C, _i64Subtract: wC, ___udivdi3: EC, dynCall_vif: KC, setThrew: Nb, dynCall_viii: cD, _bitshift64Lshr: AC, _bitshift64Shl: zC, dynCall_vi: NC, dynCall_viiddi: XC, dynCall_diii: TC, dynCall_iii: WC, _memset: yC, _sbrk: FC, _memcpy: BC, __GLOBAL__sub_I_Yoga_cpp: hf, dynCall_vii: OC, ___uremdi3: HC, dynCall_vid: LC, stackAlloc: Jb, _nbind_init: _A, getTempRet0: Pb, dynCall_di: UC, dynCall_iid: VC, setTempRet0: Ob, _i64Add: xC, dynCall_fiff: MC, dynCall_iiii: SC, _emscripten_get_global_libc: qB, dynCall_viid: eD, dynCall_viiid: aD, dynCall_viififi: bD, dynCall_ii: PC, __GLOBAL__sub_I_Binding_cc: Sx, dynCall_viiii: gD, dynCall_iiiiii: $C, stackSave: Kb, dynCall_viiiii: JC, __GLOBAL__sub_I_nbind_cc: wh, dynCall_vidd: RC, _free: pB, runPostSets: vC, dynCall_viiiiii: YC, establishStackSpace: Mb, _memmove: GC, stackRestore: Lb, _malloc: oB, __GLOBAL__sub_I_common_cc: Bv, dynCall_viddi: QC, dynCall_dii: ZC, dynCall_v: dD };
      }(
        Module.asmGlobalArg,
        Module.asmLibraryArg,
        buffer
      );
      var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
      var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
      var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
      var setThrew = Module["setThrew"] = asm["setThrew"];
      var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
      var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
      var _memset = Module["_memset"] = asm["_memset"];
      var _sbrk = Module["_sbrk"] = asm["_sbrk"];
      var _memcpy = Module["_memcpy"] = asm["_memcpy"];
      var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
      var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
      var _nbind_init = Module["_nbind_init"] = asm["_nbind_init"];
      var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
      var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
      var _i64Add = Module["_i64Add"] = asm["_i64Add"];
      var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
      var __GLOBAL__sub_I_Yoga_cpp = Module["__GLOBAL__sub_I_Yoga_cpp"] = asm["__GLOBAL__sub_I_Yoga_cpp"];
      var __GLOBAL__sub_I_Binding_cc = Module["__GLOBAL__sub_I_Binding_cc"] = asm["__GLOBAL__sub_I_Binding_cc"];
      var stackSave = Module["stackSave"] = asm["stackSave"];
      var __GLOBAL__sub_I_nbind_cc = Module["__GLOBAL__sub_I_nbind_cc"] = asm["__GLOBAL__sub_I_nbind_cc"];
      var _free = Module["_free"] = asm["_free"];
      var runPostSets = Module["runPostSets"] = asm["runPostSets"];
      var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
      var _memmove = Module["_memmove"] = asm["_memmove"];
      var stackRestore = Module["stackRestore"] = asm["stackRestore"];
      var _malloc = Module["_malloc"] = asm["_malloc"];
      var __GLOBAL__sub_I_common_cc = Module["__GLOBAL__sub_I_common_cc"] = asm["__GLOBAL__sub_I_common_cc"];
      var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
      var dynCall_vif = Module["dynCall_vif"] = asm["dynCall_vif"];
      var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
      var dynCall_fiff = Module["dynCall_fiff"] = asm["dynCall_fiff"];
      var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
      var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
      var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
      var dynCall_viddi = Module["dynCall_viddi"] = asm["dynCall_viddi"];
      var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
      var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
      var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
      var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
      var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
      var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
      var dynCall_viiddi = Module["dynCall_viiddi"] = asm["dynCall_viiddi"];
      var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
      var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
      var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
      var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
      var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
      var dynCall_viififi = Module["dynCall_viififi"] = asm["dynCall_viififi"];
      var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
      var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
      var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
      var dynCall_idd = Module["dynCall_idd"] = asm["dynCall_idd"];
      var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
      Runtime.stackAlloc = Module["stackAlloc"];
      Runtime.stackSave = Module["stackSave"];
      Runtime.stackRestore = Module["stackRestore"];
      Runtime.establishStackSpace = Module["establishStackSpace"];
      Runtime.setTempRet0 = Module["setTempRet0"];
      Runtime.getTempRet0 = Module["getTempRet0"];
      Module["asm"] = asm;
      function ExitStatus(status) {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
      }
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      var initialStackTop;
      var preloadStartTime = null;
      var calledMain = false;
      dependenciesFulfilled = function runCaller() {
        if (!Module["calledRun"])
          run();
        if (!Module["calledRun"])
          dependenciesFulfilled = runCaller;
      };
      Module["callMain"] = Module.callMain = function callMain(args) {
        args = args || [];
        ensureInitRuntime();
        var argc = args.length + 1;
        function pad() {
          for (var i3 = 0; i3 < 4 - 1; i3++) {
            argv.push(0);
          }
        }
        var argv = [allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL)];
        pad();
        for (var i2 = 0; i2 < argc - 1; i2 = i2 + 1) {
          argv.push(allocate(intArrayFromString(args[i2]), "i8", ALLOC_NORMAL));
          pad();
        }
        argv.push(0);
        argv = allocate(argv, "i32", ALLOC_NORMAL);
        try {
          var ret = Module["_main"](argc, argv, 0);
          exit(ret, true);
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else if (e == "SimulateInfiniteLoop") {
            Module["noExitRuntime"] = true;
            return;
          } else {
            var toLog = e;
            if (e && typeof e === "object" && e.stack) {
              toLog = [e, e.stack];
            }
            Module.printErr("exception thrown: " + toLog);
            Module["quit"](1, e);
          }
        } finally {
          calledMain = true;
        }
      };
      function run(args) {
        args = args || Module["arguments"];
        if (preloadStartTime === null)
          preloadStartTime = Date.now();
        if (runDependencies > 0) {
          return;
        }
        preRun();
        if (runDependencies > 0)
          return;
        if (Module["calledRun"])
          return;
        function doRun() {
          if (Module["calledRun"])
            return;
          Module["calledRun"] = true;
          if (ABORT)
            return;
          ensureInitRuntime();
          preMain();
          if (Module["onRuntimeInitialized"])
            Module["onRuntimeInitialized"]();
          if (Module["_main"] && shouldRunNow)
            Module["callMain"](args);
          postRun();
        }
        if (Module["setStatus"]) {
          Module["setStatus"]("Running...");
          setTimeout(function() {
            setTimeout(function() {
              Module["setStatus"]("");
            }, 1);
            doRun();
          }, 1);
        } else {
          doRun();
        }
      }
      Module["run"] = Module.run = run;
      function exit(status, implicit) {
        if (implicit && Module["noExitRuntime"]) {
          return;
        }
        if (Module["noExitRuntime"]) {
        } else {
          ABORT = true;
          EXITSTATUS = status;
          STACKTOP = initialStackTop;
          exitRuntime();
          if (Module["onExit"])
            Module["onExit"](status);
        }
        if (ENVIRONMENT_IS_NODE) {
          process["exit"](status);
        }
        Module["quit"](status, new ExitStatus(status));
      }
      Module["exit"] = Module.exit = exit;
      var abortDecorators = [];
      function abort(what) {
        if (Module["onAbort"]) {
          Module["onAbort"](what);
        }
        if (what !== void 0) {
          Module.print(what);
          Module.printErr(what);
          what = JSON.stringify(what);
        } else {
          what = "";
        }
        ABORT = true;
        EXITSTATUS = 1;
        var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
        var output = "abort(" + what + ") at " + stackTrace() + extra;
        if (abortDecorators) {
          abortDecorators.forEach(function(decorator) {
            output = decorator(output, what);
          });
        }
        throw output;
      }
      Module["abort"] = Module.abort = abort;
      if (Module["preInit"]) {
        if (typeof Module["preInit"] == "function")
          Module["preInit"] = [Module["preInit"]];
        while (Module["preInit"].length > 0) {
          Module["preInit"].pop()();
        }
      }
      var shouldRunNow = true;
      if (Module["noInitialRun"]) {
        shouldRunNow = false;
      }
      run();
    });
  }
});

// ../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-browser.js
var require_entry_browser = __commonJS({
  "../../node_modules/.store/yoga-layout-prebuilt-patch-082ef590ba/node_modules/yoga-layout-prebuilt/yoga-layout/dist/entry-browser.js"(exports2, module2) {
    "use strict";
    var Yoga7 = require_entry_common();
    var nbind = require_nbind();
    var ran = false;
    var ret = null;
    nbind({}, function(err2, result) {
      if (ran) {
        return;
      }
      ran = true;
      if (err2) {
        throw err2;
      }
      ret = result;
    });
    if (!ran) {
      throw new Error("Failed to load the yoga module - it needed to be loaded synchronously, but didn't");
    }
    module2.exports = Yoga7(ret.bind, ret.lib);
  }
});

// ../../node_modules/.store/eastasianwidth-npm-0.2.0-c37eb16bd1/node_modules/eastasianwidth/eastasianwidth.js
var require_eastasianwidth = __commonJS({
  "../../node_modules/.store/eastasianwidth-npm-0.2.0-c37eb16bd1/node_modules/eastasianwidth/eastasianwidth.js"(exports2, module2) {
    var eaw = {};
    if ("undefined" == typeof module2) {
      window.eastasianwidth = eaw;
    } else {
      module2.exports = eaw;
    }
    eaw.eastAsianWidth = function(character) {
      var x = character.charCodeAt(0);
      var y = character.length == 2 ? character.charCodeAt(1) : 0;
      var codePoint = x;
      if (55296 <= x && x <= 56319 && (56320 <= y && y <= 57343)) {
        x &= 1023;
        y &= 1023;
        codePoint = x << 10 | y;
        codePoint += 65536;
      }
      if (12288 == codePoint || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510) {
        return "F";
      }
      if (8361 == codePoint || 65377 <= codePoint && codePoint <= 65470 || 65474 <= codePoint && codePoint <= 65479 || 65482 <= codePoint && codePoint <= 65487 || 65490 <= codePoint && codePoint <= 65495 || 65498 <= codePoint && codePoint <= 65500 || 65512 <= codePoint && codePoint <= 65518) {
        return "H";
      }
      if (4352 <= codePoint && codePoint <= 4447 || 4515 <= codePoint && codePoint <= 4519 || 4602 <= codePoint && codePoint <= 4607 || 9001 <= codePoint && codePoint <= 9002 || 11904 <= codePoint && codePoint <= 11929 || 11931 <= codePoint && codePoint <= 12019 || 12032 <= codePoint && codePoint <= 12245 || 12272 <= codePoint && codePoint <= 12283 || 12289 <= codePoint && codePoint <= 12350 || 12353 <= codePoint && codePoint <= 12438 || 12441 <= codePoint && codePoint <= 12543 || 12549 <= codePoint && codePoint <= 12589 || 12593 <= codePoint && codePoint <= 12686 || 12688 <= codePoint && codePoint <= 12730 || 12736 <= codePoint && codePoint <= 12771 || 12784 <= codePoint && codePoint <= 12830 || 12832 <= codePoint && codePoint <= 12871 || 12880 <= codePoint && codePoint <= 13054 || 13056 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42124 || 42128 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 55216 <= codePoint && codePoint <= 55238 || 55243 <= codePoint && codePoint <= 55291 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65106 || 65108 <= codePoint && codePoint <= 65126 || 65128 <= codePoint && codePoint <= 65131 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127490 || 127504 <= codePoint && codePoint <= 127546 || 127552 <= codePoint && codePoint <= 127560 || 127568 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 194367 || 177984 <= codePoint && codePoint <= 196605 || 196608 <= codePoint && codePoint <= 262141) {
        return "W";
      }
      if (32 <= codePoint && codePoint <= 126 || 162 <= codePoint && codePoint <= 163 || 165 <= codePoint && codePoint <= 166 || 172 == codePoint || 175 == codePoint || 10214 <= codePoint && codePoint <= 10221 || 10629 <= codePoint && codePoint <= 10630) {
        return "Na";
      }
      if (161 == codePoint || 164 == codePoint || 167 <= codePoint && codePoint <= 168 || 170 == codePoint || 173 <= codePoint && codePoint <= 174 || 176 <= codePoint && codePoint <= 180 || 182 <= codePoint && codePoint <= 186 || 188 <= codePoint && codePoint <= 191 || 198 == codePoint || 208 == codePoint || 215 <= codePoint && codePoint <= 216 || 222 <= codePoint && codePoint <= 225 || 230 == codePoint || 232 <= codePoint && codePoint <= 234 || 236 <= codePoint && codePoint <= 237 || 240 == codePoint || 242 <= codePoint && codePoint <= 243 || 247 <= codePoint && codePoint <= 250 || 252 == codePoint || 254 == codePoint || 257 == codePoint || 273 == codePoint || 275 == codePoint || 283 == codePoint || 294 <= codePoint && codePoint <= 295 || 299 == codePoint || 305 <= codePoint && codePoint <= 307 || 312 == codePoint || 319 <= codePoint && codePoint <= 322 || 324 == codePoint || 328 <= codePoint && codePoint <= 331 || 333 == codePoint || 338 <= codePoint && codePoint <= 339 || 358 <= codePoint && codePoint <= 359 || 363 == codePoint || 462 == codePoint || 464 == codePoint || 466 == codePoint || 468 == codePoint || 470 == codePoint || 472 == codePoint || 474 == codePoint || 476 == codePoint || 593 == codePoint || 609 == codePoint || 708 == codePoint || 711 == codePoint || 713 <= codePoint && codePoint <= 715 || 717 == codePoint || 720 == codePoint || 728 <= codePoint && codePoint <= 731 || 733 == codePoint || 735 == codePoint || 768 <= codePoint && codePoint <= 879 || 913 <= codePoint && codePoint <= 929 || 931 <= codePoint && codePoint <= 937 || 945 <= codePoint && codePoint <= 961 || 963 <= codePoint && codePoint <= 969 || 1025 == codePoint || 1040 <= codePoint && codePoint <= 1103 || 1105 == codePoint || 8208 == codePoint || 8211 <= codePoint && codePoint <= 8214 || 8216 <= codePoint && codePoint <= 8217 || 8220 <= codePoint && codePoint <= 8221 || 8224 <= codePoint && codePoint <= 8226 || 8228 <= codePoint && codePoint <= 8231 || 8240 == codePoint || 8242 <= codePoint && codePoint <= 8243 || 8245 == codePoint || 8251 == codePoint || 8254 == codePoint || 8308 == codePoint || 8319 == codePoint || 8321 <= codePoint && codePoint <= 8324 || 8364 == codePoint || 8451 == codePoint || 8453 == codePoint || 8457 == codePoint || 8467 == codePoint || 8470 == codePoint || 8481 <= codePoint && codePoint <= 8482 || 8486 == codePoint || 8491 == codePoint || 8531 <= codePoint && codePoint <= 8532 || 8539 <= codePoint && codePoint <= 8542 || 8544 <= codePoint && codePoint <= 8555 || 8560 <= codePoint && codePoint <= 8569 || 8585 == codePoint || 8592 <= codePoint && codePoint <= 8601 || 8632 <= codePoint && codePoint <= 8633 || 8658 == codePoint || 8660 == codePoint || 8679 == codePoint || 8704 == codePoint || 8706 <= codePoint && codePoint <= 8707 || 8711 <= codePoint && codePoint <= 8712 || 8715 == codePoint || 8719 == codePoint || 8721 == codePoint || 8725 == codePoint || 8730 == codePoint || 8733 <= codePoint && codePoint <= 8736 || 8739 == codePoint || 8741 == codePoint || 8743 <= codePoint && codePoint <= 8748 || 8750 == codePoint || 8756 <= codePoint && codePoint <= 8759 || 8764 <= codePoint && codePoint <= 8765 || 8776 == codePoint || 8780 == codePoint || 8786 == codePoint || 8800 <= codePoint && codePoint <= 8801 || 8804 <= codePoint && codePoint <= 8807 || 8810 <= codePoint && codePoint <= 8811 || 8814 <= codePoint && codePoint <= 8815 || 8834 <= codePoint && codePoint <= 8835 || 8838 <= codePoint && codePoint <= 8839 || 8853 == codePoint || 8857 == codePoint || 8869 == codePoint || 8895 == codePoint || 8978 == codePoint || 9312 <= codePoint && codePoint <= 9449 || 9451 <= codePoint && codePoint <= 9547 || 9552 <= codePoint && codePoint <= 9587 || 9600 <= codePoint && codePoint <= 9615 || 9618 <= codePoint && codePoint <= 9621 || 9632 <= codePoint && codePoint <= 9633 || 9635 <= codePoint && codePoint <= 9641 || 9650 <= codePoint && codePoint <= 9651 || 9654 <= codePoint && codePoint <= 9655 || 9660 <= codePoint && codePoint <= 9661 || 9664 <= codePoint && codePoint <= 9665 || 9670 <= codePoint && codePoint <= 9672 || 9675 == codePoint || 9678 <= codePoint && codePoint <= 9681 || 9698 <= codePoint && codePoint <= 9701 || 9711 == codePoint || 9733 <= codePoint && codePoint <= 9734 || 9737 == codePoint || 9742 <= codePoint && codePoint <= 9743 || 9748 <= codePoint && codePoint <= 9749 || 9756 == codePoint || 9758 == codePoint || 9792 == codePoint || 9794 == codePoint || 9824 <= codePoint && codePoint <= 9825 || 9827 <= codePoint && codePoint <= 9829 || 9831 <= codePoint && codePoint <= 9834 || 9836 <= codePoint && codePoint <= 9837 || 9839 == codePoint || 9886 <= codePoint && codePoint <= 9887 || 9918 <= codePoint && codePoint <= 9919 || 9924 <= codePoint && codePoint <= 9933 || 9935 <= codePoint && codePoint <= 9953 || 9955 == codePoint || 9960 <= codePoint && codePoint <= 9983 || 10045 == codePoint || 10071 == codePoint || 10102 <= codePoint && codePoint <= 10111 || 11093 <= codePoint && codePoint <= 11097 || 12872 <= codePoint && codePoint <= 12879 || 57344 <= codePoint && codePoint <= 63743 || 65024 <= codePoint && codePoint <= 65039 || 65533 == codePoint || 127232 <= codePoint && codePoint <= 127242 || 127248 <= codePoint && codePoint <= 127277 || 127280 <= codePoint && codePoint <= 127337 || 127344 <= codePoint && codePoint <= 127386 || 917760 <= codePoint && codePoint <= 917999 || 983040 <= codePoint && codePoint <= 1048573 || 1048576 <= codePoint && codePoint <= 1114109) {
        return "A";
      }
      return "N";
    };
    eaw.characterLength = function(character) {
      var code = this.eastAsianWidth(character);
      if (code == "F" || code == "W" || code == "A") {
        return 2;
      } else {
        return 1;
      }
    };
    function stringToArray(string) {
      return string.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]|[^\uD800-\uDFFF]/g) || [];
    }
    eaw.length = function(string) {
      var characters = stringToArray(string);
      var len = 0;
      for (var i2 = 0; i2 < characters.length; i2++) {
        len = len + this.characterLength(characters[i2]);
      }
      return len;
    };
    eaw.slice = function(text, start, end) {
      textLen = eaw.length(text);
      start = start ? start : 0;
      end = end ? end : 1;
      if (start < 0) {
        start = textLen + start;
      }
      if (end < 0) {
        end = textLen + end;
      }
      var result = "";
      var eawLen = 0;
      var chars = stringToArray(text);
      for (var i2 = 0; i2 < chars.length; i2++) {
        var char = chars[i2];
        var charLen = eaw.length(char);
        if (eawLen >= start - (charLen == 2 ? 1 : 0)) {
          if (eawLen + charLen <= end) {
            result += char;
          } else {
            break;
          }
        }
        eawLen += charLen;
      }
      return result;
    };
  }
});

// ../../node_modules/.store/emoji-regex-npm-9.2.2-e6fac8d058/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "../../node_modules/.store/emoji-regex-npm-9.2.2-e6fac8d058/node_modules/emoji-regex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function() {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC)?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u2600-\u2604\u260E\u2611\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26B0\u26B1\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0\u26F1\u26F4\u26F7\u26F8\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u3030\u303D\u3297\u3299]|\uD83C[\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\uD83D\uDC41\uFE0F|\uD83C\uDFF3\uFE0F|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F\u20E3|\u2764\uFE0F|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF]|[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD1D\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78\uDD7A-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCB\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6]|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5-\uDED7\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDD77\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/stream.js
var require_stream = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/stream.js"(exports2, module2) {
    "use strict";
    var { Duplex } = __require("stream");
    function emitClose(stream) {
      stream.emit("close");
    }
    function duplexOnEnd() {
      if (!this.destroyed && this._writableState.finished) {
        this.destroy();
      }
    }
    function duplexOnError(err2) {
      this.removeListener("error", duplexOnError);
      this.destroy();
      if (this.listenerCount("error") === 0) {
        this.emit("error", err2);
      }
    }
    function createWebSocketStream2(ws, options) {
      let terminateOnDestroy = true;
      const duplex = new Duplex({
        ...options,
        autoDestroy: false,
        emitClose: false,
        objectMode: false,
        writableObjectMode: false
      });
      ws.on("message", function message(msg, isBinary) {
        const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;
        if (!duplex.push(data))
          ws.pause();
      });
      ws.once("error", function error(err2) {
        if (duplex.destroyed)
          return;
        terminateOnDestroy = false;
        duplex.destroy(err2);
      });
      ws.once("close", function close() {
        if (duplex.destroyed)
          return;
        duplex.push(null);
      });
      duplex._destroy = function(err2, callback) {
        if (ws.readyState === ws.CLOSED) {
          callback(err2);
          process.nextTick(emitClose, duplex);
          return;
        }
        let called = false;
        ws.once("error", function error(err3) {
          called = true;
          callback(err3);
        });
        ws.once("close", function close() {
          if (!called)
            callback(err2);
          process.nextTick(emitClose, duplex);
        });
        if (terminateOnDestroy)
          ws.terminate();
      };
      duplex._final = function(callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._final(callback);
          });
          return;
        }
        if (ws._socket === null)
          return;
        if (ws._socket._writableState.finished) {
          callback();
          if (duplex._readableState.endEmitted)
            duplex.destroy();
        } else {
          ws._socket.once("finish", function finish() {
            callback();
          });
          ws.close();
        }
      };
      duplex._read = function() {
        if (ws.isPaused)
          ws.resume();
      };
      duplex._write = function(chunk, encoding, callback) {
        if (ws.readyState === ws.CONNECTING) {
          ws.once("open", function open() {
            duplex._write(chunk, encoding, callback);
          });
          return;
        }
        ws.send(chunk, callback);
      };
      duplex.on("end", duplexOnEnd);
      duplex.on("error", duplexOnError);
      return duplex;
    }
    module2.exports = createWebSocketStream2;
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/constants.js
var require_constants2 = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/constants.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
      EMPTY_BUFFER: Buffer.alloc(0),
      GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
      kForOnEventAttribute: Symbol("kIsForOnEventAttribute"),
      kListener: Symbol("kListener"),
      kStatusCode: Symbol("status-code"),
      kWebSocket: Symbol("websocket"),
      NOOP: () => {
      }
    };
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/buffer-util.js"(exports2, module2) {
    "use strict";
    var { EMPTY_BUFFER } = require_constants2();
    var FastBuffer = Buffer[Symbol.species];
    function concat(list, totalLength) {
      if (list.length === 0)
        return EMPTY_BUFFER;
      if (list.length === 1)
        return list[0];
      const target = Buffer.allocUnsafe(totalLength);
      let offset = 0;
      for (let i2 = 0; i2 < list.length; i2++) {
        const buf = list[i2];
        target.set(buf, offset);
        offset += buf.length;
      }
      if (offset < totalLength) {
        return new FastBuffer(target.buffer, target.byteOffset, offset);
      }
      return target;
    }
    function _mask(source, mask2, output, offset, length) {
      for (let i2 = 0; i2 < length; i2++) {
        output[offset + i2] = source[i2] ^ mask2[i2 & 3];
      }
    }
    function _unmask(buffer2, mask2) {
      for (let i2 = 0; i2 < buffer2.length; i2++) {
        buffer2[i2] ^= mask2[i2 & 3];
      }
    }
    function toArrayBuffer(buf) {
      if (buf.length === buf.buffer.byteLength) {
        return buf.buffer;
      }
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.length);
    }
    function toBuffer(data) {
      toBuffer.readOnly = true;
      if (Buffer.isBuffer(data))
        return data;
      let buf;
      if (data instanceof ArrayBuffer) {
        buf = new FastBuffer(data);
      } else if (ArrayBuffer.isView(data)) {
        buf = new FastBuffer(data.buffer, data.byteOffset, data.byteLength);
      } else {
        buf = Buffer.from(data);
        toBuffer.readOnly = false;
      }
      return buf;
    }
    module2.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
    if (!process.env.WS_NO_BUFFER_UTIL) {
      try {
        const bufferUtil = __require("bufferutil");
        module2.exports.mask = function(source, mask2, output, offset, length) {
          if (length < 48)
            _mask(source, mask2, output, offset, length);
          else
            bufferUtil.mask(source, mask2, output, offset, length);
        };
        module2.exports.unmask = function(buffer2, mask2) {
          if (buffer2.length < 32)
            _unmask(buffer2, mask2);
          else
            bufferUtil.unmask(buffer2, mask2);
        };
      } catch (e) {
      }
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/limiter.js
var require_limiter = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/limiter.js"(exports2, module2) {
    "use strict";
    var kDone = Symbol("kDone");
    var kRun = Symbol("kRun");
    var Limiter = class {
      constructor(concurrency) {
        this[kDone] = () => {
          this.pending--;
          this[kRun]();
        };
        this.concurrency = concurrency || Infinity;
        this.jobs = [];
        this.pending = 0;
      }
      add(job) {
        this.jobs.push(job);
        this[kRun]();
      }
      [kRun]() {
        if (this.pending === this.concurrency)
          return;
        if (this.jobs.length) {
          const job = this.jobs.shift();
          this.pending++;
          job(this[kDone]);
        }
      }
    };
    module2.exports = Limiter;
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/permessage-deflate.js"(exports2, module2) {
    "use strict";
    var zlib = __require("zlib");
    var bufferUtil = require_buffer_util();
    var Limiter = require_limiter();
    var { kStatusCode } = require_constants2();
    var FastBuffer = Buffer[Symbol.species];
    var TRAILER = Buffer.from([0, 0, 255, 255]);
    var kPerMessageDeflate = Symbol("permessage-deflate");
    var kTotalLength = Symbol("total-length");
    var kCallback = Symbol("callback");
    var kBuffers = Symbol("buffers");
    var kError = Symbol("error");
    var zlibLimiter;
    var PerMessageDeflate = class {
      constructor(options, isServer, maxPayload) {
        this._maxPayload = maxPayload | 0;
        this._options = options || {};
        this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
        this._isServer = !!isServer;
        this._deflate = null;
        this._inflate = null;
        this.params = null;
        if (!zlibLimiter) {
          const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
          zlibLimiter = new Limiter(concurrency);
        }
      }
      static get extensionName() {
        return "permessage-deflate";
      }
      offer() {
        const params = {};
        if (this._options.serverNoContextTakeover) {
          params.server_no_context_takeover = true;
        }
        if (this._options.clientNoContextTakeover) {
          params.client_no_context_takeover = true;
        }
        if (this._options.serverMaxWindowBits) {
          params.server_max_window_bits = this._options.serverMaxWindowBits;
        }
        if (this._options.clientMaxWindowBits) {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        } else if (this._options.clientMaxWindowBits == null) {
          params.client_max_window_bits = true;
        }
        return params;
      }
      accept(configurations) {
        configurations = this.normalizeParams(configurations);
        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
        return this.params;
      }
      cleanup() {
        if (this._inflate) {
          this._inflate.close();
          this._inflate = null;
        }
        if (this._deflate) {
          const callback = this._deflate[kCallback];
          this._deflate.close();
          this._deflate = null;
          if (callback) {
            callback(
              new Error(
                "The deflate stream was closed while data was being processed"
              )
            );
          }
        }
      }
      acceptAsServer(offers) {
        const opts = this._options;
        const accepted = offers.find((params) => {
          if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
            return false;
          }
          return true;
        });
        if (!accepted) {
          throw new Error("None of the extension offers can be accepted");
        }
        if (opts.serverNoContextTakeover) {
          accepted.server_no_context_takeover = true;
        }
        if (opts.clientNoContextTakeover) {
          accepted.client_no_context_takeover = true;
        }
        if (typeof opts.serverMaxWindowBits === "number") {
          accepted.server_max_window_bits = opts.serverMaxWindowBits;
        }
        if (typeof opts.clientMaxWindowBits === "number") {
          accepted.client_max_window_bits = opts.clientMaxWindowBits;
        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
          delete accepted.client_max_window_bits;
        }
        return accepted;
      }
      acceptAsClient(response) {
        const params = response[0];
        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
          throw new Error('Unexpected parameter "client_no_context_takeover"');
        }
        if (!params.client_max_window_bits) {
          if (typeof this._options.clientMaxWindowBits === "number") {
            params.client_max_window_bits = this._options.clientMaxWindowBits;
          }
        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
          throw new Error(
            'Unexpected or invalid parameter "client_max_window_bits"'
          );
        }
        return params;
      }
      normalizeParams(configurations) {
        configurations.forEach((params) => {
          Object.keys(params).forEach((key2) => {
            let value = params[key2];
            if (value.length > 1) {
              throw new Error(`Parameter "${key2}" must have only a single value`);
            }
            value = value[0];
            if (key2 === "client_max_window_bits") {
              if (value !== true) {
                const num2 = +value;
                if (!Number.isInteger(num2) || num2 < 8 || num2 > 15) {
                  throw new TypeError(
                    `Invalid value for parameter "${key2}": ${value}`
                  );
                }
                value = num2;
              } else if (!this._isServer) {
                throw new TypeError(
                  `Invalid value for parameter "${key2}": ${value}`
                );
              }
            } else if (key2 === "server_max_window_bits") {
              const num2 = +value;
              if (!Number.isInteger(num2) || num2 < 8 || num2 > 15) {
                throw new TypeError(
                  `Invalid value for parameter "${key2}": ${value}`
                );
              }
              value = num2;
            } else if (key2 === "client_no_context_takeover" || key2 === "server_no_context_takeover") {
              if (value !== true) {
                throw new TypeError(
                  `Invalid value for parameter "${key2}": ${value}`
                );
              }
            } else {
              throw new Error(`Unknown parameter "${key2}"`);
            }
            params[key2] = value;
          });
        });
        return configurations;
      }
      decompress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._decompress(data, fin, (err2, result) => {
            done();
            callback(err2, result);
          });
        });
      }
      compress(data, fin, callback) {
        zlibLimiter.add((done) => {
          this._compress(data, fin, (err2, result) => {
            done();
            callback(err2, result);
          });
        });
      }
      _decompress(data, fin, callback) {
        const endpoint = this._isServer ? "client" : "server";
        if (!this._inflate) {
          const key2 = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key2] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key2];
          this._inflate = zlib.createInflateRaw({
            ...this._options.zlibInflateOptions,
            windowBits
          });
          this._inflate[kPerMessageDeflate] = this;
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
          this._inflate.on("error", inflateOnError);
          this._inflate.on("data", inflateOnData);
        }
        this._inflate[kCallback] = callback;
        this._inflate.write(data);
        if (fin)
          this._inflate.write(TRAILER);
        this._inflate.flush(() => {
          const err2 = this._inflate[kError];
          if (err2) {
            this._inflate.close();
            this._inflate = null;
            callback(err2);
            return;
          }
          const data2 = bufferUtil.concat(
            this._inflate[kBuffers],
            this._inflate[kTotalLength]
          );
          if (this._inflate._readableState.endEmitted) {
            this._inflate.close();
            this._inflate = null;
          } else {
            this._inflate[kTotalLength] = 0;
            this._inflate[kBuffers] = [];
            if (fin && this.params[`${endpoint}_no_context_takeover`]) {
              this._inflate.reset();
            }
          }
          callback(null, data2);
        });
      }
      _compress(data, fin, callback) {
        const endpoint = this._isServer ? "server" : "client";
        if (!this._deflate) {
          const key2 = `${endpoint}_max_window_bits`;
          const windowBits = typeof this.params[key2] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key2];
          this._deflate = zlib.createDeflateRaw({
            ...this._options.zlibDeflateOptions,
            windowBits
          });
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          this._deflate.on("data", deflateOnData);
        }
        this._deflate[kCallback] = callback;
        this._deflate.write(data);
        this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
          if (!this._deflate) {
            return;
          }
          let data2 = bufferUtil.concat(
            this._deflate[kBuffers],
            this._deflate[kTotalLength]
          );
          if (fin) {
            data2 = new FastBuffer(data2.buffer, data2.byteOffset, data2.length - 4);
          }
          this._deflate[kCallback] = null;
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
          if (fin && this.params[`${endpoint}_no_context_takeover`]) {
            this._deflate.reset();
          }
          callback(null, data2);
        });
      }
    };
    module2.exports = PerMessageDeflate;
    function deflateOnData(chunk) {
      this[kBuffers].push(chunk);
      this[kTotalLength] += chunk.length;
    }
    function inflateOnData(chunk) {
      this[kTotalLength] += chunk.length;
      if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
        this[kBuffers].push(chunk);
        return;
      }
      this[kError] = new RangeError("Max payload size exceeded");
      this[kError].code = "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH";
      this[kError][kStatusCode] = 1009;
      this.removeListener("data", inflateOnData);
      this.reset();
    }
    function inflateOnError(err2) {
      this[kPerMessageDeflate]._inflate = null;
      err2[kStatusCode] = 1007;
      this[kCallback](err2);
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/validation.js
var require_validation = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/validation.js"(exports2, module2) {
    "use strict";
    var { isUtf8 } = __require("buffer");
    var tokenChars = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      1,
      1,
      0,
      1,
      1,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      1,
      0,
      1,
      0
    ];
    function isValidStatusCode(code) {
      return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
    }
    function _isValidUTF8(buf) {
      const len = buf.length;
      let i2 = 0;
      while (i2 < len) {
        if ((buf[i2] & 128) === 0) {
          i2++;
        } else if ((buf[i2] & 224) === 192) {
          if (i2 + 1 === len || (buf[i2 + 1] & 192) !== 128 || (buf[i2] & 254) === 192) {
            return false;
          }
          i2 += 2;
        } else if ((buf[i2] & 240) === 224) {
          if (i2 + 2 >= len || (buf[i2 + 1] & 192) !== 128 || (buf[i2 + 2] & 192) !== 128 || buf[i2] === 224 && (buf[i2 + 1] & 224) === 128 || buf[i2] === 237 && (buf[i2 + 1] & 224) === 160) {
            return false;
          }
          i2 += 3;
        } else if ((buf[i2] & 248) === 240) {
          if (i2 + 3 >= len || (buf[i2 + 1] & 192) !== 128 || (buf[i2 + 2] & 192) !== 128 || (buf[i2 + 3] & 192) !== 128 || buf[i2] === 240 && (buf[i2 + 1] & 240) === 128 || buf[i2] === 244 && buf[i2 + 1] > 143 || buf[i2] > 244) {
            return false;
          }
          i2 += 4;
        } else {
          return false;
        }
      }
      return true;
    }
    module2.exports = {
      isValidStatusCode,
      isValidUTF8: _isValidUTF8,
      tokenChars
    };
    if (isUtf8) {
      module2.exports.isValidUTF8 = function(buf) {
        return buf.length < 24 ? _isValidUTF8(buf) : isUtf8(buf);
      };
    } else if (!process.env.WS_NO_UTF_8_VALIDATE) {
      try {
        const isValidUTF8 = __require("utf-8-validate");
        module2.exports.isValidUTF8 = function(buf) {
          return buf.length < 32 ? _isValidUTF8(buf) : isValidUTF8(buf);
        };
      } catch (e) {
      }
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/receiver.js
var require_receiver = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/receiver.js"(exports2, module2) {
    "use strict";
    var { Writable: Writable2 } = __require("stream");
    var PerMessageDeflate = require_permessage_deflate();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      kStatusCode,
      kWebSocket
    } = require_constants2();
    var { concat, toArrayBuffer, unmask } = require_buffer_util();
    var { isValidStatusCode, isValidUTF8 } = require_validation();
    var FastBuffer = Buffer[Symbol.species];
    var GET_INFO = 0;
    var GET_PAYLOAD_LENGTH_16 = 1;
    var GET_PAYLOAD_LENGTH_64 = 2;
    var GET_MASK = 3;
    var GET_DATA = 4;
    var INFLATING = 5;
    var Receiver2 = class extends Writable2 {
      constructor(options = {}) {
        super();
        this._binaryType = options.binaryType || BINARY_TYPES[0];
        this._extensions = options.extensions || {};
        this._isServer = !!options.isServer;
        this._maxPayload = options.maxPayload | 0;
        this._skipUTF8Validation = !!options.skipUTF8Validation;
        this[kWebSocket] = void 0;
        this._bufferedBytes = 0;
        this._buffers = [];
        this._compressed = false;
        this._payloadLength = 0;
        this._mask = void 0;
        this._fragmented = 0;
        this._masked = false;
        this._fin = false;
        this._opcode = 0;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragments = [];
        this._state = GET_INFO;
        this._loop = false;
      }
      _write(chunk, encoding, cb2) {
        if (this._opcode === 8 && this._state == GET_INFO)
          return cb2();
        this._bufferedBytes += chunk.length;
        this._buffers.push(chunk);
        this.startLoop(cb2);
      }
      consume(n) {
        this._bufferedBytes -= n;
        if (n === this._buffers[0].length)
          return this._buffers.shift();
        if (n < this._buffers[0].length) {
          const buf = this._buffers[0];
          this._buffers[0] = new FastBuffer(
            buf.buffer,
            buf.byteOffset + n,
            buf.length - n
          );
          return new FastBuffer(buf.buffer, buf.byteOffset, n);
        }
        const dst = Buffer.allocUnsafe(n);
        do {
          const buf = this._buffers[0];
          const offset = dst.length - n;
          if (n >= buf.length) {
            dst.set(this._buffers.shift(), offset);
          } else {
            dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
            this._buffers[0] = new FastBuffer(
              buf.buffer,
              buf.byteOffset + n,
              buf.length - n
            );
          }
          n -= buf.length;
        } while (n > 0);
        return dst;
      }
      startLoop(cb2) {
        let err2;
        this._loop = true;
        do {
          switch (this._state) {
            case GET_INFO:
              err2 = this.getInfo();
              break;
            case GET_PAYLOAD_LENGTH_16:
              err2 = this.getPayloadLength16();
              break;
            case GET_PAYLOAD_LENGTH_64:
              err2 = this.getPayloadLength64();
              break;
            case GET_MASK:
              this.getMask();
              break;
            case GET_DATA:
              err2 = this.getData(cb2);
              break;
            default:
              this._loop = false;
              return;
          }
        } while (this._loop);
        cb2(err2);
      }
      getInfo() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        const buf = this.consume(2);
        if ((buf[0] & 48) !== 0) {
          this._loop = false;
          return error(
            RangeError,
            "RSV2 and RSV3 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_2_3"
          );
        }
        const compressed = (buf[0] & 64) === 64;
        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
          this._loop = false;
          return error(
            RangeError,
            "RSV1 must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_RSV_1"
          );
        }
        this._fin = (buf[0] & 128) === 128;
        this._opcode = buf[0] & 15;
        this._payloadLength = buf[1] & 127;
        if (this._opcode === 0) {
          if (compressed) {
            this._loop = false;
            return error(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
          }
          if (!this._fragmented) {
            this._loop = false;
            return error(
              RangeError,
              "invalid opcode 0",
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
          }
          this._opcode = this._fragmented;
        } else if (this._opcode === 1 || this._opcode === 2) {
          if (this._fragmented) {
            this._loop = false;
            return error(
              RangeError,
              `invalid opcode ${this._opcode}`,
              true,
              1002,
              "WS_ERR_INVALID_OPCODE"
            );
          }
          this._compressed = compressed;
        } else if (this._opcode > 7 && this._opcode < 11) {
          if (!this._fin) {
            this._loop = false;
            return error(
              RangeError,
              "FIN must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_FIN"
            );
          }
          if (compressed) {
            this._loop = false;
            return error(
              RangeError,
              "RSV1 must be clear",
              true,
              1002,
              "WS_ERR_UNEXPECTED_RSV_1"
            );
          }
          if (this._payloadLength > 125 || this._opcode === 8 && this._payloadLength === 1) {
            this._loop = false;
            return error(
              RangeError,
              `invalid payload length ${this._payloadLength}`,
              true,
              1002,
              "WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH"
            );
          }
        } else {
          this._loop = false;
          return error(
            RangeError,
            `invalid opcode ${this._opcode}`,
            true,
            1002,
            "WS_ERR_INVALID_OPCODE"
          );
        }
        if (!this._fin && !this._fragmented)
          this._fragmented = this._opcode;
        this._masked = (buf[1] & 128) === 128;
        if (this._isServer) {
          if (!this._masked) {
            this._loop = false;
            return error(
              RangeError,
              "MASK must be set",
              true,
              1002,
              "WS_ERR_EXPECTED_MASK"
            );
          }
        } else if (this._masked) {
          this._loop = false;
          return error(
            RangeError,
            "MASK must be clear",
            true,
            1002,
            "WS_ERR_UNEXPECTED_MASK"
          );
        }
        if (this._payloadLength === 126)
          this._state = GET_PAYLOAD_LENGTH_16;
        else if (this._payloadLength === 127)
          this._state = GET_PAYLOAD_LENGTH_64;
        else
          return this.haveLength();
      }
      getPayloadLength16() {
        if (this._bufferedBytes < 2) {
          this._loop = false;
          return;
        }
        this._payloadLength = this.consume(2).readUInt16BE(0);
        return this.haveLength();
      }
      getPayloadLength64() {
        if (this._bufferedBytes < 8) {
          this._loop = false;
          return;
        }
        const buf = this.consume(8);
        const num2 = buf.readUInt32BE(0);
        if (num2 > Math.pow(2, 53 - 32) - 1) {
          this._loop = false;
          return error(
            RangeError,
            "Unsupported WebSocket frame: payload length > 2^53 - 1",
            false,
            1009,
            "WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH"
          );
        }
        this._payloadLength = num2 * Math.pow(2, 32) + buf.readUInt32BE(4);
        return this.haveLength();
      }
      haveLength() {
        if (this._payloadLength && this._opcode < 8) {
          this._totalPayloadLength += this._payloadLength;
          if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
            this._loop = false;
            return error(
              RangeError,
              "Max payload size exceeded",
              false,
              1009,
              "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
            );
          }
        }
        if (this._masked)
          this._state = GET_MASK;
        else
          this._state = GET_DATA;
      }
      getMask() {
        if (this._bufferedBytes < 4) {
          this._loop = false;
          return;
        }
        this._mask = this.consume(4);
        this._state = GET_DATA;
      }
      getData(cb2) {
        let data = EMPTY_BUFFER;
        if (this._payloadLength) {
          if (this._bufferedBytes < this._payloadLength) {
            this._loop = false;
            return;
          }
          data = this.consume(this._payloadLength);
          if (this._masked && (this._mask[0] | this._mask[1] | this._mask[2] | this._mask[3]) !== 0) {
            unmask(data, this._mask);
          }
        }
        if (this._opcode > 7)
          return this.controlMessage(data);
        if (this._compressed) {
          this._state = INFLATING;
          this.decompress(data, cb2);
          return;
        }
        if (data.length) {
          this._messageLength = this._totalPayloadLength;
          this._fragments.push(data);
        }
        return this.dataMessage();
      }
      decompress(data, cb2) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        perMessageDeflate.decompress(data, this._fin, (err2, buf) => {
          if (err2)
            return cb2(err2);
          if (buf.length) {
            this._messageLength += buf.length;
            if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
              return cb2(
                error(
                  RangeError,
                  "Max payload size exceeded",
                  false,
                  1009,
                  "WS_ERR_UNSUPPORTED_MESSAGE_LENGTH"
                )
              );
            }
            this._fragments.push(buf);
          }
          const er = this.dataMessage();
          if (er)
            return cb2(er);
          this.startLoop(cb2);
        });
      }
      dataMessage() {
        if (this._fin) {
          const messageLength = this._messageLength;
          const fragments = this._fragments;
          this._totalPayloadLength = 0;
          this._messageLength = 0;
          this._fragmented = 0;
          this._fragments = [];
          if (this._opcode === 2) {
            let data;
            if (this._binaryType === "nodebuffer") {
              data = concat(fragments, messageLength);
            } else if (this._binaryType === "arraybuffer") {
              data = toArrayBuffer(concat(fragments, messageLength));
            } else {
              data = fragments;
            }
            this.emit("message", data, true);
          } else {
            const buf = concat(fragments, messageLength);
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              this._loop = false;
              return error(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
            }
            this.emit("message", buf, false);
          }
        }
        this._state = GET_INFO;
      }
      controlMessage(data) {
        if (this._opcode === 8) {
          this._loop = false;
          if (data.length === 0) {
            this.emit("conclude", 1005, EMPTY_BUFFER);
            this.end();
          } else {
            const code = data.readUInt16BE(0);
            if (!isValidStatusCode(code)) {
              return error(
                RangeError,
                `invalid status code ${code}`,
                true,
                1002,
                "WS_ERR_INVALID_CLOSE_CODE"
              );
            }
            const buf = new FastBuffer(
              data.buffer,
              data.byteOffset + 2,
              data.length - 2
            );
            if (!this._skipUTF8Validation && !isValidUTF8(buf)) {
              return error(
                Error,
                "invalid UTF-8 sequence",
                true,
                1007,
                "WS_ERR_INVALID_UTF8"
              );
            }
            this.emit("conclude", code, buf);
            this.end();
          }
        } else if (this._opcode === 9) {
          this.emit("ping", data);
        } else {
          this.emit("pong", data);
        }
        this._state = GET_INFO;
      }
    };
    module2.exports = Receiver2;
    function error(ErrorCtor, message, prefix2, statusCode, errorCode) {
      const err2 = new ErrorCtor(
        prefix2 ? `Invalid WebSocket frame: ${message}` : message
      );
      Error.captureStackTrace(err2, error);
      err2.code = errorCode;
      err2[kStatusCode] = statusCode;
      return err2;
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/sender.js
var require_sender = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/sender.js"(exports2, module2) {
    "use strict";
    var net = __require("net");
    var tls = __require("tls");
    var { randomFillSync } = __require("crypto");
    var PerMessageDeflate = require_permessage_deflate();
    var { EMPTY_BUFFER } = require_constants2();
    var { isValidStatusCode } = require_validation();
    var { mask: applyMask, toBuffer } = require_buffer_util();
    var kByteLength = Symbol("kByteLength");
    var maskBuffer = Buffer.alloc(4);
    var Sender2 = class {
      constructor(socket, extensions, generateMask) {
        this._extensions = extensions || {};
        if (generateMask) {
          this._generateMask = generateMask;
          this._maskBuffer = Buffer.alloc(4);
        }
        this._socket = socket;
        this._firstFragment = true;
        this._compress = false;
        this._bufferedBytes = 0;
        this._deflating = false;
        this._queue = [];
      }
      static frame(data, options) {
        let mask2;
        let merge = false;
        let offset = 2;
        let skipMasking = false;
        if (options.mask) {
          mask2 = options.maskBuffer || maskBuffer;
          if (options.generateMask) {
            options.generateMask(mask2);
          } else {
            randomFillSync(mask2, 0, 4);
          }
          skipMasking = (mask2[0] | mask2[1] | mask2[2] | mask2[3]) === 0;
          offset = 6;
        }
        let dataLength;
        if (typeof data === "string") {
          if ((!options.mask || skipMasking) && options[kByteLength] !== void 0) {
            dataLength = options[kByteLength];
          } else {
            data = Buffer.from(data);
            dataLength = data.length;
          }
        } else {
          dataLength = data.length;
          merge = options.mask && options.readOnly && !skipMasking;
        }
        let payloadLength = dataLength;
        if (dataLength >= 65536) {
          offset += 8;
          payloadLength = 127;
        } else if (dataLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);
        target[0] = options.fin ? options.opcode | 128 : options.opcode;
        if (options.rsv1)
          target[0] |= 64;
        target[1] = payloadLength;
        if (payloadLength === 126) {
          target.writeUInt16BE(dataLength, 2);
        } else if (payloadLength === 127) {
          target[2] = target[3] = 0;
          target.writeUIntBE(dataLength, 4, 6);
        }
        if (!options.mask)
          return [target, data];
        target[1] |= 128;
        target[offset - 4] = mask2[0];
        target[offset - 3] = mask2[1];
        target[offset - 2] = mask2[2];
        target[offset - 1] = mask2[3];
        if (skipMasking)
          return [target, data];
        if (merge) {
          applyMask(data, mask2, target, offset, dataLength);
          return [target];
        }
        applyMask(data, mask2, data, 0, dataLength);
        return [target, data];
      }
      close(code, data, mask2, cb2) {
        let buf;
        if (code === void 0) {
          buf = EMPTY_BUFFER;
        } else if (typeof code !== "number" || !isValidStatusCode(code)) {
          throw new TypeError("First argument must be a valid error code number");
        } else if (data === void 0 || !data.length) {
          buf = Buffer.allocUnsafe(2);
          buf.writeUInt16BE(code, 0);
        } else {
          const length = Buffer.byteLength(data);
          if (length > 123) {
            throw new RangeError("The message must not be greater than 123 bytes");
          }
          buf = Buffer.allocUnsafe(2 + length);
          buf.writeUInt16BE(code, 0);
          if (typeof data === "string") {
            buf.write(data, 2);
          } else {
            buf.set(data, 2);
          }
        }
        const options = {
          [kByteLength]: buf.length,
          fin: true,
          generateMask: this._generateMask,
          mask: mask2,
          maskBuffer: this._maskBuffer,
          opcode: 8,
          readOnly: false,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, buf, false, options, cb2]);
        } else {
          this.sendFrame(Sender2.frame(buf, options), cb2);
        }
      }
      ping(data, mask2, cb2) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask: mask2,
          maskBuffer: this._maskBuffer,
          opcode: 9,
          readOnly,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options, cb2]);
        } else {
          this.sendFrame(Sender2.frame(data, options), cb2);
        }
      }
      pong(data, mask2, cb2) {
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (byteLength > 125) {
          throw new RangeError("The data size must not be greater than 125 bytes");
        }
        const options = {
          [kByteLength]: byteLength,
          fin: true,
          generateMask: this._generateMask,
          mask: mask2,
          maskBuffer: this._maskBuffer,
          opcode: 10,
          readOnly,
          rsv1: false
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, data, false, options, cb2]);
        } else {
          this.sendFrame(Sender2.frame(data, options), cb2);
        }
      }
      send(data, options, cb2) {
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        let opcode = options.binary ? 2 : 1;
        let rsv1 = options.compress;
        let byteLength;
        let readOnly;
        if (typeof data === "string") {
          byteLength = Buffer.byteLength(data);
          readOnly = false;
        } else {
          data = toBuffer(data);
          byteLength = data.length;
          readOnly = toBuffer.readOnly;
        }
        if (this._firstFragment) {
          this._firstFragment = false;
          if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? "server_no_context_takeover" : "client_no_context_takeover"]) {
            rsv1 = byteLength >= perMessageDeflate._threshold;
          }
          this._compress = rsv1;
        } else {
          rsv1 = false;
          opcode = 0;
        }
        if (options.fin)
          this._firstFragment = true;
        if (perMessageDeflate) {
          const opts = {
            [kByteLength]: byteLength,
            fin: options.fin,
            generateMask: this._generateMask,
            mask: options.mask,
            maskBuffer: this._maskBuffer,
            opcode,
            readOnly,
            rsv1
          };
          if (this._deflating) {
            this.enqueue([this.dispatch, data, this._compress, opts, cb2]);
          } else {
            this.dispatch(data, this._compress, opts, cb2);
          }
        } else {
          this.sendFrame(
            Sender2.frame(data, {
              [kByteLength]: byteLength,
              fin: options.fin,
              generateMask: this._generateMask,
              mask: options.mask,
              maskBuffer: this._maskBuffer,
              opcode,
              readOnly,
              rsv1: false
            }),
            cb2
          );
        }
      }
      dispatch(data, compress, options, cb2) {
        if (!compress) {
          this.sendFrame(Sender2.frame(data, options), cb2);
          return;
        }
        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
        this._bufferedBytes += options[kByteLength];
        this._deflating = true;
        perMessageDeflate.compress(data, options.fin, (_, buf) => {
          if (this._socket.destroyed) {
            const err2 = new Error(
              "The socket was closed while data was being compressed"
            );
            if (typeof cb2 === "function")
              cb2(err2);
            for (let i2 = 0; i2 < this._queue.length; i2++) {
              const params = this._queue[i2];
              const callback = params[params.length - 1];
              if (typeof callback === "function")
                callback(err2);
            }
            return;
          }
          this._bufferedBytes -= options[kByteLength];
          this._deflating = false;
          options.readOnly = false;
          this.sendFrame(Sender2.frame(buf, options), cb2);
          this.dequeue();
        });
      }
      dequeue() {
        while (!this._deflating && this._queue.length) {
          const params = this._queue.shift();
          this._bufferedBytes -= params[3][kByteLength];
          Reflect.apply(params[0], this, params.slice(1));
        }
      }
      enqueue(params) {
        this._bufferedBytes += params[3][kByteLength];
        this._queue.push(params);
      }
      sendFrame(list, cb2) {
        if (list.length === 2) {
          this._socket.cork();
          this._socket.write(list[0]);
          this._socket.write(list[1], cb2);
          this._socket.uncork();
        } else {
          this._socket.write(list[0], cb2);
        }
      }
    };
    module2.exports = Sender2;
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/event-target.js
var require_event_target = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/event-target.js"(exports2, module2) {
    "use strict";
    var { kForOnEventAttribute, kListener } = require_constants2();
    var kCode = Symbol("kCode");
    var kData = Symbol("kData");
    var kError = Symbol("kError");
    var kMessage = Symbol("kMessage");
    var kReason = Symbol("kReason");
    var kTarget = Symbol("kTarget");
    var kType = Symbol("kType");
    var kWasClean = Symbol("kWasClean");
    var Event = class {
      constructor(type2) {
        this[kTarget] = null;
        this[kType] = type2;
      }
      get target() {
        return this[kTarget];
      }
      get type() {
        return this[kType];
      }
    };
    Object.defineProperty(Event.prototype, "target", { enumerable: true });
    Object.defineProperty(Event.prototype, "type", { enumerable: true });
    var CloseEvent = class extends Event {
      constructor(type2, options = {}) {
        super(type2);
        this[kCode] = options.code === void 0 ? 0 : options.code;
        this[kReason] = options.reason === void 0 ? "" : options.reason;
        this[kWasClean] = options.wasClean === void 0 ? false : options.wasClean;
      }
      get code() {
        return this[kCode];
      }
      get reason() {
        return this[kReason];
      }
      get wasClean() {
        return this[kWasClean];
      }
    };
    Object.defineProperty(CloseEvent.prototype, "code", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "reason", { enumerable: true });
    Object.defineProperty(CloseEvent.prototype, "wasClean", { enumerable: true });
    var ErrorEvent = class extends Event {
      constructor(type2, options = {}) {
        super(type2);
        this[kError] = options.error === void 0 ? null : options.error;
        this[kMessage] = options.message === void 0 ? "" : options.message;
      }
      get error() {
        return this[kError];
      }
      get message() {
        return this[kMessage];
      }
    };
    Object.defineProperty(ErrorEvent.prototype, "error", { enumerable: true });
    Object.defineProperty(ErrorEvent.prototype, "message", { enumerable: true });
    var MessageEvent = class extends Event {
      constructor(type2, options = {}) {
        super(type2);
        this[kData] = options.data === void 0 ? null : options.data;
      }
      get data() {
        return this[kData];
      }
    };
    Object.defineProperty(MessageEvent.prototype, "data", { enumerable: true });
    var EventTarget = {
      addEventListener(type2, handler, options = {}) {
        for (const listener of this.listeners(type2)) {
          if (!options[kForOnEventAttribute] && listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            return;
          }
        }
        let wrapper;
        if (type2 === "message") {
          wrapper = function onMessage(data, isBinary) {
            const event = new MessageEvent("message", {
              data: isBinary ? data : data.toString()
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type2 === "close") {
          wrapper = function onClose(code, message) {
            const event = new CloseEvent("close", {
              code,
              reason: message.toString(),
              wasClean: this._closeFrameReceived && this._closeFrameSent
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type2 === "error") {
          wrapper = function onError(error) {
            const event = new ErrorEvent("error", {
              error,
              message: error.message
            });
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else if (type2 === "open") {
          wrapper = function onOpen() {
            const event = new Event("open");
            event[kTarget] = this;
            callListener(handler, this, event);
          };
        } else {
          return;
        }
        wrapper[kForOnEventAttribute] = !!options[kForOnEventAttribute];
        wrapper[kListener] = handler;
        if (options.once) {
          this.once(type2, wrapper);
        } else {
          this.on(type2, wrapper);
        }
      },
      removeEventListener(type2, handler) {
        for (const listener of this.listeners(type2)) {
          if (listener[kListener] === handler && !listener[kForOnEventAttribute]) {
            this.removeListener(type2, listener);
            break;
          }
        }
      }
    };
    module2.exports = {
      CloseEvent,
      ErrorEvent,
      Event,
      EventTarget,
      MessageEvent
    };
    function callListener(listener, thisArg, event) {
      if (typeof listener === "object" && listener.handleEvent) {
        listener.handleEvent.call(listener, event);
      } else {
        listener.call(thisArg, event);
      }
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/extension.js
var require_extension = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/extension.js"(exports2, module2) {
    "use strict";
    var { tokenChars } = require_validation();
    function push(dest, name, elem) {
      if (dest[name] === void 0)
        dest[name] = [elem];
      else
        dest[name].push(elem);
    }
    function parse(header) {
      const offers = /* @__PURE__ */ Object.create(null);
      let params = /* @__PURE__ */ Object.create(null);
      let mustUnescape = false;
      let isEscaping = false;
      let inQuotes = false;
      let extensionName;
      let paramName;
      let start = -1;
      let code = -1;
      let end = -1;
      let i2 = 0;
      for (; i2 < header.length; i2++) {
        code = header.charCodeAt(i2);
        if (extensionName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i2;
          } else if (i2 !== 0 && (code === 32 || code === 9)) {
            if (end === -1 && start !== -1)
              end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1)
              end = i2;
            const name = header.slice(start, end);
            if (code === 44) {
              push(offers, name, params);
              params = /* @__PURE__ */ Object.create(null);
            } else {
              extensionName = name;
            }
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        } else if (paramName === void 0) {
          if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i2;
          } else if (code === 32 || code === 9) {
            if (end === -1 && start !== -1)
              end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1)
              end = i2;
            push(params, header.slice(start, end), true);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            start = end = -1;
          } else if (code === 61 && start !== -1 && end === -1) {
            paramName = header.slice(start, i2);
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        } else {
          if (isEscaping) {
            if (tokenChars[code] !== 1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (start === -1)
              start = i2;
            else if (!mustUnescape)
              mustUnescape = true;
            isEscaping = false;
          } else if (inQuotes) {
            if (tokenChars[code] === 1) {
              if (start === -1)
                start = i2;
            } else if (code === 34 && start !== -1) {
              inQuotes = false;
              end = i2;
            } else if (code === 92) {
              isEscaping = true;
            } else {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
          } else if (code === 34 && header.charCodeAt(i2 - 1) === 61) {
            inQuotes = true;
          } else if (end === -1 && tokenChars[code] === 1) {
            if (start === -1)
              start = i2;
          } else if (start !== -1 && (code === 32 || code === 9)) {
            if (end === -1)
              end = i2;
          } else if (code === 59 || code === 44) {
            if (start === -1) {
              throw new SyntaxError(`Unexpected character at index ${i2}`);
            }
            if (end === -1)
              end = i2;
            let value = header.slice(start, end);
            if (mustUnescape) {
              value = value.replace(/\\/g, "");
              mustUnescape = false;
            }
            push(params, paramName, value);
            if (code === 44) {
              push(offers, extensionName, params);
              params = /* @__PURE__ */ Object.create(null);
              extensionName = void 0;
            }
            paramName = void 0;
            start = end = -1;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
        }
      }
      if (start === -1 || inQuotes || code === 32 || code === 9) {
        throw new SyntaxError("Unexpected end of input");
      }
      if (end === -1)
        end = i2;
      const token = header.slice(start, end);
      if (extensionName === void 0) {
        push(offers, token, params);
      } else {
        if (paramName === void 0) {
          push(params, token, true);
        } else if (mustUnescape) {
          push(params, paramName, token.replace(/\\/g, ""));
        } else {
          push(params, paramName, token);
        }
        push(offers, extensionName, params);
      }
      return offers;
    }
    function format(extensions) {
      return Object.keys(extensions).map((extension) => {
        let configurations = extensions[extension];
        if (!Array.isArray(configurations))
          configurations = [configurations];
        return configurations.map((params) => {
          return [extension].concat(
            Object.keys(params).map((k) => {
              let values = params[k];
              if (!Array.isArray(values))
                values = [values];
              return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
            })
          ).join("; ");
        }).join(", ");
      }).join(", ");
    }
    module2.exports = { format, parse };
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/websocket.js
var require_websocket = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/websocket.js"(exports2, module2) {
    "use strict";
    var EventEmitter = __require("events");
    var https = __require("https");
    var http = __require("http");
    var net = __require("net");
    var tls = __require("tls");
    var { randomBytes, createHash } = __require("crypto");
    var { Readable } = __require("stream");
    var { URL } = __require("url");
    var PerMessageDeflate = require_permessage_deflate();
    var Receiver2 = require_receiver();
    var Sender2 = require_sender();
    var {
      BINARY_TYPES,
      EMPTY_BUFFER,
      GUID,
      kForOnEventAttribute,
      kListener,
      kStatusCode,
      kWebSocket,
      NOOP
    } = require_constants2();
    var {
      EventTarget: { addEventListener, removeEventListener }
    } = require_event_target();
    var { format, parse } = require_extension();
    var { toBuffer } = require_buffer_util();
    var closeTimeout = 30 * 1e3;
    var kAborted = Symbol("kAborted");
    var protocolVersions = [8, 13];
    var readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
    var subprotocolRegex = /^[!#$%&'*+\-.0-9A-Z^_`|a-z~]+$/;
    var WebSocket2 = class extends EventEmitter {
      constructor(address, protocols, options) {
        super();
        this._binaryType = BINARY_TYPES[0];
        this._closeCode = 1006;
        this._closeFrameReceived = false;
        this._closeFrameSent = false;
        this._closeMessage = EMPTY_BUFFER;
        this._closeTimer = null;
        this._extensions = {};
        this._paused = false;
        this._protocol = "";
        this._readyState = WebSocket2.CONNECTING;
        this._receiver = null;
        this._sender = null;
        this._socket = null;
        if (address !== null) {
          this._bufferedAmount = 0;
          this._isServer = false;
          this._redirects = 0;
          if (protocols === void 0) {
            protocols = [];
          } else if (!Array.isArray(protocols)) {
            if (typeof protocols === "object" && protocols !== null) {
              options = protocols;
              protocols = [];
            } else {
              protocols = [protocols];
            }
          }
          initAsClient(this, address, protocols, options);
        } else {
          this._isServer = true;
        }
      }
      get binaryType() {
        return this._binaryType;
      }
      set binaryType(type2) {
        if (!BINARY_TYPES.includes(type2))
          return;
        this._binaryType = type2;
        if (this._receiver)
          this._receiver._binaryType = type2;
      }
      get bufferedAmount() {
        if (!this._socket)
          return this._bufferedAmount;
        return this._socket._writableState.length + this._sender._bufferedBytes;
      }
      get extensions() {
        return Object.keys(this._extensions).join();
      }
      get isPaused() {
        return this._paused;
      }
      get onclose() {
        return null;
      }
      get onerror() {
        return null;
      }
      get onopen() {
        return null;
      }
      get onmessage() {
        return null;
      }
      get protocol() {
        return this._protocol;
      }
      get readyState() {
        return this._readyState;
      }
      get url() {
        return this._url;
      }
      setSocket(socket, head, options) {
        const receiver = new Receiver2({
          binaryType: this.binaryType,
          extensions: this._extensions,
          isServer: this._isServer,
          maxPayload: options.maxPayload,
          skipUTF8Validation: options.skipUTF8Validation
        });
        this._sender = new Sender2(socket, this._extensions, options.generateMask);
        this._receiver = receiver;
        this._socket = socket;
        receiver[kWebSocket] = this;
        socket[kWebSocket] = this;
        receiver.on("conclude", receiverOnConclude);
        receiver.on("drain", receiverOnDrain);
        receiver.on("error", receiverOnError);
        receiver.on("message", receiverOnMessage);
        receiver.on("ping", receiverOnPing);
        receiver.on("pong", receiverOnPong);
        socket.setTimeout(0);
        socket.setNoDelay();
        if (head.length > 0)
          socket.unshift(head);
        socket.on("close", socketOnClose);
        socket.on("data", socketOnData);
        socket.on("end", socketOnEnd);
        socket.on("error", socketOnError);
        this._readyState = WebSocket2.OPEN;
        this.emit("open");
      }
      emitClose() {
        if (!this._socket) {
          this._readyState = WebSocket2.CLOSED;
          this.emit("close", this._closeCode, this._closeMessage);
          return;
        }
        if (this._extensions[PerMessageDeflate.extensionName]) {
          this._extensions[PerMessageDeflate.extensionName].cleanup();
        }
        this._receiver.removeAllListeners();
        this._readyState = WebSocket2.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
      }
      close(code, data) {
        if (this.readyState === WebSocket2.CLOSED)
          return;
        if (this.readyState === WebSocket2.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this.readyState === WebSocket2.CLOSING) {
          if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {
            this._socket.end();
          }
          return;
        }
        this._readyState = WebSocket2.CLOSING;
        this._sender.close(code, data, !this._isServer, (err2) => {
          if (err2)
            return;
          this._closeFrameSent = true;
          if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {
            this._socket.end();
          }
        });
        this._closeTimer = setTimeout(
          this._socket.destroy.bind(this._socket),
          closeTimeout
        );
      }
      pause() {
        if (this.readyState === WebSocket2.CONNECTING || this.readyState === WebSocket2.CLOSED) {
          return;
        }
        this._paused = true;
        this._socket.pause();
      }
      ping(data, mask2, cb2) {
        if (this.readyState === WebSocket2.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb2 = data;
          data = mask2 = void 0;
        } else if (typeof mask2 === "function") {
          cb2 = mask2;
          mask2 = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket2.OPEN) {
          sendAfterClose(this, data, cb2);
          return;
        }
        if (mask2 === void 0)
          mask2 = !this._isServer;
        this._sender.ping(data || EMPTY_BUFFER, mask2, cb2);
      }
      pong(data, mask2, cb2) {
        if (this.readyState === WebSocket2.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof data === "function") {
          cb2 = data;
          data = mask2 = void 0;
        } else if (typeof mask2 === "function") {
          cb2 = mask2;
          mask2 = void 0;
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket2.OPEN) {
          sendAfterClose(this, data, cb2);
          return;
        }
        if (mask2 === void 0)
          mask2 = !this._isServer;
        this._sender.pong(data || EMPTY_BUFFER, mask2, cb2);
      }
      resume() {
        if (this.readyState === WebSocket2.CONNECTING || this.readyState === WebSocket2.CLOSED) {
          return;
        }
        this._paused = false;
        if (!this._receiver._writableState.needDrain)
          this._socket.resume();
      }
      send(data, options, cb2) {
        if (this.readyState === WebSocket2.CONNECTING) {
          throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
        }
        if (typeof options === "function") {
          cb2 = options;
          options = {};
        }
        if (typeof data === "number")
          data = data.toString();
        if (this.readyState !== WebSocket2.OPEN) {
          sendAfterClose(this, data, cb2);
          return;
        }
        const opts = {
          binary: typeof data !== "string",
          mask: !this._isServer,
          compress: true,
          fin: true,
          ...options
        };
        if (!this._extensions[PerMessageDeflate.extensionName]) {
          opts.compress = false;
        }
        this._sender.send(data || EMPTY_BUFFER, opts, cb2);
      }
      terminate() {
        if (this.readyState === WebSocket2.CLOSED)
          return;
        if (this.readyState === WebSocket2.CONNECTING) {
          const msg = "WebSocket was closed before the connection was established";
          abortHandshake(this, this._req, msg);
          return;
        }
        if (this._socket) {
          this._readyState = WebSocket2.CLOSING;
          this._socket.destroy();
        }
      }
    };
    Object.defineProperty(WebSocket2, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2.prototype, "CONNECTING", {
      enumerable: true,
      value: readyStates.indexOf("CONNECTING")
    });
    Object.defineProperty(WebSocket2, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2.prototype, "OPEN", {
      enumerable: true,
      value: readyStates.indexOf("OPEN")
    });
    Object.defineProperty(WebSocket2, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSING", {
      enumerable: true,
      value: readyStates.indexOf("CLOSING")
    });
    Object.defineProperty(WebSocket2, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    Object.defineProperty(WebSocket2.prototype, "CLOSED", {
      enumerable: true,
      value: readyStates.indexOf("CLOSED")
    });
    [
      "binaryType",
      "bufferedAmount",
      "extensions",
      "isPaused",
      "protocol",
      "readyState",
      "url"
    ].forEach((property) => {
      Object.defineProperty(WebSocket2.prototype, property, { enumerable: true });
    });
    ["open", "error", "close", "message"].forEach((method) => {
      Object.defineProperty(WebSocket2.prototype, `on${method}`, {
        enumerable: true,
        get() {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute])
              return listener[kListener];
          }
          return null;
        },
        set(handler) {
          for (const listener of this.listeners(method)) {
            if (listener[kForOnEventAttribute]) {
              this.removeListener(method, listener);
              break;
            }
          }
          if (typeof handler !== "function")
            return;
          this.addEventListener(method, handler, {
            [kForOnEventAttribute]: true
          });
        }
      });
    });
    WebSocket2.prototype.addEventListener = addEventListener;
    WebSocket2.prototype.removeEventListener = removeEventListener;
    module2.exports = WebSocket2;
    function initAsClient(websocket, address, protocols, options) {
      const opts = {
        protocolVersion: protocolVersions[1],
        maxPayload: 100 * 1024 * 1024,
        skipUTF8Validation: false,
        perMessageDeflate: true,
        followRedirects: false,
        maxRedirects: 10,
        ...options,
        createConnection: void 0,
        socketPath: void 0,
        hostname: void 0,
        protocol: void 0,
        timeout: void 0,
        method: "GET",
        host: void 0,
        path: void 0,
        port: void 0
      };
      if (!protocolVersions.includes(opts.protocolVersion)) {
        throw new RangeError(
          `Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`
        );
      }
      let parsedUrl;
      if (address instanceof URL) {
        parsedUrl = address;
        websocket._url = address.href;
      } else {
        try {
          parsedUrl = new URL(address);
        } catch (e) {
          throw new SyntaxError(`Invalid URL: ${address}`);
        }
        websocket._url = address;
      }
      const isSecure = parsedUrl.protocol === "wss:";
      const isIpcUrl = parsedUrl.protocol === "ws+unix:";
      let invalidUrlMessage;
      if (parsedUrl.protocol !== "ws:" && !isSecure && !isIpcUrl) {
        invalidUrlMessage = `The URL's protocol must be one of "ws:", "wss:", or "ws+unix:"`;
      } else if (isIpcUrl && !parsedUrl.pathname) {
        invalidUrlMessage = "The URL's pathname is empty";
      } else if (parsedUrl.hash) {
        invalidUrlMessage = "The URL contains a fragment identifier";
      }
      if (invalidUrlMessage) {
        const err2 = new SyntaxError(invalidUrlMessage);
        if (websocket._redirects === 0) {
          throw err2;
        } else {
          emitErrorAndClose(websocket, err2);
          return;
        }
      }
      const defaultPort = isSecure ? 443 : 80;
      const key2 = randomBytes(16).toString("base64");
      const request = isSecure ? https.request : http.request;
      const protocolSet = /* @__PURE__ */ new Set();
      let perMessageDeflate;
      opts.createConnection = isSecure ? tlsConnect : netConnect;
      opts.defaultPort = opts.defaultPort || defaultPort;
      opts.port = parsedUrl.port || defaultPort;
      opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
      opts.headers = {
        ...opts.headers,
        "Sec-WebSocket-Version": opts.protocolVersion,
        "Sec-WebSocket-Key": key2,
        Connection: "Upgrade",
        Upgrade: "websocket"
      };
      opts.path = parsedUrl.pathname + parsedUrl.search;
      opts.timeout = opts.handshakeTimeout;
      if (opts.perMessageDeflate) {
        perMessageDeflate = new PerMessageDeflate(
          opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
          false,
          opts.maxPayload
        );
        opts.headers["Sec-WebSocket-Extensions"] = format({
          [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
        });
      }
      if (protocols.length) {
        for (const protocol of protocols) {
          if (typeof protocol !== "string" || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {
            throw new SyntaxError(
              "An invalid or duplicated subprotocol was specified"
            );
          }
          protocolSet.add(protocol);
        }
        opts.headers["Sec-WebSocket-Protocol"] = protocols.join(",");
      }
      if (opts.origin) {
        if (opts.protocolVersion < 13) {
          opts.headers["Sec-WebSocket-Origin"] = opts.origin;
        } else {
          opts.headers.Origin = opts.origin;
        }
      }
      if (parsedUrl.username || parsedUrl.password) {
        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
      }
      if (isIpcUrl) {
        const parts = opts.path.split(":");
        opts.socketPath = parts[0];
        opts.path = parts[1];
      }
      let req;
      if (opts.followRedirects) {
        if (websocket._redirects === 0) {
          websocket._originalIpc = isIpcUrl;
          websocket._originalSecure = isSecure;
          websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;
          const headers = options && options.headers;
          options = { ...options, headers: {} };
          if (headers) {
            for (const [key3, value] of Object.entries(headers)) {
              options.headers[key3.toLowerCase()] = value;
            }
          }
        } else if (websocket.listenerCount("redirect") === 0) {
          const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;
          if (!isSameHost || websocket._originalSecure && !isSecure) {
            delete opts.headers.authorization;
            delete opts.headers.cookie;
            if (!isSameHost)
              delete opts.headers.host;
            opts.auth = void 0;
          }
        }
        if (opts.auth && !options.headers.authorization) {
          options.headers.authorization = "Basic " + Buffer.from(opts.auth).toString("base64");
        }
        req = websocket._req = request(opts);
        if (websocket._redirects) {
          websocket.emit("redirect", websocket.url, req);
        }
      } else {
        req = websocket._req = request(opts);
      }
      if (opts.timeout) {
        req.on("timeout", () => {
          abortHandshake(websocket, req, "Opening handshake has timed out");
        });
      }
      req.on("error", (err2) => {
        if (req === null || req[kAborted])
          return;
        req = websocket._req = null;
        emitErrorAndClose(websocket, err2);
      });
      req.on("response", (res) => {
        const location = res.headers.location;
        const statusCode = res.statusCode;
        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
          if (++websocket._redirects > opts.maxRedirects) {
            abortHandshake(websocket, req, "Maximum redirects exceeded");
            return;
          }
          req.abort();
          let addr;
          try {
            addr = new URL(location, address);
          } catch (e) {
            const err2 = new SyntaxError(`Invalid URL: ${location}`);
            emitErrorAndClose(websocket, err2);
            return;
          }
          initAsClient(websocket, addr, protocols, options);
        } else if (!websocket.emit("unexpected-response", req, res)) {
          abortHandshake(
            websocket,
            req,
            `Unexpected server response: ${res.statusCode}`
          );
        }
      });
      req.on("upgrade", (res, socket, head) => {
        websocket.emit("upgrade", res);
        if (websocket.readyState !== WebSocket2.CONNECTING)
          return;
        req = websocket._req = null;
        if (res.headers.upgrade.toLowerCase() !== "websocket") {
          abortHandshake(websocket, socket, "Invalid Upgrade header");
          return;
        }
        const digest = createHash("sha1").update(key2 + GUID).digest("base64");
        if (res.headers["sec-websocket-accept"] !== digest) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
          return;
        }
        const serverProt = res.headers["sec-websocket-protocol"];
        let protError;
        if (serverProt !== void 0) {
          if (!protocolSet.size) {
            protError = "Server sent a subprotocol but none was requested";
          } else if (!protocolSet.has(serverProt)) {
            protError = "Server sent an invalid subprotocol";
          }
        } else if (protocolSet.size) {
          protError = "Server sent no subprotocol";
        }
        if (protError) {
          abortHandshake(websocket, socket, protError);
          return;
        }
        if (serverProt)
          websocket._protocol = serverProt;
        const secWebSocketExtensions = res.headers["sec-websocket-extensions"];
        if (secWebSocketExtensions !== void 0) {
          if (!perMessageDeflate) {
            const message = "Server sent a Sec-WebSocket-Extensions header but no extension was requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          let extensions;
          try {
            extensions = parse(secWebSocketExtensions);
          } catch (err2) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          const extensionNames = Object.keys(extensions);
          if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {
            const message = "Server indicated an extension that was not requested";
            abortHandshake(websocket, socket, message);
            return;
          }
          try {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          } catch (err2) {
            const message = "Invalid Sec-WebSocket-Extensions header";
            abortHandshake(websocket, socket, message);
            return;
          }
          websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
        websocket.setSocket(socket, head, {
          generateMask: opts.generateMask,
          maxPayload: opts.maxPayload,
          skipUTF8Validation: opts.skipUTF8Validation
        });
      });
      if (opts.finishRequest) {
        opts.finishRequest(req, websocket);
      } else {
        req.end();
      }
    }
    function emitErrorAndClose(websocket, err2) {
      websocket._readyState = WebSocket2.CLOSING;
      websocket.emit("error", err2);
      websocket.emitClose();
    }
    function netConnect(options) {
      options.path = options.socketPath;
      return net.connect(options);
    }
    function tlsConnect(options) {
      options.path = void 0;
      if (!options.servername && options.servername !== "") {
        options.servername = net.isIP(options.host) ? "" : options.host;
      }
      return tls.connect(options);
    }
    function abortHandshake(websocket, stream, message) {
      websocket._readyState = WebSocket2.CLOSING;
      const err2 = new Error(message);
      Error.captureStackTrace(err2, abortHandshake);
      if (stream.setHeader) {
        stream[kAborted] = true;
        stream.abort();
        if (stream.socket && !stream.socket.destroyed) {
          stream.socket.destroy();
        }
        process.nextTick(emitErrorAndClose, websocket, err2);
      } else {
        stream.destroy(err2);
        stream.once("error", websocket.emit.bind(websocket, "error"));
        stream.once("close", websocket.emitClose.bind(websocket));
      }
    }
    function sendAfterClose(websocket, data, cb2) {
      if (data) {
        const length = toBuffer(data).length;
        if (websocket._socket)
          websocket._sender._bufferedBytes += length;
        else
          websocket._bufferedAmount += length;
      }
      if (cb2) {
        const err2 = new Error(
          `WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`
        );
        process.nextTick(cb2, err2);
      }
    }
    function receiverOnConclude(code, reason) {
      const websocket = this[kWebSocket];
      websocket._closeFrameReceived = true;
      websocket._closeMessage = reason;
      websocket._closeCode = code;
      if (websocket._socket[kWebSocket] === void 0)
        return;
      websocket._socket.removeListener("data", socketOnData);
      process.nextTick(resume, websocket._socket);
      if (code === 1005)
        websocket.close();
      else
        websocket.close(code, reason);
    }
    function receiverOnDrain() {
      const websocket = this[kWebSocket];
      if (!websocket.isPaused)
        websocket._socket.resume();
    }
    function receiverOnError(err2) {
      const websocket = this[kWebSocket];
      if (websocket._socket[kWebSocket] !== void 0) {
        websocket._socket.removeListener("data", socketOnData);
        process.nextTick(resume, websocket._socket);
        websocket.close(err2[kStatusCode]);
      }
      websocket.emit("error", err2);
    }
    function receiverOnFinish() {
      this[kWebSocket].emitClose();
    }
    function receiverOnMessage(data, isBinary) {
      this[kWebSocket].emit("message", data, isBinary);
    }
    function receiverOnPing(data) {
      const websocket = this[kWebSocket];
      websocket.pong(data, !websocket._isServer, NOOP);
      websocket.emit("ping", data);
    }
    function receiverOnPong(data) {
      this[kWebSocket].emit("pong", data);
    }
    function resume(stream) {
      stream.resume();
    }
    function socketOnClose() {
      const websocket = this[kWebSocket];
      this.removeListener("close", socketOnClose);
      this.removeListener("data", socketOnData);
      this.removeListener("end", socketOnEnd);
      websocket._readyState = WebSocket2.CLOSING;
      let chunk;
      if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {
        websocket._receiver.write(chunk);
      }
      websocket._receiver.end();
      this[kWebSocket] = void 0;
      clearTimeout(websocket._closeTimer);
      if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
        websocket.emitClose();
      } else {
        websocket._receiver.on("error", receiverOnFinish);
        websocket._receiver.on("finish", receiverOnFinish);
      }
    }
    function socketOnData(chunk) {
      if (!this[kWebSocket]._receiver.write(chunk)) {
        this.pause();
      }
    }
    function socketOnEnd() {
      const websocket = this[kWebSocket];
      websocket._readyState = WebSocket2.CLOSING;
      websocket._receiver.end();
      this.end();
    }
    function socketOnError() {
      const websocket = this[kWebSocket];
      this.removeListener("error", socketOnError);
      this.on("error", NOOP);
      if (websocket) {
        websocket._readyState = WebSocket2.CLOSING;
        this.destroy();
      }
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/subprotocol.js
var require_subprotocol = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/subprotocol.js"(exports2, module2) {
    "use strict";
    var { tokenChars } = require_validation();
    function parse(header) {
      const protocols = /* @__PURE__ */ new Set();
      let start = -1;
      let end = -1;
      let i2 = 0;
      for (i2; i2 < header.length; i2++) {
        const code = header.charCodeAt(i2);
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i2;
        } else if (i2 !== 0 && (code === 32 || code === 9)) {
          if (end === -1 && start !== -1)
            end = i2;
        } else if (code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i2}`);
          }
          if (end === -1)
            end = i2;
          const protocol2 = header.slice(start, end);
          if (protocols.has(protocol2)) {
            throw new SyntaxError(`The "${protocol2}" subprotocol is duplicated`);
          }
          protocols.add(protocol2);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i2}`);
        }
      }
      if (start === -1 || end !== -1) {
        throw new SyntaxError("Unexpected end of input");
      }
      const protocol = header.slice(start, i2);
      if (protocols.has(protocol)) {
        throw new SyntaxError(`The "${protocol}" subprotocol is duplicated`);
      }
      protocols.add(protocol);
      return protocols;
    }
    module2.exports = { parse };
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/lib/websocket-server.js"(exports2, module2) {
    "use strict";
    var EventEmitter = __require("events");
    var http = __require("http");
    var https = __require("https");
    var net = __require("net");
    var tls = __require("tls");
    var { createHash } = __require("crypto");
    var extension = require_extension();
    var PerMessageDeflate = require_permessage_deflate();
    var subprotocol = require_subprotocol();
    var WebSocket2 = require_websocket();
    var { GUID, kWebSocket } = require_constants2();
    var keyRegex = /^[+/0-9A-Za-z]{22}==$/;
    var RUNNING = 0;
    var CLOSING = 1;
    var CLOSED = 2;
    var WebSocketServer2 = class extends EventEmitter {
      constructor(options, callback) {
        super();
        options = {
          maxPayload: 100 * 1024 * 1024,
          skipUTF8Validation: false,
          perMessageDeflate: false,
          handleProtocols: null,
          clientTracking: true,
          verifyClient: null,
          noServer: false,
          backlog: null,
          server: null,
          host: null,
          path: null,
          port: null,
          WebSocket: WebSocket2,
          ...options
        };
        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {
          throw new TypeError(
            'One and only one of the "port", "server", or "noServer" options must be specified'
          );
        }
        if (options.port != null) {
          this._server = http.createServer((req, res) => {
            const body = http.STATUS_CODES[426];
            res.writeHead(426, {
              "Content-Length": body.length,
              "Content-Type": "text/plain"
            });
            res.end(body);
          });
          this._server.listen(
            options.port,
            options.host,
            options.backlog,
            callback
          );
        } else if (options.server) {
          this._server = options.server;
        }
        if (this._server) {
          const emitConnection = this.emit.bind(this, "connection");
          this._removeListeners = addListeners(this._server, {
            listening: this.emit.bind(this, "listening"),
            error: this.emit.bind(this, "error"),
            upgrade: (req, socket, head) => {
              this.handleUpgrade(req, socket, head, emitConnection);
            }
          });
        }
        if (options.perMessageDeflate === true)
          options.perMessageDeflate = {};
        if (options.clientTracking) {
          this.clients = /* @__PURE__ */ new Set();
          this._shouldEmitClose = false;
        }
        this.options = options;
        this._state = RUNNING;
      }
      address() {
        if (this.options.noServer) {
          throw new Error('The server is operating in "noServer" mode');
        }
        if (!this._server)
          return null;
        return this._server.address();
      }
      close(cb2) {
        if (this._state === CLOSED) {
          if (cb2) {
            this.once("close", () => {
              cb2(new Error("The server is not running"));
            });
          }
          process.nextTick(emitClose, this);
          return;
        }
        if (cb2)
          this.once("close", cb2);
        if (this._state === CLOSING)
          return;
        this._state = CLOSING;
        if (this.options.noServer || this.options.server) {
          if (this._server) {
            this._removeListeners();
            this._removeListeners = this._server = null;
          }
          if (this.clients) {
            if (!this.clients.size) {
              process.nextTick(emitClose, this);
            } else {
              this._shouldEmitClose = true;
            }
          } else {
            process.nextTick(emitClose, this);
          }
        } else {
          const server = this._server;
          this._removeListeners();
          this._removeListeners = this._server = null;
          server.close(() => {
            emitClose(this);
          });
        }
      }
      shouldHandle(req) {
        if (this.options.path) {
          const index = req.url.indexOf("?");
          const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
          if (pathname !== this.options.path)
            return false;
        }
        return true;
      }
      handleUpgrade(req, socket, head, cb2) {
        socket.on("error", socketOnError);
        const key2 = req.headers["sec-websocket-key"];
        const version = +req.headers["sec-websocket-version"];
        if (req.method !== "GET") {
          const message = "Invalid HTTP method";
          abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);
          return;
        }
        if (req.headers.upgrade.toLowerCase() !== "websocket") {
          const message = "Invalid Upgrade header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!key2 || !keyRegex.test(key2)) {
          const message = "Missing or invalid Sec-WebSocket-Key header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (version !== 8 && version !== 13) {
          const message = "Missing or invalid Sec-WebSocket-Version header";
          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
          return;
        }
        if (!this.shouldHandle(req)) {
          abortHandshake(socket, 400);
          return;
        }
        const secWebSocketProtocol = req.headers["sec-websocket-protocol"];
        let protocols = /* @__PURE__ */ new Set();
        if (secWebSocketProtocol !== void 0) {
          try {
            protocols = subprotocol.parse(secWebSocketProtocol);
          } catch (err2) {
            const message = "Invalid Sec-WebSocket-Protocol header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        const secWebSocketExtensions = req.headers["sec-websocket-extensions"];
        const extensions = {};
        if (this.options.perMessageDeflate && secWebSocketExtensions !== void 0) {
          const perMessageDeflate = new PerMessageDeflate(
            this.options.perMessageDeflate,
            true,
            this.options.maxPayload
          );
          try {
            const offers = extension.parse(secWebSocketExtensions);
            if (offers[PerMessageDeflate.extensionName]) {
              perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
              extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
            }
          } catch (err2) {
            const message = "Invalid or unacceptable Sec-WebSocket-Extensions header";
            abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);
            return;
          }
        }
        if (this.options.verifyClient) {
          const info = {
            origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
            secure: !!(req.socket.authorized || req.socket.encrypted),
            req
          };
          if (this.options.verifyClient.length === 2) {
            this.options.verifyClient(info, (verified, code, message, headers) => {
              if (!verified) {
                return abortHandshake(socket, code || 401, message, headers);
              }
              this.completeUpgrade(
                extensions,
                key2,
                protocols,
                req,
                socket,
                head,
                cb2
              );
            });
            return;
          }
          if (!this.options.verifyClient(info))
            return abortHandshake(socket, 401);
        }
        this.completeUpgrade(extensions, key2, protocols, req, socket, head, cb2);
      }
      completeUpgrade(extensions, key2, protocols, req, socket, head, cb2) {
        if (!socket.readable || !socket.writable)
          return socket.destroy();
        if (socket[kWebSocket]) {
          throw new Error(
            "server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration"
          );
        }
        if (this._state > RUNNING)
          return abortHandshake(socket, 503);
        const digest = createHash("sha1").update(key2 + GUID).digest("base64");
        const headers = [
          "HTTP/1.1 101 Switching Protocols",
          "Upgrade: websocket",
          "Connection: Upgrade",
          `Sec-WebSocket-Accept: ${digest}`
        ];
        const ws = new this.options.WebSocket(null);
        if (protocols.size) {
          const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;
          if (protocol) {
            headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
            ws._protocol = protocol;
          }
        }
        if (extensions[PerMessageDeflate.extensionName]) {
          const params = extensions[PerMessageDeflate.extensionName].params;
          const value = extension.format({
            [PerMessageDeflate.extensionName]: [params]
          });
          headers.push(`Sec-WebSocket-Extensions: ${value}`);
          ws._extensions = extensions;
        }
        this.emit("headers", headers, req);
        socket.write(headers.concat("\r\n").join("\r\n"));
        socket.removeListener("error", socketOnError);
        ws.setSocket(socket, head, {
          maxPayload: this.options.maxPayload,
          skipUTF8Validation: this.options.skipUTF8Validation
        });
        if (this.clients) {
          this.clients.add(ws);
          ws.on("close", () => {
            this.clients.delete(ws);
            if (this._shouldEmitClose && !this.clients.size) {
              process.nextTick(emitClose, this);
            }
          });
        }
        cb2(ws, req);
      }
    };
    module2.exports = WebSocketServer2;
    function addListeners(server, map) {
      for (const event of Object.keys(map))
        server.on(event, map[event]);
      return function removeListeners() {
        for (const event of Object.keys(map)) {
          server.removeListener(event, map[event]);
        }
      };
    }
    function emitClose(server) {
      server._state = CLOSED;
      server.emit("close");
    }
    function socketOnError() {
      this.destroy();
    }
    function abortHandshake(socket, code, message, headers) {
      message = message || http.STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.once("finish", socket.destroy);
      socket.end(
        `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message
      );
    }
    function abortHandshakeOrEmitwsClientError(server, req, socket, code, message) {
      if (server.listenerCount("wsClientError")) {
        const err2 = new Error(message);
        Error.captureStackTrace(err2, abortHandshakeOrEmitwsClientError);
        server.emit("wsClientError", err2, socket, req);
      } else {
        abortHandshake(socket, code, message);
      }
    }
  }
});

// ../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/wrapper.mjs
var import_stream, import_receiver, import_sender, import_websocket, import_websocket_server, wrapper_default;
var init_wrapper = __esm({
  "../../node_modules/.store/ws-virtual-ea310cc537/node_modules/ws/wrapper.mjs"() {
    import_stream = __toESM(require_stream(), 1);
    import_receiver = __toESM(require_receiver(), 1);
    import_sender = __toESM(require_sender(), 1);
    import_websocket = __toESM(require_websocket(), 1);
    import_websocket_server = __toESM(require_websocket_server(), 1);
    wrapper_default = import_websocket.default;
  }
});

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/devtools-window-polyfill.js
var customGlobal;
var init_devtools_window_polyfill = __esm({
  "../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/devtools-window-polyfill.js"() {
    init_wrapper();
    customGlobal = global;
    if (!customGlobal.WebSocket) {
      customGlobal.WebSocket = wrapper_default;
    }
    if (!customGlobal.window) {
      customGlobal.window = global;
    }
    customGlobal.window.__REACT_DEVTOOLS_COMPONENT_FILTERS__ = [
      {
        type: 1,
        value: 7,
        isEnabled: true
      },
      {
        type: 2,
        value: "InternalApp",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalAppContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStdoutContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStderrContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalStdinContext",
        isEnabled: true,
        isValid: true
      },
      {
        type: 2,
        value: "InternalFocusContext",
        isEnabled: true,
        isValid: true
      }
    ];
  }
});

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/devtools.js
var devtools_exports = {};
import devtools from "react-devtools-core";
var init_devtools = __esm({
  "../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/devtools.js"() {
    init_devtools_window_polyfill();
    devtools.connectToDevTools();
  }
});

// ../../node_modules/.store/cli-boxes-npm-3.0.0-e5de3a0d5e/node_modules/cli-boxes/boxes.json
var require_boxes = __commonJS({
  "../../node_modules/.store/cli-boxes-npm-3.0.0-e5de3a0d5e/node_modules/cli-boxes/boxes.json"(exports2, module2) {
    module2.exports = {
      single: {
        topLeft: "\u250C",
        top: "\u2500",
        topRight: "\u2510",
        right: "\u2502",
        bottomRight: "\u2518",
        bottom: "\u2500",
        bottomLeft: "\u2514",
        left: "\u2502"
      },
      double: {
        topLeft: "\u2554",
        top: "\u2550",
        topRight: "\u2557",
        right: "\u2551",
        bottomRight: "\u255D",
        bottom: "\u2550",
        bottomLeft: "\u255A",
        left: "\u2551"
      },
      round: {
        topLeft: "\u256D",
        top: "\u2500",
        topRight: "\u256E",
        right: "\u2502",
        bottomRight: "\u256F",
        bottom: "\u2500",
        bottomLeft: "\u2570",
        left: "\u2502"
      },
      bold: {
        topLeft: "\u250F",
        top: "\u2501",
        topRight: "\u2513",
        right: "\u2503",
        bottomRight: "\u251B",
        bottom: "\u2501",
        bottomLeft: "\u2517",
        left: "\u2503"
      },
      singleDouble: {
        topLeft: "\u2553",
        top: "\u2500",
        topRight: "\u2556",
        right: "\u2551",
        bottomRight: "\u255C",
        bottom: "\u2500",
        bottomLeft: "\u2559",
        left: "\u2551"
      },
      doubleSingle: {
        topLeft: "\u2552",
        top: "\u2550",
        topRight: "\u2555",
        right: "\u2502",
        bottomRight: "\u255B",
        bottom: "\u2550",
        bottomLeft: "\u2558",
        left: "\u2502"
      },
      classic: {
        topLeft: "+",
        top: "-",
        topRight: "+",
        right: "|",
        bottomRight: "+",
        bottom: "-",
        bottomLeft: "+",
        left: "|"
      },
      arrow: {
        topLeft: "\u2198",
        top: "\u2193",
        topRight: "\u2199",
        right: "\u2190",
        bottomRight: "\u2196",
        bottom: "\u2191",
        bottomLeft: "\u2197",
        left: "\u2192"
      }
    };
  }
});

// ../../node_modules/.store/cli-boxes-npm-3.0.0-e5de3a0d5e/node_modules/cli-boxes/index.js
var require_cli_boxes = __commonJS({
  "../../node_modules/.store/cli-boxes-npm-3.0.0-e5de3a0d5e/node_modules/cli-boxes/index.js"(exports2, module2) {
    "use strict";
    var cliBoxes3 = require_boxes();
    module2.exports = cliBoxes3;
    module2.exports.default = cliBoxes3;
  }
});

// ../../node_modules/.store/emoji-regex-npm-10.2.1-463e5e2567/node_modules/emoji-regex/index.js
var require_emoji_regex2 = __commonJS({
  "../../node_modules/.store/emoji-regex-npm-10.2.1-463e5e2567/node_modules/emoji-regex/index.js"(exports2, module2) {
    module2.exports = () => {
      return /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC3\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC08\uDC26](?:\u200D\u2B1B)?|[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF-\uDDB3\uDDBC\uDDBD]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
    };
  }
});

// ../../node_modules/.store/mimic-fn-npm-2.1.0-4fbeb3abb4/node_modules/mimic-fn/index.js
var require_mimic_fn = __commonJS({
  "../../node_modules/.store/mimic-fn-npm-2.1.0-4fbeb3abb4/node_modules/mimic-fn/index.js"(exports2, module2) {
    "use strict";
    var mimicFn = (to, from) => {
      for (const prop of Reflect.ownKeys(from)) {
        Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
      }
      return to;
    };
    module2.exports = mimicFn;
    module2.exports.default = mimicFn;
  }
});

// ../../node_modules/.store/onetime-npm-5.1.2-3ed148fa42/node_modules/onetime/index.js
var require_onetime = __commonJS({
  "../../node_modules/.store/onetime-npm-5.1.2-3ed148fa42/node_modules/onetime/index.js"(exports2, module2) {
    "use strict";
    var mimicFn = require_mimic_fn();
    var calledFunctions = /* @__PURE__ */ new WeakMap();
    var onetime2 = (function_, options = {}) => {
      if (typeof function_ !== "function") {
        throw new TypeError("Expected a function");
      }
      let returnValue;
      let callCount = 0;
      const functionName = function_.displayName || function_.name || "<anonymous>";
      const onetime3 = function(...arguments_) {
        calledFunctions.set(onetime3, ++callCount);
        if (callCount === 1) {
          returnValue = function_.apply(this, arguments_);
          function_ = null;
        } else if (options.throw === true) {
          throw new Error(`Function \`${functionName}\` can only be called once`);
        }
        return returnValue;
      };
      mimicFn(onetime3, function_);
      calledFunctions.set(onetime3, callCount);
      return onetime3;
    };
    module2.exports = onetime2;
    module2.exports.default = onetime2;
    module2.exports.callCount = (function_) => {
      if (!calledFunctions.has(function_)) {
        throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
      }
      return calledFunctions.get(function_);
    };
  }
});

// ../../node_modules/.store/signal-exit-npm-3.0.3-5a2d797648/node_modules/signal-exit/signals.js
var require_signals2 = __commonJS({
  "../../node_modules/.store/signal-exit-npm-3.0.3-5a2d797648/node_modules/signal-exit/signals.js"(exports2, module2) {
    module2.exports = [
      "SIGABRT",
      "SIGALRM",
      "SIGHUP",
      "SIGINT",
      "SIGTERM"
    ];
    if (process.platform !== "win32") {
      module2.exports.push(
        "SIGVTALRM",
        "SIGXCPU",
        "SIGXFSZ",
        "SIGUSR2",
        "SIGTRAP",
        "SIGSYS",
        "SIGQUIT",
        "SIGIOT"
      );
    }
    if (process.platform === "linux") {
      module2.exports.push(
        "SIGIO",
        "SIGPOLL",
        "SIGPWR",
        "SIGSTKFLT",
        "SIGUNUSED"
      );
    }
  }
});

// ../../node_modules/.store/signal-exit-npm-3.0.3-5a2d797648/node_modules/signal-exit/index.js
var require_signal_exit2 = __commonJS({
  "../../node_modules/.store/signal-exit-npm-3.0.3-5a2d797648/node_modules/signal-exit/index.js"(exports2, module2) {
    var assert2 = __require("assert");
    var signals = require_signals2();
    var isWin = /^win/i.test(process.platform);
    var EE = __require("events");
    if (typeof EE !== "function") {
      EE = EE.EventEmitter;
    }
    var emitter;
    if (process.__signal_exit_emitter__) {
      emitter = process.__signal_exit_emitter__;
    } else {
      emitter = process.__signal_exit_emitter__ = new EE();
      emitter.count = 0;
      emitter.emitted = {};
    }
    if (!emitter.infinite) {
      emitter.setMaxListeners(Infinity);
      emitter.infinite = true;
    }
    module2.exports = function(cb2, opts) {
      assert2.equal(typeof cb2, "function", "a callback must be provided for exit handler");
      if (loaded === false) {
        load();
      }
      var ev = "exit";
      if (opts && opts.alwaysLast) {
        ev = "afterexit";
      }
      var remove = function() {
        emitter.removeListener(ev, cb2);
        if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
          unload();
        }
      };
      emitter.on(ev, cb2);
      return remove;
    };
    module2.exports.unload = unload;
    function unload() {
      if (!loaded) {
        return;
      }
      loaded = false;
      signals.forEach(function(sig) {
        try {
          process.removeListener(sig, sigListeners[sig]);
        } catch (er) {
        }
      });
      process.emit = originalProcessEmit;
      process.reallyExit = originalProcessReallyExit;
      emitter.count -= 1;
    }
    function emit(event, code, signal) {
      if (emitter.emitted[event]) {
        return;
      }
      emitter.emitted[event] = true;
      emitter.emit(event, code, signal);
    }
    var sigListeners = {};
    signals.forEach(function(sig) {
      sigListeners[sig] = function listener() {
        var listeners = process.listeners(sig);
        if (listeners.length === emitter.count) {
          unload();
          emit("exit", null, sig);
          emit("afterexit", null, sig);
          if (isWin && sig === "SIGHUP") {
            sig = "SIGINT";
          }
          process.kill(process.pid, sig);
        }
      };
    });
    module2.exports.signals = function() {
      return signals;
    };
    module2.exports.load = load;
    var loaded = false;
    function load() {
      if (loaded) {
        return;
      }
      loaded = true;
      emitter.count += 1;
      signals = signals.filter(function(sig) {
        try {
          process.on(sig, sigListeners[sig]);
          return true;
        } catch (er) {
          return false;
        }
      });
      process.emit = processEmit;
      process.reallyExit = processReallyExit;
    }
    var originalProcessReallyExit = process.reallyExit;
    function processReallyExit(code) {
      process.exitCode = code || 0;
      emit("exit", process.exitCode, null);
      emit("afterexit", process.exitCode, null);
      originalProcessReallyExit.call(process, process.exitCode);
    }
    var originalProcessEmit = process.emit;
    function processEmit(ev, arg2) {
      if (ev === "exit") {
        if (arg2 !== void 0) {
          process.exitCode = arg2;
        }
        var ret = originalProcessEmit.apply(this, arguments);
        emit("exit", process.exitCode, null);
        emit("afterexit", process.exitCode, null);
        return ret;
      } else {
        return originalProcessEmit.apply(this, arguments);
      }
    }
  }
});

// ../../node_modules/.store/escape-string-regexp-npm-2.0.0-aef69d2a25/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS({
  "../../node_modules/.store/escape-string-regexp-npm-2.0.0-aef69d2a25/node_modules/escape-string-regexp/index.js"(exports2, module2) {
    "use strict";
    var matchOperatorsRegex = /[|\\{}()[\]^$+*?.-]/g;
    module2.exports = (string) => {
      if (typeof string !== "string") {
        throw new TypeError("Expected a string");
      }
      return string.replace(matchOperatorsRegex, "\\$&");
    };
  }
});

// ../../node_modules/.store/stack-utils-npm-2.0.6-2be1099696/node_modules/stack-utils/index.js
var require_stack_utils = __commonJS({
  "../../node_modules/.store/stack-utils-npm-2.0.6-2be1099696/node_modules/stack-utils/index.js"(exports2, module2) {
    "use strict";
    var escapeStringRegexp2 = require_escape_string_regexp();
    var cwd2 = typeof process === "object" && process && typeof process.cwd === "function" ? process.cwd() : ".";
    var natives = [].concat(
      __require("module").builtinModules,
      "bootstrap_node",
      "node"
    ).map((n) => new RegExp(`(?:\\((?:node:)?${n}(?:\\.js)?:\\d+:\\d+\\)$|^\\s*at (?:node:)?${n}(?:\\.js)?:\\d+:\\d+$)`));
    natives.push(
      /\((?:node:)?internal\/[^:]+:\d+:\d+\)$/,
      /\s*at (?:node:)?internal\/[^:]+:\d+:\d+$/,
      /\/\.node-spawn-wrap-\w+-\w+\/node:\d+:\d+\)?$/
    );
    var StackUtils2 = class {
      constructor(opts) {
        opts = {
          ignoredPackages: [],
          ...opts
        };
        if ("internals" in opts === false) {
          opts.internals = StackUtils2.nodeInternals();
        }
        if ("cwd" in opts === false) {
          opts.cwd = cwd2;
        }
        this._cwd = opts.cwd.replace(/\\/g, "/");
        this._internals = [].concat(
          opts.internals,
          ignoredPackagesRegExp(opts.ignoredPackages)
        );
        this._wrapCallSite = opts.wrapCallSite || false;
      }
      static nodeInternals() {
        return [...natives];
      }
      clean(stack, indent = 0) {
        indent = " ".repeat(indent);
        if (!Array.isArray(stack)) {
          stack = stack.split("\n");
        }
        if (!/^\s*at /.test(stack[0]) && /^\s*at /.test(stack[1])) {
          stack = stack.slice(1);
        }
        let outdent = false;
        let lastNonAtLine = null;
        const result = [];
        stack.forEach((st) => {
          st = st.replace(/\\/g, "/");
          if (this._internals.some((internal) => internal.test(st))) {
            return;
          }
          const isAtLine = /^\s*at /.test(st);
          if (outdent) {
            st = st.trimEnd().replace(/^(\s+)at /, "$1");
          } else {
            st = st.trim();
            if (isAtLine) {
              st = st.slice(3);
            }
          }
          st = st.replace(`${this._cwd}/`, "");
          if (st) {
            if (isAtLine) {
              if (lastNonAtLine) {
                result.push(lastNonAtLine);
                lastNonAtLine = null;
              }
              result.push(st);
            } else {
              outdent = true;
              lastNonAtLine = st;
            }
          }
        });
        return result.map((line) => `${indent}${line}
`).join("");
      }
      captureString(limit, fn = this.captureString) {
        if (typeof limit === "function") {
          fn = limit;
          limit = Infinity;
        }
        const { stackTraceLimit } = Error;
        if (limit) {
          Error.stackTraceLimit = limit;
        }
        const obj = {};
        Error.captureStackTrace(obj, fn);
        const { stack } = obj;
        Error.stackTraceLimit = stackTraceLimit;
        return this.clean(stack);
      }
      capture(limit, fn = this.capture) {
        if (typeof limit === "function") {
          fn = limit;
          limit = Infinity;
        }
        const { prepareStackTrace, stackTraceLimit } = Error;
        Error.prepareStackTrace = (obj2, site) => {
          if (this._wrapCallSite) {
            return site.map(this._wrapCallSite);
          }
          return site;
        };
        if (limit) {
          Error.stackTraceLimit = limit;
        }
        const obj = {};
        Error.captureStackTrace(obj, fn);
        const { stack } = obj;
        Object.assign(Error, { prepareStackTrace, stackTraceLimit });
        return stack;
      }
      at(fn = this.at) {
        const [site] = this.capture(1, fn);
        if (!site) {
          return {};
        }
        const res = {
          line: site.getLineNumber(),
          column: site.getColumnNumber()
        };
        setFile(res, site.getFileName(), this._cwd);
        if (site.isConstructor()) {
          Object.defineProperty(res, "constructor", {
            value: true,
            configurable: true
          });
        }
        if (site.isEval()) {
          res.evalOrigin = site.getEvalOrigin();
        }
        if (site.isNative()) {
          res.native = true;
        }
        let typename;
        try {
          typename = site.getTypeName();
        } catch (_) {
        }
        if (typename && typename !== "Object" && typename !== "[object Object]") {
          res.type = typename;
        }
        const fname = site.getFunctionName();
        if (fname) {
          res.function = fname;
        }
        const meth = site.getMethodName();
        if (meth && fname !== meth) {
          res.method = meth;
        }
        return res;
      }
      parseLine(line) {
        const match = line && line.match(re);
        if (!match) {
          return null;
        }
        const ctor = match[1] === "new";
        let fname = match[2];
        const evalOrigin = match[3];
        const evalFile = match[4];
        const evalLine = Number(match[5]);
        const evalCol = Number(match[6]);
        let file = match[7];
        const lnum = match[8];
        const col = match[9];
        const native = match[10] === "native";
        const closeParen = match[11] === ")";
        let method;
        const res = {};
        if (lnum) {
          res.line = Number(lnum);
        }
        if (col) {
          res.column = Number(col);
        }
        if (closeParen && file) {
          let closes = 0;
          for (let i2 = file.length - 1; i2 > 0; i2--) {
            if (file.charAt(i2) === ")") {
              closes++;
            } else if (file.charAt(i2) === "(" && file.charAt(i2 - 1) === " ") {
              closes--;
              if (closes === -1 && file.charAt(i2 - 1) === " ") {
                const before = file.slice(0, i2 - 1);
                const after = file.slice(i2 + 1);
                file = after;
                fname += ` (${before}`;
                break;
              }
            }
          }
        }
        if (fname) {
          const methodMatch = fname.match(methodRe);
          if (methodMatch) {
            fname = methodMatch[1];
            method = methodMatch[2];
          }
        }
        setFile(res, file, this._cwd);
        if (ctor) {
          Object.defineProperty(res, "constructor", {
            value: true,
            configurable: true
          });
        }
        if (evalOrigin) {
          res.evalOrigin = evalOrigin;
          res.evalLine = evalLine;
          res.evalColumn = evalCol;
          res.evalFile = evalFile && evalFile.replace(/\\/g, "/");
        }
        if (native) {
          res.native = true;
        }
        if (fname) {
          res.function = fname;
        }
        if (method && fname !== method) {
          res.method = method;
        }
        return res;
      }
    };
    function setFile(result, filename, cwd3) {
      if (filename) {
        filename = filename.replace(/\\/g, "/");
        if (filename.startsWith(`${cwd3}/`)) {
          filename = filename.slice(cwd3.length + 1);
        }
        result.file = filename;
      }
    }
    function ignoredPackagesRegExp(ignoredPackages) {
      if (ignoredPackages.length === 0) {
        return [];
      }
      const packages = ignoredPackages.map((mod) => escapeStringRegexp2(mod));
      return new RegExp(`[/\\\\]node_modules[/\\\\](?:${packages.join("|")})[/\\\\][^:]+:\\d+:\\d+`);
    }
    var re = new RegExp(
      "^(?:\\s*at )?(?:(new) )?(?:(.*?) \\()?(?:eval at ([^ ]+) \\((.+?):(\\d+):(\\d+)\\), )?(?:(.+?):(\\d+):(\\d+)|(native))(\\)?)$"
    );
    var methodRe = /^(.*?) \[as (.*?)\]$/;
    module2.exports = StackUtils2;
  }
});

// ../shared/build/index_safe.js
var require_index_safe = __commonJS({
  "../shared/build/index_safe.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ObjectKeyMap = void 0;
    __exportStar(require_errors(), exports2);
    __exportStar(require_inheritance(), exports2);
    var ObjectKeyMap_1 = require_ObjectKeyMap();
    Object.defineProperty(exports2, "ObjectKeyMap", { enumerable: true, get: function() {
      return ObjectKeyMap_1.ObjectKeyMap;
    } });
    __exportStar(require_strings2(), exports2);
    __exportStar(require_ThrowingMap(), exports2);
    __exportStar(require_TimedExpectation(), exports2);
    __exportStar(require_types(), exports2);
    __exportStar(require_utils3(), exports2);
    __exportStar(require_wrappingCounter(), exports2);
  }
});

// ../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react-jsx-runtime.production.min.js
var require_react_jsx_runtime_production_min = __commonJS({
  "../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports2) {
    "use strict";
    var f = require_react();
    var k = Symbol.for("react.element");
    var l = Symbol.for("react.fragment");
    var m = Object.prototype.hasOwnProperty;
    var n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
    var p = { key: true, ref: true, __self: true, __source: true };
    function q(c, a, g) {
      var b, d = {}, e = null, h = null;
      void 0 !== g && (e = "" + g);
      void 0 !== a.key && (e = "" + a.key);
      void 0 !== a.ref && (h = a.ref);
      for (b in a)
        m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
      if (c && c.defaultProps)
        for (b in a = c.defaultProps, a)
          void 0 === d[b] && (d[b] = a[b]);
      return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
    }
    exports2.Fragment = l;
    exports2.jsx = q;
    exports2.jsxs = q;
  }
});

// ../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React23 = require_react();
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React23.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type2) {
          if (typeof type2 === "string" || typeof type2 === "function") {
            return true;
          }
          if (type2 === REACT_FRAGMENT_TYPE || type2 === REACT_PROFILER_TYPE || enableDebugTracing || type2 === REACT_STRICT_MODE_TYPE || type2 === REACT_SUSPENSE_TYPE || type2 === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type2 === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type2 === "object" && type2 !== null) {
            if (type2.$$typeof === REACT_LAZY_TYPE || type2.$$typeof === REACT_MEMO_TYPE || type2.$$typeof === REACT_PROVIDER_TYPE || type2.$$typeof === REACT_CONTEXT_TYPE || type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MODULE_REFERENCE || type2.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type2) {
          return type2.displayName || "Context";
        }
        function getComponentNameFromType(type2) {
          if (type2 == null) {
            return null;
          }
          {
            if (typeof type2.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type2 === "function") {
            return type2.displayName || type2.name || null;
          }
          if (typeof type2 === "string") {
            return type2;
          }
          switch (type2) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type2;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type2;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type2, type2.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type2.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type2.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type2, source, ownerFn) {
          if (type2 == null) {
            return "";
          }
          if (typeof type2 === "function") {
            {
              return describeNativeComponentFrame(type2, shouldConstruct(type2));
            }
          }
          if (typeof type2 === "string") {
            return describeBuiltInComponentFrame(type2);
          }
          switch (type2) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type2 === "object") {
            switch (type2.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type2.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type2.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type2;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err2 = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err2.name = "Invariant Violation";
                    throw err2;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type2 = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type2;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown;
        var specialPropRefWarningShown;
        var didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function warnIfStringRefCannotBeAutoConverted(config, self2) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function defineRefPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
        }
        var ReactElement = function(type2, key2, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type2,
            key: key2,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function jsxDEV(type2, config, maybeKey, source, self2) {
          {
            var propName;
            var props = {};
            var key2 = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key2 = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key2 = "" + config.key;
            }
            if (hasValidRef(config)) {
              ref = config.ref;
              warnIfStringRefCannotBeAutoConverted(config, self2);
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
            if (type2 && type2.defaultProps) {
              var defaultProps = type2.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            if (key2 || ref) {
              var displayName = typeof type2 === "function" ? type2.displayName || type2.name || "Unknown" : type2;
              if (key2) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
            return ReactElement(type2, key2, ref, self2, source, ReactCurrentOwner.current, props);
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function isValidElement(object) {
          {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            if (ReactCurrentOwner$1.current) {
              var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function getSourceInfoErrorAddendum(source) {
          {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i2 = 0; i2 < node.length; i2++) {
                var child = node[i2];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type2 = element.type;
            if (type2 === null || type2 === void 0 || typeof type2 === "string") {
              return;
            }
            var propTypes;
            if (typeof type2 === "function") {
              propTypes = type2.propTypes;
            } else if (typeof type2 === "object" && (type2.$$typeof === REACT_FORWARD_REF_TYPE || type2.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type2.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type2);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type2.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type2);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type2.getDefaultProps === "function" && !type2.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key2 = keys[i2];
              if (key2 !== "children" && key2 !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key2);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function jsxWithValidation(type2, props, key2, isStaticChildren, source, self2) {
          {
            var validType = isValidElementType(type2);
            if (!validType) {
              var info = "";
              if (type2 === void 0 || typeof type2 === "object" && type2 !== null && Object.keys(type2).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendum(source);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type2 === null) {
                typeString = "null";
              } else if (isArray(type2)) {
                typeString = "array";
              } else if (type2 !== void 0 && type2.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type2.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type2;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
            var element = jsxDEV(type2, props, key2, source, self2);
            if (element == null) {
              return element;
            }
            if (validType) {
              var children = props.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i2 = 0; i2 < children.length; i2++) {
                      validateChildKeys(children[i2], type2);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type2);
                }
              }
            }
            if (type2 === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
        }
        function jsxWithValidationStatic(type2, props, key2) {
          {
            return jsxWithValidation(type2, props, key2, true);
          }
        }
        function jsxWithValidationDynamic(type2, props, key2) {
          {
            return jsxWithValidation(type2, props, key2, false);
          }
        }
        var jsx27 = jsxWithValidationDynamic;
        var jsxs23 = jsxWithValidationStatic;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.jsx = jsx27;
        exports2.jsxs = jsxs23;
      })();
    }
  }
});

// ../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "../../node_modules/.store/react-npm-18.2.0-1eae08fee2/node_modules/react/jsx-runtime.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_jsx_runtime_production_min();
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// ../../node_modules/.store/cli-spinners-npm-2.7.0-ace95632f5/node_modules/cli-spinners/spinners.json
var require_spinners = __commonJS({
  "../../node_modules/.store/cli-spinners-npm-2.7.0-ace95632f5/node_modules/cli-spinners/spinners.json"(exports2, module2) {
    module2.exports = {
      dots: {
        interval: 80,
        frames: [
          "\u280B",
          "\u2819",
          "\u2839",
          "\u2838",
          "\u283C",
          "\u2834",
          "\u2826",
          "\u2827",
          "\u2807",
          "\u280F"
        ]
      },
      dots2: {
        interval: 80,
        frames: [
          "\u28FE",
          "\u28FD",
          "\u28FB",
          "\u28BF",
          "\u287F",
          "\u28DF",
          "\u28EF",
          "\u28F7"
        ]
      },
      dots3: {
        interval: 80,
        frames: [
          "\u280B",
          "\u2819",
          "\u281A",
          "\u281E",
          "\u2816",
          "\u2826",
          "\u2834",
          "\u2832",
          "\u2833",
          "\u2813"
        ]
      },
      dots4: {
        interval: 80,
        frames: [
          "\u2804",
          "\u2806",
          "\u2807",
          "\u280B",
          "\u2819",
          "\u2838",
          "\u2830",
          "\u2820",
          "\u2830",
          "\u2838",
          "\u2819",
          "\u280B",
          "\u2807",
          "\u2806"
        ]
      },
      dots5: {
        interval: 80,
        frames: [
          "\u280B",
          "\u2819",
          "\u281A",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u2832",
          "\u2834",
          "\u2826",
          "\u2816",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2813",
          "\u280B"
        ]
      },
      dots6: {
        interval: 80,
        frames: [
          "\u2801",
          "\u2809",
          "\u2819",
          "\u281A",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u2832",
          "\u2834",
          "\u2824",
          "\u2804",
          "\u2804",
          "\u2824",
          "\u2834",
          "\u2832",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u281A",
          "\u2819",
          "\u2809",
          "\u2801"
        ]
      },
      dots7: {
        interval: 80,
        frames: [
          "\u2808",
          "\u2809",
          "\u280B",
          "\u2813",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2816",
          "\u2826",
          "\u2824",
          "\u2820",
          "\u2820",
          "\u2824",
          "\u2826",
          "\u2816",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2813",
          "\u280B",
          "\u2809",
          "\u2808"
        ]
      },
      dots8: {
        interval: 80,
        frames: [
          "\u2801",
          "\u2801",
          "\u2809",
          "\u2819",
          "\u281A",
          "\u2812",
          "\u2802",
          "\u2802",
          "\u2812",
          "\u2832",
          "\u2834",
          "\u2824",
          "\u2804",
          "\u2804",
          "\u2824",
          "\u2820",
          "\u2820",
          "\u2824",
          "\u2826",
          "\u2816",
          "\u2812",
          "\u2810",
          "\u2810",
          "\u2812",
          "\u2813",
          "\u280B",
          "\u2809",
          "\u2808",
          "\u2808"
        ]
      },
      dots9: {
        interval: 80,
        frames: [
          "\u28B9",
          "\u28BA",
          "\u28BC",
          "\u28F8",
          "\u28C7",
          "\u2867",
          "\u2857",
          "\u284F"
        ]
      },
      dots10: {
        interval: 80,
        frames: [
          "\u2884",
          "\u2882",
          "\u2881",
          "\u2841",
          "\u2848",
          "\u2850",
          "\u2860"
        ]
      },
      dots11: {
        interval: 100,
        frames: [
          "\u2801",
          "\u2802",
          "\u2804",
          "\u2840",
          "\u2880",
          "\u2820",
          "\u2810",
          "\u2808"
        ]
      },
      dots12: {
        interval: 80,
        frames: [
          "\u2880\u2800",
          "\u2840\u2800",
          "\u2804\u2800",
          "\u2882\u2800",
          "\u2842\u2800",
          "\u2805\u2800",
          "\u2883\u2800",
          "\u2843\u2800",
          "\u280D\u2800",
          "\u288B\u2800",
          "\u284B\u2800",
          "\u280D\u2801",
          "\u288B\u2801",
          "\u284B\u2801",
          "\u280D\u2809",
          "\u280B\u2809",
          "\u280B\u2809",
          "\u2809\u2819",
          "\u2809\u2819",
          "\u2809\u2829",
          "\u2808\u2899",
          "\u2808\u2859",
          "\u2888\u2829",
          "\u2840\u2899",
          "\u2804\u2859",
          "\u2882\u2829",
          "\u2842\u2898",
          "\u2805\u2858",
          "\u2883\u2828",
          "\u2843\u2890",
          "\u280D\u2850",
          "\u288B\u2820",
          "\u284B\u2880",
          "\u280D\u2841",
          "\u288B\u2801",
          "\u284B\u2801",
          "\u280D\u2809",
          "\u280B\u2809",
          "\u280B\u2809",
          "\u2809\u2819",
          "\u2809\u2819",
          "\u2809\u2829",
          "\u2808\u2899",
          "\u2808\u2859",
          "\u2808\u2829",
          "\u2800\u2899",
          "\u2800\u2859",
          "\u2800\u2829",
          "\u2800\u2898",
          "\u2800\u2858",
          "\u2800\u2828",
          "\u2800\u2890",
          "\u2800\u2850",
          "\u2800\u2820",
          "\u2800\u2880",
          "\u2800\u2840"
        ]
      },
      dots13: {
        interval: 80,
        frames: [
          "\u28FC",
          "\u28F9",
          "\u28BB",
          "\u283F",
          "\u285F",
          "\u28CF",
          "\u28E7",
          "\u28F6"
        ]
      },
      dots8Bit: {
        interval: 80,
        frames: [
          "\u2800",
          "\u2801",
          "\u2802",
          "\u2803",
          "\u2804",
          "\u2805",
          "\u2806",
          "\u2807",
          "\u2840",
          "\u2841",
          "\u2842",
          "\u2843",
          "\u2844",
          "\u2845",
          "\u2846",
          "\u2847",
          "\u2808",
          "\u2809",
          "\u280A",
          "\u280B",
          "\u280C",
          "\u280D",
          "\u280E",
          "\u280F",
          "\u2848",
          "\u2849",
          "\u284A",
          "\u284B",
          "\u284C",
          "\u284D",
          "\u284E",
          "\u284F",
          "\u2810",
          "\u2811",
          "\u2812",
          "\u2813",
          "\u2814",
          "\u2815",
          "\u2816",
          "\u2817",
          "\u2850",
          "\u2851",
          "\u2852",
          "\u2853",
          "\u2854",
          "\u2855",
          "\u2856",
          "\u2857",
          "\u2818",
          "\u2819",
          "\u281A",
          "\u281B",
          "\u281C",
          "\u281D",
          "\u281E",
          "\u281F",
          "\u2858",
          "\u2859",
          "\u285A",
          "\u285B",
          "\u285C",
          "\u285D",
          "\u285E",
          "\u285F",
          "\u2820",
          "\u2821",
          "\u2822",
          "\u2823",
          "\u2824",
          "\u2825",
          "\u2826",
          "\u2827",
          "\u2860",
          "\u2861",
          "\u2862",
          "\u2863",
          "\u2864",
          "\u2865",
          "\u2866",
          "\u2867",
          "\u2828",
          "\u2829",
          "\u282A",
          "\u282B",
          "\u282C",
          "\u282D",
          "\u282E",
          "\u282F",
          "\u2868",
          "\u2869",
          "\u286A",
          "\u286B",
          "\u286C",
          "\u286D",
          "\u286E",
          "\u286F",
          "\u2830",
          "\u2831",
          "\u2832",
          "\u2833",
          "\u2834",
          "\u2835",
          "\u2836",
          "\u2837",
          "\u2870",
          "\u2871",
          "\u2872",
          "\u2873",
          "\u2874",
          "\u2875",
          "\u2876",
          "\u2877",
          "\u2838",
          "\u2839",
          "\u283A",
          "\u283B",
          "\u283C",
          "\u283D",
          "\u283E",
          "\u283F",
          "\u2878",
          "\u2879",
          "\u287A",
          "\u287B",
          "\u287C",
          "\u287D",
          "\u287E",
          "\u287F",
          "\u2880",
          "\u2881",
          "\u2882",
          "\u2883",
          "\u2884",
          "\u2885",
          "\u2886",
          "\u2887",
          "\u28C0",
          "\u28C1",
          "\u28C2",
          "\u28C3",
          "\u28C4",
          "\u28C5",
          "\u28C6",
          "\u28C7",
          "\u2888",
          "\u2889",
          "\u288A",
          "\u288B",
          "\u288C",
          "\u288D",
          "\u288E",
          "\u288F",
          "\u28C8",
          "\u28C9",
          "\u28CA",
          "\u28CB",
          "\u28CC",
          "\u28CD",
          "\u28CE",
          "\u28CF",
          "\u2890",
          "\u2891",
          "\u2892",
          "\u2893",
          "\u2894",
          "\u2895",
          "\u2896",
          "\u2897",
          "\u28D0",
          "\u28D1",
          "\u28D2",
          "\u28D3",
          "\u28D4",
          "\u28D5",
          "\u28D6",
          "\u28D7",
          "\u2898",
          "\u2899",
          "\u289A",
          "\u289B",
          "\u289C",
          "\u289D",
          "\u289E",
          "\u289F",
          "\u28D8",
          "\u28D9",
          "\u28DA",
          "\u28DB",
          "\u28DC",
          "\u28DD",
          "\u28DE",
          "\u28DF",
          "\u28A0",
          "\u28A1",
          "\u28A2",
          "\u28A3",
          "\u28A4",
          "\u28A5",
          "\u28A6",
          "\u28A7",
          "\u28E0",
          "\u28E1",
          "\u28E2",
          "\u28E3",
          "\u28E4",
          "\u28E5",
          "\u28E6",
          "\u28E7",
          "\u28A8",
          "\u28A9",
          "\u28AA",
          "\u28AB",
          "\u28AC",
          "\u28AD",
          "\u28AE",
          "\u28AF",
          "\u28E8",
          "\u28E9",
          "\u28EA",
          "\u28EB",
          "\u28EC",
          "\u28ED",
          "\u28EE",
          "\u28EF",
          "\u28B0",
          "\u28B1",
          "\u28B2",
          "\u28B3",
          "\u28B4",
          "\u28B5",
          "\u28B6",
          "\u28B7",
          "\u28F0",
          "\u28F1",
          "\u28F2",
          "\u28F3",
          "\u28F4",
          "\u28F5",
          "\u28F6",
          "\u28F7",
          "\u28B8",
          "\u28B9",
          "\u28BA",
          "\u28BB",
          "\u28BC",
          "\u28BD",
          "\u28BE",
          "\u28BF",
          "\u28F8",
          "\u28F9",
          "\u28FA",
          "\u28FB",
          "\u28FC",
          "\u28FD",
          "\u28FE",
          "\u28FF"
        ]
      },
      sand: {
        interval: 80,
        frames: [
          "\u2801",
          "\u2802",
          "\u2804",
          "\u2840",
          "\u2848",
          "\u2850",
          "\u2860",
          "\u28C0",
          "\u28C1",
          "\u28C2",
          "\u28C4",
          "\u28CC",
          "\u28D4",
          "\u28E4",
          "\u28E5",
          "\u28E6",
          "\u28EE",
          "\u28F6",
          "\u28F7",
          "\u28FF",
          "\u287F",
          "\u283F",
          "\u289F",
          "\u281F",
          "\u285B",
          "\u281B",
          "\u282B",
          "\u288B",
          "\u280B",
          "\u280D",
          "\u2849",
          "\u2809",
          "\u2811",
          "\u2821",
          "\u2881"
        ]
      },
      line: {
        interval: 130,
        frames: [
          "-",
          "\\",
          "|",
          "/"
        ]
      },
      line2: {
        interval: 100,
        frames: [
          "\u2802",
          "-",
          "\u2013",
          "\u2014",
          "\u2013",
          "-"
        ]
      },
      pipe: {
        interval: 100,
        frames: [
          "\u2524",
          "\u2518",
          "\u2534",
          "\u2514",
          "\u251C",
          "\u250C",
          "\u252C",
          "\u2510"
        ]
      },
      simpleDots: {
        interval: 400,
        frames: [
          ".  ",
          ".. ",
          "...",
          "   "
        ]
      },
      simpleDotsScrolling: {
        interval: 200,
        frames: [
          ".  ",
          ".. ",
          "...",
          " ..",
          "  .",
          "   "
        ]
      },
      star: {
        interval: 70,
        frames: [
          "\u2736",
          "\u2738",
          "\u2739",
          "\u273A",
          "\u2739",
          "\u2737"
        ]
      },
      star2: {
        interval: 80,
        frames: [
          "+",
          "x",
          "*"
        ]
      },
      flip: {
        interval: 70,
        frames: [
          "_",
          "_",
          "_",
          "-",
          "`",
          "`",
          "'",
          "\xB4",
          "-",
          "_",
          "_",
          "_"
        ]
      },
      hamburger: {
        interval: 100,
        frames: [
          "\u2631",
          "\u2632",
          "\u2634"
        ]
      },
      growVertical: {
        interval: 120,
        frames: [
          "\u2581",
          "\u2583",
          "\u2584",
          "\u2585",
          "\u2586",
          "\u2587",
          "\u2586",
          "\u2585",
          "\u2584",
          "\u2583"
        ]
      },
      growHorizontal: {
        interval: 120,
        frames: [
          "\u258F",
          "\u258E",
          "\u258D",
          "\u258C",
          "\u258B",
          "\u258A",
          "\u2589",
          "\u258A",
          "\u258B",
          "\u258C",
          "\u258D",
          "\u258E"
        ]
      },
      balloon: {
        interval: 140,
        frames: [
          " ",
          ".",
          "o",
          "O",
          "@",
          "*",
          " "
        ]
      },
      balloon2: {
        interval: 120,
        frames: [
          ".",
          "o",
          "O",
          "\xB0",
          "O",
          "o",
          "."
        ]
      },
      noise: {
        interval: 100,
        frames: [
          "\u2593",
          "\u2592",
          "\u2591"
        ]
      },
      bounce: {
        interval: 120,
        frames: [
          "\u2801",
          "\u2802",
          "\u2804",
          "\u2802"
        ]
      },
      boxBounce: {
        interval: 120,
        frames: [
          "\u2596",
          "\u2598",
          "\u259D",
          "\u2597"
        ]
      },
      boxBounce2: {
        interval: 100,
        frames: [
          "\u258C",
          "\u2580",
          "\u2590",
          "\u2584"
        ]
      },
      triangle: {
        interval: 50,
        frames: [
          "\u25E2",
          "\u25E3",
          "\u25E4",
          "\u25E5"
        ]
      },
      arc: {
        interval: 100,
        frames: [
          "\u25DC",
          "\u25E0",
          "\u25DD",
          "\u25DE",
          "\u25E1",
          "\u25DF"
        ]
      },
      circle: {
        interval: 120,
        frames: [
          "\u25E1",
          "\u2299",
          "\u25E0"
        ]
      },
      squareCorners: {
        interval: 180,
        frames: [
          "\u25F0",
          "\u25F3",
          "\u25F2",
          "\u25F1"
        ]
      },
      circleQuarters: {
        interval: 120,
        frames: [
          "\u25F4",
          "\u25F7",
          "\u25F6",
          "\u25F5"
        ]
      },
      circleHalves: {
        interval: 50,
        frames: [
          "\u25D0",
          "\u25D3",
          "\u25D1",
          "\u25D2"
        ]
      },
      squish: {
        interval: 100,
        frames: [
          "\u256B",
          "\u256A"
        ]
      },
      toggle: {
        interval: 250,
        frames: [
          "\u22B6",
          "\u22B7"
        ]
      },
      toggle2: {
        interval: 80,
        frames: [
          "\u25AB",
          "\u25AA"
        ]
      },
      toggle3: {
        interval: 120,
        frames: [
          "\u25A1",
          "\u25A0"
        ]
      },
      toggle4: {
        interval: 100,
        frames: [
          "\u25A0",
          "\u25A1",
          "\u25AA",
          "\u25AB"
        ]
      },
      toggle5: {
        interval: 100,
        frames: [
          "\u25AE",
          "\u25AF"
        ]
      },
      toggle6: {
        interval: 300,
        frames: [
          "\u101D",
          "\u1040"
        ]
      },
      toggle7: {
        interval: 80,
        frames: [
          "\u29BE",
          "\u29BF"
        ]
      },
      toggle8: {
        interval: 100,
        frames: [
          "\u25CD",
          "\u25CC"
        ]
      },
      toggle9: {
        interval: 100,
        frames: [
          "\u25C9",
          "\u25CE"
        ]
      },
      toggle10: {
        interval: 100,
        frames: [
          "\u3282",
          "\u3280",
          "\u3281"
        ]
      },
      toggle11: {
        interval: 50,
        frames: [
          "\u29C7",
          "\u29C6"
        ]
      },
      toggle12: {
        interval: 120,
        frames: [
          "\u2617",
          "\u2616"
        ]
      },
      toggle13: {
        interval: 80,
        frames: [
          "=",
          "*",
          "-"
        ]
      },
      arrow: {
        interval: 100,
        frames: [
          "\u2190",
          "\u2196",
          "\u2191",
          "\u2197",
          "\u2192",
          "\u2198",
          "\u2193",
          "\u2199"
        ]
      },
      arrow2: {
        interval: 80,
        frames: [
          "\u2B06\uFE0F ",
          "\u2197\uFE0F ",
          "\u27A1\uFE0F ",
          "\u2198\uFE0F ",
          "\u2B07\uFE0F ",
          "\u2199\uFE0F ",
          "\u2B05\uFE0F ",
          "\u2196\uFE0F "
        ]
      },
      arrow3: {
        interval: 120,
        frames: [
          "\u25B9\u25B9\u25B9\u25B9\u25B9",
          "\u25B8\u25B9\u25B9\u25B9\u25B9",
          "\u25B9\u25B8\u25B9\u25B9\u25B9",
          "\u25B9\u25B9\u25B8\u25B9\u25B9",
          "\u25B9\u25B9\u25B9\u25B8\u25B9",
          "\u25B9\u25B9\u25B9\u25B9\u25B8"
        ]
      },
      bouncingBar: {
        interval: 80,
        frames: [
          "[    ]",
          "[=   ]",
          "[==  ]",
          "[=== ]",
          "[ ===]",
          "[  ==]",
          "[   =]",
          "[    ]",
          "[   =]",
          "[  ==]",
          "[ ===]",
          "[====]",
          "[=== ]",
          "[==  ]",
          "[=   ]"
        ]
      },
      bouncingBall: {
        interval: 80,
        frames: [
          "( \u25CF    )",
          "(  \u25CF   )",
          "(   \u25CF  )",
          "(    \u25CF )",
          "(     \u25CF)",
          "(    \u25CF )",
          "(   \u25CF  )",
          "(  \u25CF   )",
          "( \u25CF    )",
          "(\u25CF     )"
        ]
      },
      smiley: {
        interval: 200,
        frames: [
          "\u{1F604} ",
          "\u{1F61D} "
        ]
      },
      monkey: {
        interval: 300,
        frames: [
          "\u{1F648} ",
          "\u{1F648} ",
          "\u{1F649} ",
          "\u{1F64A} "
        ]
      },
      hearts: {
        interval: 100,
        frames: [
          "\u{1F49B} ",
          "\u{1F499} ",
          "\u{1F49C} ",
          "\u{1F49A} ",
          "\u2764\uFE0F "
        ]
      },
      clock: {
        interval: 100,
        frames: [
          "\u{1F55B} ",
          "\u{1F550} ",
          "\u{1F551} ",
          "\u{1F552} ",
          "\u{1F553} ",
          "\u{1F554} ",
          "\u{1F555} ",
          "\u{1F556} ",
          "\u{1F557} ",
          "\u{1F558} ",
          "\u{1F559} ",
          "\u{1F55A} "
        ]
      },
      earth: {
        interval: 180,
        frames: [
          "\u{1F30D} ",
          "\u{1F30E} ",
          "\u{1F30F} "
        ]
      },
      material: {
        interval: 17,
        frames: [
          "\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
          "\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2588",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581",
          "\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581\u2581"
        ]
      },
      moon: {
        interval: 80,
        frames: [
          "\u{1F311} ",
          "\u{1F312} ",
          "\u{1F313} ",
          "\u{1F314} ",
          "\u{1F315} ",
          "\u{1F316} ",
          "\u{1F317} ",
          "\u{1F318} "
        ]
      },
      runner: {
        interval: 140,
        frames: [
          "\u{1F6B6} ",
          "\u{1F3C3} "
        ]
      },
      pong: {
        interval: 80,
        frames: [
          "\u2590\u2802       \u258C",
          "\u2590\u2808       \u258C",
          "\u2590 \u2802      \u258C",
          "\u2590 \u2820      \u258C",
          "\u2590  \u2840     \u258C",
          "\u2590  \u2820     \u258C",
          "\u2590   \u2802    \u258C",
          "\u2590   \u2808    \u258C",
          "\u2590    \u2802   \u258C",
          "\u2590    \u2820   \u258C",
          "\u2590     \u2840  \u258C",
          "\u2590     \u2820  \u258C",
          "\u2590      \u2802 \u258C",
          "\u2590      \u2808 \u258C",
          "\u2590       \u2802\u258C",
          "\u2590       \u2820\u258C",
          "\u2590       \u2840\u258C",
          "\u2590      \u2820 \u258C",
          "\u2590      \u2802 \u258C",
          "\u2590     \u2808  \u258C",
          "\u2590     \u2802  \u258C",
          "\u2590    \u2820   \u258C",
          "\u2590    \u2840   \u258C",
          "\u2590   \u2820    \u258C",
          "\u2590   \u2802    \u258C",
          "\u2590  \u2808     \u258C",
          "\u2590  \u2802     \u258C",
          "\u2590 \u2820      \u258C",
          "\u2590 \u2840      \u258C",
          "\u2590\u2820       \u258C"
        ]
      },
      shark: {
        interval: 120,
        frames: [
          "\u2590|\\____________\u258C",
          "\u2590_|\\___________\u258C",
          "\u2590__|\\__________\u258C",
          "\u2590___|\\_________\u258C",
          "\u2590____|\\________\u258C",
          "\u2590_____|\\_______\u258C",
          "\u2590______|\\______\u258C",
          "\u2590_______|\\_____\u258C",
          "\u2590________|\\____\u258C",
          "\u2590_________|\\___\u258C",
          "\u2590__________|\\__\u258C",
          "\u2590___________|\\_\u258C",
          "\u2590____________|\\\u258C",
          "\u2590____________/|\u258C",
          "\u2590___________/|_\u258C",
          "\u2590__________/|__\u258C",
          "\u2590_________/|___\u258C",
          "\u2590________/|____\u258C",
          "\u2590_______/|_____\u258C",
          "\u2590______/|______\u258C",
          "\u2590_____/|_______\u258C",
          "\u2590____/|________\u258C",
          "\u2590___/|_________\u258C",
          "\u2590__/|__________\u258C",
          "\u2590_/|___________\u258C",
          "\u2590/|____________\u258C"
        ]
      },
      dqpb: {
        interval: 100,
        frames: [
          "d",
          "q",
          "p",
          "b"
        ]
      },
      weather: {
        interval: 100,
        frames: [
          "\u2600\uFE0F ",
          "\u2600\uFE0F ",
          "\u2600\uFE0F ",
          "\u{1F324} ",
          "\u26C5\uFE0F ",
          "\u{1F325} ",
          "\u2601\uFE0F ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u26C8 ",
          "\u{1F328} ",
          "\u{1F327} ",
          "\u{1F328} ",
          "\u2601\uFE0F ",
          "\u{1F325} ",
          "\u26C5\uFE0F ",
          "\u{1F324} ",
          "\u2600\uFE0F ",
          "\u2600\uFE0F "
        ]
      },
      christmas: {
        interval: 400,
        frames: [
          "\u{1F332}",
          "\u{1F384}"
        ]
      },
      grenade: {
        interval: 80,
        frames: [
          "\u060C  ",
          "\u2032  ",
          " \xB4 ",
          " \u203E ",
          "  \u2E0C",
          "  \u2E0A",
          "  |",
          "  \u204E",
          "  \u2055",
          " \u0DF4 ",
          "  \u2053",
          "   ",
          "   ",
          "   "
        ]
      },
      point: {
        interval: 125,
        frames: [
          "\u2219\u2219\u2219",
          "\u25CF\u2219\u2219",
          "\u2219\u25CF\u2219",
          "\u2219\u2219\u25CF",
          "\u2219\u2219\u2219"
        ]
      },
      layer: {
        interval: 150,
        frames: [
          "-",
          "=",
          "\u2261"
        ]
      },
      betaWave: {
        interval: 80,
        frames: [
          "\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2",
          "\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2\u03B2",
          "\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2\u03B2",
          "\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2\u03B2",
          "\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2\u03B2",
          "\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1\u03B2",
          "\u03B2\u03B2\u03B2\u03B2\u03B2\u03B2\u03C1"
        ]
      },
      fingerDance: {
        interval: 160,
        frames: [
          "\u{1F918} ",
          "\u{1F91F} ",
          "\u{1F596} ",
          "\u270B ",
          "\u{1F91A} ",
          "\u{1F446} "
        ]
      },
      fistBump: {
        interval: 80,
        frames: [
          "\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ",
          "\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ",
          "\u{1F91C}\u3000\u3000\u3000\u3000\u{1F91B} ",
          "\u3000\u{1F91C}\u3000\u3000\u{1F91B}\u3000 ",
          "\u3000\u3000\u{1F91C}\u{1F91B}\u3000\u3000 ",
          "\u3000\u{1F91C}\u2728\u{1F91B}\u3000\u3000 ",
          "\u{1F91C}\u3000\u2728\u3000\u{1F91B}\u3000 "
        ]
      },
      soccerHeader: {
        interval: 80,
        frames: [
          " \u{1F9D1}\u26BD\uFE0F       \u{1F9D1} ",
          "\u{1F9D1}  \u26BD\uFE0F      \u{1F9D1} ",
          "\u{1F9D1}   \u26BD\uFE0F     \u{1F9D1} ",
          "\u{1F9D1}    \u26BD\uFE0F    \u{1F9D1} ",
          "\u{1F9D1}     \u26BD\uFE0F   \u{1F9D1} ",
          "\u{1F9D1}      \u26BD\uFE0F  \u{1F9D1} ",
          "\u{1F9D1}       \u26BD\uFE0F\u{1F9D1}  ",
          "\u{1F9D1}      \u26BD\uFE0F  \u{1F9D1} ",
          "\u{1F9D1}     \u26BD\uFE0F   \u{1F9D1} ",
          "\u{1F9D1}    \u26BD\uFE0F    \u{1F9D1} ",
          "\u{1F9D1}   \u26BD\uFE0F     \u{1F9D1} ",
          "\u{1F9D1}  \u26BD\uFE0F      \u{1F9D1} "
        ]
      },
      mindblown: {
        interval: 160,
        frames: [
          "\u{1F610} ",
          "\u{1F610} ",
          "\u{1F62E} ",
          "\u{1F62E} ",
          "\u{1F626} ",
          "\u{1F626} ",
          "\u{1F627} ",
          "\u{1F627} ",
          "\u{1F92F} ",
          "\u{1F4A5} ",
          "\u2728 ",
          "\u3000 ",
          "\u3000 ",
          "\u3000 "
        ]
      },
      speaker: {
        interval: 160,
        frames: [
          "\u{1F508} ",
          "\u{1F509} ",
          "\u{1F50A} ",
          "\u{1F509} "
        ]
      },
      orangePulse: {
        interval: 100,
        frames: [
          "\u{1F538} ",
          "\u{1F536} ",
          "\u{1F7E0} ",
          "\u{1F7E0} ",
          "\u{1F536} "
        ]
      },
      bluePulse: {
        interval: 100,
        frames: [
          "\u{1F539} ",
          "\u{1F537} ",
          "\u{1F535} ",
          "\u{1F535} ",
          "\u{1F537} "
        ]
      },
      orangeBluePulse: {
        interval: 100,
        frames: [
          "\u{1F538} ",
          "\u{1F536} ",
          "\u{1F7E0} ",
          "\u{1F7E0} ",
          "\u{1F536} ",
          "\u{1F539} ",
          "\u{1F537} ",
          "\u{1F535} ",
          "\u{1F535} ",
          "\u{1F537} "
        ]
      },
      timeTravel: {
        interval: 100,
        frames: [
          "\u{1F55B} ",
          "\u{1F55A} ",
          "\u{1F559} ",
          "\u{1F558} ",
          "\u{1F557} ",
          "\u{1F556} ",
          "\u{1F555} ",
          "\u{1F554} ",
          "\u{1F553} ",
          "\u{1F552} ",
          "\u{1F551} ",
          "\u{1F550} "
        ]
      },
      aesthetic: {
        interval: 80,
        frames: [
          "\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B1",
          "\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0\u25B0",
          "\u25B0\u25B1\u25B1\u25B1\u25B1\u25B1\u25B1"
        ]
      }
    };
  }
});

// ../../node_modules/.store/cli-spinners-npm-2.7.0-ace95632f5/node_modules/cli-spinners/index.js
var require_cli_spinners = __commonJS({
  "../../node_modules/.store/cli-spinners-npm-2.7.0-ace95632f5/node_modules/cli-spinners/index.js"(exports2, module2) {
    "use strict";
    var spinners2 = Object.assign({}, require_spinners());
    var spinnersList = Object.keys(spinners2);
    Object.defineProperty(spinners2, "random", {
      get() {
        const randomIndex = Math.floor(Math.random() * spinnersList.length);
        const spinnerName = spinnersList[randomIndex];
        return spinners2[spinnerName];
      }
    });
    module2.exports = spinners2;
  }
});

// ../core/build/abstractions/ICommandClass.js
var require_ICommandClass = __commonJS({
  "../core/build/abstractions/ICommandClass.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../core/build/abstractions/IZWaveEndpoint.js
var require_IZWaveEndpoint = __commonJS({
  "../core/build/abstractions/IZWaveEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../core/build/abstractions/IZWaveNode.js
var require_IZWaveNode = __commonJS({
  "../core/build/abstractions/IZWaveNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../core/build/capabilities/CommandClasses.js
var require_CommandClasses = __commonJS({
  "../core/build/capabilities/CommandClasses.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nonApplicationCCs = exports2.managementCCs = exports2.encapsulationCCs = exports2.applicationCCs = exports2.sensorCCs = exports2.actuatorCCs = exports2.allCCs = exports2.getCCName = exports2.CommandClasses = void 0;
    var safe_1 = require_index_safe();
    var CommandClasses;
    (function(CommandClasses2) {
      CommandClasses2[CommandClasses2["Alarm Sensor"] = 156] = "Alarm Sensor";
      CommandClasses2[CommandClasses2["Alarm Silence"] = 157] = "Alarm Silence";
      CommandClasses2[CommandClasses2["All Switch"] = 39] = "All Switch";
      CommandClasses2[CommandClasses2["Anti-Theft"] = 93] = "Anti-Theft";
      CommandClasses2[CommandClasses2["Anti-Theft Unlock"] = 126] = "Anti-Theft Unlock";
      CommandClasses2[CommandClasses2["Application Capability"] = 87] = "Application Capability";
      CommandClasses2[CommandClasses2["Application Status"] = 34] = "Application Status";
      CommandClasses2[CommandClasses2["Association"] = 133] = "Association";
      CommandClasses2[CommandClasses2["Association Command Configuration"] = 155] = "Association Command Configuration";
      CommandClasses2[CommandClasses2["Association Group Information"] = 89] = "Association Group Information";
      CommandClasses2[CommandClasses2["Authentication"] = 161] = "Authentication";
      CommandClasses2[CommandClasses2["Authentication Media Write"] = 162] = "Authentication Media Write";
      CommandClasses2[CommandClasses2["Barrier Operator"] = 102] = "Barrier Operator";
      CommandClasses2[CommandClasses2["Basic"] = 32] = "Basic";
      CommandClasses2[CommandClasses2["Basic Tariff Information"] = 54] = "Basic Tariff Information";
      CommandClasses2[CommandClasses2["Basic Window Covering"] = 80] = "Basic Window Covering";
      CommandClasses2[CommandClasses2["Battery"] = 128] = "Battery";
      CommandClasses2[CommandClasses2["Binary Sensor"] = 48] = "Binary Sensor";
      CommandClasses2[CommandClasses2["Binary Switch"] = 37] = "Binary Switch";
      CommandClasses2[CommandClasses2["Binary Toggle Switch"] = 40] = "Binary Toggle Switch";
      CommandClasses2[CommandClasses2["Climate Control Schedule"] = 70] = "Climate Control Schedule";
      CommandClasses2[CommandClasses2["Central Scene"] = 91] = "Central Scene";
      CommandClasses2[CommandClasses2["Clock"] = 129] = "Clock";
      CommandClasses2[CommandClasses2["Color Switch"] = 51] = "Color Switch";
      CommandClasses2[CommandClasses2["Configuration"] = 112] = "Configuration";
      CommandClasses2[CommandClasses2["Controller Replication"] = 33] = "Controller Replication";
      CommandClasses2[CommandClasses2["CRC-16 Encapsulation"] = 86] = "CRC-16 Encapsulation";
      CommandClasses2[CommandClasses2["Demand Control Plan Configuration"] = 58] = "Demand Control Plan Configuration";
      CommandClasses2[CommandClasses2["Demand Control Plan Monitor"] = 59] = "Demand Control Plan Monitor";
      CommandClasses2[CommandClasses2["Device Reset Locally"] = 90] = "Device Reset Locally";
      CommandClasses2[CommandClasses2["Door Lock"] = 98] = "Door Lock";
      CommandClasses2[CommandClasses2["Door Lock Logging"] = 76] = "Door Lock Logging";
      CommandClasses2[CommandClasses2["Energy Production"] = 144] = "Energy Production";
      CommandClasses2[CommandClasses2["Entry Control"] = 111] = "Entry Control";
      CommandClasses2[CommandClasses2["Firmware Update Meta Data"] = 122] = "Firmware Update Meta Data";
      CommandClasses2[CommandClasses2["Generic Schedule"] = 163] = "Generic Schedule";
      CommandClasses2[CommandClasses2["Geographic Location"] = 140] = "Geographic Location";
      CommandClasses2[CommandClasses2["Grouping Name"] = 123] = "Grouping Name";
      CommandClasses2[CommandClasses2["Hail"] = 130] = "Hail";
      CommandClasses2[CommandClasses2["HRV Status"] = 55] = "HRV Status";
      CommandClasses2[CommandClasses2["HRV Control"] = 57] = "HRV Control";
      CommandClasses2[CommandClasses2["Humidity Control Mode"] = 109] = "Humidity Control Mode";
      CommandClasses2[CommandClasses2["Humidity Control Operating State"] = 110] = "Humidity Control Operating State";
      CommandClasses2[CommandClasses2["Humidity Control Setpoint"] = 100] = "Humidity Control Setpoint";
      CommandClasses2[CommandClasses2["Inclusion Controller"] = 116] = "Inclusion Controller";
      CommandClasses2[CommandClasses2["Indicator"] = 135] = "Indicator";
      CommandClasses2[CommandClasses2["IP Association"] = 92] = "IP Association";
      CommandClasses2[CommandClasses2["IP Configuration"] = 154] = "IP Configuration";
      CommandClasses2[CommandClasses2["IR Repeater"] = 160] = "IR Repeater";
      CommandClasses2[CommandClasses2["Irrigation"] = 107] = "Irrigation";
      CommandClasses2[CommandClasses2["Language"] = 137] = "Language";
      CommandClasses2[CommandClasses2["Lock"] = 118] = "Lock";
      CommandClasses2[CommandClasses2["Mailbox"] = 105] = "Mailbox";
      CommandClasses2[CommandClasses2["Manufacturer Proprietary"] = 145] = "Manufacturer Proprietary";
      CommandClasses2[CommandClasses2["Manufacturer Specific"] = 114] = "Manufacturer Specific";
      CommandClasses2[CommandClasses2["Support/Control Mark"] = 239] = "Support/Control Mark";
      CommandClasses2[CommandClasses2["Meter"] = 50] = "Meter";
      CommandClasses2[CommandClasses2["Meter Table Configuration"] = 60] = "Meter Table Configuration";
      CommandClasses2[CommandClasses2["Meter Table Monitor"] = 61] = "Meter Table Monitor";
      CommandClasses2[CommandClasses2["Meter Table Push Configuration"] = 62] = "Meter Table Push Configuration";
      CommandClasses2[CommandClasses2["Move To Position Window Covering"] = 81] = "Move To Position Window Covering";
      CommandClasses2[CommandClasses2["Multi Channel"] = 96] = "Multi Channel";
      CommandClasses2[CommandClasses2["Multi Channel Association"] = 142] = "Multi Channel Association";
      CommandClasses2[CommandClasses2["Multi Command"] = 143] = "Multi Command";
      CommandClasses2[CommandClasses2["Multilevel Sensor"] = 49] = "Multilevel Sensor";
      CommandClasses2[CommandClasses2["Multilevel Switch"] = 38] = "Multilevel Switch";
      CommandClasses2[CommandClasses2["Multilevel Toggle Switch"] = 41] = "Multilevel Toggle Switch";
      CommandClasses2[CommandClasses2["Network Management Basic Node"] = 77] = "Network Management Basic Node";
      CommandClasses2[CommandClasses2["Network Management Inclusion"] = 52] = "Network Management Inclusion";
      CommandClasses2[CommandClasses2["Network Management Installation and Maintenance"] = 103] = "Network Management Installation and Maintenance";
      CommandClasses2[CommandClasses2["Network Management Primary"] = 84] = "Network Management Primary";
      CommandClasses2[CommandClasses2["Network Management Proxy"] = 82] = "Network Management Proxy";
      CommandClasses2[CommandClasses2["No Operation"] = 0] = "No Operation";
      CommandClasses2[CommandClasses2["Node Naming and Location"] = 119] = "Node Naming and Location";
      CommandClasses2[CommandClasses2["Node Provisioning"] = 120] = "Node Provisioning";
      CommandClasses2[CommandClasses2["Notification"] = 113] = "Notification";
      CommandClasses2[CommandClasses2["Powerlevel"] = 115] = "Powerlevel";
      CommandClasses2[CommandClasses2["Prepayment"] = 63] = "Prepayment";
      CommandClasses2[CommandClasses2["Prepayment Encapsulation"] = 65] = "Prepayment Encapsulation";
      CommandClasses2[CommandClasses2["Proprietary"] = 136] = "Proprietary";
      CommandClasses2[CommandClasses2["Protection"] = 117] = "Protection";
      CommandClasses2[CommandClasses2["Pulse Meter"] = 53] = "Pulse Meter";
      CommandClasses2[CommandClasses2["Rate Table Configuration"] = 72] = "Rate Table Configuration";
      CommandClasses2[CommandClasses2["Rate Table Monitor"] = 73] = "Rate Table Monitor";
      CommandClasses2[CommandClasses2["Remote Association Activation"] = 124] = "Remote Association Activation";
      CommandClasses2[CommandClasses2["Remote Association Configuration"] = 125] = "Remote Association Configuration";
      CommandClasses2[CommandClasses2["Scene Activation"] = 43] = "Scene Activation";
      CommandClasses2[CommandClasses2["Scene Actuator Configuration"] = 44] = "Scene Actuator Configuration";
      CommandClasses2[CommandClasses2["Scene Controller Configuration"] = 45] = "Scene Controller Configuration";
      CommandClasses2[CommandClasses2["Schedule"] = 83] = "Schedule";
      CommandClasses2[CommandClasses2["Schedule Entry Lock"] = 78] = "Schedule Entry Lock";
      CommandClasses2[CommandClasses2["Screen Attributes"] = 147] = "Screen Attributes";
      CommandClasses2[CommandClasses2["Screen Meta Data"] = 146] = "Screen Meta Data";
      CommandClasses2[CommandClasses2["Security"] = 152] = "Security";
      CommandClasses2[CommandClasses2["Security 2"] = 159] = "Security 2";
      CommandClasses2[CommandClasses2["Security Mark"] = 61696] = "Security Mark";
      CommandClasses2[CommandClasses2["Sensor Configuration"] = 158] = "Sensor Configuration";
      CommandClasses2[CommandClasses2["Simple AV Control"] = 148] = "Simple AV Control";
      CommandClasses2[CommandClasses2["Sound Switch"] = 121] = "Sound Switch";
      CommandClasses2[CommandClasses2["Supervision"] = 108] = "Supervision";
      CommandClasses2[CommandClasses2["Tariff Table Configuration"] = 74] = "Tariff Table Configuration";
      CommandClasses2[CommandClasses2["Tariff Table Monitor"] = 75] = "Tariff Table Monitor";
      CommandClasses2[CommandClasses2["Thermostat Fan Mode"] = 68] = "Thermostat Fan Mode";
      CommandClasses2[CommandClasses2["Thermostat Fan State"] = 69] = "Thermostat Fan State";
      CommandClasses2[CommandClasses2["Thermostat Mode"] = 64] = "Thermostat Mode";
      CommandClasses2[CommandClasses2["Thermostat Operating State"] = 66] = "Thermostat Operating State";
      CommandClasses2[CommandClasses2["Thermostat Setback"] = 71] = "Thermostat Setback";
      CommandClasses2[CommandClasses2["Thermostat Setpoint"] = 67] = "Thermostat Setpoint";
      CommandClasses2[CommandClasses2["Time"] = 138] = "Time";
      CommandClasses2[CommandClasses2["Time Parameters"] = 139] = "Time Parameters";
      CommandClasses2[CommandClasses2["Transport Service"] = 85] = "Transport Service";
      CommandClasses2[CommandClasses2["User Code"] = 99] = "User Code";
      CommandClasses2[CommandClasses2["Version"] = 134] = "Version";
      CommandClasses2[CommandClasses2["Wake Up"] = 132] = "Wake Up";
      CommandClasses2[CommandClasses2["Window Covering"] = 106] = "Window Covering";
      CommandClasses2[CommandClasses2["Z/IP"] = 35] = "Z/IP";
      CommandClasses2[CommandClasses2["Z/IP 6LoWPAN"] = 79] = "Z/IP 6LoWPAN";
      CommandClasses2[CommandClasses2["Z/IP Gateway"] = 95] = "Z/IP Gateway";
      CommandClasses2[CommandClasses2["Z/IP Naming and Location"] = 104] = "Z/IP Naming and Location";
      CommandClasses2[CommandClasses2["Z/IP ND"] = 88] = "Z/IP ND";
      CommandClasses2[CommandClasses2["Z/IP Portal"] = 97] = "Z/IP Portal";
      CommandClasses2[CommandClasses2["Z-Wave Plus Info"] = 94] = "Z-Wave Plus Info";
      CommandClasses2[CommandClasses2["Z-Wave Protocol"] = 1] = "Z-Wave Protocol";
    })(CommandClasses = exports2.CommandClasses || (exports2.CommandClasses = {}));
    function getCCName(cc) {
      return (0, safe_1.getEnumMemberName)(CommandClasses, cc);
    }
    exports2.getCCName = getCCName;
    exports2.allCCs = Object.freeze(Object.keys(CommandClasses).filter((key2) => /^\d+$/.test(key2)).map((key2) => parseInt(key2)).filter((key2) => key2 >= 0 && key2 !== CommandClasses["Z-Wave Protocol"]));
    exports2.actuatorCCs = [
      CommandClasses["Barrier Operator"],
      CommandClasses["Binary Switch"],
      CommandClasses["Color Switch"],
      CommandClasses["Door Lock"],
      CommandClasses["Multilevel Switch"],
      CommandClasses["Simple AV Control"],
      CommandClasses["Sound Switch"],
      CommandClasses["Thermostat Setpoint"],
      CommandClasses["Thermostat Mode"],
      CommandClasses["Window Covering"]
    ];
    exports2.sensorCCs = [
      CommandClasses["Alarm Sensor"],
      CommandClasses.Battery,
      CommandClasses["Binary Sensor"],
      CommandClasses["Energy Production"],
      CommandClasses.Meter,
      CommandClasses["Multilevel Sensor"],
      CommandClasses.Notification,
      CommandClasses["Pulse Meter"]
    ];
    exports2.applicationCCs = [
      CommandClasses["Alarm Sensor"],
      CommandClasses["Alarm Silence"],
      CommandClasses["All Switch"],
      CommandClasses["Anti-Theft"],
      CommandClasses["Barrier Operator"],
      CommandClasses.Basic,
      CommandClasses["Basic Tariff Information"],
      CommandClasses["Basic Window Covering"],
      CommandClasses["Binary Sensor"],
      CommandClasses["Binary Switch"],
      CommandClasses["Binary Toggle Switch"],
      CommandClasses["Climate Control Schedule"],
      CommandClasses["Central Scene"],
      CommandClasses.Clock,
      CommandClasses["Color Switch"],
      CommandClasses.Configuration,
      CommandClasses["Controller Replication"],
      CommandClasses["Demand Control Plan Configuration"],
      CommandClasses["Demand Control Plan Monitor"],
      CommandClasses["Door Lock"],
      CommandClasses["Door Lock Logging"],
      CommandClasses["Energy Production"],
      CommandClasses["Entry Control"],
      CommandClasses["Generic Schedule"],
      CommandClasses["Geographic Location"],
      CommandClasses["HRV Status"],
      CommandClasses["HRV Control"],
      CommandClasses["Humidity Control Mode"],
      CommandClasses["Humidity Control Operating State"],
      CommandClasses["Humidity Control Setpoint"],
      CommandClasses["IR Repeater"],
      CommandClasses.Irrigation,
      CommandClasses.Language,
      CommandClasses.Lock,
      CommandClasses["Manufacturer Proprietary"],
      CommandClasses.Meter,
      CommandClasses["Meter Table Configuration"],
      CommandClasses["Meter Table Monitor"],
      CommandClasses["Meter Table Push Configuration"],
      CommandClasses["Move To Position Window Covering"],
      CommandClasses["Multilevel Sensor"],
      CommandClasses["Multilevel Switch"],
      CommandClasses["Multilevel Toggle Switch"],
      CommandClasses.Notification,
      CommandClasses.Prepayment,
      CommandClasses["Prepayment Encapsulation"],
      CommandClasses.Proprietary,
      CommandClasses.Protection,
      CommandClasses["Pulse Meter"],
      CommandClasses["Rate Table Configuration"],
      CommandClasses["Rate Table Monitor"],
      CommandClasses["Scene Activation"],
      CommandClasses["Scene Actuator Configuration"],
      CommandClasses["Scene Controller Configuration"],
      CommandClasses.Schedule,
      CommandClasses["Schedule Entry Lock"],
      CommandClasses["Screen Attributes"],
      CommandClasses["Screen Meta Data"],
      CommandClasses["Sensor Configuration"],
      CommandClasses["Simple AV Control"],
      CommandClasses["Sound Switch"],
      CommandClasses["Tariff Table Configuration"],
      CommandClasses["Tariff Table Monitor"],
      CommandClasses["Thermostat Fan Mode"],
      CommandClasses["Thermostat Fan State"],
      CommandClasses["Thermostat Mode"],
      CommandClasses["Thermostat Operating State"],
      CommandClasses["Thermostat Setback"],
      CommandClasses["Thermostat Setpoint"],
      CommandClasses["User Code"],
      CommandClasses["Window Covering"]
    ];
    exports2.encapsulationCCs = [
      CommandClasses["CRC-16 Encapsulation"],
      CommandClasses["Multi Channel"],
      CommandClasses["Multi Command"],
      CommandClasses.Security,
      CommandClasses["Security 2"],
      CommandClasses["Transport Service"]
    ];
    exports2.managementCCs = [
      CommandClasses["Application Capability"],
      CommandClasses["Application Status"],
      CommandClasses.Association,
      CommandClasses["Association Command Configuration"],
      CommandClasses["Association Group Information"],
      CommandClasses["Device Reset Locally"],
      CommandClasses["Firmware Update Meta Data"],
      CommandClasses["Grouping Name"],
      CommandClasses.Hail,
      CommandClasses.Indicator,
      CommandClasses["IP Association"],
      CommandClasses["Manufacturer Specific"],
      CommandClasses["Multi Channel Association"],
      CommandClasses["Node Naming and Location"],
      CommandClasses["Remote Association Activation"],
      CommandClasses["Remote Association Configuration"],
      CommandClasses.Time,
      CommandClasses["Time Parameters"],
      CommandClasses.Version,
      CommandClasses["Wake Up"],
      CommandClasses["Z/IP Naming and Location"],
      CommandClasses["Z-Wave Plus Info"]
    ];
    exports2.nonApplicationCCs = Object.freeze(exports2.allCCs.filter((cc) => !exports2.applicationCCs.includes(cc)));
  }
});

// ../core/build/capabilities/ControllerCapabilities.js
var require_ControllerCapabilities = __commonJS({
  "../core/build/capabilities/ControllerCapabilities.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ControllerCapabilityFlags = void 0;
    var ControllerCapabilityFlags;
    (function(ControllerCapabilityFlags2) {
      ControllerCapabilityFlags2[ControllerCapabilityFlags2["Secondary"] = 1] = "Secondary";
      ControllerCapabilityFlags2[ControllerCapabilityFlags2["OnOtherNetwork"] = 2] = "OnOtherNetwork";
      ControllerCapabilityFlags2[ControllerCapabilityFlags2["SISPresent"] = 4] = "SISPresent";
      ControllerCapabilityFlags2[ControllerCapabilityFlags2["WasRealPrimary"] = 8] = "WasRealPrimary";
      ControllerCapabilityFlags2[ControllerCapabilityFlags2["SUC"] = 16] = "SUC";
      ControllerCapabilityFlags2[ControllerCapabilityFlags2["NoNodesIncluded"] = 32] = "NoNodesIncluded";
    })(ControllerCapabilityFlags = exports2.ControllerCapabilityFlags || (exports2.ControllerCapabilityFlags = {}));
  }
});

// ../core/build/capabilities/LibraryTypes.js
var require_LibraryTypes = __commonJS({
  "../core/build/capabilities/LibraryTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZWaveLibraryTypes = void 0;
    var ZWaveLibraryTypes;
    (function(ZWaveLibraryTypes2) {
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Unknown"] = 0] = "Unknown";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Static Controller"] = 1] = "Static Controller";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Controller"] = 2] = "Controller";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Enhanced Slave"] = 3] = "Enhanced Slave";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Slave"] = 4] = "Slave";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Installer"] = 5] = "Installer";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Routing Slave"] = 6] = "Routing Slave";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Bridge Controller"] = 7] = "Bridge Controller";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["Device under Test"] = 8] = "Device under Test";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["N/A"] = 9] = "N/A";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["AV Remote"] = 10] = "AV Remote";
      ZWaveLibraryTypes2[ZWaveLibraryTypes2["AV Device"] = 11] = "AV Device";
    })(ZWaveLibraryTypes = exports2.ZWaveLibraryTypes || (exports2.ZWaveLibraryTypes = {}));
  }
});

// ../core/build/error/ZWaveError.js
var require_ZWaveError = __commonJS({
  "../core/build/error/ZWaveError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isRecoverableZWaveError = exports2.isTransmissionError = exports2.isZWaveError = exports2.ZWaveError = exports2.getErrorSuffix = exports2.ZWaveErrorCodes = void 0;
    var strings_1 = require_strings();
    var ZWaveErrorCodes;
    (function(ZWaveErrorCodes2) {
      ZWaveErrorCodes2[ZWaveErrorCodes2["PacketFormat_Truncated"] = 0] = "PacketFormat_Truncated";
      ZWaveErrorCodes2[ZWaveErrorCodes2["PacketFormat_Invalid"] = 1] = "PacketFormat_Invalid";
      ZWaveErrorCodes2[ZWaveErrorCodes2["PacketFormat_Checksum"] = 2] = "PacketFormat_Checksum";
      ZWaveErrorCodes2[ZWaveErrorCodes2["PacketFormat_InvalidPayload"] = 3] = "PacketFormat_InvalidPayload";
      ZWaveErrorCodes2[ZWaveErrorCodes2["PacketFormat_DecryptionFailed"] = 4] = "PacketFormat_DecryptionFailed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_Failed"] = 100] = "Driver_Failed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_Reset"] = 101] = "Driver_Reset";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_Destroyed"] = 102] = "Driver_Destroyed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_NotReady"] = 103] = "Driver_NotReady";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_InvalidDataReceived"] = 104] = "Driver_InvalidDataReceived";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_NotSupported"] = 105] = "Driver_NotSupported";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_NoPriority"] = 106] = "Driver_NoPriority";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_InvalidCache"] = 107] = "Driver_InvalidCache";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_InvalidOptions"] = 108] = "Driver_InvalidOptions";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_NoSecurity"] = 109] = "Driver_NoSecurity";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_NoErrorHandler"] = 110] = "Driver_NoErrorHandler";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Driver_FeatureDisabled"] = 111] = "Driver_FeatureDisabled";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_Timeout"] = 200] = "Controller_Timeout";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_NodeTimeout"] = 201] = "Controller_NodeTimeout";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_MessageDropped"] = 202] = "Controller_MessageDropped";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_ResponseNOK"] = 203] = "Controller_ResponseNOK";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_CallbackNOK"] = 204] = "Controller_CallbackNOK";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_InclusionFailed"] = 205] = "Controller_InclusionFailed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_ExclusionFailed"] = 206] = "Controller_ExclusionFailed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_NotSupported"] = 207] = "Controller_NotSupported";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_InterviewRestarted"] = 208] = "Controller_InterviewRestarted";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_NodeNotFound"] = 209] = "Controller_NodeNotFound";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_EndpointNotFound"] = 210] = "Controller_EndpointNotFound";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_NodeRemoved"] = 211] = "Controller_NodeRemoved";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_NodeInsecureCommunication"] = 212] = "Controller_NodeInsecureCommunication";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_MessageExpired"] = 213] = "Controller_MessageExpired";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_CommandError"] = 214] = "Controller_CommandError";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Controller_MessageTooLarge"] = 215] = "Controller_MessageTooLarge";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FWUpdateService_MissingInformation"] = 260] = "FWUpdateService_MissingInformation";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FWUpdateService_RequestError"] = 261] = "FWUpdateService_RequestError";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FWUpdateService_IntegrityCheckFailed"] = 262] = "FWUpdateService_IntegrityCheckFailed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["NVM_NotSupported"] = 280] = "NVM_NotSupported";
      ZWaveErrorCodes2[ZWaveErrorCodes2["NVM_InvalidJSON"] = 281] = "NVM_InvalidJSON";
      ZWaveErrorCodes2[ZWaveErrorCodes2["NVM_ObjectNotFound"] = 282] = "NVM_ObjectNotFound";
      ZWaveErrorCodes2[ZWaveErrorCodes2["NVM_InvalidFormat"] = 283] = "NVM_InvalidFormat";
      ZWaveErrorCodes2[ZWaveErrorCodes2["NVM_NoSpace"] = 284] = "NVM_NoSpace";
      ZWaveErrorCodes2[ZWaveErrorCodes2["CC_Invalid"] = 300] = "CC_Invalid";
      ZWaveErrorCodes2[ZWaveErrorCodes2["CC_NoNodeID"] = 301] = "CC_NoNodeID";
      ZWaveErrorCodes2[ZWaveErrorCodes2["CC_NotSupported"] = 302] = "CC_NotSupported";
      ZWaveErrorCodes2[ZWaveErrorCodes2["CC_NotImplemented"] = 303] = "CC_NotImplemented";
      ZWaveErrorCodes2[ZWaveErrorCodes2["CC_NoAPI"] = 304] = "CC_NoAPI";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Deserialization_NotImplemented"] = 320] = "Deserialization_NotImplemented";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Arithmetic"] = 321] = "Arithmetic";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Argument_Invalid"] = 322] = "Argument_Invalid";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Config_Invalid"] = 340] = "Config_Invalid";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Config_NotFound"] = 341] = "Config_NotFound";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Config_CircularImport"] = 342] = "Config_CircularImport";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Config_Update_RegistryError"] = 343] = "Config_Update_RegistryError";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Config_Update_PackageManagerNotFound"] = 344] = "Config_Update_PackageManagerNotFound";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Config_Update_InstallFailed"] = 345] = "Config_Update_InstallFailed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["RemoveFailedNode_Failed"] = 360] = "RemoveFailedNode_Failed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["RemoveFailedNode_NodeOK"] = 361] = "RemoveFailedNode_NodeOK";
      ZWaveErrorCodes2[ZWaveErrorCodes2["ReplaceFailedNode_Failed"] = 362] = "ReplaceFailedNode_Failed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["ReplaceFailedNode_NodeOK"] = 363] = "ReplaceFailedNode_NodeOK";
      ZWaveErrorCodes2[ZWaveErrorCodes2["OTW_Update_Busy"] = 380] = "OTW_Update_Busy";
      ZWaveErrorCodes2[ZWaveErrorCodes2["ConfigurationCC_FirstParameterNumber"] = 1e3] = "ConfigurationCC_FirstParameterNumber";
      ZWaveErrorCodes2[ZWaveErrorCodes2["ConfigurationCC_NoLegacyScanOnNewDevices"] = 1001] = "ConfigurationCC_NoLegacyScanOnNewDevices";
      ZWaveErrorCodes2[ZWaveErrorCodes2["ConfigurationCC_NoResetToDefaultOnLegacyDevices"] = 1002] = "ConfigurationCC_NoResetToDefaultOnLegacyDevices";
      ZWaveErrorCodes2[ZWaveErrorCodes2["SupervisionCC_CommandFailed"] = 1100] = "SupervisionCC_CommandFailed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["ManufacturerProprietaryCC_NoManufacturerId"] = 1200] = "ManufacturerProprietaryCC_NoManufacturerId";
      ZWaveErrorCodes2[ZWaveErrorCodes2["AssociationCC_InvalidGroup"] = 1300] = "AssociationCC_InvalidGroup";
      ZWaveErrorCodes2[ZWaveErrorCodes2["AssociationCC_NotAllowed"] = 1301] = "AssociationCC_NotAllowed";
      ZWaveErrorCodes2[ZWaveErrorCodes2["SecurityCC_NoNonce"] = 1400] = "SecurityCC_NoNonce";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_NoSPAN"] = 1401] = "Security2CC_NoSPAN";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_NotInitialized"] = 1402] = "Security2CC_NotInitialized";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_NotSecure"] = 1403] = "Security2CC_NotSecure";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_MissingExtension"] = 1404] = "Security2CC_MissingExtension";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_CannotDecode"] = 1405] = "Security2CC_CannotDecode";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_InvalidQRCode"] = 1406] = "Security2CC_InvalidQRCode";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_NoMPAN"] = 1407] = "Security2CC_NoMPAN";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Security2CC_CannotDecodeMulticast"] = 1408] = "Security2CC_CannotDecodeMulticast";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_Busy"] = 1500] = "FirmwareUpdateCC_Busy";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_NotUpgradable"] = 1501] = "FirmwareUpdateCC_NotUpgradable";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_TargetNotFound"] = 1502] = "FirmwareUpdateCC_TargetNotFound";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_FailedToStart"] = 1503] = "FirmwareUpdateCC_FailedToStart";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_FailedToAbort"] = 1504] = "FirmwareUpdateCC_FailedToAbort";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_Timeout"] = 1505] = "FirmwareUpdateCC_Timeout";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Invalid_Firmware_File"] = 1506] = "Invalid_Firmware_File";
      ZWaveErrorCodes2[ZWaveErrorCodes2["Unsupported_Firmware_Format"] = 1507] = "Unsupported_Firmware_Format";
      ZWaveErrorCodes2[ZWaveErrorCodes2["FirmwareUpdateCC_NetworkBusy"] = 1508] = "FirmwareUpdateCC_NetworkBusy";
      ZWaveErrorCodes2[ZWaveErrorCodes2["PowerlevelCC_UnsupportedTestNode"] = 1600] = "PowerlevelCC_UnsupportedTestNode";
    })(ZWaveErrorCodes = exports2.ZWaveErrorCodes || (exports2.ZWaveErrorCodes = {}));
    function getErrorSuffix(code) {
      return `ZW${(0, strings_1.padStart)(code.toString(), 4, "0")}`;
    }
    exports2.getErrorSuffix = getErrorSuffix;
    function appendErrorSuffix(message, code) {
      const suffix = ` (${getErrorSuffix(code)})`;
      if (!message.endsWith(suffix))
        message += suffix;
      return message;
    }
    var ZWaveError = class extends Error {
      constructor(message, code, context, transactionSource) {
        super();
        this.message = message;
        this.code = code;
        this.context = context;
        this.transactionSource = transactionSource;
        this.message = appendErrorSuffix(message, code);
        Object.setPrototypeOf(this, ZWaveError.prototype);
        Object.getPrototypeOf(this).name = "ZWaveError";
        if (typeof transactionSource === "string") {
          this.stack = `ZWaveError: ${this.message}
${transactionSource}`;
        }
      }
    };
    exports2.ZWaveError = ZWaveError;
    function isZWaveError(e) {
      return e instanceof Error && Object.getPrototypeOf(e).name === "ZWaveError";
    }
    exports2.isZWaveError = isZWaveError;
    function isTransmissionError(e) {
      return isZWaveError(e) && (e.code === ZWaveErrorCodes.Controller_Timeout || e.code === ZWaveErrorCodes.Controller_MessageDropped || e.code === ZWaveErrorCodes.Controller_CallbackNOK || e.code === ZWaveErrorCodes.Controller_ResponseNOK || e.code === ZWaveErrorCodes.Controller_NodeTimeout || e.code === ZWaveErrorCodes.Security2CC_CannotDecode);
    }
    exports2.isTransmissionError = isTransmissionError;
    function isRecoverableZWaveError(e) {
      if (!isZWaveError(e))
        return false;
      switch (e.code) {
        case ZWaveErrorCodes.Controller_InterviewRestarted:
        case ZWaveErrorCodes.Controller_NodeRemoved:
          return true;
      }
      return false;
    }
    exports2.isRecoverableZWaveError = isRecoverableZWaveError;
  }
});

// ../core/build/util/misc.js
var require_misc = __commonJS({
  "../core/build/util/misc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLegalRangeForBitMask = exports2.getBitMaskWidth = exports2.getMinimumShiftForBitMask = exports2.validatePayload = exports2.stripUndefined = exports2.isConsecutiveArray = void 0;
    var ZWaveError_1 = require_ZWaveError();
    function isConsecutiveArray(values) {
      return values.every((v, i2, arr) => i2 === 0 ? true : v - 1 === arr[i2 - 1]);
    }
    exports2.isConsecutiveArray = isConsecutiveArray;
    function stripUndefined(obj) {
      const ret = {};
      for (const [key2, value] of Object.entries(obj)) {
        if (value !== void 0)
          ret[key2] = value;
      }
      return ret;
    }
    exports2.stripUndefined = stripUndefined;
    function validatePayloadInternal(reason, ...assertions) {
      if (!assertions.every(Boolean)) {
        throw new ZWaveError_1.ZWaveError("The message payload is invalid!", ZWaveError_1.ZWaveErrorCodes.PacketFormat_InvalidPayload, reason);
      }
    }
    exports2.validatePayload = validatePayloadInternal.bind(void 0, void 0);
    exports2.validatePayload.withReason = (reason) => validatePayloadInternal.bind(void 0, reason);
    exports2.validatePayload.fail = (reason) => exports2.validatePayload.withReason(reason)(false);
    function getMinimumShiftForBitMask(mask2) {
      let i2 = 0;
      while (mask2 % 2 === 0) {
        mask2 >>>= 1;
        if (mask2 === 0)
          break;
        i2++;
      }
      return i2;
    }
    exports2.getMinimumShiftForBitMask = getMinimumShiftForBitMask;
    function getBitMaskWidth(mask2) {
      mask2 = mask2 >>> getMinimumShiftForBitMask(mask2);
      let i2 = 0;
      while (mask2 > 0) {
        mask2 >>>= 1;
        i2++;
      }
      return i2;
    }
    exports2.getBitMaskWidth = getBitMaskWidth;
    function getLegalRangeForBitMask(mask2, unsigned) {
      if (mask2 === 0)
        return [0, 0];
      const bitMaskWidth = getBitMaskWidth(mask2);
      const min = unsigned || bitMaskWidth == 1 ? 0 : -(2 ** (bitMaskWidth - 1));
      const max = unsigned || bitMaskWidth == 1 ? 2 ** bitMaskWidth - 1 : 2 ** (bitMaskWidth - 1) - 1;
      return [min, max];
    }
    exports2.getLegalRangeForBitMask = getLegalRangeForBitMask;
  }
});

// ../core/build/capabilities/NodeInfo.js
var require_NodeInfo = __commonJS({
  "../core/build/capabilities/NodeInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodeNodeInformationFrame = exports2.parseNodeInformationFrame = exports2.encodeNodeProtocolInfoAndDeviceClass = exports2.parseNodeProtocolInfoAndDeviceClass = exports2.encodeNodeProtocolInfo = exports2.parseNodeProtocolInfo = exports2.NodeType = exports2.ProtocolVersion = exports2.encodeCCList = exports2.parseCCList = exports2.encodeCCId = exports2.parseCCId = exports2.isExtendedCCId = exports2.encodeNodeUpdatePayload = exports2.parseNodeUpdatePayload = exports2.encodeApplicationNodeInformation = exports2.parseApplicationNodeInformation = void 0;
    var safe_1 = require_index_safe();
    var misc_1 = require_misc();
    var CommandClasses_1 = require_CommandClasses();
    function parseApplicationNodeInformation(nif) {
      (0, misc_1.validatePayload)(nif.length >= 2);
      return {
        genericDeviceClass: nif[0],
        specificDeviceClass: nif[1],
        supportedCCs: parseCCList(nif.slice(2)).supportedCCs
      };
    }
    exports2.parseApplicationNodeInformation = parseApplicationNodeInformation;
    function encodeApplicationNodeInformation(nif) {
      const ccList = encodeCCList(nif.supportedCCs, []);
      return Buffer.concat([
        Buffer.from([nif.genericDeviceClass, nif.specificDeviceClass]),
        ccList
      ]);
    }
    exports2.encodeApplicationNodeInformation = encodeApplicationNodeInformation;
    function parseNodeUpdatePayload(nif) {
      const nodeId = nif[0];
      const remainingLength = nif[1];
      (0, misc_1.validatePayload)(nif.length >= 2 + remainingLength);
      return {
        nodeId,
        basicDeviceClass: nif[2],
        ...parseApplicationNodeInformation(nif.slice(3, 2 + remainingLength))
      };
    }
    exports2.parseNodeUpdatePayload = parseNodeUpdatePayload;
    function encodeNodeUpdatePayload(nif) {
      const ccList = encodeCCList(nif.supportedCCs, []);
      return Buffer.concat([
        Buffer.from([
          nif.nodeId,
          3 + ccList.length,
          nif.basicDeviceClass,
          nif.genericDeviceClass,
          nif.specificDeviceClass
        ]),
        ccList
      ]);
    }
    exports2.encodeNodeUpdatePayload = encodeNodeUpdatePayload;
    function isExtendedCCId(ccId) {
      return ccId >= 241;
    }
    exports2.isExtendedCCId = isExtendedCCId;
    function parseCCId(payload, offset = 0) {
      const isExtended = isExtendedCCId(payload[offset]);
      (0, misc_1.validatePayload)(payload.length >= offset + (isExtended ? 2 : 1));
      if (isExtended) {
        return { ccId: payload.readUInt16BE(offset), bytesRead: 2 };
      } else {
        return { ccId: payload.readUInt8(offset), bytesRead: 1 };
      }
    }
    exports2.parseCCId = parseCCId;
    function encodeCCId(ccId, payload, offset = 0) {
      if (isExtendedCCId(ccId)) {
        payload.writeUInt16BE(ccId, offset);
        return 2;
      } else {
        payload.writeUInt8(ccId, offset);
        return 1;
      }
    }
    exports2.encodeCCId = encodeCCId;
    function parseCCList(payload) {
      const ret = {
        supportedCCs: [],
        controlledCCs: []
      };
      let offset = 0;
      let isAfterMark = false;
      while (offset < payload.length) {
        const { ccId: cc, bytesRead } = parseCCId(payload, offset);
        offset += bytesRead;
        if (cc === CommandClasses_1.CommandClasses["Support/Control Mark"]) {
          isAfterMark = true;
          continue;
        }
        (isAfterMark ? ret.controlledCCs : ret.supportedCCs).push(cc);
      }
      return ret;
    }
    exports2.parseCCList = parseCCList;
    function encodeCCList(supportedCCs, controlledCCs) {
      const bufferLength = (0, safe_1.sum)(supportedCCs.map((cc) => isExtendedCCId(cc) ? 2 : 1)) + (controlledCCs.length > 0 ? 1 : 0) + (0, safe_1.sum)(controlledCCs.map((cc) => isExtendedCCId(cc) ? 2 : 1));
      const ret = Buffer.allocUnsafe(bufferLength);
      let offset = 0;
      for (const cc of supportedCCs) {
        offset += encodeCCId(cc, ret, offset);
      }
      if (controlledCCs.length > 0) {
        ret[offset++] = CommandClasses_1.CommandClasses["Support/Control Mark"];
        for (const cc of controlledCCs) {
          offset += encodeCCId(cc, ret, offset);
        }
      }
      return ret;
    }
    exports2.encodeCCList = encodeCCList;
    var ProtocolVersion;
    (function(ProtocolVersion2) {
      ProtocolVersion2[ProtocolVersion2["unknown"] = 0] = "unknown";
      ProtocolVersion2[ProtocolVersion2["2.0"] = 1] = "2.0";
      ProtocolVersion2[ProtocolVersion2["4.2x / 5.0x"] = 2] = "4.2x / 5.0x";
      ProtocolVersion2[ProtocolVersion2["4.5x / 6.0x"] = 3] = "4.5x / 6.0x";
    })(ProtocolVersion = exports2.ProtocolVersion || (exports2.ProtocolVersion = {}));
    var NodeType;
    (function(NodeType2) {
      NodeType2[NodeType2["Controller"] = 0] = "Controller";
      NodeType2[NodeType2["Routing End Node"] = 1] = "Routing End Node";
      NodeType2[NodeType2["End Node"] = 1] = "End Node";
    })(NodeType = exports2.NodeType || (exports2.NodeType = {}));
    function parseNodeProtocolInfo(buffer2, offset) {
      (0, misc_1.validatePayload)(buffer2.length >= offset + 3);
      const isListening = !!(buffer2[offset] & 128);
      const isRouting = !!(buffer2[offset] & 64);
      const supportedDataRates = [];
      const maxSpeed = buffer2[offset] & 24;
      const speedExtension = buffer2[offset + 2] & 7;
      if (maxSpeed & 16) {
        supportedDataRates.push(4e4);
      }
      if (maxSpeed & 8) {
        supportedDataRates.push(9600);
      }
      if (speedExtension & 1) {
        supportedDataRates.push(1e5);
      }
      if (supportedDataRates.length === 0) {
        supportedDataRates.push(9600);
      }
      const protocolVersion = buffer2[offset] & 7;
      const capability = buffer2[offset + 1];
      const optionalFunctionality = !!(capability & 128);
      let isFrequentListening;
      switch (capability & 96) {
        case 64:
          isFrequentListening = "1000ms";
          break;
        case 32:
          isFrequentListening = "250ms";
          break;
        default:
          isFrequentListening = false;
      }
      const supportsBeaming = !!(capability & 16);
      let nodeType;
      switch (capability & 10) {
        case 8:
          nodeType = NodeType["End Node"];
          break;
        case 2:
        default:
          nodeType = NodeType.Controller;
          break;
      }
      const hasSpecificDeviceClass = !!(capability & 4);
      const supportsSecurity = !!(capability & 1);
      return {
        isListening,
        isFrequentListening,
        isRouting,
        supportedDataRates,
        protocolVersion,
        optionalFunctionality,
        nodeType,
        supportsSecurity,
        supportsBeaming,
        hasSpecificDeviceClass
      };
    }
    exports2.parseNodeProtocolInfo = parseNodeProtocolInfo;
    function encodeNodeProtocolInfo(info) {
      const ret = Buffer.alloc(3, 0);
      if (info.isListening)
        ret[0] |= 128;
      if (info.isRouting)
        ret[0] |= 64;
      if (info.supportedDataRates.includes(4e4))
        ret[0] |= 16;
      if (info.supportedDataRates.includes(9600))
        ret[0] |= 8;
      if (info.supportedDataRates.includes(1e5))
        ret[2] |= 1;
      ret[0] |= info.protocolVersion & 7;
      if (info.optionalFunctionality)
        ret[1] |= 128;
      if (info.isFrequentListening === "1000ms")
        ret[1] |= 64;
      else if (info.isFrequentListening === "250ms")
        ret[1] |= 32;
      if (info.supportsBeaming)
        ret[1] |= 16;
      if (info.supportsSecurity)
        ret[1] |= 1;
      if (info.nodeType === NodeType["End Node"])
        ret[1] |= 8;
      else
        ret[1] |= 2;
      if (info.hasSpecificDeviceClass)
        ret[1] |= 4;
      return ret;
    }
    exports2.encodeNodeProtocolInfo = encodeNodeProtocolInfo;
    function parseNodeProtocolInfoAndDeviceClass(buffer2) {
      (0, misc_1.validatePayload)(buffer2.length >= 5);
      const protocolInfo = parseNodeProtocolInfo(buffer2, 0);
      let offset = 3;
      const basic = buffer2[offset++];
      const generic = buffer2[offset++];
      let specific = 0;
      if (protocolInfo.hasSpecificDeviceClass) {
        (0, misc_1.validatePayload)(buffer2.length >= offset + 1);
        specific = buffer2[offset++];
      }
      return {
        info: {
          ...protocolInfo,
          basicDeviceClass: basic,
          genericDeviceClass: generic,
          specificDeviceClass: specific
        },
        bytesRead: offset
      };
    }
    exports2.parseNodeProtocolInfoAndDeviceClass = parseNodeProtocolInfoAndDeviceClass;
    function encodeNodeProtocolInfoAndDeviceClass(info) {
      return Buffer.concat([
        encodeNodeProtocolInfo({ ...info, hasSpecificDeviceClass: true }),
        Buffer.from([
          info.basicDeviceClass,
          info.genericDeviceClass,
          info.specificDeviceClass
        ])
      ]);
    }
    exports2.encodeNodeProtocolInfoAndDeviceClass = encodeNodeProtocolInfoAndDeviceClass;
    function parseNodeInformationFrame(buffer2) {
      const { info, bytesRead: offset } = parseNodeProtocolInfoAndDeviceClass(buffer2);
      const supportedCCs = parseCCList(buffer2.slice(offset)).supportedCCs;
      return {
        ...info,
        supportedCCs
      };
    }
    exports2.parseNodeInformationFrame = parseNodeInformationFrame;
    function encodeNodeInformationFrame(info) {
      return Buffer.concat([
        encodeNodeProtocolInfoAndDeviceClass(info),
        encodeCCList(info.supportedCCs, [])
      ]);
    }
    exports2.encodeNodeInformationFrame = encodeNodeInformationFrame;
  }
});

// ../core/build/capabilities/Protocols.js
var require_Protocols = __commonJS({
  "../core/build/capabilities/Protocols.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProtocolType = exports2.protocolDataRateMask = exports2.RouteProtocolDataRate = exports2.protocolDataRateToString = exports2.ProtocolDataRate = exports2.ZWaveDataRate = exports2.Protocols = void 0;
    var safe_1 = require_index_safe();
    var Protocols;
    (function(Protocols2) {
      Protocols2[Protocols2["ZWave"] = 0] = "ZWave";
      Protocols2[Protocols2["ZWaveLongRange"] = 1] = "ZWaveLongRange";
    })(Protocols = exports2.Protocols || (exports2.Protocols = {}));
    var ZWaveDataRate;
    (function(ZWaveDataRate2) {
      ZWaveDataRate2[ZWaveDataRate2["9k6"] = 1] = "9k6";
      ZWaveDataRate2[ZWaveDataRate2["40k"] = 2] = "40k";
      ZWaveDataRate2[ZWaveDataRate2["100k"] = 3] = "100k";
    })(ZWaveDataRate = exports2.ZWaveDataRate || (exports2.ZWaveDataRate = {}));
    var ProtocolDataRate;
    (function(ProtocolDataRate2) {
      ProtocolDataRate2[ProtocolDataRate2["ZWave_9k6"] = 1] = "ZWave_9k6";
      ProtocolDataRate2[ProtocolDataRate2["ZWave_40k"] = 2] = "ZWave_40k";
      ProtocolDataRate2[ProtocolDataRate2["ZWave_100k"] = 3] = "ZWave_100k";
      ProtocolDataRate2[ProtocolDataRate2["LongRange_100k"] = 4] = "LongRange_100k";
    })(ProtocolDataRate = exports2.ProtocolDataRate || (exports2.ProtocolDataRate = {}));
    function protocolDataRateToString(rate) {
      switch (rate) {
        case ProtocolDataRate.ZWave_9k6:
          return "Z-Wave, 9.6 kbit/s";
        case ProtocolDataRate.ZWave_40k:
          return "Z-Wave, 40 kbit/s";
        case ProtocolDataRate.ZWave_100k:
          return "Z-Wave, 100 kbit/s";
        case ProtocolDataRate.LongRange_100k:
          return "Z-Wave Long Range, 100 kbit/s";
      }
      return `Unknown (${(0, safe_1.num2hex)(rate)})`;
    }
    exports2.protocolDataRateToString = protocolDataRateToString;
    var RouteProtocolDataRate;
    (function(RouteProtocolDataRate2) {
      RouteProtocolDataRate2[RouteProtocolDataRate2["Unspecified"] = 0] = "Unspecified";
      RouteProtocolDataRate2[RouteProtocolDataRate2["ZWave_9k6"] = 1] = "ZWave_9k6";
      RouteProtocolDataRate2[RouteProtocolDataRate2["ZWave_40k"] = 2] = "ZWave_40k";
      RouteProtocolDataRate2[RouteProtocolDataRate2["ZWave_100k"] = 3] = "ZWave_100k";
      RouteProtocolDataRate2[RouteProtocolDataRate2["LongRange_100k"] = 4] = "LongRange_100k";
    })(RouteProtocolDataRate = exports2.RouteProtocolDataRate || (exports2.RouteProtocolDataRate = {}));
    exports2.protocolDataRateMask = 7;
    var ProtocolType;
    (function(ProtocolType2) {
      ProtocolType2[ProtocolType2["Z-Wave"] = 0] = "Z-Wave";
      ProtocolType2[ProtocolType2["Z-Wave AV"] = 1] = "Z-Wave AV";
      ProtocolType2[ProtocolType2["Z-Wave for IP"] = 2] = "Z-Wave for IP";
    })(ProtocolType = exports2.ProtocolType || (exports2.ProtocolType = {}));
  }
});

// ../core/build/capabilities/RFRegion.js
var require_RFRegion = __commonJS({
  "../core/build/capabilities/RFRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RFRegion = void 0;
    var RFRegion2;
    (function(RFRegion3) {
      RFRegion3[RFRegion3["Europe"] = 0] = "Europe";
      RFRegion3[RFRegion3["USA"] = 1] = "USA";
      RFRegion3[RFRegion3["Australia/New Zealand"] = 2] = "Australia/New Zealand";
      RFRegion3[RFRegion3["Hong Kong"] = 3] = "Hong Kong";
      RFRegion3[RFRegion3["India"] = 5] = "India";
      RFRegion3[RFRegion3["Israel"] = 6] = "Israel";
      RFRegion3[RFRegion3["Russia"] = 7] = "Russia";
      RFRegion3[RFRegion3["China"] = 8] = "China";
      RFRegion3[RFRegion3["USA (Long Range)"] = 9] = "USA (Long Range)";
      RFRegion3[RFRegion3["Japan"] = 32] = "Japan";
      RFRegion3[RFRegion3["Korea"] = 33] = "Korea";
      RFRegion3[RFRegion3["Unknown"] = 254] = "Unknown";
      RFRegion3[RFRegion3["Default (EU)"] = 255] = "Default (EU)";
    })(RFRegion2 = exports2.RFRegion || (exports2.RFRegion = {}));
  }
});

// ../core/build/capabilities/ZWaveApiVersion.js
var require_ZWaveApiVersion = __commonJS({
  "../core/build/capabilities/ZWaveApiVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../core/build/consts/InterviewStage.js
var require_InterviewStage = __commonJS({
  "../core/build/consts/InterviewStage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InterviewStage = void 0;
    var InterviewStage2;
    (function(InterviewStage3) {
      InterviewStage3[InterviewStage3["None"] = 0] = "None";
      InterviewStage3[InterviewStage3["ProtocolInfo"] = 1] = "ProtocolInfo";
      InterviewStage3[InterviewStage3["NodeInfo"] = 2] = "NodeInfo";
      InterviewStage3[InterviewStage3["CommandClasses"] = 3] = "CommandClasses";
      InterviewStage3[InterviewStage3["OverwriteConfig"] = 4] = "OverwriteConfig";
      InterviewStage3[InterviewStage3["Complete"] = 5] = "Complete";
    })(InterviewStage2 = exports2.InterviewStage || (exports2.InterviewStage = {}));
  }
});

// ../core/build/consts/NodeStatus.js
var require_NodeStatus = __commonJS({
  "../core/build/consts/NodeStatus.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeStatus = void 0;
    var NodeStatus2;
    (function(NodeStatus3) {
      NodeStatus3[NodeStatus3["Unknown"] = 0] = "Unknown";
      NodeStatus3[NodeStatus3["Asleep"] = 1] = "Asleep";
      NodeStatus3[NodeStatus3["Awake"] = 2] = "Awake";
      NodeStatus3[NodeStatus3["Dead"] = 3] = "Dead";
      NodeStatus3[NodeStatus3["Alive"] = 4] = "Alive";
    })(NodeStatus2 = exports2.NodeStatus || (exports2.NodeStatus = {}));
  }
});

// ../core/build/consts/Transmission.js
var require_Transmission = __commonJS({
  "../core/build/consts/Transmission.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isUnsupervisedOrSucceeded = exports2.supervisedCommandFailed = exports2.supervisedCommandSucceeded = exports2.isSupervisionResult = exports2.SupervisionStatus = exports2.EncapsulationFlags = exports2.rssiToString = exports2.averageRSSI = exports2.isRssiError = exports2.RssiError = exports2.TransmitStatus = exports2.TransmitOptions = exports2.isMessagePriority = exports2.MessagePriority = void 0;
    var typeguards_1 = require_typeguards();
    var MessagePriority;
    (function(MessagePriority2) {
      MessagePriority2[MessagePriority2["Nonce"] = 0] = "Nonce";
      MessagePriority2[MessagePriority2["Controller"] = 1] = "Controller";
      MessagePriority2[MessagePriority2["MultistepController"] = 2] = "MultistepController";
      MessagePriority2[MessagePriority2["Supervision"] = 3] = "Supervision";
      MessagePriority2[MessagePriority2["Ping"] = 4] = "Ping";
      MessagePriority2[MessagePriority2["WakeUp"] = 5] = "WakeUp";
      MessagePriority2[MessagePriority2["Normal"] = 6] = "Normal";
      MessagePriority2[MessagePriority2["NodeQuery"] = 7] = "NodeQuery";
      MessagePriority2[MessagePriority2["Poll"] = 8] = "Poll";
    })(MessagePriority = exports2.MessagePriority || (exports2.MessagePriority = {}));
    function isMessagePriority(val) {
      return typeof val === "number" && val in MessagePriority;
    }
    exports2.isMessagePriority = isMessagePriority;
    var TransmitOptions;
    (function(TransmitOptions2) {
      TransmitOptions2[TransmitOptions2["NotSet"] = 0] = "NotSet";
      TransmitOptions2[TransmitOptions2["ACK"] = 1] = "ACK";
      TransmitOptions2[TransmitOptions2["LowPower"] = 2] = "LowPower";
      TransmitOptions2[TransmitOptions2["AutoRoute"] = 4] = "AutoRoute";
      TransmitOptions2[TransmitOptions2["NoRoute"] = 16] = "NoRoute";
      TransmitOptions2[TransmitOptions2["Explore"] = 32] = "Explore";
      TransmitOptions2[TransmitOptions2["DEFAULT"] = 37] = "DEFAULT";
      TransmitOptions2[TransmitOptions2["DEFAULT_NOACK"] = 36] = "DEFAULT_NOACK";
    })(TransmitOptions = exports2.TransmitOptions || (exports2.TransmitOptions = {}));
    var TransmitStatus;
    (function(TransmitStatus2) {
      TransmitStatus2[TransmitStatus2["OK"] = 0] = "OK";
      TransmitStatus2[TransmitStatus2["NoAck"] = 1] = "NoAck";
      TransmitStatus2[TransmitStatus2["Fail"] = 2] = "Fail";
      TransmitStatus2[TransmitStatus2["NotIdle"] = 3] = "NotIdle";
      TransmitStatus2[TransmitStatus2["NoRoute"] = 4] = "NoRoute";
    })(TransmitStatus = exports2.TransmitStatus || (exports2.TransmitStatus = {}));
    var RssiError;
    (function(RssiError2) {
      RssiError2[RssiError2["NotAvailable"] = 127] = "NotAvailable";
      RssiError2[RssiError2["ReceiverSaturated"] = 126] = "ReceiverSaturated";
      RssiError2[RssiError2["NoSignalDetected"] = 125] = "NoSignalDetected";
    })(RssiError = exports2.RssiError || (exports2.RssiError = {}));
    function isRssiError(rssi) {
      return rssi >= RssiError.NoSignalDetected;
    }
    exports2.isRssiError = isRssiError;
    function averageRSSI(acc, rssi, weight) {
      if (isRssiError(rssi)) {
        switch (rssi) {
          case RssiError.NotAvailable:
            return acc ?? 0;
          case RssiError.ReceiverSaturated:
            rssi = 0;
            break;
          case RssiError.NoSignalDetected:
            rssi = -128;
            break;
        }
      }
      if (acc == void 0)
        return rssi;
      return Math.round(acc * weight + rssi * (1 - weight));
    }
    exports2.averageRSSI = averageRSSI;
    function rssiToString(rssi) {
      switch (rssi) {
        case RssiError.NotAvailable:
          return "N/A";
        case RssiError.ReceiverSaturated:
          return "Receiver saturated";
        case RssiError.NoSignalDetected:
          return "No signal detected";
        default:
          return `${rssi} dBm`;
      }
    }
    exports2.rssiToString = rssiToString;
    var EncapsulationFlags;
    (function(EncapsulationFlags2) {
      EncapsulationFlags2[EncapsulationFlags2["None"] = 0] = "None";
      EncapsulationFlags2[EncapsulationFlags2["Supervision"] = 1] = "Supervision";
      EncapsulationFlags2[EncapsulationFlags2["Security"] = 2] = "Security";
      EncapsulationFlags2[EncapsulationFlags2["CRC16"] = 4] = "CRC16";
    })(EncapsulationFlags = exports2.EncapsulationFlags || (exports2.EncapsulationFlags = {}));
    var SupervisionStatus;
    (function(SupervisionStatus2) {
      SupervisionStatus2[SupervisionStatus2["NoSupport"] = 0] = "NoSupport";
      SupervisionStatus2[SupervisionStatus2["Working"] = 1] = "Working";
      SupervisionStatus2[SupervisionStatus2["Fail"] = 2] = "Fail";
      SupervisionStatus2[SupervisionStatus2["Success"] = 255] = "Success";
    })(SupervisionStatus = exports2.SupervisionStatus || (exports2.SupervisionStatus = {}));
    function isSupervisionResult(obj) {
      return (0, typeguards_1.isObject)(obj) && "status" in obj && typeof SupervisionStatus[obj.status] === "string";
    }
    exports2.isSupervisionResult = isSupervisionResult;
    function supervisedCommandSucceeded(result) {
      return isSupervisionResult(result) && (result.status === SupervisionStatus.Success || result.status === SupervisionStatus.Working);
    }
    exports2.supervisedCommandSucceeded = supervisedCommandSucceeded;
    function supervisedCommandFailed(result) {
      return isSupervisionResult(result) && (result.status === SupervisionStatus.Fail || result.status === SupervisionStatus.NoSupport);
    }
    exports2.supervisedCommandFailed = supervisedCommandFailed;
    function isUnsupervisedOrSucceeded(result) {
      return !result || supervisedCommandSucceeded(result);
    }
    exports2.isUnsupervisedOrSucceeded = isUnsupervisedOrSucceeded;
  }
});

// ../core/build/consts/index.js
var require_consts = __commonJS({
  "../core/build/consts/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_TRANSPORT_SERVICE_SESSION_ID = exports2.MAX_SUPERVISION_SESSION_ID = exports2.NodeStatus = exports2.InterviewStage = exports2.MAX_REPEATERS = exports2.HOMEID_BYTES = exports2.NUM_NODEMASK_BYTES = exports2.NODE_ID_MAX = exports2.NODE_ID_BROADCAST = exports2.MAX_NODES = void 0;
    exports2.MAX_NODES = 232;
    exports2.NODE_ID_BROADCAST = 255;
    exports2.NODE_ID_MAX = exports2.MAX_NODES;
    exports2.NUM_NODEMASK_BYTES = exports2.MAX_NODES / 8;
    exports2.HOMEID_BYTES = 4;
    exports2.MAX_REPEATERS = 4;
    var InterviewStage_1 = require_InterviewStage();
    Object.defineProperty(exports2, "InterviewStage", { enumerable: true, get: function() {
      return InterviewStage_1.InterviewStage;
    } });
    var NodeStatus_1 = require_NodeStatus();
    Object.defineProperty(exports2, "NodeStatus", { enumerable: true, get: function() {
      return NodeStatus_1.NodeStatus;
    } });
    __exportStar(require_Transmission(), exports2);
    exports2.MAX_SUPERVISION_SESSION_ID = 63;
    exports2.MAX_TRANSPORT_SERVICE_SESSION_ID = 15;
  }
});

// ../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/cli.js
var require_cli = __commonJS({
  "../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/cli.js"(exports2) {
    "use strict";
    exports2.levels = {
      error: 0,
      warn: 1,
      help: 2,
      data: 3,
      info: 4,
      debug: 5,
      prompt: 6,
      verbose: 7,
      input: 8,
      silly: 9
    };
    exports2.colors = {
      error: "red",
      warn: "yellow",
      help: "cyan",
      data: "grey",
      info: "green",
      debug: "blue",
      prompt: "grey",
      verbose: "cyan",
      input: "grey",
      silly: "magenta"
    };
  }
});

// ../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/npm.js
var require_npm = __commonJS({
  "../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/npm.js"(exports2) {
    "use strict";
    exports2.levels = {
      error: 0,
      warn: 1,
      info: 2,
      http: 3,
      verbose: 4,
      debug: 5,
      silly: 6
    };
    exports2.colors = {
      error: "red",
      warn: "yellow",
      info: "green",
      http: "green",
      verbose: "cyan",
      debug: "blue",
      silly: "magenta"
    };
  }
});

// ../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/syslog.js
var require_syslog = __commonJS({
  "../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/syslog.js"(exports2) {
    "use strict";
    exports2.levels = {
      emerg: 0,
      alert: 1,
      crit: 2,
      error: 3,
      warning: 4,
      notice: 5,
      info: 6,
      debug: 7
    };
    exports2.colors = {
      emerg: "red",
      alert: "yellow",
      crit: "red",
      error: "red",
      warning: "red",
      notice: "yellow",
      info: "green",
      debug: "blue"
    };
  }
});

// ../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/index.js
var require_config = __commonJS({
  "../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/config/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "cli", {
      value: require_cli()
    });
    Object.defineProperty(exports2, "npm", {
      value: require_npm()
    });
    Object.defineProperty(exports2, "syslog", {
      value: require_syslog()
    });
  }
});

// ../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/index.js
var require_triple_beam = __commonJS({
  "../../node_modules/.store/triple-beam-npm-1.3.0-eda4e2a46c/node_modules/triple-beam/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "LEVEL", {
      value: Symbol.for("level")
    });
    Object.defineProperty(exports2, "MESSAGE", {
      value: Symbol.for("message")
    });
    Object.defineProperty(exports2, "SPLAT", {
      value: Symbol.for("splat")
    });
    Object.defineProperty(exports2, "configs", {
      value: require_config()
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/format.js
var require_format = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/format.js"(exports2, module2) {
    "use strict";
    var InvalidFormatError = class extends Error {
      constructor(formatFn) {
        super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split("\n")[0]}
`);
        Error.captureStackTrace(this, InvalidFormatError);
      }
    };
    module2.exports = (formatFn) => {
      if (formatFn.length > 2) {
        throw new InvalidFormatError(formatFn);
      }
      function Format(options = {}) {
        this.options = options;
      }
      Format.prototype.transform = formatFn;
      function createFormatWrap(opts) {
        return new Format(opts);
      }
      createFormatWrap.Format = Format;
      return createFormatWrap;
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/styles.js
var require_styles = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/styles.js"(exports2, module2) {
    var styles4 = {};
    module2["exports"] = styles4;
    var codes = {
      reset: [0, 0],
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29],
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      gray: [90, 39],
      grey: [90, 39],
      brightRed: [91, 39],
      brightGreen: [92, 39],
      brightYellow: [93, 39],
      brightBlue: [94, 39],
      brightMagenta: [95, 39],
      brightCyan: [96, 39],
      brightWhite: [97, 39],
      bgBlack: [40, 49],
      bgRed: [41, 49],
      bgGreen: [42, 49],
      bgYellow: [43, 49],
      bgBlue: [44, 49],
      bgMagenta: [45, 49],
      bgCyan: [46, 49],
      bgWhite: [47, 49],
      bgGray: [100, 49],
      bgGrey: [100, 49],
      bgBrightRed: [101, 49],
      bgBrightGreen: [102, 49],
      bgBrightYellow: [103, 49],
      bgBrightBlue: [104, 49],
      bgBrightMagenta: [105, 49],
      bgBrightCyan: [106, 49],
      bgBrightWhite: [107, 49],
      blackBG: [40, 49],
      redBG: [41, 49],
      greenBG: [42, 49],
      yellowBG: [43, 49],
      blueBG: [44, 49],
      magentaBG: [45, 49],
      cyanBG: [46, 49],
      whiteBG: [47, 49]
    };
    Object.keys(codes).forEach(function(key2) {
      var val = codes[key2];
      var style = styles4[key2] = [];
      style.open = "\x1B[" + val[0] + "m";
      style.close = "\x1B[" + val[1] + "m";
    });
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/system/has-flag.js
var require_has_flag = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/system/has-flag.js"(exports2, module2) {
    "use strict";
    module2.exports = function(flag, argv) {
      argv = argv || process.argv;
      var terminatorPos = argv.indexOf("--");
      var prefix2 = /^-{1,2}/.test(flag) ? "" : "--";
      var pos = argv.indexOf(prefix2 + flag);
      return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/system/supports-colors.js
var require_supports_colors = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/system/supports-colors.js"(exports2, module2) {
    "use strict";
    var os2 = __require("os");
    var hasFlag2 = require_has_flag();
    var env2 = process.env;
    var forceColor = void 0;
    if (hasFlag2("no-color") || hasFlag2("no-colors") || hasFlag2("color=false")) {
      forceColor = false;
    } else if (hasFlag2("color") || hasFlag2("colors") || hasFlag2("color=true") || hasFlag2("color=always")) {
      forceColor = true;
    }
    if ("FORCE_COLOR" in env2) {
      forceColor = env2.FORCE_COLOR.length === 0 || parseInt(env2.FORCE_COLOR, 10) !== 0;
    }
    function translateLevel2(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor2(stream) {
      if (forceColor === false) {
        return 0;
      }
      if (hasFlag2("color=16m") || hasFlag2("color=full") || hasFlag2("color=truecolor")) {
        return 3;
      }
      if (hasFlag2("color=256")) {
        return 2;
      }
      if (stream && !stream.isTTY && forceColor !== true) {
        return 0;
      }
      var min = forceColor ? 1 : 0;
      if (process.platform === "win32") {
        var osRelease = os2.release().split(".");
        if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env2) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(function(sign) {
          return sign in env2;
        }) || env2.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env2) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env2.TEAMCITY_VERSION) ? 1 : 0;
      }
      if ("TERM_PROGRAM" in env2) {
        var version = parseInt((env2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env2.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Hyper":
            return 3;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env2.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env2.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env2) {
        return 1;
      }
      if (env2.TERM === "dumb") {
        return min;
      }
      return min;
    }
    function getSupportLevel(stream) {
      var level = supportsColor2(stream);
      return translateLevel2(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: getSupportLevel(process.stdout),
      stderr: getSupportLevel(process.stderr)
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/custom/trap.js
var require_trap = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/custom/trap.js"(exports2, module2) {
    module2["exports"] = function runTheTrap(text, options) {
      var result = "";
      text = text || "Run the trap, drop the bass";
      text = text.split("");
      var trap = {
        a: ["@", "\u0104", "\u023A", "\u0245", "\u0394", "\u039B", "\u0414"],
        b: ["\xDF", "\u0181", "\u0243", "\u026E", "\u03B2", "\u0E3F"],
        c: ["\xA9", "\u023B", "\u03FE"],
        d: ["\xD0", "\u018A", "\u0500", "\u0501", "\u0502", "\u0503"],
        e: [
          "\xCB",
          "\u0115",
          "\u018E",
          "\u0258",
          "\u03A3",
          "\u03BE",
          "\u04BC",
          "\u0A6C"
        ],
        f: ["\u04FA"],
        g: ["\u0262"],
        h: ["\u0126", "\u0195", "\u04A2", "\u04BA", "\u04C7", "\u050A"],
        i: ["\u0F0F"],
        j: ["\u0134"],
        k: ["\u0138", "\u04A0", "\u04C3", "\u051E"],
        l: ["\u0139"],
        m: ["\u028D", "\u04CD", "\u04CE", "\u0520", "\u0521", "\u0D69"],
        n: ["\xD1", "\u014B", "\u019D", "\u0376", "\u03A0", "\u048A"],
        o: [
          "\xD8",
          "\xF5",
          "\xF8",
          "\u01FE",
          "\u0298",
          "\u047A",
          "\u05DD",
          "\u06DD",
          "\u0E4F"
        ],
        p: ["\u01F7", "\u048E"],
        q: ["\u09CD"],
        r: ["\xAE", "\u01A6", "\u0210", "\u024C", "\u0280", "\u042F"],
        s: ["\xA7", "\u03DE", "\u03DF", "\u03E8"],
        t: ["\u0141", "\u0166", "\u0373"],
        u: ["\u01B1", "\u054D"],
        v: ["\u05D8"],
        w: ["\u0428", "\u0460", "\u047C", "\u0D70"],
        x: ["\u04B2", "\u04FE", "\u04FC", "\u04FD"],
        y: ["\xA5", "\u04B0", "\u04CB"],
        z: ["\u01B5", "\u0240"]
      };
      text.forEach(function(c) {
        c = c.toLowerCase();
        var chars = trap[c] || [" "];
        var rand = Math.floor(Math.random() * chars.length);
        if (typeof trap[c] !== "undefined") {
          result += trap[c][rand];
        } else {
          result += c;
        }
      });
      return result;
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/custom/zalgo.js
var require_zalgo = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/custom/zalgo.js"(exports2, module2) {
    module2["exports"] = function zalgo(text, options) {
      text = text || "   he is here   ";
      var soul = {
        "up": [
          "\u030D",
          "\u030E",
          "\u0304",
          "\u0305",
          "\u033F",
          "\u0311",
          "\u0306",
          "\u0310",
          "\u0352",
          "\u0357",
          "\u0351",
          "\u0307",
          "\u0308",
          "\u030A",
          "\u0342",
          "\u0313",
          "\u0308",
          "\u034A",
          "\u034B",
          "\u034C",
          "\u0303",
          "\u0302",
          "\u030C",
          "\u0350",
          "\u0300",
          "\u0301",
          "\u030B",
          "\u030F",
          "\u0312",
          "\u0313",
          "\u0314",
          "\u033D",
          "\u0309",
          "\u0363",
          "\u0364",
          "\u0365",
          "\u0366",
          "\u0367",
          "\u0368",
          "\u0369",
          "\u036A",
          "\u036B",
          "\u036C",
          "\u036D",
          "\u036E",
          "\u036F",
          "\u033E",
          "\u035B",
          "\u0346",
          "\u031A"
        ],
        "down": [
          "\u0316",
          "\u0317",
          "\u0318",
          "\u0319",
          "\u031C",
          "\u031D",
          "\u031E",
          "\u031F",
          "\u0320",
          "\u0324",
          "\u0325",
          "\u0326",
          "\u0329",
          "\u032A",
          "\u032B",
          "\u032C",
          "\u032D",
          "\u032E",
          "\u032F",
          "\u0330",
          "\u0331",
          "\u0332",
          "\u0333",
          "\u0339",
          "\u033A",
          "\u033B",
          "\u033C",
          "\u0345",
          "\u0347",
          "\u0348",
          "\u0349",
          "\u034D",
          "\u034E",
          "\u0353",
          "\u0354",
          "\u0355",
          "\u0356",
          "\u0359",
          "\u035A",
          "\u0323"
        ],
        "mid": [
          "\u0315",
          "\u031B",
          "\u0300",
          "\u0301",
          "\u0358",
          "\u0321",
          "\u0322",
          "\u0327",
          "\u0328",
          "\u0334",
          "\u0335",
          "\u0336",
          "\u035C",
          "\u035D",
          "\u035E",
          "\u035F",
          "\u0360",
          "\u0362",
          "\u0338",
          "\u0337",
          "\u0361",
          " \u0489"
        ]
      };
      var all = [].concat(soul.up, soul.down, soul.mid);
      function randomNumber(range) {
        var r = Math.floor(Math.random() * range);
        return r;
      }
      function isChar(character) {
        var bool = false;
        all.filter(function(i2) {
          bool = i2 === character;
        });
        return bool;
      }
      function heComes(text2, options2) {
        var result = "";
        var counts;
        var l;
        options2 = options2 || {};
        options2["up"] = typeof options2["up"] !== "undefined" ? options2["up"] : true;
        options2["mid"] = typeof options2["mid"] !== "undefined" ? options2["mid"] : true;
        options2["down"] = typeof options2["down"] !== "undefined" ? options2["down"] : true;
        options2["size"] = typeof options2["size"] !== "undefined" ? options2["size"] : "maxi";
        text2 = text2.split("");
        for (l in text2) {
          if (isChar(l)) {
            continue;
          }
          result = result + text2[l];
          counts = { "up": 0, "down": 0, "mid": 0 };
          switch (options2.size) {
            case "mini":
              counts.up = randomNumber(8);
              counts.mid = randomNumber(2);
              counts.down = randomNumber(8);
              break;
            case "maxi":
              counts.up = randomNumber(16) + 3;
              counts.mid = randomNumber(4) + 1;
              counts.down = randomNumber(64) + 3;
              break;
            default:
              counts.up = randomNumber(8) + 1;
              counts.mid = randomNumber(6) / 2;
              counts.down = randomNumber(8) + 1;
              break;
          }
          var arr = ["up", "mid", "down"];
          for (var d in arr) {
            var index = arr[d];
            for (var i2 = 0; i2 <= counts[index]; i2++) {
              if (options2[index]) {
                result = result + soul[index][randomNumber(soul[index].length)];
              }
            }
          }
        }
        return result;
      }
      return heComes(text, options);
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/america.js
var require_america = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/america.js"(exports2, module2) {
    module2["exports"] = function(colors) {
      return function(letter, i2, exploded) {
        if (letter === " ")
          return letter;
        switch (i2 % 3) {
          case 0:
            return colors.red(letter);
          case 1:
            return colors.white(letter);
          case 2:
            return colors.blue(letter);
        }
      };
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/zebra.js
var require_zebra = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/zebra.js"(exports2, module2) {
    module2["exports"] = function(colors) {
      return function(letter, i2, exploded) {
        return i2 % 2 === 0 ? letter : colors.inverse(letter);
      };
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/rainbow.js
var require_rainbow = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/rainbow.js"(exports2, module2) {
    module2["exports"] = function(colors) {
      var rainbowColors = ["red", "yellow", "green", "blue", "magenta"];
      return function(letter, i2, exploded) {
        if (letter === " ") {
          return letter;
        } else {
          return colors[rainbowColors[i2++ % rainbowColors.length]](letter);
        }
      };
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/random.js
var require_random = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/maps/random.js"(exports2, module2) {
    module2["exports"] = function(colors) {
      var available = [
        "underline",
        "inverse",
        "grey",
        "yellow",
        "red",
        "green",
        "blue",
        "white",
        "cyan",
        "magenta",
        "brightYellow",
        "brightRed",
        "brightGreen",
        "brightBlue",
        "brightWhite",
        "brightCyan",
        "brightMagenta"
      ];
      return function(letter, i2, exploded) {
        return letter === " " ? letter : colors[available[Math.round(Math.random() * (available.length - 2))]](letter);
      };
    };
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/colors.js
var require_colors = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/lib/colors.js"(exports2, module2) {
    var colors = {};
    module2["exports"] = colors;
    colors.themes = {};
    var util = __require("util");
    var ansiStyles3 = colors.styles = require_styles();
    var defineProps = Object.defineProperties;
    var newLineRegex = new RegExp(/[\r\n]+/g);
    colors.supportsColor = require_supports_colors().supportsColor;
    if (typeof colors.enabled === "undefined") {
      colors.enabled = colors.supportsColor() !== false;
    }
    colors.enable = function() {
      colors.enabled = true;
    };
    colors.disable = function() {
      colors.enabled = false;
    };
    colors.stripColors = colors.strip = function(str) {
      return ("" + str).replace(/\x1B\[\d+m/g, "");
    };
    var stylize = colors.stylize = function stylize2(str, style) {
      if (!colors.enabled) {
        return str + "";
      }
      var styleMap = ansiStyles3[style];
      if (!styleMap && style in colors) {
        return colors[style](str);
      }
      return styleMap.open + str + styleMap.close;
    };
    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
    var escapeStringRegexp2 = function(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a string");
      }
      return str.replace(matchOperatorsRe, "\\$&");
    };
    function build(_styles) {
      var builder = function builder2() {
        return applyStyle2.apply(builder2, arguments);
      };
      builder._styles = _styles;
      builder.__proto__ = proto2;
      return builder;
    }
    var styles4 = function() {
      var ret = {};
      ansiStyles3.grey = ansiStyles3.gray;
      Object.keys(ansiStyles3).forEach(function(key2) {
        ansiStyles3[key2].closeRe = new RegExp(escapeStringRegexp2(ansiStyles3[key2].close), "g");
        ret[key2] = {
          get: function() {
            return build(this._styles.concat(key2));
          }
        };
      });
      return ret;
    }();
    var proto2 = defineProps(function colors2() {
    }, styles4);
    function applyStyle2() {
      var args = Array.prototype.slice.call(arguments);
      var str = args.map(function(arg2) {
        if (arg2 != null && arg2.constructor === String) {
          return arg2;
        } else {
          return util.inspect(arg2);
        }
      }).join(" ");
      if (!colors.enabled || !str) {
        return str;
      }
      var newLinesPresent = str.indexOf("\n") != -1;
      var nestedStyles = this._styles;
      var i2 = nestedStyles.length;
      while (i2--) {
        var code = ansiStyles3[nestedStyles[i2]];
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        if (newLinesPresent) {
          str = str.replace(newLineRegex, function(match) {
            return code.close + match + code.open;
          });
        }
      }
      return str;
    }
    colors.setTheme = function(theme) {
      if (typeof theme === "string") {
        console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
        return;
      }
      for (var style in theme) {
        (function(style2) {
          colors[style2] = function(str) {
            if (typeof theme[style2] === "object") {
              var out = str;
              for (var i2 in theme[style2]) {
                out = colors[theme[style2][i2]](out);
              }
              return out;
            }
            return colors[theme[style2]](str);
          };
        })(style);
      }
    };
    function init() {
      var ret = {};
      Object.keys(styles4).forEach(function(name) {
        ret[name] = {
          get: function() {
            return build([name]);
          }
        };
      });
      return ret;
    }
    var sequencer = function sequencer2(map2, str) {
      var exploded = str.split("");
      exploded = exploded.map(map2);
      return exploded.join("");
    };
    colors.trap = require_trap();
    colors.zalgo = require_zalgo();
    colors.maps = {};
    colors.maps.america = require_america()(colors);
    colors.maps.zebra = require_zebra()(colors);
    colors.maps.rainbow = require_rainbow()(colors);
    colors.maps.random = require_random()(colors);
    for (map in colors.maps) {
      (function(map2) {
        colors[map2] = function(str) {
          return sequencer(colors.maps[map2], str);
        };
      })(map);
    }
    var map;
    defineProps(colors, init());
  }
});

// ../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/safe.js
var require_safe = __commonJS({
  "../../node_modules/.store/@colors-colors-npm-1.5.0-875af3a8b4/node_modules/@colors/colors/safe.js"(exports2, module2) {
    var colors = require_colors();
    module2["exports"] = colors;
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/colorize.js
var require_colorize = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/colorize.js"(exports2, module2) {
    "use strict";
    var colors = require_safe();
    var { LEVEL, MESSAGE } = require_triple_beam();
    colors.enabled = true;
    var hasSpace = /\s+/;
    var Colorizer = class {
      constructor(opts = {}) {
        if (opts.colors) {
          this.addColors(opts.colors);
        }
        this.options = opts;
      }
      static addColors(clrs) {
        const nextColors = Object.keys(clrs).reduce((acc, level) => {
          acc[level] = hasSpace.test(clrs[level]) ? clrs[level].split(hasSpace) : clrs[level];
          return acc;
        }, {});
        Colorizer.allColors = Object.assign({}, Colorizer.allColors || {}, nextColors);
        return Colorizer.allColors;
      }
      addColors(clrs) {
        return Colorizer.addColors(clrs);
      }
      colorize(lookup, level, message) {
        if (typeof message === "undefined") {
          message = level;
        }
        if (!Array.isArray(Colorizer.allColors[lookup])) {
          return colors[Colorizer.allColors[lookup]](message);
        }
        for (let i2 = 0, len = Colorizer.allColors[lookup].length; i2 < len; i2++) {
          message = colors[Colorizer.allColors[lookup][i2]](message);
        }
        return message;
      }
      transform(info, opts) {
        if (opts.all && typeof info[MESSAGE] === "string") {
          info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);
        }
        if (opts.level || opts.all || !opts.message) {
          info.level = this.colorize(info[LEVEL], info.level);
        }
        if (opts.all || opts.message) {
          info.message = this.colorize(info[LEVEL], info.level, info.message);
        }
        return info;
      }
    };
    module2.exports = (opts) => new Colorizer(opts);
    module2.exports.Colorizer = module2.exports.Format = Colorizer;
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/levels.js
var require_levels = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/levels.js"(exports2, module2) {
    "use strict";
    var { Colorizer } = require_colorize();
    module2.exports = (config) => {
      Colorizer.addColors(config.colors || config);
      return config;
    };
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/align.js
var require_align = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/align.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    module2.exports = format((info) => {
      info.message = `	${info.message}`;
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/errors.js
var require_errors2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/errors.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    var { LEVEL, MESSAGE } = require_triple_beam();
    module2.exports = format((einfo, { stack }) => {
      if (einfo instanceof Error) {
        const info = Object.assign({}, einfo, {
          level: einfo.level,
          [LEVEL]: einfo[LEVEL] || einfo.level,
          message: einfo.message,
          [MESSAGE]: einfo[MESSAGE] || einfo.message
        });
        if (stack)
          info.stack = einfo.stack;
        return info;
      }
      if (!(einfo.message instanceof Error))
        return einfo;
      const err2 = einfo.message;
      Object.assign(einfo, err2);
      einfo.message = err2.message;
      einfo[MESSAGE] = err2.message;
      if (stack)
        einfo.stack = err2.stack;
      return einfo;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/pad-levels.js
var require_pad_levels = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/pad-levels.js"(exports2, module2) {
    "use strict";
    var { configs, LEVEL, MESSAGE } = require_triple_beam();
    var Padder = class {
      constructor(opts = { levels: configs.npm.levels }) {
        this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);
        this.options = opts;
      }
      static getLongestLevel(levels) {
        const lvls = Object.keys(levels).map((level) => level.length);
        return Math.max(...lvls);
      }
      static paddingForLevel(level, filler, maxLength) {
        const targetLen = maxLength + 1 - level.length;
        const rep = Math.floor(targetLen / filler.length);
        const padding = `${filler}${filler.repeat(rep)}`;
        return padding.slice(0, targetLen);
      }
      static paddingForLevels(levels, filler = " ") {
        const maxLength = Padder.getLongestLevel(levels);
        return Object.keys(levels).reduce((acc, level) => {
          acc[level] = Padder.paddingForLevel(level, filler, maxLength);
          return acc;
        }, {});
      }
      transform(info, opts) {
        info.message = `${this.paddings[info[LEVEL]]}${info.message}`;
        if (info[MESSAGE]) {
          info[MESSAGE] = `${this.paddings[info[LEVEL]]}${info[MESSAGE]}`;
        }
        return info;
      }
    };
    module2.exports = (opts) => new Padder(opts);
    module2.exports.Padder = module2.exports.Format = Padder;
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/cli.js
var require_cli2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/cli.js"(exports2, module2) {
    "use strict";
    var { Colorizer } = require_colorize();
    var { Padder } = require_pad_levels();
    var { configs, MESSAGE } = require_triple_beam();
    var CliFormat = class {
      constructor(opts = {}) {
        if (!opts.levels) {
          opts.levels = configs.cli.levels;
        }
        this.colorizer = new Colorizer(opts);
        this.padder = new Padder(opts);
        this.options = opts;
      }
      transform(info, opts) {
        this.colorizer.transform(
          this.padder.transform(info, opts),
          opts
        );
        info[MESSAGE] = `${info.level}:${info.message}`;
        return info;
      }
    };
    module2.exports = (opts) => new CliFormat(opts);
    module2.exports.Format = CliFormat;
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/combine.js
var require_combine = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/combine.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    function cascade(formats) {
      if (!formats.every(isValidFormat)) {
        return;
      }
      return (info) => {
        let obj = info;
        for (let i2 = 0; i2 < formats.length; i2++) {
          obj = formats[i2].transform(obj, formats[i2].options);
          if (!obj) {
            return false;
          }
        }
        return obj;
      };
    }
    function isValidFormat(fmt) {
      if (typeof fmt.transform !== "function") {
        throw new Error([
          "No transform function found on format. Did you create a format instance?",
          "const myFormat = format(formatFn);",
          "const instance = myFormat();"
        ].join("\n"));
      }
      return true;
    }
    module2.exports = (...formats) => {
      const combinedFormat = format(cascade(formats));
      const instance = combinedFormat();
      instance.Format = combinedFormat.Format;
      return instance;
    };
    module2.exports.cascade = cascade;
  }
});

// ../../node_modules/.store/safe-stable-stringify-npm-2.3.1-5e1888c3a7/node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS({
  "../../node_modules/.store/safe-stable-stringify-npm-2.3.1-5e1888c3a7/node_modules/safe-stable-stringify/index.js"(exports2, module2) {
    "use strict";
    var stringify = configure();
    stringify.configure = configure;
    stringify.stringify = stringify;
    stringify.default = stringify;
    exports2.stringify = stringify;
    exports2.configure = configure;
    module2.exports = stringify;
    var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/;
    var strEscapeSequencesReplacer = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]|[\ud800-\udbff](?![\udc00-\udfff])|(?:[^\ud800-\udbff]|^)[\udc00-\udfff]/g;
    var meta = [
      "\\u0000",
      "\\u0001",
      "\\u0002",
      "\\u0003",
      "\\u0004",
      "\\u0005",
      "\\u0006",
      "\\u0007",
      "\\b",
      "\\t",
      "\\n",
      "\\u000b",
      "\\f",
      "\\r",
      "\\u000e",
      "\\u000f",
      "\\u0010",
      "\\u0011",
      "\\u0012",
      "\\u0013",
      "\\u0014",
      "\\u0015",
      "\\u0016",
      "\\u0017",
      "\\u0018",
      "\\u0019",
      "\\u001a",
      "\\u001b",
      "\\u001c",
      "\\u001d",
      "\\u001e",
      "\\u001f",
      "",
      "",
      '\\"',
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\\\\"
    ];
    function escapeFn(str) {
      if (str.length === 2) {
        const charCode2 = str.charCodeAt(1);
        return `${str[0]}\\u${charCode2.toString(16)}`;
      }
      const charCode = str.charCodeAt(0);
      return meta.length > charCode ? meta[charCode] : `\\u${charCode.toString(16)}`;
    }
    function strEscape(str) {
      if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) {
        return str;
      }
      if (str.length > 100) {
        return str.replace(strEscapeSequencesReplacer, escapeFn);
      }
      let result = "";
      let last = 0;
      for (let i2 = 0; i2 < str.length; i2++) {
        const point = str.charCodeAt(i2);
        if (point === 34 || point === 92 || point < 32) {
          result += `${str.slice(last, i2)}${meta[point]}`;
          last = i2 + 1;
        } else if (point >= 55296 && point <= 57343) {
          if (point <= 56319 && i2 + 1 < str.length) {
            const point2 = str.charCodeAt(i2 + 1);
            if (point2 >= 56320 && point2 <= 57343) {
              i2++;
              continue;
            }
          }
          result += `${str.slice(last, i2)}${`\\u${point.toString(16)}`}`;
          last = i2 + 1;
        }
      }
      result += str.slice(last);
      return result;
    }
    function insertSort(array) {
      if (array.length > 200) {
        return array.sort();
      }
      for (let i2 = 1; i2 < array.length; i2++) {
        const currentValue = array[i2];
        let position = i2;
        while (position !== 0 && array[position - 1] > currentValue) {
          array[position] = array[position - 1];
          position--;
        }
        array[position] = currentValue;
      }
      return array;
    }
    var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(
      Object.getPrototypeOf(
        Object.getPrototypeOf(
          new Uint8Array()
        )
      ),
      Symbol.toStringTag
    ).get;
    function isTypedArrayWithEntries(value) {
      return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0 && value.length !== 0;
    }
    function stringifyTypedArray(array, separator, maximumBreadth) {
      if (array.length < maximumBreadth) {
        maximumBreadth = array.length;
      }
      const whitespace = separator === "," ? "" : " ";
      let res = `"0":${whitespace}${array[0]}`;
      for (let i2 = 1; i2 < maximumBreadth; i2++) {
        res += `${separator}"${i2}":${whitespace}${array[i2]}`;
      }
      return res;
    }
    function getCircularValueOption(options) {
      if (options && Object.prototype.hasOwnProperty.call(options, "circularValue")) {
        var circularValue = options.circularValue;
        if (typeof circularValue === "string") {
          return `"${circularValue}"`;
        }
        if (circularValue == null) {
          return circularValue;
        }
        if (circularValue === Error || circularValue === TypeError) {
          return {
            toString() {
              throw new TypeError("Converting circular structure to JSON");
            }
          };
        }
        throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
      }
      return '"[Circular]"';
    }
    function getBooleanOption(options, key2) {
      if (options && Object.prototype.hasOwnProperty.call(options, key2)) {
        var value = options[key2];
        if (typeof value !== "boolean") {
          throw new TypeError(`The "${key2}" argument must be of type boolean`);
        }
      }
      return value === void 0 ? true : value;
    }
    function getPositiveIntegerOption(options, key2) {
      if (options && Object.prototype.hasOwnProperty.call(options, key2)) {
        var value = options[key2];
        if (typeof value !== "number") {
          throw new TypeError(`The "${key2}" argument must be of type number`);
        }
        if (!Number.isInteger(value)) {
          throw new TypeError(`The "${key2}" argument must be an integer`);
        }
        if (value < 1) {
          throw new RangeError(`The "${key2}" argument must be >= 1`);
        }
      }
      return value === void 0 ? Infinity : value;
    }
    function getItemCount(number) {
      if (number === 1) {
        return "1 item";
      }
      return `${number} items`;
    }
    function getUniqueReplacerSet(replacerArray) {
      const replacerSet = /* @__PURE__ */ new Set();
      for (const value of replacerArray) {
        if (typeof value === "string") {
          replacerSet.add(value);
        } else if (typeof value === "number") {
          replacerSet.add(String(value));
        }
      }
      return replacerSet;
    }
    function configure(options) {
      const circularValue = getCircularValueOption(options);
      const bigint = getBooleanOption(options, "bigint");
      const deterministic = getBooleanOption(options, "deterministic");
      const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
      const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
      function stringifyFnReplacer(key2, parent, stack, replacer, spacer, indentation) {
        let value = parent[key2];
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key2);
        }
        value = replacer.call(parent, key2, value);
        switch (typeof value) {
          case "string":
            return `"${strEscape(value)}"`;
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            let join = ",";
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i2 = 0;
              for (; i2 < maximumValuesToStringify - 1; i2++) {
                const tmp2 = stringifyFnReplacer(i2, value, stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join;
              }
              const tmp = stringifyFnReplacer(i2, value, stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let whitespace = "";
            let separator = "";
            if (spacer !== "") {
              indentation += spacer;
              join = `,
${indentation}`;
              whitespace = " ";
            }
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, join, maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = join;
            }
            if (deterministic) {
              keys = insertSort(keys);
            }
            stack.push(value);
            for (let i2 = 0; i2 < maximumPropertiesToStringify; i2++) {
              const key3 = keys[i2];
              const tmp = stringifyFnReplacer(key3, value, stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}"${strEscape(key3)}":${whitespace}${tmp}`;
                separator = join;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
              separator = join;
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "bigint":
            return bigint ? String(value) : void 0;
        }
      }
      function stringifyArrayReplacer(key2, value, stack, replacer, spacer, indentation) {
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key2);
        }
        switch (typeof value) {
          case "string":
            return `"${strEscape(value)}"`;
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            let res = "";
            let join = ",";
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i2 = 0;
              for (; i2 < maximumValuesToStringify - 1; i2++) {
                const tmp2 = stringifyArrayReplacer(i2, value[i2], stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join;
              }
              const tmp = stringifyArrayReplacer(i2, value[i2], stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            if (replacer.size === 0) {
              return "{}";
            }
            stack.push(value);
            let whitespace = "";
            if (spacer !== "") {
              indentation += spacer;
              join = `,
${indentation}`;
              whitespace = " ";
            }
            let separator = "";
            for (const key3 of replacer) {
              const tmp = stringifyArrayReplacer(key3, value[key3], stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}"${strEscape(key3)}":${whitespace}${tmp}`;
                separator = join;
              }
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "bigint":
            return bigint ? String(value) : void 0;
        }
      }
      function stringifyIndent(key2, value, stack, spacer, indentation) {
        switch (typeof value) {
          case "string":
            return `"${strEscape(value)}"`;
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key2);
              if (typeof value !== "object") {
                return stringifyIndent(key2, value, stack, spacer, indentation);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              indentation += spacer;
              let res2 = `
${indentation}`;
              const join2 = `,
${indentation}`;
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i2 = 0;
              for (; i2 < maximumValuesToStringify - 1; i2++) {
                const tmp2 = stringifyIndent(i2, value[i2], stack, spacer, indentation);
                res2 += tmp2 !== void 0 ? tmp2 : "null";
                res2 += join2;
              }
              const tmp = stringifyIndent(i2, value[i2], stack, spacer, indentation);
              res2 += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res2 += `${join2}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              res2 += `
${originalIndentation}`;
              stack.pop();
              return `[${res2}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            indentation += spacer;
            const join = `,
${indentation}`;
            let res = "";
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, join, maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = join;
            }
            if (deterministic) {
              keys = insertSort(keys);
            }
            stack.push(value);
            for (let i2 = 0; i2 < maximumPropertiesToStringify; i2++) {
              const key3 = keys[i2];
              const tmp = stringifyIndent(key3, value[key3], stack, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}"${strEscape(key3)}": ${tmp}`;
                separator = join;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
              separator = join;
            }
            if (separator !== "") {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "bigint":
            return bigint ? String(value) : void 0;
        }
      }
      function stringifySimple(key2, value, stack) {
        switch (typeof value) {
          case "string":
            return `"${strEscape(value)}"`;
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key2);
              if (typeof value !== "object") {
                return stringifySimple(key2, value, stack);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i2 = 0;
              for (; i2 < maximumValuesToStringify - 1; i2++) {
                const tmp2 = stringifySimple(i2, value[i2], stack);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += ",";
              }
              const tmp = stringifySimple(i2, value[i2], stack);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `,"... ${getItemCount(removedKeys)} not stringified"`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, ",", maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = ",";
            }
            if (deterministic) {
              keys = insertSort(keys);
            }
            stack.push(value);
            for (let i2 = 0; i2 < maximumPropertiesToStringify; i2++) {
              const key3 = keys[i2];
              const tmp = stringifySimple(key3, value[key3], stack);
              if (tmp !== void 0) {
                res += `${separator}"${strEscape(key3)}":${tmp}`;
                separator = ",";
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "bigint":
            return bigint ? String(value) : void 0;
        }
      }
      function stringify2(value, replacer, space) {
        if (arguments.length > 1) {
          let spacer = "";
          if (typeof space === "number") {
            spacer = " ".repeat(Math.min(space, 10));
          } else if (typeof space === "string") {
            spacer = space.slice(0, 10);
          }
          if (replacer != null) {
            if (typeof replacer === "function") {
              return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
            }
            if (Array.isArray(replacer)) {
              return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
            }
          }
          if (spacer.length !== 0) {
            return stringifyIndent("", value, [], spacer, "");
          }
        }
        return stringifySimple("", value, []);
      }
      return stringify2;
    }
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/json.js
var require_json2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/json.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    var { MESSAGE } = require_triple_beam();
    var stringify = require_safe_stable_stringify();
    function replacer(key2, value) {
      if (typeof value === "bigint")
        return value.toString();
      return value;
    }
    module2.exports = format((info, opts) => {
      const jsonStringify = stringify.configure(opts);
      info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/label.js
var require_label = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/label.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    module2.exports = format((info, opts) => {
      if (opts.message) {
        info.message = `[${opts.label}] ${info.message}`;
        return info;
      }
      info.label = opts.label;
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/logstash.js
var require_logstash = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/logstash.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    var { MESSAGE } = require_triple_beam();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format((info) => {
      const logstash = {};
      if (info.message) {
        logstash["@message"] = info.message;
        delete info.message;
      }
      if (info.timestamp) {
        logstash["@timestamp"] = info.timestamp;
        delete info.timestamp;
      }
      logstash["@fields"] = info;
      info[MESSAGE] = jsonStringify(logstash);
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/metadata.js
var require_metadata = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/metadata.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    function fillExcept(info, fillExceptKeys, metadataKey) {
      const savedKeys = fillExceptKeys.reduce((acc, key2) => {
        acc[key2] = info[key2];
        delete info[key2];
        return acc;
      }, {});
      const metadata = Object.keys(info).reduce((acc, key2) => {
        acc[key2] = info[key2];
        delete info[key2];
        return acc;
      }, {});
      Object.assign(info, savedKeys, {
        [metadataKey]: metadata
      });
      return info;
    }
    function fillWith(info, fillWithKeys, metadataKey) {
      info[metadataKey] = fillWithKeys.reduce((acc, key2) => {
        acc[key2] = info[key2];
        delete info[key2];
        return acc;
      }, {});
      return info;
    }
    module2.exports = format((info, opts = {}) => {
      let metadataKey = "metadata";
      if (opts.key) {
        metadataKey = opts.key;
      }
      let fillExceptKeys = [];
      if (!opts.fillExcept && !opts.fillWith) {
        fillExceptKeys.push("level");
        fillExceptKeys.push("message");
      }
      if (opts.fillExcept) {
        fillExceptKeys = opts.fillExcept;
      }
      if (fillExceptKeys.length > 0) {
        return fillExcept(info, fillExceptKeys, metadataKey);
      }
      if (opts.fillWith) {
        return fillWith(info, opts.fillWith, metadataKey);
      }
      return info;
    });
  }
});

// ../../node_modules/.store/ms-npm-2.1.3-81ff3cfac1/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.store/ms-npm-2.1.3-81ff3cfac1/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type2 = typeof val;
      if (type2 === "string" && val.length > 0) {
        return parse(val);
      } else if (type2 === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type2 = (match[2] || "ms").toLowerCase();
      switch (type2) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/ms.js
var require_ms2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/ms.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    var ms = require_ms();
    module2.exports = format((info) => {
      const curr = +new Date();
      exports2.diff = curr - (exports2.prevTime || curr);
      exports2.prevTime = curr;
      info.ms = `+${ms(exports2.diff)}`;
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/pretty-print.js
var require_pretty_print = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/pretty-print.js"(exports2, module2) {
    "use strict";
    var inspect = __require("util").inspect;
    var format = require_format();
    var { LEVEL, MESSAGE, SPLAT } = require_triple_beam();
    module2.exports = format((info, opts = {}) => {
      const stripped = Object.assign({}, info);
      delete stripped[LEVEL];
      delete stripped[MESSAGE];
      delete stripped[SPLAT];
      info[MESSAGE] = inspect(stripped, false, opts.depth || null, opts.colorize);
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/printf.js
var require_printf = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/printf.js"(exports2, module2) {
    "use strict";
    var { MESSAGE } = require_triple_beam();
    var Printf = class {
      constructor(templateFn) {
        this.template = templateFn;
      }
      transform(info) {
        info[MESSAGE] = this.template(info);
        return info;
      }
    };
    module2.exports = (opts) => new Printf(opts);
    module2.exports.Printf = module2.exports.Format = Printf;
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/simple.js
var require_simple = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/simple.js"(exports2, module2) {
    "use strict";
    var format = require_format();
    var { MESSAGE } = require_triple_beam();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format((info) => {
      const stringifiedRest = jsonStringify(Object.assign({}, info, {
        level: void 0,
        message: void 0,
        splat: void 0
      }));
      const padding = info.padding && info.padding[info.level] || "";
      if (stringifiedRest !== "{}") {
        info[MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;
      } else {
        info[MESSAGE] = `${info.level}:${padding} ${info.message}`;
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/splat.js
var require_splat = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/splat.js"(exports2, module2) {
    "use strict";
    var util = __require("util");
    var { SPLAT } = require_triple_beam();
    var formatRegExp = /%[scdjifoO%]/g;
    var escapedPercent = /%%/g;
    var Splatter = class {
      constructor(opts) {
        this.options = opts;
      }
      _splat(info, tokens) {
        const msg = info.message;
        const splat = info[SPLAT] || info.splat || [];
        const percents = msg.match(escapedPercent);
        const escapes = percents && percents.length || 0;
        const expectedSplat = tokens.length - escapes;
        const extraSplat = expectedSplat - splat.length;
        const metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];
        const metalen = metas.length;
        if (metalen) {
          for (let i2 = 0; i2 < metalen; i2++) {
            Object.assign(info, metas[i2]);
          }
        }
        info.message = util.format(msg, ...splat);
        return info;
      }
      transform(info) {
        const msg = info.message;
        const splat = info[SPLAT] || info.splat;
        if (!splat || !splat.length) {
          return info;
        }
        const tokens = msg && msg.match && msg.match(formatRegExp);
        if (!tokens && (splat || splat.length)) {
          const metas = splat.length > 1 ? splat.splice(0) : splat;
          const metalen = metas.length;
          if (metalen) {
            for (let i2 = 0; i2 < metalen; i2++) {
              Object.assign(info, metas[i2]);
            }
          }
          return info;
        }
        if (tokens) {
          return this._splat(info, tokens);
        }
        return info;
      }
    };
    module2.exports = (opts) => new Splatter(opts);
  }
});

// ../../node_modules/.store/fecha-npm-4.2.1-40d84f7733/node_modules/fecha/lib/fecha.umd.js
var require_fecha_umd = __commonJS({
  "../../node_modules/.store/fecha-npm-4.2.1-40d84f7733/node_modules/fecha/lib/fecha.umd.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.fecha = {});
    })(exports2, function(exports3) {
      "use strict";
      var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
      var twoDigitsOptional = "[1-9]\\d?";
      var twoDigits = "\\d\\d";
      var threeDigits = "\\d{3}";
      var fourDigits = "\\d{4}";
      var word = "[^\\s]+";
      var literal = /\[([^]*?)\]/gm;
      function shorten(arr, sLen) {
        var newArr = [];
        for (var i2 = 0, len = arr.length; i2 < len; i2++) {
          newArr.push(arr[i2].substr(0, sLen));
        }
        return newArr;
      }
      var monthUpdate = function(arrName) {
        return function(v, i18n) {
          var lowerCaseArr = i18n[arrName].map(function(v2) {
            return v2.toLowerCase();
          });
          var index = lowerCaseArr.indexOf(v.toLowerCase());
          if (index > -1) {
            return index;
          }
          return null;
        };
      };
      function assign(origObj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        for (var _a2 = 0, args_1 = args; _a2 < args_1.length; _a2++) {
          var obj = args_1[_a2];
          for (var key2 in obj) {
            origObj[key2] = obj[key2];
          }
        }
        return origObj;
      }
      var dayNames = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
      ];
      var monthNames = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
      ];
      var monthNamesShort = shorten(monthNames, 3);
      var dayNamesShort = shorten(dayNames, 3);
      var defaultI18n = {
        dayNamesShort,
        dayNames,
        monthNamesShort,
        monthNames,
        amPm: ["am", "pm"],
        DoFn: function(dayOfMonth) {
          return dayOfMonth + ["th", "st", "nd", "rd"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];
        }
      };
      var globalI18n = assign({}, defaultI18n);
      var setGlobalDateI18n = function(i18n) {
        return globalI18n = assign(globalI18n, i18n);
      };
      var regexEscape = function(str) {
        return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
      };
      var pad = function(val, len) {
        if (len === void 0) {
          len = 2;
        }
        val = String(val);
        while (val.length < len) {
          val = "0" + val;
        }
        return val;
      };
      var formatFlags = {
        D: function(dateObj) {
          return String(dateObj.getDate());
        },
        DD: function(dateObj) {
          return pad(dateObj.getDate());
        },
        Do: function(dateObj, i18n) {
          return i18n.DoFn(dateObj.getDate());
        },
        d: function(dateObj) {
          return String(dateObj.getDay());
        },
        dd: function(dateObj) {
          return pad(dateObj.getDay());
        },
        ddd: function(dateObj, i18n) {
          return i18n.dayNamesShort[dateObj.getDay()];
        },
        dddd: function(dateObj, i18n) {
          return i18n.dayNames[dateObj.getDay()];
        },
        M: function(dateObj) {
          return String(dateObj.getMonth() + 1);
        },
        MM: function(dateObj) {
          return pad(dateObj.getMonth() + 1);
        },
        MMM: function(dateObj, i18n) {
          return i18n.monthNamesShort[dateObj.getMonth()];
        },
        MMMM: function(dateObj, i18n) {
          return i18n.monthNames[dateObj.getMonth()];
        },
        YY: function(dateObj) {
          return pad(String(dateObj.getFullYear()), 4).substr(2);
        },
        YYYY: function(dateObj) {
          return pad(dateObj.getFullYear(), 4);
        },
        h: function(dateObj) {
          return String(dateObj.getHours() % 12 || 12);
        },
        hh: function(dateObj) {
          return pad(dateObj.getHours() % 12 || 12);
        },
        H: function(dateObj) {
          return String(dateObj.getHours());
        },
        HH: function(dateObj) {
          return pad(dateObj.getHours());
        },
        m: function(dateObj) {
          return String(dateObj.getMinutes());
        },
        mm: function(dateObj) {
          return pad(dateObj.getMinutes());
        },
        s: function(dateObj) {
          return String(dateObj.getSeconds());
        },
        ss: function(dateObj) {
          return pad(dateObj.getSeconds());
        },
        S: function(dateObj) {
          return String(Math.round(dateObj.getMilliseconds() / 100));
        },
        SS: function(dateObj) {
          return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
        },
        SSS: function(dateObj) {
          return pad(dateObj.getMilliseconds(), 3);
        },
        a: function(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
        },
        A: function(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
        },
        ZZ: function(dateObj) {
          var offset = dateObj.getTimezoneOffset();
          return (offset > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);
        },
        Z: function(dateObj) {
          var offset = dateObj.getTimezoneOffset();
          return (offset > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset) / 60), 2) + ":" + pad(Math.abs(offset) % 60, 2);
        }
      };
      var monthParse = function(v) {
        return +v - 1;
      };
      var emptyDigits = [null, twoDigitsOptional];
      var emptyWord = [null, word];
      var amPm = [
        "isPm",
        word,
        function(v, i18n) {
          var val = v.toLowerCase();
          if (val === i18n.amPm[0]) {
            return 0;
          } else if (val === i18n.amPm[1]) {
            return 1;
          }
          return null;
        }
      ];
      var timezoneOffset = [
        "timezoneOffset",
        "[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",
        function(v) {
          var parts = (v + "").match(/([+-]|\d\d)/gi);
          if (parts) {
            var minutes = +parts[1] * 60 + parseInt(parts[2], 10);
            return parts[0] === "+" ? minutes : -minutes;
          }
          return 0;
        }
      ];
      var parseFlags = {
        D: ["day", twoDigitsOptional],
        DD: ["day", twoDigits],
        Do: ["day", twoDigitsOptional + word, function(v) {
          return parseInt(v, 10);
        }],
        M: ["month", twoDigitsOptional, monthParse],
        MM: ["month", twoDigits, monthParse],
        YY: [
          "year",
          twoDigits,
          function(v) {
            var now = new Date();
            var cent = +("" + now.getFullYear()).substr(0, 2);
            return +("" + (+v > 68 ? cent - 1 : cent) + v);
          }
        ],
        h: ["hour", twoDigitsOptional, void 0, "isPm"],
        hh: ["hour", twoDigits, void 0, "isPm"],
        H: ["hour", twoDigitsOptional],
        HH: ["hour", twoDigits],
        m: ["minute", twoDigitsOptional],
        mm: ["minute", twoDigits],
        s: ["second", twoDigitsOptional],
        ss: ["second", twoDigits],
        YYYY: ["year", fourDigits],
        S: ["millisecond", "\\d", function(v) {
          return +v * 100;
        }],
        SS: ["millisecond", twoDigits, function(v) {
          return +v * 10;
        }],
        SSS: ["millisecond", threeDigits],
        d: emptyDigits,
        dd: emptyDigits,
        ddd: emptyWord,
        dddd: emptyWord,
        MMM: ["month", word, monthUpdate("monthNamesShort")],
        MMMM: ["month", word, monthUpdate("monthNames")],
        a: amPm,
        A: amPm,
        ZZ: timezoneOffset,
        Z: timezoneOffset
      };
      var globalMasks = {
        default: "ddd MMM DD YYYY HH:mm:ss",
        shortDate: "M/D/YY",
        mediumDate: "MMM D, YYYY",
        longDate: "MMMM D, YYYY",
        fullDate: "dddd, MMMM D, YYYY",
        isoDate: "YYYY-MM-DD",
        isoDateTime: "YYYY-MM-DDTHH:mm:ssZ",
        shortTime: "HH:mm",
        mediumTime: "HH:mm:ss",
        longTime: "HH:mm:ss.SSS"
      };
      var setGlobalDateMasks = function(masks) {
        return assign(globalMasks, masks);
      };
      var format = function(dateObj, mask2, i18n) {
        if (mask2 === void 0) {
          mask2 = globalMasks["default"];
        }
        if (i18n === void 0) {
          i18n = {};
        }
        if (typeof dateObj === "number") {
          dateObj = new Date(dateObj);
        }
        if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
          throw new Error("Invalid Date pass to format");
        }
        mask2 = globalMasks[mask2] || mask2;
        var literals = [];
        mask2 = mask2.replace(literal, function($0, $1) {
          literals.push($1);
          return "@@@";
        });
        var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
        mask2 = mask2.replace(token, function($0) {
          return formatFlags[$0](dateObj, combinedI18nSettings);
        });
        return mask2.replace(/@@@/g, function() {
          return literals.shift();
        });
      };
      function parse(dateStr, format2, i18n) {
        if (i18n === void 0) {
          i18n = {};
        }
        if (typeof format2 !== "string") {
          throw new Error("Invalid format in fecha parse");
        }
        format2 = globalMasks[format2] || format2;
        if (dateStr.length > 1e3) {
          return null;
        }
        var today = new Date();
        var dateInfo = {
          year: today.getFullYear(),
          month: 0,
          day: 1,
          hour: 0,
          minute: 0,
          second: 0,
          millisecond: 0,
          isPm: null,
          timezoneOffset: null
        };
        var parseInfo = [];
        var literals = [];
        var newFormat = format2.replace(literal, function($0, $1) {
          literals.push(regexEscape($1));
          return "@@@";
        });
        var specifiedFields = {};
        var requiredFields = {};
        newFormat = regexEscape(newFormat).replace(token, function($0) {
          var info = parseFlags[$0];
          var field2 = info[0], regex = info[1], requiredField = info[3];
          if (specifiedFields[field2]) {
            throw new Error("Invalid format. " + field2 + " specified twice in format");
          }
          specifiedFields[field2] = true;
          if (requiredField) {
            requiredFields[requiredField] = true;
          }
          parseInfo.push(info);
          return "(" + regex + ")";
        });
        Object.keys(requiredFields).forEach(function(field2) {
          if (!specifiedFields[field2]) {
            throw new Error("Invalid format. " + field2 + " is required in specified format");
          }
        });
        newFormat = newFormat.replace(/@@@/g, function() {
          return literals.shift();
        });
        var matches = dateStr.match(new RegExp(newFormat, "i"));
        if (!matches) {
          return null;
        }
        var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
        for (var i2 = 1; i2 < matches.length; i2++) {
          var _a2 = parseInfo[i2 - 1], field = _a2[0], parser = _a2[2];
          var value = parser ? parser(matches[i2], combinedI18nSettings) : +matches[i2];
          if (value == null) {
            return null;
          }
          dateInfo[field] = value;
        }
        if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {
          dateInfo.hour = +dateInfo.hour + 12;
        } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {
          dateInfo.hour = 0;
        }
        var dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);
        var validateFields = [
          ["month", "getMonth"],
          ["day", "getDate"],
          ["hour", "getHours"],
          ["minute", "getMinutes"],
          ["second", "getSeconds"]
        ];
        for (var i2 = 0, len = validateFields.length; i2 < len; i2++) {
          if (specifiedFields[validateFields[i2][0]] && dateInfo[validateFields[i2][0]] !== dateWithoutTZ[validateFields[i2][1]]()) {
            return null;
          }
        }
        if (dateInfo.timezoneOffset == null) {
          return dateWithoutTZ;
        }
        return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));
      }
      var fecha = {
        format,
        parse,
        defaultI18n,
        setGlobalDateI18n,
        setGlobalDateMasks
      };
      exports3.assign = assign;
      exports3.default = fecha;
      exports3.format = format;
      exports3.parse = parse;
      exports3.defaultI18n = defaultI18n;
      exports3.setGlobalDateI18n = setGlobalDateI18n;
      exports3.setGlobalDateMasks = setGlobalDateMasks;
      Object.defineProperty(exports3, "__esModule", { value: true });
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/timestamp.js
var require_timestamp = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/timestamp.js"(exports2, module2) {
    "use strict";
    var fecha = require_fecha_umd();
    var format = require_format();
    module2.exports = format((info, opts = {}) => {
      if (opts.format) {
        info.timestamp = typeof opts.format === "function" ? opts.format() : fecha.format(new Date(), opts.format);
      }
      if (!info.timestamp) {
        info.timestamp = new Date().toISOString();
      }
      if (opts.alias) {
        info[opts.alias] = info.timestamp;
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/uncolorize.js
var require_uncolorize = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/uncolorize.js"(exports2, module2) {
    "use strict";
    var colors = require_safe();
    var format = require_format();
    var { MESSAGE } = require_triple_beam();
    module2.exports = format((info, opts) => {
      if (opts.level !== false) {
        info.level = colors.strip(info.level);
      }
      if (opts.message !== false) {
        info.message = colors.strip(info.message);
      }
      if (opts.raw !== false && info[MESSAGE]) {
        info[MESSAGE] = colors.strip(info[MESSAGE]);
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/index.js
var require_logform = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.0-8b1d55d47a/node_modules/logform/index.js"(exports2) {
    "use strict";
    var format = exports2.format = require_format();
    exports2.levels = require_levels();
    function exposeFormat(name, requireFormat) {
      Object.defineProperty(format, name, {
        get() {
          return requireFormat();
        },
        configurable: true
      });
    }
    exposeFormat("align", function() {
      return require_align();
    });
    exposeFormat("errors", function() {
      return require_errors2();
    });
    exposeFormat("cli", function() {
      return require_cli2();
    });
    exposeFormat("combine", function() {
      return require_combine();
    });
    exposeFormat("colorize", function() {
      return require_colorize();
    });
    exposeFormat("json", function() {
      return require_json2();
    });
    exposeFormat("label", function() {
      return require_label();
    });
    exposeFormat("logstash", function() {
      return require_logstash();
    });
    exposeFormat("metadata", function() {
      return require_metadata();
    });
    exposeFormat("ms", function() {
      return require_ms2();
    });
    exposeFormat("padLevels", function() {
      return require_pad_levels();
    });
    exposeFormat("prettyPrint", function() {
      return require_pretty_print();
    });
    exposeFormat("printf", function() {
      return require_printf();
    });
    exposeFormat("simple", function() {
      return require_simple();
    });
    exposeFormat("splat", function() {
      return require_splat();
    });
    exposeFormat("timestamp", function() {
      return require_timestamp();
    });
    exposeFormat("uncolorize", function() {
      return require_uncolorize();
    });
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/common.js
var require_common = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/common.js"(exports2) {
    "use strict";
    var { format } = __require("util");
    exports2.warn = {
      deprecated(prop) {
        return () => {
          throw new Error(format("{ %s } was removed in winston@3.0.0.", prop));
        };
      },
      useFormat(prop) {
        return () => {
          throw new Error([
            format("{ %s } was removed in winston@3.0.0.", prop),
            "Use a custom winston.format = winston.format(function) instead."
          ].join("\n"));
        };
      },
      forFunctions(obj, type2, props) {
        props.forEach((prop) => {
          obj[prop] = exports2.warn[type2](prop);
        });
      },
      moved(obj, movedTo, prop) {
        function movedNotice() {
          return () => {
            throw new Error([
              format("winston.%s was moved in winston@3.0.0.", prop),
              format("Use a winston.%s instead.", movedTo)
            ].join("\n"));
          };
        }
        Object.defineProperty(obj, prop, {
          get: movedNotice,
          set: movedNotice
        });
      },
      forProperties(obj, type2, props) {
        props.forEach((prop) => {
          const notice = exports2.warn[type2](prop);
          Object.defineProperty(obj, prop, {
            get: notice,
            set: notice
          });
        });
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/package.json
var require_package = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/package.json"(exports2, module2) {
    module2.exports = {
      name: "winston",
      description: "A logger for just about everything.",
      version: "3.8.2",
      author: "Charlie Robbins <charlie.robbins@gmail.com>",
      maintainers: [
        "David Hyde <dabh@alumni.stanford.edu>"
      ],
      repository: {
        type: "git",
        url: "https://github.com/winstonjs/winston.git"
      },
      keywords: [
        "winston",
        "logger",
        "logging",
        "logs",
        "sysadmin",
        "bunyan",
        "pino",
        "loglevel",
        "tools",
        "json",
        "stream"
      ],
      dependencies: {
        "@dabh/diagnostics": "^2.0.2",
        "@colors/colors": "1.5.0",
        async: "^3.2.3",
        "is-stream": "^2.0.0",
        logform: "^2.4.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.5.0"
      },
      devDependencies: {
        "@babel/cli": "^7.17.0",
        "@babel/core": "^7.17.2",
        "@babel/preset-env": "^7.16.7",
        "@dabh/eslint-config-populist": "^5.0.0",
        "@types/node": "^18.0.0",
        "abstract-winston-transport": "^0.5.1",
        assume: "^2.2.0",
        "cross-spawn-async": "^2.2.5",
        eslint: "^8.9.0",
        hock: "^1.4.1",
        mocha: "8.1.3",
        nyc: "^15.1.0",
        rimraf: "^3.0.2",
        split2: "^4.1.0",
        "std-mocks": "^1.0.1",
        through2: "^4.0.2",
        "winston-compat": "^0.1.5"
      },
      main: "./lib/winston.js",
      browser: "./dist/winston",
      types: "./index.d.ts",
      scripts: {
        lint: "eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist",
        test: "mocha",
        "test:coverage": "nyc npm run test:unit",
        "test:unit": "mocha test/unit",
        "test:integration": "mocha test/integration",
        build: "rimraf dist && babel lib -d dist",
        prepublishOnly: "npm run build"
      },
      engines: {
        node: ">= 12.0.0"
      },
      license: "MIT"
    };
  }
});

// ../../node_modules/.store/util-deprecate-npm-1.0.2-e3fe1a219c/node_modules/util-deprecate/node.js
var require_node = __commonJS({
  "../../node_modules/.store/util-deprecate-npm-1.0.2-e3fe1a219c/node_modules/util-deprecate/node.js"(exports2, module2) {
    module2.exports = __require("util").deprecate;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream2 = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/stream.js"(exports2, module2) {
    module2.exports = __require("stream");
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    function destroy(err2, cb2) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb2) {
          cb2(err2);
        } else if (err2) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err2);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err2);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err2 || null, function(err3) {
        if (!cb2 && err3) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err3);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err3);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb2) {
          process.nextTick(emitCloseNT, _this);
          cb2(err3);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err2) {
      emitErrorNT(self2, err2);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err2) {
      self2.emit("error", err2);
    }
    function errorOrDestroy(stream, err2) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err2);
      else
        stream.emit("error", err2);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/errors.js
var require_errors3 = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/errors.js"(exports2, module2) {
    "use strict";
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      class NodeError extends Base {
        constructor(arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i2) => String(i2));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      let determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      let msg;
      if (endsWith(name, " argument")) {
        msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
      } else {
        const type2 = includes(name, ".") ? "property" : "argument";
        msg = `The "${name}" ${type2} ${determiner} ${oneOf(expected, "type")}`;
      }
      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg2) {
      return "Unknown encoding: " + arg2;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors3().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// ../../node_modules/.store/inherits-npm-2.0.4-c66b3957a0/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "../../node_modules/.store/inherits-npm-2.0.4-c66b3957a0/node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// ../../node_modules/.store/inherits-npm-2.0.4-c66b3957a0/node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "../../node_modules/.store/inherits-npm-2.0.4-c66b3957a0/node_modules/inherits/inherits.js"(exports2, module2) {
    try {
      util = __require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key2) {
            _defineProperty(target, key2, source[key2]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key2) {
            Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key2, value) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      return Constructor;
    }
    var _require = __require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = __require("util");
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next) {
            ret += s + p.data;
          }
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i2 = 0;
          while (p) {
            copyBuffer(p.data, ret, i2);
            i2 += p.data.length;
            p = p.next;
          }
          return ret;
        }
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread({}, options, {
            depth: 0,
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// ../../node_modules/.store/safe-buffer-npm-5.2.1-3481c8aa9b/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "../../node_modules/.store/safe-buffer-npm-5.2.1-3481c8aa9b/node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer2 = __require("buffer");
    var Buffer2 = buffer2.Buffer;
    function copyProps(src, dst) {
      for (var key2 in src) {
        dst[key2] = src[key2];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer2;
    } else {
      copyProps(buffer2, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg2, encodingOrOffset, length) {
      return Buffer2(arg2, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg2, encodingOrOffset, length) {
      if (typeof arg2 === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg2, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer2.SlowBuffer(size);
    };
  }
});

// ../../node_modules/.store/string_decoder-npm-1.3.0-2422117fd0/node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "../../node_modules/.store/string_decoder-npm-1.3.0-2422117fd0/node_modules/string_decoder/lib/string_decoder.js"(exports2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports2.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i2;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i2 = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i2 = 0;
      }
      if (i2 < buf.length)
        return r ? r + this.text(buf, i2) : this.text(buf, i2);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i2) {
      var j = buf.length - 1;
      if (j < i2)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i2 || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i2 || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i2) {
      var total = utf8CheckIncomplete(this, buf, i2);
      if (!this.lastNeed)
        return buf.toString("utf8", i2);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i2, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i2) {
      if ((buf.length - i2) % 2 === 0) {
        var r = buf.toString("utf16le", i2);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i2, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i2) {
      var n = (buf.length - i2) % 3;
      if (n === 0)
        return buf.toString("base64", i2);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i2, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors3().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop2() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop2);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err2) {
        callback.call(stream, err2);
      };
      var onclose = function onclose2() {
        var err2;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err2 = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err2);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err2 = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err2);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports2, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key2, value) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err2) {
          if (err2) {
            reject(err2);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err2) {
        if (err2 && err2.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err2);
          }
          iterator[kError] = err2;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/from.js"(exports2, module2) {
    "use strict";
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key2, arg2) {
      try {
        var info = gen[key2](arg2);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err2) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err2);
          }
          _next(void 0);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly)
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2] != null ? arguments[i2] : {};
        if (i2 % 2) {
          ownKeys(Object(source), true).forEach(function(key2) {
            _defineProperty(target, key2, source[key2]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key2) {
            Object.defineProperty(target, key2, Object.getOwnPropertyDescriptor(source, key2));
          });
        }
      }
      return target;
    }
    function _defineProperty(obj, key2, value) {
      if (key2 in obj) {
        Object.defineProperty(obj, key2, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key2] = value;
      }
      return obj;
    }
    var ERR_INVALID_ARG_TYPE = require_errors3().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === "function") {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator])
        iterator = iterable[Symbol.asyncIterator]();
      else if (iterable && iterable[Symbol.iterator])
        iterator = iterable[Symbol.iterator]();
      else
        throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      var reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _ref = yield iterator.next(), value = _ref.value, done = _ref.done;
            if (done) {
              readable.push(null);
            } else if (readable.push(yield value)) {
              next();
            } else {
              reading = false;
            }
          } catch (err2) {
            readable.destroy(err2);
          }
        });
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    module2.exports = from;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = __require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type2) {
      return emitter.listeners(type2).length;
    };
    var Stream2 = require_stream2();
    var Buffer2 = __require("buffer").Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = __require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors3().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits()(Readable, Stream2);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream2.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err2, cb2) {
      cb2(err2);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i2 = 0; i2 < len; i2++) {
          dests[i2].emit("unpipe", this, {
            hasUnpiped: false
          });
        }
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream2.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream2.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream2.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null) {
        ;
      }
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i2 in stream) {
        if (this[i2] === void 0 && typeof stream[i2] === "function") {
          this[i2] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i2);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i2 = 0, l = xs.length; i2 < l; i2++) {
        if (xs[i2] === x)
          return i2;
      }
      return -1;
    }
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key2 in obj) {
        keys2.push(key2);
      }
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable2 = require_stream_writable();
    require_inherits()(Duplex, Readable);
    {
      keys = objectKeys(Writable2.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable2.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable2.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    module2.exports = Writable2;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable2.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_node()
    };
    var Stream2 = require_stream2();
    var Buffer2 = __require("buffer").Buffer;
    var OurUint8Array = global.Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors3().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits()(Writable2, Stream2);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer2() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable2, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable2)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable2(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable2, this))
        return new Writable2(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream2.call(this);
    }
    Writable2.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb2) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb2, er);
    }
    function validChunk(stream, state, chunk, cb2) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb2, er);
        return false;
      }
      return true;
    }
    Writable2.prototype.write = function(chunk, encoding, cb2) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb2 = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb2 !== "function")
        cb2 = nop;
      if (state.ending)
        writeAfterEnd(this, cb2);
      else if (isBuf || validChunk(this, state, chunk, cb2)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb2);
      }
      return ret;
    };
    Writable2.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable2.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable2.prototype, "writableBuffer", {
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable2.prototype, "writableHighWaterMark", {
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb2) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb2,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb2);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb2) {
      state.writelen = len;
      state.writecb = cb2;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb2) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb2, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb2(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb2 = state.writecb;
      if (typeof cb2 !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb2);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb2);
        } else {
          afterWrite(stream, state, finished, cb2);
        }
      }
    }
    function afterWrite(stream, state, finished, cb2) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb2();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer2 = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer2[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer2.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer2, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb2 = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb2);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable2.prototype._write = function(chunk, encoding, cb2) {
      cb2(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable2.prototype._writev = null;
    Writable2.prototype.end = function(chunk, encoding, cb2) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb2 = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb2 = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb2);
      return this;
    };
    Object.defineProperty(Writable2.prototype, "writableLength", {
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err2) {
        state.pendingcb--;
        if (err2) {
          errorOrDestroy(stream, err2);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb2) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb2) {
        if (state.finished)
          process.nextTick(cb2);
        else
          stream.once("finish", cb2);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err2) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb2 = entry.callback;
        state.pendingcb--;
        cb2(err2);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable2.prototype, "destroyed", {
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable2.prototype.destroy = destroyImpl.destroy;
    Writable2.prototype._undestroy = destroyImpl.undestroy;
    Writable2.prototype._destroy = function(err2, cb2) {
      cb2(err2);
    };
  }
});

// ../../node_modules/.store/winston-transport-npm-4.5.0-e10bfb2169/node_modules/winston-transport/legacy.js
var require_legacy = __commonJS({
  "../../node_modules/.store/winston-transport-npm-4.5.0-e10bfb2169/node_modules/winston-transport/legacy.js"(exports2, module2) {
    "use strict";
    var util = __require("util");
    var { LEVEL } = require_triple_beam();
    var TransportStream = require_winston_transport();
    var LegacyTransportStream = module2.exports = function LegacyTransportStream2(options = {}) {
      TransportStream.call(this, options);
      if (!options.transport || typeof options.transport.log !== "function") {
        throw new Error("Invalid transport, must be an object with a log method.");
      }
      this.transport = options.transport;
      this.level = this.level || options.transport.level;
      this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
      this._deprecated();
      function transportError(err2) {
        this.emit("error", err2, this.transport);
      }
      if (!this.transport.__winstonError) {
        this.transport.__winstonError = transportError.bind(this);
        this.transport.on("error", this.transport.__winstonError);
      }
    };
    util.inherits(LegacyTransportStream, TransportStream);
    LegacyTransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {
        this.transport.log(info[LEVEL], info.message, info, this._nop);
      }
      callback(null);
    };
    LegacyTransportStream.prototype._writev = function _writev(chunks, callback) {
      for (let i2 = 0; i2 < chunks.length; i2++) {
        if (this._accept(chunks[i2])) {
          this.transport.log(
            chunks[i2].chunk[LEVEL],
            chunks[i2].chunk.message,
            chunks[i2].chunk,
            this._nop
          );
          chunks[i2].callback();
        }
      }
      return callback(null);
    };
    LegacyTransportStream.prototype._deprecated = function _deprecated() {
      console.error([
        `${this.transport.name} is a legacy winston transport. Consider upgrading: `,
        "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"
      ].join("\n"));
    };
    LegacyTransportStream.prototype.close = function close() {
      if (this.transport.close) {
        this.transport.close();
      }
      if (this.transport.__winstonError) {
        this.transport.removeListener("error", this.transport.__winstonError);
        this.transport.__winstonError = null;
      }
    };
  }
});

// ../../node_modules/.store/winston-transport-npm-4.5.0-e10bfb2169/node_modules/winston-transport/index.js
var require_winston_transport = __commonJS({
  "../../node_modules/.store/winston-transport-npm-4.5.0-e10bfb2169/node_modules/winston-transport/index.js"(exports2, module2) {
    "use strict";
    var util = __require("util");
    var Writable2 = require_stream_writable();
    var { LEVEL } = require_triple_beam();
    var TransportStream = module2.exports = function TransportStream2(options = {}) {
      Writable2.call(this, { objectMode: true, highWaterMark: options.highWaterMark });
      this.format = options.format;
      this.level = options.level;
      this.handleExceptions = options.handleExceptions;
      this.handleRejections = options.handleRejections;
      this.silent = options.silent;
      if (options.log)
        this.log = options.log;
      if (options.logv)
        this.logv = options.logv;
      if (options.close)
        this.close = options.close;
      this.once("pipe", (logger) => {
        this.levels = logger.levels;
        this.parent = logger;
      });
      this.once("unpipe", (src) => {
        if (src === this.parent) {
          this.parent = null;
          if (this.close) {
            this.close();
          }
        }
      });
    };
    util.inherits(TransportStream, Writable2);
    TransportStream.prototype._write = function _write(info, enc, callback) {
      if (this.silent || info.exception === true && !this.handleExceptions) {
        return callback(null);
      }
      const level = this.level || this.parent && this.parent.level;
      if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (info && !this.format) {
          return this.log(info, callback);
        }
        let errState;
        let transformed;
        try {
          transformed = this.format.transform(Object.assign({}, info), this.format.options);
        } catch (err2) {
          errState = err2;
        }
        if (errState || !transformed) {
          callback();
          if (errState)
            throw errState;
          return;
        }
        return this.log(transformed, callback);
      }
      this._writableState.sync = false;
      return callback(null);
    };
    TransportStream.prototype._writev = function _writev(chunks, callback) {
      if (this.logv) {
        const infos = chunks.filter(this._accept, this);
        if (!infos.length) {
          return callback(null);
        }
        return this.logv(infos, callback);
      }
      for (let i2 = 0; i2 < chunks.length; i2++) {
        if (!this._accept(chunks[i2]))
          continue;
        if (chunks[i2].chunk && !this.format) {
          this.log(chunks[i2].chunk, chunks[i2].callback);
          continue;
        }
        let errState;
        let transformed;
        try {
          transformed = this.format.transform(
            Object.assign({}, chunks[i2].chunk),
            this.format.options
          );
        } catch (err2) {
          errState = err2;
        }
        if (errState || !transformed) {
          chunks[i2].callback();
          if (errState) {
            callback(null);
            throw errState;
          }
        } else {
          this.log(transformed, chunks[i2].callback);
        }
      }
      return callback(null);
    };
    TransportStream.prototype._accept = function _accept(write) {
      const info = write.chunk;
      if (this.silent) {
        return false;
      }
      const level = this.level || this.parent && this.parent.level;
      if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {
        if (this.handleExceptions || info.exception !== true) {
          return true;
        }
      }
      return false;
    };
    TransportStream.prototype._nop = function _nop() {
      return void 0;
    };
    module2.exports.LegacyTransportStream = require_legacy();
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/console.js
var require_console = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/console.js"(exports2, module2) {
    "use strict";
    var os2 = __require("os");
    var { LEVEL, MESSAGE } = require_triple_beam();
    var TransportStream = require_winston_transport();
    module2.exports = class Console extends TransportStream {
      constructor(options = {}) {
        super(options);
        this.name = options.name || "console";
        this.stderrLevels = this._stringArrayToSet(options.stderrLevels);
        this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);
        this.eol = typeof options.eol === "string" ? options.eol : os2.EOL;
        this.setMaxListeners(30);
      }
      log(info, callback) {
        setImmediate(() => this.emit("logged", info));
        if (this.stderrLevels[info[LEVEL]]) {
          if (console._stderr) {
            console._stderr.write(`${info[MESSAGE]}${this.eol}`);
          } else {
            console.error(info[MESSAGE]);
          }
          if (callback) {
            callback();
          }
          return;
        } else if (this.consoleWarnLevels[info[LEVEL]]) {
          if (console._stderr) {
            console._stderr.write(`${info[MESSAGE]}${this.eol}`);
          } else {
            console.warn(info[MESSAGE]);
          }
          if (callback) {
            callback();
          }
          return;
        }
        if (console._stdout) {
          console._stdout.write(`${info[MESSAGE]}${this.eol}`);
        } else {
          console.log(info[MESSAGE]);
        }
        if (callback) {
          callback();
        }
      }
      _stringArrayToSet(strArray, errMsg) {
        if (!strArray)
          return {};
        errMsg = errMsg || "Cannot make set from type other than Array of string elements";
        if (!Array.isArray(strArray)) {
          throw new Error(errMsg);
        }
        return strArray.reduce((set, el) => {
          if (typeof el !== "string") {
            throw new Error(errMsg);
          }
          set[el] = true;
          return set;
        }, {});
      }
    };
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/isArrayLike.js
var require_isArrayLike = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/isArrayLike.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = isArrayLike;
    function isArrayLike(value) {
      return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/initialParams.js
var require_initialParams = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/initialParams.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = function(fn) {
      return function(...args) {
        var callback = args.pop();
        return fn.call(this, args, callback);
      };
    };
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/setImmediate.js
var require_setImmediate = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/setImmediate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.fallback = fallback;
    exports2.wrap = wrap;
    var hasQueueMicrotask = exports2.hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
    var hasSetImmediate = exports2.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = exports2.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return (fn, ...args) => defer(() => fn(...args));
    }
    var _defer;
    if (hasQueueMicrotask) {
      _defer = queueMicrotask;
    } else if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    exports2.default = wrap(_defer);
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/asyncify.js
var require_asyncify = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/asyncify.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = asyncify;
    var _initialParams = require_initialParams();
    var _initialParams2 = _interopRequireDefault(_initialParams);
    var _setImmediate = require_setImmediate();
    var _setImmediate2 = _interopRequireDefault(_setImmediate);
    var _wrapAsync = require_wrapAsync();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncify(func2) {
      if ((0, _wrapAsync.isAsync)(func2)) {
        return function(...args) {
          const callback = args.pop();
          const promise = func2.apply(this, args);
          return handlePromise(promise, callback);
        };
      }
      return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
          result = func2.apply(this, args);
        } catch (e) {
          return callback(e);
        }
        if (result && typeof result.then === "function") {
          return handlePromise(result, callback);
        } else {
          callback(null, result);
        }
      });
    }
    function handlePromise(promise, callback) {
      return promise.then((value) => {
        invokeCallback(callback, null, value);
      }, (err2) => {
        invokeCallback(callback, err2 && err2.message ? err2 : new Error(err2));
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (err2) {
        (0, _setImmediate2.default)((e) => {
          throw e;
        }, err2);
      }
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/wrapAsync.js
var require_wrapAsync = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/wrapAsync.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.isAsyncIterable = exports2.isAsyncGenerator = exports2.isAsync = void 0;
    var _asyncify = require_asyncify();
    var _asyncify2 = _interopRequireDefault(_asyncify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAsync(fn) {
      return fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function isAsyncGenerator(fn) {
      return fn[Symbol.toStringTag] === "AsyncGenerator";
    }
    function isAsyncIterable(obj) {
      return typeof obj[Symbol.asyncIterator] === "function";
    }
    function wrapAsync(asyncFn) {
      if (typeof asyncFn !== "function")
        throw new Error("expected a function");
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
    }
    exports2.default = wrapAsync;
    exports2.isAsync = isAsync;
    exports2.isAsyncGenerator = isAsyncGenerator;
    exports2.isAsyncIterable = isAsyncIterable;
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/awaitify.js
var require_awaitify = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/awaitify.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = awaitify;
    function awaitify(asyncFn, arity = asyncFn.length) {
      if (!arity)
        throw new Error("arity is undefined");
      function awaitable(...args) {
        if (typeof args[arity - 1] === "function") {
          return asyncFn.apply(this, args);
        }
        return new Promise((resolve, reject) => {
          args[arity - 1] = (err2, ...cbArgs) => {
            if (err2)
              return reject(err2);
            resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
          };
          asyncFn.apply(this, args);
        });
      }
      return awaitable;
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/parallel.js
var require_parallel = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/parallel.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports2.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {
      var results = (0, _isArrayLike2.default)(tasks) ? [] : {};
      eachfn(tasks, (task, key2, taskCb) => {
        (0, _wrapAsync2.default)(task)((err2, ...result) => {
          if (result.length < 2) {
            [result] = result;
          }
          results[key2] = result;
          taskCb(err2);
        });
      }, (err2) => callback(err2, results));
    }, 3);
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/once.js
var require_once = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/once.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = once;
    function once(fn) {
      function wrapper(...args) {
        if (fn === null)
          return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      }
      Object.assign(wrapper, fn);
      return wrapper;
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/getIterator.js
var require_getIterator = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/getIterator.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = function(coll) {
      return coll[Symbol.iterator] && coll[Symbol.iterator]();
    };
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/iterator.js
var require_iterator = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/iterator.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = createIterator;
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _getIterator = require_getIterator();
    var _getIterator2 = _interopRequireDefault(_getIterator);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function createArrayIterator(coll) {
      var i2 = -1;
      var len = coll.length;
      return function next() {
        return ++i2 < len ? { value: coll[i2], key: i2 } : null;
      };
    }
    function createES2015Iterator(iterator) {
      var i2 = -1;
      return function next() {
        var item = iterator.next();
        if (item.done)
          return null;
        i2++;
        return { value: item.value, key: i2 };
      };
    }
    function createObjectIterator(obj) {
      var okeys = obj ? Object.keys(obj) : [];
      var i2 = -1;
      var len = okeys.length;
      return function next() {
        var key2 = okeys[++i2];
        if (key2 === "__proto__") {
          return next();
        }
        return i2 < len ? { value: obj[key2], key: key2 } : null;
      };
    }
    function createIterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
      }
      var iterator = (0, _getIterator2.default)(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/onlyOnce.js
var require_onlyOnce = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/onlyOnce.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = onlyOnce;
    function onlyOnce(fn) {
      return function(...args) {
        if (fn === null)
          throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      };
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/breakLoop.js
var require_breakLoop = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/breakLoop.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var breakLoop = {};
    exports2.default = breakLoop;
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/asyncEachOfLimit.js
var require_asyncEachOfLimit = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/asyncEachOfLimit.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = asyncEachOfLimit;
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncEachOfLimit(generator, limit, iteratee, callback) {
      let done = false;
      let canceled = false;
      let awaiting = false;
      let running = 0;
      let idx = 0;
      function replenish() {
        if (running >= limit || awaiting || done)
          return;
        awaiting = true;
        generator.next().then(({ value, done: iterDone }) => {
          if (canceled || done)
            return;
          awaiting = false;
          if (iterDone) {
            done = true;
            if (running <= 0) {
              callback(null);
            }
            return;
          }
          running++;
          iteratee(value, idx, iterateeCallback);
          idx++;
          replenish();
        }).catch(handleError);
      }
      function iterateeCallback(err2, result) {
        running -= 1;
        if (canceled)
          return;
        if (err2)
          return handleError(err2);
        if (err2 === false) {
          done = true;
          canceled = true;
          return;
        }
        if (result === _breakLoop2.default || done && running <= 0) {
          done = true;
          return callback(null);
        }
        replenish();
      }
      function handleError(err2) {
        if (canceled)
          return;
        awaiting = false;
        done = true;
        callback(err2);
      }
      replenish();
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/eachOfLimit.js
var require_eachOfLimit = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/eachOfLimit.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _iterator = require_iterator();
    var _iterator2 = _interopRequireDefault(_iterator);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _asyncEachOfLimit = require_asyncEachOfLimit();
    var _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports2.default = (limit) => {
      return (obj, iteratee, callback) => {
        callback = (0, _once2.default)(callback);
        if (limit <= 0) {
          throw new RangeError("concurrency limit cannot be less than 1");
        }
        if (!obj) {
          return callback(null);
        }
        if ((0, _wrapAsync.isAsyncGenerator)(obj)) {
          return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);
        }
        if ((0, _wrapAsync.isAsyncIterable)(obj)) {
          return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err2, value) {
          if (canceled)
            return;
          running -= 1;
          if (err2) {
            done = true;
            callback(err2);
          } else if (err2 === false) {
            done = true;
            canceled = true;
          } else if (value === _breakLoop2.default || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    };
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/eachOfLimit.js
var require_eachOfLimit2 = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/eachOfLimit.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _eachOfLimit2 = require_eachOfLimit();
    var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfLimit(coll, limit, iteratee, callback) {
      return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    exports2.default = (0, _awaitify2.default)(eachOfLimit, 4);
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/eachOfSeries.js
var require_eachOfSeries = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/eachOfSeries.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfSeries(coll, iteratee, callback) {
      return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);
    }
    exports2.default = (0, _awaitify2.default)(eachOfSeries, 3);
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/series.js
var require_series = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/series.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = series;
    var _parallel2 = require_parallel();
    var _parallel3 = _interopRequireDefault(_parallel2);
    var _eachOfSeries = require_eachOfSeries();
    var _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function series(tasks, callback) {
      return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    module2.exports = Transform2;
    var _require$codes = require_errors3().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits()(Transform2, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb2 = ts.writecb;
      if (cb2 === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb2(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform2(options) {
      if (!(this instanceof Transform2))
        return new Transform2(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform2.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform2.prototype._transform = function(chunk, encoding, cb2) {
      cb2(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform2.prototype._write = function(chunk, encoding, cb2) {
      var ts = this._transformState;
      ts.writecb = cb2;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform2.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform2.prototype._destroy = function(err2, cb2) {
      Duplex.prototype._destroy.call(this, err2, function(err22) {
        cb2(err22);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    module2.exports = PassThrough2;
    var Transform2 = require_stream_transform();
    require_inherits()(PassThrough2, Transform2);
    function PassThrough2(options) {
      if (!(this instanceof PassThrough2))
        return new PassThrough2(options);
      Transform2.call(this, options);
    }
    PassThrough2.prototype._transform = function(chunk, encoding, cb2) {
      cb2(null, chunk);
    };
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors3().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop2(err2) {
      if (err2)
        throw err2;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err2) {
        if (err2)
          return callback(err2);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err2) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err2 || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop2;
      if (typeof streams[streams.length - 1] !== "function")
        return noop2;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i2) {
        var reading = i2 < streams.length - 1;
        var writing = i2 > 0;
        return destroyer(stream, reading, writing, function(err2) {
          if (!error)
            error = err2;
          if (err2)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// ../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/readable.js
var require_readable = __commonJS({
  "../../node_modules/.store/readable-stream-npm-3.6.0-23a4a5eb56/node_modules/readable-stream/readable.js"(exports2, module2) {
    var Stream2 = __require("stream");
    if (process.env.READABLE_STREAM === "disable" && Stream2) {
      module2.exports = Stream2.Readable;
      Object.assign(module2.exports, Stream2);
      module2.exports.Stream = Stream2;
    } else {
      exports2 = module2.exports = require_stream_readable();
      exports2.Stream = Stream2 || exports2;
      exports2.Readable = exports2;
      exports2.Writable = require_stream_writable();
      exports2.Duplex = require_stream_duplex();
      exports2.Transform = require_stream_transform();
      exports2.PassThrough = require_stream_passthrough();
      exports2.finished = require_end_of_stream();
      exports2.pipeline = require_pipeline();
    }
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/diagnostics.js
var require_diagnostics = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/diagnostics.js"(exports2, module2) {
    var adapters = [];
    var modifiers = [];
    var logger = function devnull() {
    };
    function use(adapter) {
      if (~adapters.indexOf(adapter))
        return false;
      adapters.push(adapter);
      return true;
    }
    function set(custom) {
      logger = custom;
    }
    function enabled(namespace) {
      var async = [];
      for (var i2 = 0; i2 < adapters.length; i2++) {
        if (adapters[i2].async) {
          async.push(adapters[i2]);
          continue;
        }
        if (adapters[i2](namespace))
          return true;
      }
      if (!async.length)
        return false;
      return new Promise(function pinky(resolve) {
        Promise.all(
          async.map(function prebind(fn) {
            return fn(namespace);
          })
        ).then(function resolved(values) {
          resolve(values.some(Boolean));
        });
      });
    }
    function modify(fn) {
      if (~modifiers.indexOf(fn))
        return false;
      modifiers.push(fn);
      return true;
    }
    function write() {
      logger.apply(logger, arguments);
    }
    function process15(message) {
      for (var i2 = 0; i2 < modifiers.length; i2++) {
        message = modifiers[i2].apply(modifiers[i2], arguments);
      }
      return message;
    }
    function introduce(fn, options) {
      var has = Object.prototype.hasOwnProperty;
      for (var key2 in options) {
        if (has.call(options, key2)) {
          fn[key2] = options[key2];
        }
      }
      return fn;
    }
    function nope(options) {
      options.enabled = false;
      options.modify = modify;
      options.set = set;
      options.use = use;
      return introduce(function diagnopes() {
        return false;
      }, options);
    }
    function yep(options) {
      function diagnostics() {
        var args = Array.prototype.slice.call(arguments, 0);
        write.call(write, options, process15(args, options));
        return true;
      }
      options.enabled = true;
      options.modify = modify;
      options.set = set;
      options.use = use;
      return introduce(diagnostics, options);
    }
    module2.exports = function create2(diagnostics) {
      diagnostics.introduce = introduce;
      diagnostics.enabled = enabled;
      diagnostics.process = process15;
      diagnostics.modify = modify;
      diagnostics.write = write;
      diagnostics.nope = nope;
      diagnostics.yep = yep;
      diagnostics.set = set;
      diagnostics.use = use;
      return diagnostics;
    };
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/node/production.js
var require_production = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/node/production.js"(exports2, module2) {
    var create2 = require_diagnostics();
    var diagnostics = create2(function prod(namespace, options) {
      options = options || {};
      options.namespace = namespace;
      options.prod = true;
      options.dev = false;
      if (!(options.force || prod.force))
        return prod.nope(options);
      return prod.yep(options);
    });
    module2.exports = diagnostics;
  }
});

// ../../node_modules/.store/color-name-npm-1.1.4-025792b0ea/node_modules/color-name/index.js
var require_color_name = __commonJS({
  "../../node_modules/.store/color-name-npm-1.1.4-025792b0ea/node_modules/color-name/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// ../../node_modules/.store/is-arrayish-npm-0.3.2-f856180f79/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({
  "../../node_modules/.store/is-arrayish-npm-0.3.2-f856180f79/node_modules/is-arrayish/index.js"(exports2, module2) {
    module2.exports = function isArrayish(obj) {
      if (!obj || typeof obj === "string") {
        return false;
      }
      return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
    };
  }
});

// ../../node_modules/.store/simple-swizzle-npm-0.2.2-8dee37fad1/node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS({
  "../../node_modules/.store/simple-swizzle-npm-0.2.2-8dee37fad1/node_modules/simple-swizzle/index.js"(exports2, module2) {
    "use strict";
    var isArrayish = require_is_arrayish();
    var concat = Array.prototype.concat;
    var slice = Array.prototype.slice;
    var swizzle = module2.exports = function swizzle2(args) {
      var results = [];
      for (var i2 = 0, len = args.length; i2 < len; i2++) {
        var arg2 = args[i2];
        if (isArrayish(arg2)) {
          results = concat.call(results, slice.call(arg2));
        } else {
          results.push(arg2);
        }
      }
      return results;
    };
    swizzle.wrap = function(fn) {
      return function() {
        return fn(swizzle(arguments));
      };
    };
  }
});

// ../../node_modules/.store/color-string-npm-1.5.5-dada7277d1/node_modules/color-string/index.js
var require_color_string = __commonJS({
  "../../node_modules/.store/color-string-npm-1.5.5-dada7277d1/node_modules/color-string/index.js"(exports2, module2) {
    var colorNames2 = require_color_name();
    var swizzle = require_simple_swizzle();
    var reverseNames = {};
    for (name in colorNames2) {
      if (colorNames2.hasOwnProperty(name)) {
        reverseNames[colorNames2[name]] = name;
      }
    }
    var name;
    var cs = module2.exports = {
      to: {},
      get: {}
    };
    cs.get = function(string) {
      var prefix2 = string.substring(0, 3).toLowerCase();
      var val;
      var model;
      switch (prefix2) {
        case "hsl":
          val = cs.get.hsl(string);
          model = "hsl";
          break;
        case "hwb":
          val = cs.get.hwb(string);
          model = "hwb";
          break;
        default:
          val = cs.get.rgb(string);
          model = "rgb";
          break;
      }
      if (!val) {
        return null;
      }
      return { model, value: val };
    };
    cs.get.rgb = function(string) {
      if (!string) {
        return null;
      }
      var abbr = /^#([a-f0-9]{3,4})$/i;
      var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
      var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
      var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
      var keyword = /(\D+)/;
      var rgb = [0, 0, 0, 1];
      var match;
      var i2;
      var hexAlpha;
      if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for (i2 = 0; i2 < 3; i2++) {
          var i22 = i2 * 2;
          rgb[i2] = parseInt(match.slice(i22, i22 + 2), 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha, 16) / 255;
        }
      } else if (match = string.match(abbr)) {
        match = match[1];
        hexAlpha = match[3];
        for (i2 = 0; i2 < 3; i2++) {
          rgb[i2] = parseInt(match[i2] + match[i2], 16);
        }
        if (hexAlpha) {
          rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
        }
      } else if (match = string.match(rgba)) {
        for (i2 = 0; i2 < 3; i2++) {
          rgb[i2] = parseInt(match[i2 + 1], 0);
        }
        if (match[4]) {
          rgb[3] = parseFloat(match[4]);
        }
      } else if (match = string.match(per)) {
        for (i2 = 0; i2 < 3; i2++) {
          rgb[i2] = Math.round(parseFloat(match[i2 + 1]) * 2.55);
        }
        if (match[4]) {
          rgb[3] = parseFloat(match[4]);
        }
      } else if (match = string.match(keyword)) {
        if (match[1] === "transparent") {
          return [0, 0, 0, 0];
        }
        rgb = colorNames2[match[1]];
        if (!rgb) {
          return null;
        }
        rgb[3] = 1;
        return rgb;
      } else {
        return null;
      }
      for (i2 = 0; i2 < 3; i2++) {
        rgb[i2] = clamp(rgb[i2], 0, 255);
      }
      rgb[3] = clamp(rgb[3], 0, 1);
      return rgb;
    };
    cs.get.hsl = function(string) {
      if (!string) {
        return null;
      }
      var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
      var match = string.match(hsl);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = (parseFloat(match[1]) + 360) % 360;
        var s = clamp(parseFloat(match[2]), 0, 100);
        var l = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
      }
      return null;
    };
    cs.get.hwb = function(string) {
      if (!string) {
        return null;
      }
      var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
      var match = string.match(hwb);
      if (match) {
        var alpha = parseFloat(match[4]);
        var h = (parseFloat(match[1]) % 360 + 360) % 360;
        var w = clamp(parseFloat(match[2]), 0, 100);
        var b = clamp(parseFloat(match[3]), 0, 100);
        var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
      }
      return null;
    };
    cs.to.hex = function() {
      var rgba = swizzle(arguments);
      return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
    };
    cs.to.rgb = function() {
      var rgba = swizzle(arguments);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
    };
    cs.to.rgb.percent = function() {
      var rgba = swizzle(arguments);
      var r = Math.round(rgba[0] / 255 * 100);
      var g = Math.round(rgba[1] / 255 * 100);
      var b = Math.round(rgba[2] / 255 * 100);
      return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
    };
    cs.to.hsl = function() {
      var hsla = swizzle(arguments);
      return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
    };
    cs.to.hwb = function() {
      var hwba = swizzle(arguments);
      var a = "";
      if (hwba.length >= 4 && hwba[3] !== 1) {
        a = ", " + hwba[3];
      }
      return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
    };
    cs.to.keyword = function(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    };
    function clamp(num2, min, max) {
      return Math.min(Math.max(min, num2), max);
    }
    function hexDouble(num2) {
      var str = num2.toString(16).toUpperCase();
      return str.length < 2 ? "0" + str : str;
    }
  }
});

// ../../node_modules/.store/color-name-npm-1.1.3-728b7b5d39/node_modules/color-name/index.js
var require_color_name2 = __commonJS({
  "../../node_modules/.store/color-name-npm-1.1.3-728b7b5d39/node_modules/color-name/index.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      "aliceblue": [240, 248, 255],
      "antiquewhite": [250, 235, 215],
      "aqua": [0, 255, 255],
      "aquamarine": [127, 255, 212],
      "azure": [240, 255, 255],
      "beige": [245, 245, 220],
      "bisque": [255, 228, 196],
      "black": [0, 0, 0],
      "blanchedalmond": [255, 235, 205],
      "blue": [0, 0, 255],
      "blueviolet": [138, 43, 226],
      "brown": [165, 42, 42],
      "burlywood": [222, 184, 135],
      "cadetblue": [95, 158, 160],
      "chartreuse": [127, 255, 0],
      "chocolate": [210, 105, 30],
      "coral": [255, 127, 80],
      "cornflowerblue": [100, 149, 237],
      "cornsilk": [255, 248, 220],
      "crimson": [220, 20, 60],
      "cyan": [0, 255, 255],
      "darkblue": [0, 0, 139],
      "darkcyan": [0, 139, 139],
      "darkgoldenrod": [184, 134, 11],
      "darkgray": [169, 169, 169],
      "darkgreen": [0, 100, 0],
      "darkgrey": [169, 169, 169],
      "darkkhaki": [189, 183, 107],
      "darkmagenta": [139, 0, 139],
      "darkolivegreen": [85, 107, 47],
      "darkorange": [255, 140, 0],
      "darkorchid": [153, 50, 204],
      "darkred": [139, 0, 0],
      "darksalmon": [233, 150, 122],
      "darkseagreen": [143, 188, 143],
      "darkslateblue": [72, 61, 139],
      "darkslategray": [47, 79, 79],
      "darkslategrey": [47, 79, 79],
      "darkturquoise": [0, 206, 209],
      "darkviolet": [148, 0, 211],
      "deeppink": [255, 20, 147],
      "deepskyblue": [0, 191, 255],
      "dimgray": [105, 105, 105],
      "dimgrey": [105, 105, 105],
      "dodgerblue": [30, 144, 255],
      "firebrick": [178, 34, 34],
      "floralwhite": [255, 250, 240],
      "forestgreen": [34, 139, 34],
      "fuchsia": [255, 0, 255],
      "gainsboro": [220, 220, 220],
      "ghostwhite": [248, 248, 255],
      "gold": [255, 215, 0],
      "goldenrod": [218, 165, 32],
      "gray": [128, 128, 128],
      "green": [0, 128, 0],
      "greenyellow": [173, 255, 47],
      "grey": [128, 128, 128],
      "honeydew": [240, 255, 240],
      "hotpink": [255, 105, 180],
      "indianred": [205, 92, 92],
      "indigo": [75, 0, 130],
      "ivory": [255, 255, 240],
      "khaki": [240, 230, 140],
      "lavender": [230, 230, 250],
      "lavenderblush": [255, 240, 245],
      "lawngreen": [124, 252, 0],
      "lemonchiffon": [255, 250, 205],
      "lightblue": [173, 216, 230],
      "lightcoral": [240, 128, 128],
      "lightcyan": [224, 255, 255],
      "lightgoldenrodyellow": [250, 250, 210],
      "lightgray": [211, 211, 211],
      "lightgreen": [144, 238, 144],
      "lightgrey": [211, 211, 211],
      "lightpink": [255, 182, 193],
      "lightsalmon": [255, 160, 122],
      "lightseagreen": [32, 178, 170],
      "lightskyblue": [135, 206, 250],
      "lightslategray": [119, 136, 153],
      "lightslategrey": [119, 136, 153],
      "lightsteelblue": [176, 196, 222],
      "lightyellow": [255, 255, 224],
      "lime": [0, 255, 0],
      "limegreen": [50, 205, 50],
      "linen": [250, 240, 230],
      "magenta": [255, 0, 255],
      "maroon": [128, 0, 0],
      "mediumaquamarine": [102, 205, 170],
      "mediumblue": [0, 0, 205],
      "mediumorchid": [186, 85, 211],
      "mediumpurple": [147, 112, 219],
      "mediumseagreen": [60, 179, 113],
      "mediumslateblue": [123, 104, 238],
      "mediumspringgreen": [0, 250, 154],
      "mediumturquoise": [72, 209, 204],
      "mediumvioletred": [199, 21, 133],
      "midnightblue": [25, 25, 112],
      "mintcream": [245, 255, 250],
      "mistyrose": [255, 228, 225],
      "moccasin": [255, 228, 181],
      "navajowhite": [255, 222, 173],
      "navy": [0, 0, 128],
      "oldlace": [253, 245, 230],
      "olive": [128, 128, 0],
      "olivedrab": [107, 142, 35],
      "orange": [255, 165, 0],
      "orangered": [255, 69, 0],
      "orchid": [218, 112, 214],
      "palegoldenrod": [238, 232, 170],
      "palegreen": [152, 251, 152],
      "paleturquoise": [175, 238, 238],
      "palevioletred": [219, 112, 147],
      "papayawhip": [255, 239, 213],
      "peachpuff": [255, 218, 185],
      "peru": [205, 133, 63],
      "pink": [255, 192, 203],
      "plum": [221, 160, 221],
      "powderblue": [176, 224, 230],
      "purple": [128, 0, 128],
      "rebeccapurple": [102, 51, 153],
      "red": [255, 0, 0],
      "rosybrown": [188, 143, 143],
      "royalblue": [65, 105, 225],
      "saddlebrown": [139, 69, 19],
      "salmon": [250, 128, 114],
      "sandybrown": [244, 164, 96],
      "seagreen": [46, 139, 87],
      "seashell": [255, 245, 238],
      "sienna": [160, 82, 45],
      "silver": [192, 192, 192],
      "skyblue": [135, 206, 235],
      "slateblue": [106, 90, 205],
      "slategray": [112, 128, 144],
      "slategrey": [112, 128, 144],
      "snow": [255, 250, 250],
      "springgreen": [0, 255, 127],
      "steelblue": [70, 130, 180],
      "tan": [210, 180, 140],
      "teal": [0, 128, 128],
      "thistle": [216, 191, 216],
      "tomato": [255, 99, 71],
      "turquoise": [64, 224, 208],
      "violet": [238, 130, 238],
      "wheat": [245, 222, 179],
      "white": [255, 255, 255],
      "whitesmoke": [245, 245, 245],
      "yellow": [255, 255, 0],
      "yellowgreen": [154, 205, 50]
    };
  }
});

// ../../node_modules/.store/color-convert-npm-1.9.3-1fe690075e/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
  "../../node_modules/.store/color-convert-npm-1.9.3-1fe690075e/node_modules/color-convert/conversions.js"(exports2, module2) {
    var cssKeywords = require_color_name2();
    var reverseKeywords = {};
    for (key2 in cssKeywords) {
      if (cssKeywords.hasOwnProperty(key2)) {
        reverseKeywords[cssKeywords[key2]] = key2;
      }
    }
    var key2;
    var convert = module2.exports = {
      rgb: { channels: 3, labels: "rgb" },
      hsl: { channels: 3, labels: "hsl" },
      hsv: { channels: 3, labels: "hsv" },
      hwb: { channels: 3, labels: "hwb" },
      cmyk: { channels: 4, labels: "cmyk" },
      xyz: { channels: 3, labels: "xyz" },
      lab: { channels: 3, labels: "lab" },
      lch: { channels: 3, labels: "lch" },
      hex: { channels: 1, labels: ["hex"] },
      keyword: { channels: 1, labels: ["keyword"] },
      ansi16: { channels: 1, labels: ["ansi16"] },
      ansi256: { channels: 1, labels: ["ansi256"] },
      hcg: { channels: 3, labels: ["h", "c", "g"] },
      apple: { channels: 3, labels: ["r16", "g16", "b16"] },
      gray: { channels: 1, labels: ["gray"] }
    };
    for (model in convert) {
      if (convert.hasOwnProperty(model)) {
        if (!("channels" in convert[model])) {
          throw new Error("missing channels property: " + model);
        }
        if (!("labels" in convert[model])) {
          throw new Error("missing channel labels property: " + model);
        }
        if (convert[model].labels.length !== convert[model].channels) {
          throw new Error("channel and label counts mismatch: " + model);
        }
        channels = convert[model].channels;
        labels = convert[model].labels;
        delete convert[model].channels;
        delete convert[model].labels;
        Object.defineProperty(convert[model], "channels", { value: channels });
        Object.defineProperty(convert[model], "labels", { value: labels });
      }
    }
    var channels;
    var labels;
    var model;
    convert.rgb.hsl = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var min = Math.min(r, g, b);
      var max = Math.max(r, g, b);
      var delta = max - min;
      var h;
      var s;
      var l;
      if (max === min) {
        h = 0;
      } else if (r === max) {
        h = (g - b) / delta;
      } else if (g === max) {
        h = 2 + (b - r) / delta;
      } else if (b === max) {
        h = 4 + (r - g) / delta;
      }
      h = Math.min(h * 60, 360);
      if (h < 0) {
        h += 360;
      }
      l = (min + max) / 2;
      if (max === min) {
        s = 0;
      } else if (l <= 0.5) {
        s = delta / (max + min);
      } else {
        s = delta / (2 - max - min);
      }
      return [h, s * 100, l * 100];
    };
    convert.rgb.hsv = function(rgb) {
      var rdif;
      var gdif;
      var bdif;
      var h;
      var s;
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var v = Math.max(r, g, b);
      var diff = v - Math.min(r, g, b);
      var diffc = function(c) {
        return (v - c) / 6 / diff + 1 / 2;
      };
      if (diff === 0) {
        h = s = 0;
      } else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) {
          h = bdif - gdif;
        } else if (g === v) {
          h = 1 / 3 + rdif - bdif;
        } else if (b === v) {
          h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
          h += 1;
        } else if (h > 1) {
          h -= 1;
        }
      }
      return [
        h * 360,
        s * 100,
        v * 100
      ];
    };
    convert.rgb.hwb = function(rgb) {
      var r = rgb[0];
      var g = rgb[1];
      var b = rgb[2];
      var h = convert.rgb.hsl(rgb)[0];
      var w = 1 / 255 * Math.min(r, Math.min(g, b));
      b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
      return [h, w * 100, b * 100];
    };
    convert.rgb.cmyk = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var c;
      var m;
      var y;
      var k;
      k = Math.min(1 - r, 1 - g, 1 - b);
      c = (1 - r - k) / (1 - k) || 0;
      m = (1 - g - k) / (1 - k) || 0;
      y = (1 - b - k) / (1 - k) || 0;
      return [c * 100, m * 100, y * 100, k * 100];
    };
    function comparativeDistance(x, y) {
      return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
    }
    convert.rgb.keyword = function(rgb) {
      var reversed = reverseKeywords[rgb];
      if (reversed) {
        return reversed;
      }
      var currentClosestDistance = Infinity;
      var currentClosestKeyword;
      for (var keyword in cssKeywords) {
        if (cssKeywords.hasOwnProperty(keyword)) {
          var value = cssKeywords[keyword];
          var distance = comparativeDistance(rgb, value);
          if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
          }
        }
      }
      return currentClosestKeyword;
    };
    convert.keyword.rgb = function(keyword) {
      return cssKeywords[keyword];
    };
    convert.rgb.xyz = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
      g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
      b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
      var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return [x * 100, y * 100, z * 100];
    };
    convert.rgb.lab = function(rgb) {
      var xyz = convert.rgb.xyz(rgb);
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.hsl.rgb = function(hsl) {
      var h = hsl[0] / 360;
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var t1;
      var t2;
      var t3;
      var rgb;
      var val;
      if (s === 0) {
        val = l * 255;
        return [val, val, val];
      }
      if (l < 0.5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      rgb = [0, 0, 0];
      for (var i2 = 0; i2 < 3; i2++) {
        t3 = h + 1 / 3 * -(i2 - 1);
        if (t3 < 0) {
          t3++;
        }
        if (t3 > 1) {
          t3--;
        }
        if (6 * t3 < 1) {
          val = t1 + (t2 - t1) * 6 * t3;
        } else if (2 * t3 < 1) {
          val = t2;
        } else if (3 * t3 < 2) {
          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          val = t1;
        }
        rgb[i2] = val * 255;
      }
      return rgb;
    };
    convert.hsl.hsv = function(hsl) {
      var h = hsl[0];
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var smin = s;
      var lmin = Math.max(l, 0.01);
      var sv;
      var v;
      l *= 2;
      s *= l <= 1 ? l : 2 - l;
      smin *= lmin <= 1 ? lmin : 2 - lmin;
      v = (l + s) / 2;
      sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
      return [h, sv * 100, v * 100];
    };
    convert.hsv.rgb = function(hsv) {
      var h = hsv[0] / 60;
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var hi = Math.floor(h) % 6;
      var f = h - Math.floor(h);
      var p = 255 * v * (1 - s);
      var q = 255 * v * (1 - s * f);
      var t = 255 * v * (1 - s * (1 - f));
      v *= 255;
      switch (hi) {
        case 0:
          return [v, t, p];
        case 1:
          return [q, v, p];
        case 2:
          return [p, v, t];
        case 3:
          return [p, q, v];
        case 4:
          return [t, p, v];
        case 5:
          return [v, p, q];
      }
    };
    convert.hsv.hsl = function(hsv) {
      var h = hsv[0];
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var vmin = Math.max(v, 0.01);
      var lmin;
      var sl;
      var l;
      l = (2 - s) * v;
      lmin = (2 - s) * vmin;
      sl = s * vmin;
      sl /= lmin <= 1 ? lmin : 2 - lmin;
      sl = sl || 0;
      l /= 2;
      return [h, sl * 100, l * 100];
    };
    convert.hwb.rgb = function(hwb) {
      var h = hwb[0] / 360;
      var wh = hwb[1] / 100;
      var bl = hwb[2] / 100;
      var ratio = wh + bl;
      var i2;
      var v;
      var f;
      var n;
      if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
      }
      i2 = Math.floor(6 * h);
      v = 1 - bl;
      f = 6 * h - i2;
      if ((i2 & 1) !== 0) {
        f = 1 - f;
      }
      n = wh + f * (v - wh);
      var r;
      var g;
      var b;
      switch (i2) {
        default:
        case 6:
        case 0:
          r = v;
          g = n;
          b = wh;
          break;
        case 1:
          r = n;
          g = v;
          b = wh;
          break;
        case 2:
          r = wh;
          g = v;
          b = n;
          break;
        case 3:
          r = wh;
          g = n;
          b = v;
          break;
        case 4:
          r = n;
          g = wh;
          b = v;
          break;
        case 5:
          r = v;
          g = wh;
          b = n;
          break;
      }
      return [r * 255, g * 255, b * 255];
    };
    convert.cmyk.rgb = function(cmyk) {
      var c = cmyk[0] / 100;
      var m = cmyk[1] / 100;
      var y = cmyk[2] / 100;
      var k = cmyk[3] / 100;
      var r;
      var g;
      var b;
      r = 1 - Math.min(1, c * (1 - k) + k);
      g = 1 - Math.min(1, m * (1 - k) + k);
      b = 1 - Math.min(1, y * (1 - k) + k);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.rgb = function(xyz) {
      var x = xyz[0] / 100;
      var y = xyz[1] / 100;
      var z = xyz[2] / 100;
      var r;
      var g;
      var b;
      r = x * 3.2406 + y * -1.5372 + z * -0.4986;
      g = x * -0.9689 + y * 1.8758 + z * 0.0415;
      b = x * 0.0557 + y * -0.204 + z * 1.057;
      r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
      g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
      b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
      r = Math.min(Math.max(0, r), 1);
      g = Math.min(Math.max(0, g), 1);
      b = Math.min(Math.max(0, b), 1);
      return [r * 255, g * 255, b * 255];
    };
    convert.xyz.lab = function(xyz) {
      var x = xyz[0];
      var y = xyz[1];
      var z = xyz[2];
      var l;
      var a;
      var b;
      x /= 95.047;
      y /= 100;
      z /= 108.883;
      x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
      y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
      z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return [l, a, b];
    };
    convert.lab.xyz = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var x;
      var y;
      var z;
      y = (l + 16) / 116;
      x = a / 500 + y;
      z = y - b / 200;
      var y2 = Math.pow(y, 3);
      var x2 = Math.pow(x, 3);
      var z2 = Math.pow(z, 3);
      y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
      x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
      z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
      x *= 95.047;
      y *= 100;
      z *= 108.883;
      return [x, y, z];
    };
    convert.lab.lch = function(lab) {
      var l = lab[0];
      var a = lab[1];
      var b = lab[2];
      var hr;
      var h;
      var c;
      hr = Math.atan2(b, a);
      h = hr * 360 / 2 / Math.PI;
      if (h < 0) {
        h += 360;
      }
      c = Math.sqrt(a * a + b * b);
      return [l, c, h];
    };
    convert.lch.lab = function(lch) {
      var l = lch[0];
      var c = lch[1];
      var h = lch[2];
      var a;
      var b;
      var hr;
      hr = h / 360 * 2 * Math.PI;
      a = c * Math.cos(hr);
      b = c * Math.sin(hr);
      return [l, a, b];
    };
    convert.rgb.ansi16 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
      value = Math.round(value / 50);
      if (value === 0) {
        return 30;
      }
      var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
      if (value === 2) {
        ansi += 60;
      }
      return ansi;
    };
    convert.hsv.ansi16 = function(args) {
      return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };
    convert.rgb.ansi256 = function(args) {
      var r = args[0];
      var g = args[1];
      var b = args[2];
      if (r === g && g === b) {
        if (r < 8) {
          return 16;
        }
        if (r > 248) {
          return 231;
        }
        return Math.round((r - 8) / 247 * 24) + 232;
      }
      var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
      return ansi;
    };
    convert.ansi16.rgb = function(args) {
      var color = args % 10;
      if (color === 0 || color === 7) {
        if (args > 50) {
          color += 3.5;
        }
        color = color / 10.5 * 255;
        return [color, color, color];
      }
      var mult = (~~(args > 50) + 1) * 0.5;
      var r = (color & 1) * mult * 255;
      var g = (color >> 1 & 1) * mult * 255;
      var b = (color >> 2 & 1) * mult * 255;
      return [r, g, b];
    };
    convert.ansi256.rgb = function(args) {
      if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [c, c, c];
      }
      args -= 16;
      var rem;
      var r = Math.floor(args / 36) / 5 * 255;
      var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
      var b = rem % 6 / 5 * 255;
      return [r, g, b];
    };
    convert.rgb.hex = function(args) {
      var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.hex.rgb = function(args) {
      var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!match) {
        return [0, 0, 0];
      }
      var colorString = match[0];
      if (match[0].length === 3) {
        colorString = colorString.split("").map(function(char) {
          return char + char;
        }).join("");
      }
      var integer = parseInt(colorString, 16);
      var r = integer >> 16 & 255;
      var g = integer >> 8 & 255;
      var b = integer & 255;
      return [r, g, b];
    };
    convert.rgb.hcg = function(rgb) {
      var r = rgb[0] / 255;
      var g = rgb[1] / 255;
      var b = rgb[2] / 255;
      var max = Math.max(Math.max(r, g), b);
      var min = Math.min(Math.min(r, g), b);
      var chroma = max - min;
      var grayscale;
      var hue;
      if (chroma < 1) {
        grayscale = min / (1 - chroma);
      } else {
        grayscale = 0;
      }
      if (chroma <= 0) {
        hue = 0;
      } else if (max === r) {
        hue = (g - b) / chroma % 6;
      } else if (max === g) {
        hue = 2 + (b - r) / chroma;
      } else {
        hue = 4 + (r - g) / chroma + 4;
      }
      hue /= 6;
      hue %= 1;
      return [hue * 360, chroma * 100, grayscale * 100];
    };
    convert.hsl.hcg = function(hsl) {
      var s = hsl[1] / 100;
      var l = hsl[2] / 100;
      var c = 1;
      var f = 0;
      if (l < 0.5) {
        c = 2 * s * l;
      } else {
        c = 2 * s * (1 - l);
      }
      if (c < 1) {
        f = (l - 0.5 * c) / (1 - c);
      }
      return [hsl[0], c * 100, f * 100];
    };
    convert.hsv.hcg = function(hsv) {
      var s = hsv[1] / 100;
      var v = hsv[2] / 100;
      var c = s * v;
      var f = 0;
      if (c < 1) {
        f = (v - c) / (1 - c);
      }
      return [hsv[0], c * 100, f * 100];
    };
    convert.hcg.rgb = function(hcg) {
      var h = hcg[0] / 360;
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      if (c === 0) {
        return [g * 255, g * 255, g * 255];
      }
      var pure = [0, 0, 0];
      var hi = h % 1 * 6;
      var v = hi % 1;
      var w = 1 - v;
      var mg = 0;
      switch (Math.floor(hi)) {
        case 0:
          pure[0] = 1;
          pure[1] = v;
          pure[2] = 0;
          break;
        case 1:
          pure[0] = w;
          pure[1] = 1;
          pure[2] = 0;
          break;
        case 2:
          pure[0] = 0;
          pure[1] = 1;
          pure[2] = v;
          break;
        case 3:
          pure[0] = 0;
          pure[1] = w;
          pure[2] = 1;
          break;
        case 4:
          pure[0] = v;
          pure[1] = 0;
          pure[2] = 1;
          break;
        default:
          pure[0] = 1;
          pure[1] = 0;
          pure[2] = w;
      }
      mg = (1 - c) * g;
      return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
      ];
    };
    convert.hcg.hsv = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      var f = 0;
      if (v > 0) {
        f = c / v;
      }
      return [hcg[0], f * 100, v * 100];
    };
    convert.hcg.hsl = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var l = g * (1 - c) + 0.5 * c;
      var s = 0;
      if (l > 0 && l < 0.5) {
        s = c / (2 * l);
      } else if (l >= 0.5 && l < 1) {
        s = c / (2 * (1 - l));
      }
      return [hcg[0], s * 100, l * 100];
    };
    convert.hcg.hwb = function(hcg) {
      var c = hcg[1] / 100;
      var g = hcg[2] / 100;
      var v = c + g * (1 - c);
      return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };
    convert.hwb.hcg = function(hwb) {
      var w = hwb[1] / 100;
      var b = hwb[2] / 100;
      var v = 1 - b;
      var c = v - w;
      var g = 0;
      if (c < 1) {
        g = (v - c) / (1 - c);
      }
      return [hwb[0], c * 100, g * 100];
    };
    convert.apple.rgb = function(apple) {
      return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
    };
    convert.rgb.apple = function(rgb) {
      return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
    };
    convert.gray.rgb = function(args) {
      return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };
    convert.gray.hsl = convert.gray.hsv = function(args) {
      return [0, 0, args[0]];
    };
    convert.gray.hwb = function(gray) {
      return [0, 100, gray[0]];
    };
    convert.gray.cmyk = function(gray) {
      return [0, 0, 0, gray[0]];
    };
    convert.gray.lab = function(gray) {
      return [gray[0], 0, 0];
    };
    convert.gray.hex = function(gray) {
      var val = Math.round(gray[0] / 100 * 255) & 255;
      var integer = (val << 16) + (val << 8) + val;
      var string = integer.toString(16).toUpperCase();
      return "000000".substring(string.length) + string;
    };
    convert.rgb.gray = function(rgb) {
      var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
      return [val / 255 * 100];
    };
  }
});

// ../../node_modules/.store/color-convert-npm-1.9.3-1fe690075e/node_modules/color-convert/route.js
var require_route = __commonJS({
  "../../node_modules/.store/color-convert-npm-1.9.3-1fe690075e/node_modules/color-convert/route.js"(exports2, module2) {
    var conversions = require_conversions();
    function buildGraph() {
      var graph = {};
      var models = Object.keys(conversions);
      for (var len = models.length, i2 = 0; i2 < len; i2++) {
        graph[models[i2]] = {
          distance: -1,
          parent: null
        };
      }
      return graph;
    }
    function deriveBFS(fromModel) {
      var graph = buildGraph();
      var queue = [fromModel];
      graph[fromModel].distance = 0;
      while (queue.length) {
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for (var len = adjacents.length, i2 = 0; i2 < len; i2++) {
          var adjacent = adjacents[i2];
          var node = graph[adjacent];
          if (node.distance === -1) {
            node.distance = graph[current].distance + 1;
            node.parent = current;
            queue.unshift(adjacent);
          }
        }
      }
      return graph;
    }
    function link(from, to) {
      return function(args) {
        return to(from(args));
      };
    }
    function wrapConversion(toModel, graph) {
      var path2 = [graph[toModel].parent, toModel];
      var fn = conversions[graph[toModel].parent][toModel];
      var cur = graph[toModel].parent;
      while (graph[cur].parent) {
        path2.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
      }
      fn.conversion = path2;
      return fn;
    }
    module2.exports = function(fromModel) {
      var graph = deriveBFS(fromModel);
      var conversion = {};
      var models = Object.keys(graph);
      for (var len = models.length, i2 = 0; i2 < len; i2++) {
        var toModel = models[i2];
        var node = graph[toModel];
        if (node.parent === null) {
          continue;
        }
        conversion[toModel] = wrapConversion(toModel, graph);
      }
      return conversion;
    };
  }
});

// ../../node_modules/.store/color-convert-npm-1.9.3-1fe690075e/node_modules/color-convert/index.js
var require_color_convert = __commonJS({
  "../../node_modules/.store/color-convert-npm-1.9.3-1fe690075e/node_modules/color-convert/index.js"(exports2, module2) {
    var conversions = require_conversions();
    var route = require_route();
    var convert = {};
    var models = Object.keys(conversions);
    function wrapRaw(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        return fn(args);
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    function wrapRounded(fn) {
      var wrappedFn = function(args) {
        if (args === void 0 || args === null) {
          return args;
        }
        if (arguments.length > 1) {
          args = Array.prototype.slice.call(arguments);
        }
        var result = fn(args);
        if (typeof result === "object") {
          for (var len = result.length, i2 = 0; i2 < len; i2++) {
            result[i2] = Math.round(result[i2]);
          }
        }
        return result;
      };
      if ("conversion" in fn) {
        wrappedFn.conversion = fn.conversion;
      }
      return wrappedFn;
    }
    models.forEach(function(fromModel) {
      convert[fromModel] = {};
      Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
      Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
      var routes = route(fromModel);
      var routeModels = Object.keys(routes);
      routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
      });
    });
    module2.exports = convert;
  }
});

// ../../node_modules/.store/color-npm-3.0.0-b8328aea55/node_modules/color/index.js
var require_color = __commonJS({
  "../../node_modules/.store/color-npm-3.0.0-b8328aea55/node_modules/color/index.js"(exports2, module2) {
    "use strict";
    var colorString = require_color_string();
    var convert = require_color_convert();
    var _slice = [].slice;
    var skippedModels = [
      "keyword",
      "gray",
      "hex"
    ];
    var hashedModelKeys = {};
    Object.keys(convert).forEach(function(model) {
      hashedModelKeys[_slice.call(convert[model].labels).sort().join("")] = model;
    });
    var limiters = {};
    function Color(obj, model) {
      if (!(this instanceof Color)) {
        return new Color(obj, model);
      }
      if (model && model in skippedModels) {
        model = null;
      }
      if (model && !(model in convert)) {
        throw new Error("Unknown model: " + model);
      }
      var i2;
      var channels;
      if (!obj) {
        this.model = "rgb";
        this.color = [0, 0, 0];
        this.valpha = 1;
      } else if (obj instanceof Color) {
        this.model = obj.model;
        this.color = obj.color.slice();
        this.valpha = obj.valpha;
      } else if (typeof obj === "string") {
        var result = colorString.get(obj);
        if (result === null) {
          throw new Error("Unable to parse color from string: " + obj);
        }
        this.model = result.model;
        channels = convert[this.model].channels;
        this.color = result.value.slice(0, channels);
        this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
      } else if (obj.length) {
        this.model = model || "rgb";
        channels = convert[this.model].channels;
        var newArr = _slice.call(obj, 0, channels);
        this.color = zeroArray(newArr, channels);
        this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
      } else if (typeof obj === "number") {
        obj &= 16777215;
        this.model = "rgb";
        this.color = [
          obj >> 16 & 255,
          obj >> 8 & 255,
          obj & 255
        ];
        this.valpha = 1;
      } else {
        this.valpha = 1;
        var keys = Object.keys(obj);
        if ("alpha" in obj) {
          keys.splice(keys.indexOf("alpha"), 1);
          this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
        }
        var hashedKeys = keys.sort().join("");
        if (!(hashedKeys in hashedModelKeys)) {
          throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
        }
        this.model = hashedModelKeys[hashedKeys];
        var labels = convert[this.model].labels;
        var color = [];
        for (i2 = 0; i2 < labels.length; i2++) {
          color.push(obj[labels[i2]]);
        }
        this.color = zeroArray(color);
      }
      if (limiters[this.model]) {
        channels = convert[this.model].channels;
        for (i2 = 0; i2 < channels; i2++) {
          var limit = limiters[this.model][i2];
          if (limit) {
            this.color[i2] = limit(this.color[i2]);
          }
        }
      }
      this.valpha = Math.max(0, Math.min(1, this.valpha));
      if (Object.freeze) {
        Object.freeze(this);
      }
    }
    Color.prototype = {
      toString: function() {
        return this.string();
      },
      toJSON: function() {
        return this[this.model]();
      },
      string: function(places) {
        var self2 = this.model in colorString.to ? this : this.rgb();
        self2 = self2.round(typeof places === "number" ? places : 1);
        var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
        return colorString.to[self2.model](args);
      },
      percentString: function(places) {
        var self2 = this.rgb().round(typeof places === "number" ? places : 1);
        var args = self2.valpha === 1 ? self2.color : self2.color.concat(this.valpha);
        return colorString.to.rgb.percent(args);
      },
      array: function() {
        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
      },
      object: function() {
        var result = {};
        var channels = convert[this.model].channels;
        var labels = convert[this.model].labels;
        for (var i2 = 0; i2 < channels; i2++) {
          result[labels[i2]] = this.color[i2];
        }
        if (this.valpha !== 1) {
          result.alpha = this.valpha;
        }
        return result;
      },
      unitArray: function() {
        var rgb = this.rgb().color;
        rgb[0] /= 255;
        rgb[1] /= 255;
        rgb[2] /= 255;
        if (this.valpha !== 1) {
          rgb.push(this.valpha);
        }
        return rgb;
      },
      unitObject: function() {
        var rgb = this.rgb().object();
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        if (this.valpha !== 1) {
          rgb.alpha = this.valpha;
        }
        return rgb;
      },
      round: function(places) {
        places = Math.max(places || 0, 0);
        return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
      },
      alpha: function(val) {
        if (arguments.length) {
          return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
        }
        return this.valpha;
      },
      red: getset("rgb", 0, maxfn(255)),
      green: getset("rgb", 1, maxfn(255)),
      blue: getset("rgb", 2, maxfn(255)),
      hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function(val) {
        return (val % 360 + 360) % 360;
      }),
      saturationl: getset("hsl", 1, maxfn(100)),
      lightness: getset("hsl", 2, maxfn(100)),
      saturationv: getset("hsv", 1, maxfn(100)),
      value: getset("hsv", 2, maxfn(100)),
      chroma: getset("hcg", 1, maxfn(100)),
      gray: getset("hcg", 2, maxfn(100)),
      white: getset("hwb", 1, maxfn(100)),
      wblack: getset("hwb", 2, maxfn(100)),
      cyan: getset("cmyk", 0, maxfn(100)),
      magenta: getset("cmyk", 1, maxfn(100)),
      yellow: getset("cmyk", 2, maxfn(100)),
      black: getset("cmyk", 3, maxfn(100)),
      x: getset("xyz", 0, maxfn(100)),
      y: getset("xyz", 1, maxfn(100)),
      z: getset("xyz", 2, maxfn(100)),
      l: getset("lab", 0, maxfn(100)),
      a: getset("lab", 1),
      b: getset("lab", 2),
      keyword: function(val) {
        if (arguments.length) {
          return new Color(val);
        }
        return convert[this.model].keyword(this.color);
      },
      hex: function(val) {
        if (arguments.length) {
          return new Color(val);
        }
        return colorString.to.hex(this.rgb().round().color);
      },
      rgbNumber: function() {
        var rgb = this.rgb().color;
        return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
      },
      luminosity: function() {
        var rgb = this.rgb().color;
        var lum = [];
        for (var i2 = 0; i2 < rgb.length; i2++) {
          var chan = rgb[i2] / 255;
          lum[i2] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
      },
      contrast: function(color2) {
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
          return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
      },
      level: function(color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
          return "AAA";
        }
        return contrastRatio >= 4.5 ? "AA" : "";
      },
      isDark: function() {
        var rgb = this.rgb().color;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
        return yiq < 128;
      },
      isLight: function() {
        return !this.isDark();
      },
      negate: function() {
        var rgb = this.rgb();
        for (var i2 = 0; i2 < 3; i2++) {
          rgb.color[i2] = 255 - rgb.color[i2];
        }
        return rgb;
      },
      lighten: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] += hsl.color[2] * ratio;
        return hsl;
      },
      darken: function(ratio) {
        var hsl = this.hsl();
        hsl.color[2] -= hsl.color[2] * ratio;
        return hsl;
      },
      saturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] += hsl.color[1] * ratio;
        return hsl;
      },
      desaturate: function(ratio) {
        var hsl = this.hsl();
        hsl.color[1] -= hsl.color[1] * ratio;
        return hsl;
      },
      whiten: function(ratio) {
        var hwb = this.hwb();
        hwb.color[1] += hwb.color[1] * ratio;
        return hwb;
      },
      blacken: function(ratio) {
        var hwb = this.hwb();
        hwb.color[2] += hwb.color[2] * ratio;
        return hwb;
      },
      grayscale: function() {
        var rgb = this.rgb().color;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        return Color.rgb(val, val, val);
      },
      fade: function(ratio) {
        return this.alpha(this.valpha - this.valpha * ratio);
      },
      opaquer: function(ratio) {
        return this.alpha(this.valpha + this.valpha * ratio);
      },
      rotate: function(degrees) {
        var hsl = this.hsl();
        var hue = hsl.color[0];
        hue = (hue + degrees) % 360;
        hue = hue < 0 ? 360 + hue : hue;
        hsl.color[0] = hue;
        return hsl;
      },
      mix: function(mixinColor, weight) {
        var color1 = mixinColor.rgb();
        var color2 = this.rgb();
        var p = weight === void 0 ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
        var w2 = 1 - w1;
        return Color.rgb(
          w1 * color1.red() + w2 * color2.red(),
          w1 * color1.green() + w2 * color2.green(),
          w1 * color1.blue() + w2 * color2.blue(),
          color1.alpha() * p + color2.alpha() * (1 - p)
        );
      }
    };
    Object.keys(convert).forEach(function(model) {
      if (skippedModels.indexOf(model) !== -1) {
        return;
      }
      var channels = convert[model].channels;
      Color.prototype[model] = function() {
        if (this.model === model) {
          return new Color(this);
        }
        if (arguments.length) {
          return new Color(arguments, model);
        }
        var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
        return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
      };
      Color[model] = function(color) {
        if (typeof color === "number") {
          color = zeroArray(_slice.call(arguments), channels);
        }
        return new Color(color, model);
      };
    });
    function roundTo(num2, places) {
      return Number(num2.toFixed(places));
    }
    function roundToPlace(places) {
      return function(num2) {
        return roundTo(num2, places);
      };
    }
    function getset(model, channel, modifier) {
      model = Array.isArray(model) ? model : [model];
      model.forEach(function(m) {
        (limiters[m] || (limiters[m] = []))[channel] = modifier;
      });
      model = model[0];
      return function(val) {
        var result;
        if (arguments.length) {
          if (modifier) {
            val = modifier(val);
          }
          result = this[model]();
          result.color[channel] = val;
          return result;
        }
        result = this[model]().color[channel];
        if (modifier) {
          result = modifier(result);
        }
        return result;
      };
    }
    function maxfn(max) {
      return function(v) {
        return Math.max(0, Math.min(max, v));
      };
    }
    function assertArray(val) {
      return Array.isArray(val) ? val : [val];
    }
    function zeroArray(arr, length) {
      for (var i2 = 0; i2 < length; i2++) {
        if (typeof arr[i2] !== "number") {
          arr[i2] = 0;
        }
      }
      return arr;
    }
    module2.exports = Color;
  }
});

// ../../node_modules/.store/text-hex-npm-1.0.0-22389e4d56/node_modules/text-hex/index.js
var require_text_hex = __commonJS({
  "../../node_modules/.store/text-hex-npm-1.0.0-22389e4d56/node_modules/text-hex/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function hex(str) {
      for (var i2 = 0, hash = 0; i2 < str.length; hash = str.charCodeAt(i2++) + ((hash << 5) - hash))
        ;
      var color = Math.floor(
        Math.abs(
          Math.sin(hash) * 1e4 % 1 * 16777216
        )
      ).toString(16);
      return "#" + Array(6 - color.length + 1).join("0") + color;
    };
  }
});

// ../../node_modules/.store/colorspace-npm-1.1.2-880999c764/node_modules/colorspace/index.js
var require_colorspace = __commonJS({
  "../../node_modules/.store/colorspace-npm-1.1.2-880999c764/node_modules/colorspace/index.js"(exports2, module2) {
    "use strict";
    var color = require_color();
    var hex = require_text_hex();
    module2.exports = function colorspace(namespace, delimiter) {
      var split = namespace.split(delimiter || ":");
      var base = hex(split[0]);
      if (!split.length)
        return base;
      for (var i2 = 0, l = split.length - 1; i2 < l; i2++) {
        base = color(base).mix(color(hex(split[i2 + 1]))).saturate(1).hex();
      }
      return base;
    };
  }
});

// ../../node_modules/.store/kuler-npm-2.0.0-19e74c9695/node_modules/kuler/index.js
var require_kuler = __commonJS({
  "../../node_modules/.store/kuler-npm-2.0.0-19e74c9695/node_modules/kuler/index.js"(exports2, module2) {
    "use strict";
    function Kuler(text, color) {
      if (color)
        return new Kuler(text).style(color);
      if (!(this instanceof Kuler))
        return new Kuler(text);
      this.text = text;
    }
    Kuler.prototype.prefix = "\x1B[";
    Kuler.prototype.suffix = "m";
    Kuler.prototype.hex = function hex(color) {
      color = color[0] === "#" ? color.substring(1) : color;
      if (color.length === 3) {
        color = color.split("");
        color[5] = color[2];
        color[4] = color[2];
        color[3] = color[1];
        color[2] = color[1];
        color[1] = color[0];
        color = color.join("");
      }
      var r = color.substring(0, 2), g = color.substring(2, 4), b = color.substring(4, 6);
      return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16)];
    };
    Kuler.prototype.rgb = function rgb(r, g, b) {
      var red = r / 255 * 5, green = g / 255 * 5, blue = b / 255 * 5;
      return this.ansi(red, green, blue);
    };
    Kuler.prototype.ansi = function ansi(r, g, b) {
      var red = Math.round(r), green = Math.round(g), blue = Math.round(b);
      return 16 + red * 36 + green * 6 + blue;
    };
    Kuler.prototype.reset = function reset() {
      return this.prefix + "39;49" + this.suffix;
    };
    Kuler.prototype.style = function style(color) {
      return this.prefix + "38;5;" + this.rgb.apply(this, this.hex(color)) + this.suffix + this.text + this.reset();
    };
    module2.exports = Kuler;
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js
var require_namespace_ansi = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js"(exports2, module2) {
    var colorspace = require_colorspace();
    var kuler = require_kuler();
    module2.exports = function ansiModifier(args, options) {
      var namespace = options.namespace;
      var ansi = options.colors !== false ? kuler(namespace + ":", colorspace(namespace)) : namespace + ":";
      args[0] = ansi + " " + args[0];
      return args;
    };
  }
});

// ../../node_modules/.store/enabled-npm-2.0.0-bf5d96c9d8/node_modules/enabled/index.js
var require_enabled = __commonJS({
  "../../node_modules/.store/enabled-npm-2.0.0-bf5d96c9d8/node_modules/enabled/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function enabled(name, variable) {
      if (!variable)
        return false;
      var variables = variable.split(/[\s,]+/), i2 = 0;
      for (; i2 < variables.length; i2++) {
        variable = variables[i2].replace("*", ".*?");
        if ("-" === variable.charAt(0)) {
          if (new RegExp("^" + variable.substr(1) + "$").test(name)) {
            return false;
          }
          continue;
        }
        if (new RegExp("^" + variable + "$").test(name)) {
          return true;
        }
      }
      return false;
    };
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/adapters/index.js
var require_adapters = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/adapters/index.js"(exports2, module2) {
    var enabled = require_enabled();
    module2.exports = function create2(fn) {
      return function adapter(namespace) {
        try {
          return enabled(namespace, fn());
        } catch (e) {
        }
        return false;
      };
    };
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/adapters/process.env.js
var require_process_env = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/adapters/process.env.js"(exports2, module2) {
    var adapter = require_adapters();
    module2.exports = adapter(function processenv() {
      return process.env.DEBUG || process.env.DIAGNOSTICS;
    });
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/logger/console.js
var require_console2 = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/logger/console.js"(exports2, module2) {
    module2.exports = function(meta, messages) {
      try {
        Function.prototype.apply.call(console.log, console, messages);
      } catch (e) {
      }
    };
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/node/development.js
var require_development = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/node/development.js"(exports2, module2) {
    var create2 = require_diagnostics();
    var tty2 = __require("tty").isatty(1);
    var diagnostics = create2(function dev(namespace, options) {
      options = options || {};
      options.colors = "colors" in options ? options.colors : tty2;
      options.namespace = namespace;
      options.prod = false;
      options.dev = true;
      if (!dev.enabled(namespace) && !(options.force || dev.force)) {
        return dev.nope(options);
      }
      return dev.yep(options);
    });
    diagnostics.modify(require_namespace_ansi());
    diagnostics.use(require_process_env());
    diagnostics.set(require_console2());
    module2.exports = diagnostics;
  }
});

// ../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/node/index.js
var require_node2 = __commonJS({
  "../../node_modules/.store/@dabh-diagnostics-npm-2.0.2-83eb005a83/node_modules/@dabh/diagnostics/node/index.js"(exports2, module2) {
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_production();
    } else {
      module2.exports = require_development();
    }
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/tail-file.js
var require_tail_file = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/tail-file.js"(exports2, module2) {
    "use strict";
    var fs2 = __require("fs");
    var { StringDecoder } = __require("string_decoder");
    var { Stream: Stream2 } = require_readable();
    function noop2() {
    }
    module2.exports = (options, iter) => {
      const buffer2 = Buffer.alloc(64 * 1024);
      const decode = new StringDecoder("utf8");
      const stream = new Stream2();
      let buff = "";
      let pos = 0;
      let row2 = 0;
      if (options.start === -1) {
        delete options.start;
      }
      stream.readable = true;
      stream.destroy = () => {
        stream.destroyed = true;
        stream.emit("end");
        stream.emit("close");
      };
      fs2.open(options.file, "a+", "0644", (err2, fd) => {
        if (err2) {
          if (!iter) {
            stream.emit("error", err2);
          } else {
            iter(err2);
          }
          stream.destroy();
          return;
        }
        (function read2() {
          if (stream.destroyed) {
            fs2.close(fd, noop2);
            return;
          }
          return fs2.read(fd, buffer2, 0, buffer2.length, pos, (error, bytes) => {
            if (error) {
              if (!iter) {
                stream.emit("error", error);
              } else {
                iter(error);
              }
              stream.destroy();
              return;
            }
            if (!bytes) {
              if (buff) {
                if (options.start == null || row2 > options.start) {
                  if (!iter) {
                    stream.emit("line", buff);
                  } else {
                    iter(null, buff);
                  }
                }
                row2++;
                buff = "";
              }
              return setTimeout(read2, 1e3);
            }
            let data = decode.write(buffer2.slice(0, bytes));
            if (!iter) {
              stream.emit("data", data);
            }
            data = (buff + data).split(/\n+/);
            const l = data.length - 1;
            let i2 = 0;
            for (; i2 < l; i2++) {
              if (options.start == null || row2 > options.start) {
                if (!iter) {
                  stream.emit("line", data[i2]);
                } else {
                  iter(null, data[i2]);
                }
              }
              row2++;
            }
            buff = data[l];
            pos += bytes;
            return read2();
          });
        })();
      });
      if (!iter) {
        return stream;
      }
      return stream.destroy;
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/file.js
var require_file2 = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/file.js"(exports2, module2) {
    "use strict";
    var fs2 = __require("fs");
    var path2 = __require("path");
    var asyncSeries = require_series();
    var zlib = __require("zlib");
    var { MESSAGE } = require_triple_beam();
    var { Stream: Stream2, PassThrough: PassThrough2 } = require_readable();
    var TransportStream = require_winston_transport();
    var debug = require_node2()("winston:file");
    var os2 = __require("os");
    var tailFile = require_tail_file();
    module2.exports = class File extends TransportStream {
      constructor(options = {}) {
        super(options);
        this.name = options.name || "file";
        function throwIf(target, ...args) {
          args.slice(1).forEach((name) => {
            if (options[name]) {
              throw new Error(`Cannot set ${name} and ${target} together`);
            }
          });
        }
        this._stream = new PassThrough2();
        this._stream.setMaxListeners(30);
        this._onError = this._onError.bind(this);
        if (options.filename || options.dirname) {
          throwIf("filename or dirname", "stream");
          this._basename = this.filename = options.filename ? path2.basename(options.filename) : "winston.log";
          this.dirname = options.dirname || path2.dirname(options.filename);
          this.options = options.options || { flags: "a" };
        } else if (options.stream) {
          console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream");
          throwIf("stream", "filename", "maxsize");
          this._dest = this._stream.pipe(this._setupStream(options.stream));
          this.dirname = path2.dirname(this._dest.path);
        } else {
          throw new Error("Cannot log to file without filename or stream.");
        }
        this.maxsize = options.maxsize || null;
        this.rotationFormat = options.rotationFormat || false;
        this.zippedArchive = options.zippedArchive || false;
        this.maxFiles = options.maxFiles || null;
        this.eol = typeof options.eol === "string" ? options.eol : os2.EOL;
        this.tailable = options.tailable || false;
        this._size = 0;
        this._pendingSize = 0;
        this._created = 0;
        this._drain = false;
        this._opening = false;
        this._ending = false;
        if (this.dirname)
          this._createLogDirIfNotExist(this.dirname);
        this.open();
      }
      finishIfEnding() {
        if (this._ending) {
          if (this._opening) {
            this.once("open", () => {
              this._stream.once("finish", () => this.emit("finish"));
              setImmediate(() => this._stream.end());
            });
          } else {
            this._stream.once("finish", () => this.emit("finish"));
            setImmediate(() => this._stream.end());
          }
        }
      }
      log(info, callback = () => {
      }) {
        if (this.silent) {
          callback();
          return true;
        }
        if (this._drain) {
          this._stream.once("drain", () => {
            this._drain = false;
            this.log(info, callback);
          });
          return;
        }
        if (this._rotate) {
          this._stream.once("rotate", () => {
            this._rotate = false;
            this.log(info, callback);
          });
          return;
        }
        const output = `${info[MESSAGE]}${this.eol}`;
        const bytes = Buffer.byteLength(output);
        function logged() {
          this._size += bytes;
          this._pendingSize -= bytes;
          debug("logged %s %s", this._size, output);
          this.emit("logged", info);
          if (this._opening) {
            return;
          }
          if (!this._needsNewFile()) {
            return;
          }
          this._rotate = true;
          this._endStream(() => this._rotateFile());
        }
        this._pendingSize += bytes;
        if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) {
          this.rotatedWhileOpening = true;
        }
        const written = this._stream.write(output, logged.bind(this));
        if (!written) {
          this._drain = true;
          this._stream.once("drain", () => {
            this._drain = false;
            callback();
          });
        } else {
          callback();
        }
        debug("written", written, this._drain);
        this.finishIfEnding();
        return written;
      }
      query(options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = normalizeQuery(options);
        const file = path2.join(this.dirname, this.filename);
        let buff = "";
        let results = [];
        let row2 = 0;
        const stream = fs2.createReadStream(file, {
          encoding: "utf8"
        });
        stream.on("error", (err2) => {
          if (stream.readable) {
            stream.destroy();
          }
          if (!callback) {
            return;
          }
          return err2.code !== "ENOENT" ? callback(err2) : callback(null, results);
        });
        stream.on("data", (data) => {
          data = (buff + data).split(/\n+/);
          const l = data.length - 1;
          let i2 = 0;
          for (; i2 < l; i2++) {
            if (!options.start || row2 >= options.start) {
              add(data[i2]);
            }
            row2++;
          }
          buff = data[l];
        });
        stream.on("close", () => {
          if (buff) {
            add(buff, true);
          }
          if (options.order === "desc") {
            results = results.reverse();
          }
          if (callback)
            callback(null, results);
        });
        function add(buff2, attempt) {
          try {
            const log = JSON.parse(buff2);
            if (check(log)) {
              push(log);
            }
          } catch (e) {
            if (!attempt) {
              stream.emit("error", e);
            }
          }
        }
        function push(log) {
          if (options.rows && results.length >= options.rows && options.order !== "desc") {
            if (stream.readable) {
              stream.destroy();
            }
            return;
          }
          if (options.fields) {
            log = options.fields.reduce((obj, key2) => {
              obj[key2] = log[key2];
              return obj;
            }, {});
          }
          if (options.order === "desc") {
            if (results.length >= options.rows) {
              results.shift();
            }
          }
          results.push(log);
        }
        function check(log) {
          if (!log) {
            return;
          }
          if (typeof log !== "object") {
            return;
          }
          const time = new Date(log.timestamp);
          if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {
            return;
          }
          return true;
        }
        function normalizeQuery(options2) {
          options2 = options2 || {};
          options2.rows = options2.rows || options2.limit || 10;
          options2.start = options2.start || 0;
          options2.until = options2.until || new Date();
          if (typeof options2.until !== "object") {
            options2.until = new Date(options2.until);
          }
          options2.from = options2.from || options2.until - 24 * 60 * 60 * 1e3;
          if (typeof options2.from !== "object") {
            options2.from = new Date(options2.from);
          }
          options2.order = options2.order || "desc";
          return options2;
        }
      }
      stream(options = {}) {
        const file = path2.join(this.dirname, this.filename);
        const stream = new Stream2();
        const tail = {
          file,
          start: options.start
        };
        stream.destroy = tailFile(tail, (err2, line) => {
          if (err2) {
            return stream.emit("error", err2);
          }
          try {
            stream.emit("data", line);
            line = JSON.parse(line);
            stream.emit("log", line);
          } catch (e) {
            stream.emit("error", e);
          }
        });
        return stream;
      }
      open() {
        if (!this.filename)
          return;
        if (this._opening)
          return;
        this._opening = true;
        this.stat((err2, size) => {
          if (err2) {
            return this.emit("error", err2);
          }
          debug("stat done: %s { size: %s }", this.filename, size);
          this._size = size;
          this._dest = this._createStream(this._stream);
          this._opening = false;
          this.once("open", () => {
            if (this._stream.eventNames().includes("rotate")) {
              this._stream.emit("rotate");
            } else {
              this._rotate = false;
            }
          });
        });
      }
      stat(callback) {
        const target = this._getFile();
        const fullpath = path2.join(this.dirname, target);
        fs2.stat(fullpath, (err2, stat) => {
          if (err2 && err2.code === "ENOENT") {
            debug("ENOENT\xA0ok", fullpath);
            this.filename = target;
            return callback(null, 0);
          }
          if (err2) {
            debug(`err ${err2.code} ${fullpath}`);
            return callback(err2);
          }
          if (!stat || this._needsNewFile(stat.size)) {
            return this._incFile(() => this.stat(callback));
          }
          this.filename = target;
          callback(null, stat.size);
        });
      }
      close(cb2) {
        if (!this._stream) {
          return;
        }
        this._stream.end(() => {
          if (cb2) {
            cb2();
          }
          this.emit("flush");
          this.emit("closed");
        });
      }
      _needsNewFile(size) {
        size = size || this._size;
        return this.maxsize && size >= this.maxsize;
      }
      _onError(err2) {
        this.emit("error", err2);
      }
      _setupStream(stream) {
        stream.on("error", this._onError);
        return stream;
      }
      _cleanupStream(stream) {
        stream.removeListener("error", this._onError);
        return stream;
      }
      _rotateFile() {
        this._incFile(() => this.open());
      }
      _endStream(callback = () => {
      }) {
        if (this._dest) {
          this._stream.unpipe(this._dest);
          this._dest.end(() => {
            this._cleanupStream(this._dest);
            callback();
          });
        } else {
          callback();
        }
      }
      _createStream(source) {
        const fullpath = path2.join(this.dirname, this.filename);
        debug("create stream start", fullpath, this.options);
        const dest = fs2.createWriteStream(fullpath, this.options).on("error", (err2) => debug(err2)).on("close", () => debug("close", dest.path, dest.bytesWritten)).on("open", () => {
          debug("file open ok", fullpath);
          this.emit("open", fullpath);
          source.pipe(dest);
          if (this.rotatedWhileOpening) {
            this._stream = new PassThrough2();
            this._stream.setMaxListeners(30);
            this._rotateFile();
            this.rotatedWhileOpening = false;
            this._cleanupStream(dest);
            source.end();
          }
        });
        debug("create stream ok", fullpath);
        if (this.zippedArchive) {
          const gzip = zlib.createGzip();
          gzip.pipe(dest);
          return gzip;
        }
        return dest;
      }
      _incFile(callback) {
        debug("_incFile", this.filename);
        const ext = path2.extname(this._basename);
        const basename = path2.basename(this._basename, ext);
        if (!this.tailable) {
          this._created += 1;
          this._checkMaxFilesIncrementing(ext, basename, callback);
        } else {
          this._checkMaxFilesTailable(ext, basename, callback);
        }
      }
      _getFile() {
        const ext = path2.extname(this._basename);
        const basename = path2.basename(this._basename, ext);
        const isRotation = this.rotationFormat ? this.rotationFormat() : this._created;
        const target = !this.tailable && this._created ? `${basename}${isRotation}${ext}` : `${basename}${ext}`;
        return this.zippedArchive && !this.tailable ? `${target}.gz` : target;
      }
      _checkMaxFilesIncrementing(ext, basename, callback) {
        if (!this.maxFiles || this._created < this.maxFiles) {
          return setImmediate(callback);
        }
        const oldest = this._created - this.maxFiles;
        const isOldest = oldest !== 0 ? oldest : "";
        const isZipped = this.zippedArchive ? ".gz" : "";
        const filePath = `${basename}${isOldest}${ext}${isZipped}`;
        const target = path2.join(this.dirname, filePath);
        fs2.unlink(target, callback);
      }
      _checkMaxFilesTailable(ext, basename, callback) {
        const tasks = [];
        if (!this.maxFiles) {
          return;
        }
        const isZipped = this.zippedArchive ? ".gz" : "";
        for (let x = this.maxFiles - 1; x > 1; x--) {
          tasks.push(function(i2, cb2) {
            let fileName = `${basename}${i2 - 1}${ext}${isZipped}`;
            const tmppath = path2.join(this.dirname, fileName);
            fs2.exists(tmppath, (exists) => {
              if (!exists) {
                return cb2(null);
              }
              fileName = `${basename}${i2}${ext}${isZipped}`;
              fs2.rename(tmppath, path2.join(this.dirname, fileName), cb2);
            });
          }.bind(this, x));
        }
        asyncSeries(tasks, () => {
          fs2.rename(
            path2.join(this.dirname, `${basename}${ext}`),
            path2.join(this.dirname, `${basename}1${ext}${isZipped}`),
            callback
          );
        });
      }
      _createLogDirIfNotExist(dirPath) {
        if (!fs2.existsSync(dirPath)) {
          fs2.mkdirSync(dirPath, { recursive: true });
        }
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/http.js
var require_http = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/http.js"(exports2, module2) {
    "use strict";
    var http = __require("http");
    var https = __require("https");
    var { Stream: Stream2 } = require_readable();
    var TransportStream = require_winston_transport();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = class Http extends TransportStream {
      constructor(options = {}) {
        super(options);
        this.options = options;
        this.name = options.name || "http";
        this.ssl = !!options.ssl;
        this.host = options.host || "localhost";
        this.port = options.port;
        this.auth = options.auth;
        this.path = options.path || "";
        this.agent = options.agent;
        this.headers = options.headers || {};
        this.headers["content-type"] = "application/json";
        this.batch = options.batch || false;
        this.batchInterval = options.batchInterval || 5e3;
        this.batchCount = options.batchCount || 10;
        this.batchOptions = [];
        this.batchTimeoutID = -1;
        this.batchCallback = {};
        if (!this.port) {
          this.port = this.ssl ? 443 : 80;
        }
      }
      log(info, callback) {
        this._request(info, (err2, res) => {
          if (res && res.statusCode !== 200) {
            err2 = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
          }
          if (err2) {
            this.emit("warn", err2);
          } else {
            this.emit("logged", info);
          }
        });
        if (callback) {
          setImmediate(callback);
        }
      }
      query(options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = {
          method: "query",
          params: this.normalizeQuery(options)
        };
        if (options.params.path) {
          options.path = options.params.path;
          delete options.params.path;
        }
        if (options.params.auth) {
          options.auth = options.params.auth;
          delete options.params.auth;
        }
        this._request(options, (err2, res, body) => {
          if (res && res.statusCode !== 200) {
            err2 = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
          }
          if (err2) {
            return callback(err2);
          }
          if (typeof body === "string") {
            try {
              body = JSON.parse(body);
            } catch (e) {
              return callback(e);
            }
          }
          callback(null, body);
        });
      }
      stream(options = {}) {
        const stream = new Stream2();
        options = {
          method: "stream",
          params: options
        };
        if (options.params.path) {
          options.path = options.params.path;
          delete options.params.path;
        }
        if (options.params.auth) {
          options.auth = options.params.auth;
          delete options.params.auth;
        }
        let buff = "";
        const req = this._request(options);
        stream.destroy = () => req.destroy();
        req.on("data", (data) => {
          data = (buff + data).split(/\n+/);
          const l = data.length - 1;
          let i2 = 0;
          for (; i2 < l; i2++) {
            try {
              stream.emit("log", JSON.parse(data[i2]));
            } catch (e) {
              stream.emit("error", e);
            }
          }
          buff = data[l];
        });
        req.on("error", (err2) => stream.emit("error", err2));
        return stream;
      }
      _request(options, callback) {
        options = options || {};
        const auth = options.auth || this.auth;
        const path2 = options.path || this.path || "";
        delete options.auth;
        delete options.path;
        if (this.batch) {
          this._doBatch(options, callback, auth, path2);
        } else {
          this._doRequest(options, callback, auth, path2);
        }
      }
      _doBatch(options, callback, auth, path2) {
        this.batchOptions.push(options);
        if (this.batchOptions.length === 1) {
          const me = this;
          this.batchCallback = callback;
          this.batchTimeoutID = setTimeout(function() {
            me.batchTimeoutID = -1;
            me._doBatchRequest(me.batchCallback, auth, path2);
          }, this.batchInterval);
        }
        if (this.batchOptions.length === this.batchCount) {
          this._doBatchRequest(this.batchCallback, auth, path2);
        }
      }
      _doBatchRequest(callback, auth, path2) {
        if (this.batchTimeoutID > 0) {
          clearTimeout(this.batchTimeoutID);
          this.batchTimeoutID = -1;
        }
        const batchOptionsCopy = this.batchOptions.slice();
        this.batchOptions = [];
        this._doRequest(batchOptionsCopy, callback, auth, path2);
      }
      _doRequest(options, callback, auth, path2) {
        const headers = Object.assign({}, this.headers);
        if (auth && auth.bearer) {
          headers.Authorization = `Bearer ${auth.bearer}`;
        }
        const req = (this.ssl ? https : http).request({
          ...this.options,
          method: "POST",
          host: this.host,
          port: this.port,
          path: `/${path2.replace(/^\//, "")}`,
          headers,
          auth: auth && auth.username && auth.password ? `${auth.username}:${auth.password}` : "",
          agent: this.agent
        });
        req.on("error", callback);
        req.on("response", (res) => res.on("end", () => callback(null, res)).resume());
        req.end(Buffer.from(jsonStringify(options, this.options.replacer), "utf8"));
      }
    };
  }
});

// ../../node_modules/.store/is-stream-npm-2.0.0-1401f82ad7/node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "../../node_modules/.store/is-stream-npm-2.0.0-1401f82ad7/node_modules/is-stream/index.js"(exports2, module2) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function" && typeof stream._transformState === "object";
    module2.exports = isStream;
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/stream.js
var require_stream3 = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/stream.js"(exports2, module2) {
    "use strict";
    var isStream = require_is_stream();
    var { MESSAGE } = require_triple_beam();
    var os2 = __require("os");
    var TransportStream = require_winston_transport();
    module2.exports = class Stream extends TransportStream {
      constructor(options = {}) {
        super(options);
        if (!options.stream || !isStream(options.stream)) {
          throw new Error("options.stream is required.");
        }
        this._stream = options.stream;
        this._stream.setMaxListeners(Infinity);
        this.isObjectMode = options.stream._writableState.objectMode;
        this.eol = typeof options.eol === "string" ? options.eol : os2.EOL;
      }
      log(info, callback) {
        setImmediate(() => this.emit("logged", info));
        if (this.isObjectMode) {
          this._stream.write(info);
          if (callback) {
            callback();
          }
          return;
        }
        this._stream.write(`${info[MESSAGE]}${this.eol}`);
        if (callback) {
          callback();
        }
        return;
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/index.js
var require_transports = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/transports/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "Console", {
      configurable: true,
      enumerable: true,
      get() {
        return require_console();
      }
    });
    Object.defineProperty(exports2, "File", {
      configurable: true,
      enumerable: true,
      get() {
        return require_file2();
      }
    });
    Object.defineProperty(exports2, "Http", {
      configurable: true,
      enumerable: true,
      get() {
        return require_http();
      }
    });
    Object.defineProperty(exports2, "Stream", {
      configurable: true,
      enumerable: true,
      get() {
        return require_stream3();
      }
    });
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/config/index.js
var require_config2 = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/config/index.js"(exports2) {
    "use strict";
    var logform = require_logform();
    var { configs } = require_triple_beam();
    exports2.cli = logform.levels(configs.cli);
    exports2.npm = logform.levels(configs.npm);
    exports2.syslog = logform.levels(configs.syslog);
    exports2.addColors = logform.levels;
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/eachOf.js
var require_eachOf = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/eachOf.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback);
      var index = 0, completed = 0, { length } = coll, canceled = false;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err2, value) {
        if (err2 === false) {
          canceled = true;
        }
        if (canceled === true)
          return;
        if (err2) {
          callback(err2);
        } else if (++completed === length || value === _breakLoop2.default) {
          callback(null);
        }
      }
      for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
    }
    function eachOfGeneric(coll, iteratee, callback) {
      return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);
    }
    function eachOf(coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    exports2.default = (0, _awaitify2.default)(eachOf, 3);
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/withoutIndex.js
var require_withoutIndex = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/internal/withoutIndex.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = _withoutIndex;
    function _withoutIndex(iteratee) {
      return (value, index, callback) => iteratee(value, callback);
    }
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/forEach.js
var require_forEach = __commonJS({
  "../../node_modules/.store/async-npm-3.2.3-e9d6b79c88/node_modules/async/forEach.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _withoutIndex = require_withoutIndex();
    var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachLimit(coll, iteratee, callback) {
      return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
    }
    exports2.default = (0, _awaitify2.default)(eachLimit, 3);
    module2.exports = exports2["default"];
  }
});

// ../../node_modules/.store/fn.name-npm-1.1.0-b472333184/node_modules/fn.name/index.js
var require_fn = __commonJS({
  "../../node_modules/.store/fn.name-npm-1.1.0-b472333184/node_modules/fn.name/index.js"(exports2, module2) {
    "use strict";
    var toString = Object.prototype.toString;
    module2.exports = function name(fn) {
      if ("string" === typeof fn.displayName && fn.constructor.name) {
        return fn.displayName;
      } else if ("string" === typeof fn.name && fn.name) {
        return fn.name;
      }
      if ("object" === typeof fn && fn.constructor && "string" === typeof fn.constructor.name)
        return fn.constructor.name;
      var named = fn.toString(), type2 = toString.call(fn).slice(8, -1);
      if ("Function" === type2) {
        named = named.substring(named.indexOf("(") + 1, named.indexOf(")"));
      } else {
        named = type2;
      }
      return named || "anonymous";
    };
  }
});

// ../../node_modules/.store/one-time-npm-1.0.0-aeaad5e524/node_modules/one-time/index.js
var require_one_time = __commonJS({
  "../../node_modules/.store/one-time-npm-1.0.0-aeaad5e524/node_modules/one-time/index.js"(exports2, module2) {
    "use strict";
    var name = require_fn();
    module2.exports = function one(fn) {
      var called = 0, value;
      function onetime2() {
        if (called)
          return value;
        called = 1;
        value = fn.apply(this, arguments);
        fn = null;
        return value;
      }
      onetime2.displayName = name(fn);
      return onetime2;
    };
  }
});

// ../../node_modules/.store/stack-trace-npm-0.0.10-9460b173e1/node_modules/stack-trace/lib/stack-trace.js
var require_stack_trace = __commonJS({
  "../../node_modules/.store/stack-trace-npm-0.0.10-9460b173e1/node_modules/stack-trace/lib/stack-trace.js"(exports2) {
    exports2.get = function(belowFn) {
      var oldLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = Infinity;
      var dummyObject = {};
      var v8Handler = Error.prepareStackTrace;
      Error.prepareStackTrace = function(dummyObject2, v8StackTrace2) {
        return v8StackTrace2;
      };
      Error.captureStackTrace(dummyObject, belowFn || exports2.get);
      var v8StackTrace = dummyObject.stack;
      Error.prepareStackTrace = v8Handler;
      Error.stackTraceLimit = oldLimit;
      return v8StackTrace;
    };
    exports2.parse = function(err2) {
      if (!err2.stack) {
        return [];
      }
      var self2 = this;
      var lines = err2.stack.split("\n").slice(1);
      return lines.map(function(line) {
        if (line.match(/^\s*[-]{4,}$/)) {
          return self2._createParsedCallSite({
            fileName: line,
            lineNumber: null,
            functionName: null,
            typeName: null,
            methodName: null,
            columnNumber: null,
            "native": null
          });
        }
        var lineMatch = line.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
        if (!lineMatch) {
          return;
        }
        var object = null;
        var method = null;
        var functionName = null;
        var typeName = null;
        var methodName = null;
        var isNative = lineMatch[5] === "native";
        if (lineMatch[1]) {
          functionName = lineMatch[1];
          var methodStart = functionName.lastIndexOf(".");
          if (functionName[methodStart - 1] == ".")
            methodStart--;
          if (methodStart > 0) {
            object = functionName.substr(0, methodStart);
            method = functionName.substr(methodStart + 1);
            var objectEnd = object.indexOf(".Module");
            if (objectEnd > 0) {
              functionName = functionName.substr(objectEnd + 1);
              object = object.substr(0, objectEnd);
            }
          }
          typeName = null;
        }
        if (method) {
          typeName = object;
          methodName = method;
        }
        if (method === "<anonymous>") {
          methodName = null;
          functionName = null;
        }
        var properties = {
          fileName: lineMatch[2] || null,
          lineNumber: parseInt(lineMatch[3], 10) || null,
          functionName,
          typeName,
          methodName,
          columnNumber: parseInt(lineMatch[4], 10) || null,
          "native": isNative
        };
        return self2._createParsedCallSite(properties);
      }).filter(function(callSite) {
        return !!callSite;
      });
    };
    function CallSite(properties) {
      for (var property in properties) {
        this[property] = properties[property];
      }
    }
    var strProperties = [
      "this",
      "typeName",
      "functionName",
      "methodName",
      "fileName",
      "lineNumber",
      "columnNumber",
      "function",
      "evalOrigin"
    ];
    var boolProperties = [
      "topLevel",
      "eval",
      "native",
      "constructor"
    ];
    strProperties.forEach(function(property) {
      CallSite.prototype[property] = null;
      CallSite.prototype["get" + property[0].toUpperCase() + property.substr(1)] = function() {
        return this[property];
      };
    });
    boolProperties.forEach(function(property) {
      CallSite.prototype[property] = false;
      CallSite.prototype["is" + property[0].toUpperCase() + property.substr(1)] = function() {
        return this[property];
      };
    });
    exports2._createParsedCallSite = function(properties) {
      return new CallSite(properties);
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/exception-stream.js
var require_exception_stream = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/exception-stream.js"(exports2, module2) {
    "use strict";
    var { Writable: Writable2 } = require_readable();
    module2.exports = class ExceptionStream extends Writable2 {
      constructor(transport) {
        super({ objectMode: true });
        if (!transport) {
          throw new Error("ExceptionStream requires a TransportStream instance.");
        }
        this.handleExceptions = true;
        this.transport = transport;
      }
      _write(info, enc, callback) {
        if (info.exception) {
          return this.transport.log(info, callback);
        }
        callback();
        return true;
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/exception-handler.js
var require_exception_handler = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/exception-handler.js"(exports2, module2) {
    "use strict";
    var os2 = __require("os");
    var asyncForEach = require_forEach();
    var debug = require_node2()("winston:exception");
    var once = require_one_time();
    var stackTrace2 = require_stack_trace();
    var ExceptionStream = require_exception_stream();
    module2.exports = class ExceptionHandler {
      constructor(logger) {
        if (!logger) {
          throw new Error("Logger is required to handle exceptions");
        }
        this.logger = logger;
        this.handlers = /* @__PURE__ */ new Map();
      }
      handle(...args) {
        args.forEach((arg2) => {
          if (Array.isArray(arg2)) {
            return arg2.forEach((handler) => this._addHandler(handler));
          }
          this._addHandler(arg2);
        });
        if (!this.catcher) {
          this.catcher = this._uncaughtException.bind(this);
          process.on("uncaughtException", this.catcher);
        }
      }
      unhandle() {
        if (this.catcher) {
          process.removeListener("uncaughtException", this.catcher);
          this.catcher = false;
          Array.from(this.handlers.values()).forEach((wrapper) => this.logger.unpipe(wrapper));
        }
      }
      getAllInfo(err2) {
        let { message } = err2;
        if (!message && typeof err2 === "string") {
          message = err2;
        }
        return {
          error: err2,
          level: "error",
          message: [
            `uncaughtException: ${message || "(no error message)"}`,
            err2.stack || "  No stack trace"
          ].join("\n"),
          stack: err2.stack,
          exception: true,
          date: new Date().toString(),
          process: this.getProcessInfo(),
          os: this.getOsInfo(),
          trace: this.getTrace(err2)
        };
      }
      getProcessInfo() {
        return {
          pid: process.pid,
          uid: process.getuid ? process.getuid() : null,
          gid: process.getgid ? process.getgid() : null,
          cwd: process.cwd(),
          execPath: process.execPath,
          version: process.version,
          argv: process.argv,
          memoryUsage: process.memoryUsage()
        };
      }
      getOsInfo() {
        return {
          loadavg: os2.loadavg(),
          uptime: os2.uptime()
        };
      }
      getTrace(err2) {
        const trace = err2 ? stackTrace2.parse(err2) : stackTrace2.get();
        return trace.map((site) => {
          return {
            column: site.getColumnNumber(),
            file: site.getFileName(),
            function: site.getFunctionName(),
            line: site.getLineNumber(),
            method: site.getMethodName(),
            native: site.isNative()
          };
        });
      }
      _addHandler(handler) {
        if (!this.handlers.has(handler)) {
          handler.handleExceptions = true;
          const wrapper = new ExceptionStream(handler);
          this.handlers.set(handler, wrapper);
          this.logger.pipe(wrapper);
        }
      }
      _uncaughtException(err2) {
        const info = this.getAllInfo(err2);
        const handlers = this._getExceptionHandlers();
        let doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err2) : this.logger.exitOnError;
        let timeout;
        if (!handlers.length && doExit) {
          console.warn("winston: exitOnError cannot be true with no exception handlers.");
          console.warn("winston: not exiting process.");
          doExit = false;
        }
        function gracefulExit() {
          debug("doExit", doExit);
          debug("process._exiting", process._exiting);
          if (doExit && !process._exiting) {
            if (timeout) {
              clearTimeout(timeout);
            }
            process.exit(1);
          }
        }
        if (!handlers || handlers.length === 0) {
          return process.nextTick(gracefulExit);
        }
        asyncForEach(handlers, (handler, next) => {
          const done = once(next);
          const transport = handler.transport || handler;
          function onDone(event) {
            return () => {
              debug(event);
              done();
            };
          }
          transport._ending = true;
          transport.once("finish", onDone("finished"));
          transport.once("error", onDone("error"));
        }, () => doExit && gracefulExit());
        this.logger.log(info);
        if (doExit) {
          timeout = setTimeout(gracefulExit, 3e3);
        }
      }
      _getExceptionHandlers() {
        return this.logger.transports.filter((wrap) => {
          const transport = wrap.transport || wrap;
          return transport.handleExceptions;
        });
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/rejection-handler.js
var require_rejection_handler = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/rejection-handler.js"(exports2, module2) {
    "use strict";
    var os2 = __require("os");
    var asyncForEach = require_forEach();
    var debug = require_node2()("winston:rejection");
    var once = require_one_time();
    var stackTrace2 = require_stack_trace();
    var ExceptionStream = require_exception_stream();
    module2.exports = class RejectionHandler {
      constructor(logger) {
        if (!logger) {
          throw new Error("Logger is required to handle rejections");
        }
        this.logger = logger;
        this.handlers = /* @__PURE__ */ new Map();
      }
      handle(...args) {
        args.forEach((arg2) => {
          if (Array.isArray(arg2)) {
            return arg2.forEach((handler) => this._addHandler(handler));
          }
          this._addHandler(arg2);
        });
        if (!this.catcher) {
          this.catcher = this._unhandledRejection.bind(this);
          process.on("unhandledRejection", this.catcher);
        }
      }
      unhandle() {
        if (this.catcher) {
          process.removeListener("unhandledRejection", this.catcher);
          this.catcher = false;
          Array.from(this.handlers.values()).forEach(
            (wrapper) => this.logger.unpipe(wrapper)
          );
        }
      }
      getAllInfo(err2) {
        let message = null;
        if (err2) {
          message = typeof err2 === "string" ? err2 : err2.message;
        }
        return {
          error: err2,
          level: "error",
          message: [
            `unhandledRejection: ${message || "(no error message)"}`,
            err2 && err2.stack || "  No stack trace"
          ].join("\n"),
          stack: err2 && err2.stack,
          exception: true,
          date: new Date().toString(),
          process: this.getProcessInfo(),
          os: this.getOsInfo(),
          trace: this.getTrace(err2)
        };
      }
      getProcessInfo() {
        return {
          pid: process.pid,
          uid: process.getuid ? process.getuid() : null,
          gid: process.getgid ? process.getgid() : null,
          cwd: process.cwd(),
          execPath: process.execPath,
          version: process.version,
          argv: process.argv,
          memoryUsage: process.memoryUsage()
        };
      }
      getOsInfo() {
        return {
          loadavg: os2.loadavg(),
          uptime: os2.uptime()
        };
      }
      getTrace(err2) {
        const trace = err2 ? stackTrace2.parse(err2) : stackTrace2.get();
        return trace.map((site) => {
          return {
            column: site.getColumnNumber(),
            file: site.getFileName(),
            function: site.getFunctionName(),
            line: site.getLineNumber(),
            method: site.getMethodName(),
            native: site.isNative()
          };
        });
      }
      _addHandler(handler) {
        if (!this.handlers.has(handler)) {
          handler.handleRejections = true;
          const wrapper = new ExceptionStream(handler);
          this.handlers.set(handler, wrapper);
          this.logger.pipe(wrapper);
        }
      }
      _unhandledRejection(err2) {
        const info = this.getAllInfo(err2);
        const handlers = this._getRejectionHandlers();
        let doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err2) : this.logger.exitOnError;
        let timeout;
        if (!handlers.length && doExit) {
          console.warn("winston: exitOnError cannot be true with no rejection handlers.");
          console.warn("winston: not exiting process.");
          doExit = false;
        }
        function gracefulExit() {
          debug("doExit", doExit);
          debug("process._exiting", process._exiting);
          if (doExit && !process._exiting) {
            if (timeout) {
              clearTimeout(timeout);
            }
            process.exit(1);
          }
        }
        if (!handlers || handlers.length === 0) {
          return process.nextTick(gracefulExit);
        }
        asyncForEach(
          handlers,
          (handler, next) => {
            const done = once(next);
            const transport = handler.transport || handler;
            function onDone(event) {
              return () => {
                debug(event);
                done();
              };
            }
            transport._ending = true;
            transport.once("finish", onDone("finished"));
            transport.once("error", onDone("error"));
          },
          () => doExit && gracefulExit()
        );
        this.logger.log(info);
        if (doExit) {
          timeout = setTimeout(gracefulExit, 3e3);
        }
      }
      _getRejectionHandlers() {
        return this.logger.transports.filter((wrap) => {
          const transport = wrap.transport || wrap;
          return transport.handleRejections;
        });
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/profiler.js
var require_profiler = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/profiler.js"(exports2, module2) {
    "use strict";
    module2.exports = class Profiler {
      constructor(logger) {
        if (!logger) {
          throw new Error("Logger is required for profiling.");
        }
        this.logger = logger;
        this.start = Date.now();
      }
      done(...args) {
        if (typeof args[args.length - 1] === "function") {
          console.warn("Callback function no longer supported as of winston@3.0.0");
          args.pop();
        }
        const info = typeof args[args.length - 1] === "object" ? args.pop() : {};
        info.level = info.level || "info";
        info.durationMs = Date.now() - this.start;
        return this.logger.write(info);
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/logger.js
var require_logger = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/logger.js"(exports2, module2) {
    "use strict";
    var { Stream: Stream2, Transform: Transform2 } = require_readable();
    var asyncForEach = require_forEach();
    var { LEVEL, SPLAT } = require_triple_beam();
    var isStream = require_is_stream();
    var ExceptionHandler = require_exception_handler();
    var RejectionHandler = require_rejection_handler();
    var LegacyTransportStream = require_legacy();
    var Profiler = require_profiler();
    var { warn } = require_common();
    var config = require_config2();
    var formatRegExp = /%[scdjifoO%]/g;
    var Logger = class extends Transform2 {
      constructor(options) {
        super({ objectMode: true });
        this.configure(options);
      }
      child(defaultRequestMetadata) {
        const logger = this;
        return Object.create(logger, {
          write: {
            value: function(info) {
              const infoClone = Object.assign(
                {},
                defaultRequestMetadata,
                info
              );
              if (info instanceof Error) {
                infoClone.stack = info.stack;
                infoClone.message = info.message;
              }
              logger.write(infoClone);
            }
          }
        });
      }
      configure({
        silent,
        format,
        defaultMeta,
        levels,
        level = "info",
        exitOnError = true,
        transports,
        colors,
        emitErrs,
        formatters,
        padLevels,
        rewriters,
        stripColors,
        exceptionHandlers,
        rejectionHandlers
      } = {}) {
        if (this.transports.length) {
          this.clear();
        }
        this.silent = silent;
        this.format = format || this.format || require_json2()();
        this.defaultMeta = defaultMeta || null;
        this.levels = levels || this.levels || config.npm.levels;
        this.level = level;
        if (this.exceptions) {
          this.exceptions.unhandle();
        }
        if (this.rejections) {
          this.rejections.unhandle();
        }
        this.exceptions = new ExceptionHandler(this);
        this.rejections = new RejectionHandler(this);
        this.profilers = {};
        this.exitOnError = exitOnError;
        if (transports) {
          transports = Array.isArray(transports) ? transports : [transports];
          transports.forEach((transport) => this.add(transport));
        }
        if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {
          throw new Error(
            [
              "{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.",
              "Use a custom winston.format(function) instead.",
              "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"
            ].join("\n")
          );
        }
        if (exceptionHandlers) {
          this.exceptions.handle(exceptionHandlers);
        }
        if (rejectionHandlers) {
          this.rejections.handle(rejectionHandlers);
        }
      }
      isLevelEnabled(level) {
        const givenLevelValue = getLevelValue(this.levels, level);
        if (givenLevelValue === null) {
          return false;
        }
        const configuredLevelValue = getLevelValue(this.levels, this.level);
        if (configuredLevelValue === null) {
          return false;
        }
        if (!this.transports || this.transports.length === 0) {
          return configuredLevelValue >= givenLevelValue;
        }
        const index = this.transports.findIndex((transport) => {
          let transportLevelValue = getLevelValue(this.levels, transport.level);
          if (transportLevelValue === null) {
            transportLevelValue = configuredLevelValue;
          }
          return transportLevelValue >= givenLevelValue;
        });
        return index !== -1;
      }
      log(level, msg, ...splat) {
        if (arguments.length === 1) {
          level[LEVEL] = level.level;
          this._addDefaultMeta(level);
          this.write(level);
          return this;
        }
        if (arguments.length === 2) {
          if (msg && typeof msg === "object") {
            msg[LEVEL] = msg.level = level;
            this._addDefaultMeta(msg);
            this.write(msg);
            return this;
          }
          msg = { [LEVEL]: level, level, message: msg };
          this._addDefaultMeta(msg);
          this.write(msg);
          return this;
        }
        const [meta] = splat;
        if (typeof meta === "object" && meta !== null) {
          const tokens = msg && msg.match && msg.match(formatRegExp);
          if (!tokens) {
            const info = Object.assign({}, this.defaultMeta, meta, {
              [LEVEL]: level,
              [SPLAT]: splat,
              level,
              message: msg
            });
            if (meta.message)
              info.message = `${info.message} ${meta.message}`;
            if (meta.stack)
              info.stack = meta.stack;
            this.write(info);
            return this;
          }
        }
        this.write(Object.assign({}, this.defaultMeta, {
          [LEVEL]: level,
          [SPLAT]: splat,
          level,
          message: msg
        }));
        return this;
      }
      _transform(info, enc, callback) {
        if (this.silent) {
          return callback();
        }
        if (!info[LEVEL]) {
          info[LEVEL] = info.level;
        }
        if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {
          console.error("[winston] Unknown logger level: %s", info[LEVEL]);
        }
        if (!this._readableState.pipes) {
          console.error(
            "[winston] Attempt to write logs with no transports, which can increase memory usage: %j",
            info
          );
        }
        try {
          this.push(this.format.transform(info, this.format.options));
        } finally {
          this._writableState.sync = false;
          callback();
        }
      }
      _final(callback) {
        const transports = this.transports.slice();
        asyncForEach(
          transports,
          (transport, next) => {
            if (!transport || transport.finished)
              return setImmediate(next);
            transport.once("finish", next);
            transport.end();
          },
          callback
        );
      }
      add(transport) {
        const target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({ transport }) : transport;
        if (!target._writableState || !target._writableState.objectMode) {
          throw new Error(
            "Transports must WritableStreams in objectMode. Set { objectMode: true }."
          );
        }
        this._onEvent("error", target);
        this._onEvent("warn", target);
        this.pipe(target);
        if (transport.handleExceptions) {
          this.exceptions.handle();
        }
        if (transport.handleRejections) {
          this.rejections.handle();
        }
        return this;
      }
      remove(transport) {
        if (!transport)
          return this;
        let target = transport;
        if (!isStream(transport) || transport.log.length > 2) {
          target = this.transports.filter(
            (match) => match.transport === transport
          )[0];
        }
        if (target) {
          this.unpipe(target);
        }
        return this;
      }
      clear() {
        this.unpipe();
        return this;
      }
      close() {
        this.exceptions.unhandle();
        this.rejections.unhandle();
        this.clear();
        this.emit("close");
        return this;
      }
      setLevels() {
        warn.deprecated("setLevels");
      }
      query(options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        options = options || {};
        const results = {};
        const queryObject = Object.assign({}, options.query || {});
        function queryTransport(transport, next) {
          if (options.query && typeof transport.formatQuery === "function") {
            options.query = transport.formatQuery(queryObject);
          }
          transport.query(options, (err2, res) => {
            if (err2) {
              return next(err2);
            }
            if (typeof transport.formatResults === "function") {
              res = transport.formatResults(res, options.format);
            }
            next(null, res);
          });
        }
        function addResults(transport, next) {
          queryTransport(transport, (err2, result) => {
            if (next) {
              result = err2 || result;
              if (result) {
                results[transport.name] = result;
              }
              next();
            }
            next = null;
          });
        }
        asyncForEach(
          this.transports.filter((transport) => !!transport.query),
          addResults,
          () => callback(null, results)
        );
      }
      stream(options = {}) {
        const out = new Stream2();
        const streams = [];
        out._streams = streams;
        out.destroy = () => {
          let i2 = streams.length;
          while (i2--) {
            streams[i2].destroy();
          }
        };
        this.transports.filter((transport) => !!transport.stream).forEach((transport) => {
          const str = transport.stream(options);
          if (!str) {
            return;
          }
          streams.push(str);
          str.on("log", (log) => {
            log.transport = log.transport || [];
            log.transport.push(transport.name);
            out.emit("log", log);
          });
          str.on("error", (err2) => {
            err2.transport = err2.transport || [];
            err2.transport.push(transport.name);
            out.emit("error", err2);
          });
        });
        return out;
      }
      startTimer() {
        return new Profiler(this);
      }
      profile(id, ...args) {
        const time = Date.now();
        if (this.profilers[id]) {
          const timeEnd = this.profilers[id];
          delete this.profilers[id];
          if (typeof args[args.length - 2] === "function") {
            console.warn(
              "Callback function no longer supported as of winston@3.0.0"
            );
            args.pop();
          }
          const info = typeof args[args.length - 1] === "object" ? args.pop() : {};
          info.level = info.level || "info";
          info.durationMs = time - timeEnd;
          info.message = info.message || id;
          return this.write(info);
        }
        this.profilers[id] = time;
        return this;
      }
      handleExceptions(...args) {
        console.warn(
          "Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()"
        );
        this.exceptions.handle(...args);
      }
      unhandleExceptions(...args) {
        console.warn(
          "Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()"
        );
        this.exceptions.unhandle(...args);
      }
      cli() {
        throw new Error(
          [
            "Logger.cli() was removed in winston@3.0.0",
            "Use a custom winston.formats.cli() instead.",
            "See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"
          ].join("\n")
        );
      }
      _onEvent(event, transport) {
        function transportEvent(err2) {
          if (event === "error" && !this.transports.includes(transport)) {
            this.add(transport);
          }
          this.emit(event, err2, transport);
        }
        if (!transport["__winston" + event]) {
          transport["__winston" + event] = transportEvent.bind(this);
          transport.on(event, transport["__winston" + event]);
        }
      }
      _addDefaultMeta(msg) {
        if (this.defaultMeta) {
          Object.assign(msg, this.defaultMeta);
        }
      }
    };
    function getLevelValue(levels, level) {
      const value = levels[level];
      if (!value && value !== 0) {
        return null;
      }
      return value;
    }
    Object.defineProperty(Logger.prototype, "transports", {
      configurable: false,
      enumerable: true,
      get() {
        const { pipes } = this._readableState;
        return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;
      }
    });
    module2.exports = Logger;
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/create-logger.js
var require_create_logger = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/create-logger.js"(exports2, module2) {
    "use strict";
    var { LEVEL } = require_triple_beam();
    var config = require_config2();
    var Logger = require_logger();
    var debug = require_node2()("winston:create-logger");
    function isLevelEnabledFunctionName(level) {
      return "is" + level.charAt(0).toUpperCase() + level.slice(1) + "Enabled";
    }
    module2.exports = function(opts = {}) {
      opts.levels = opts.levels || config.npm.levels;
      class DerivedLogger extends Logger {
        constructor(options) {
          super(options);
        }
      }
      const logger = new DerivedLogger(opts);
      Object.keys(opts.levels).forEach(function(level) {
        debug('Define prototype method for "%s"', level);
        if (level === "log") {
          console.warn('Level "log" not defined: conflicts with the method "log". Use a different level name.');
          return;
        }
        DerivedLogger.prototype[level] = function(...args) {
          const self2 = this || logger;
          if (args.length === 1) {
            const [msg] = args;
            const info = msg && msg.message && msg || { message: msg };
            info.level = info[LEVEL] = level;
            self2._addDefaultMeta(info);
            self2.write(info);
            return this || logger;
          }
          if (args.length === 0) {
            self2.log(level, "");
            return self2;
          }
          return self2.log(level, ...args);
        };
        DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {
          return (this || logger).isLevelEnabled(level);
        };
      });
      return logger;
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/container.js
var require_container = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston/container.js"(exports2, module2) {
    "use strict";
    var createLogger = require_create_logger();
    module2.exports = class Container {
      constructor(options = {}) {
        this.loggers = /* @__PURE__ */ new Map();
        this.options = options;
      }
      add(id, options) {
        if (!this.loggers.has(id)) {
          options = Object.assign({}, options || this.options);
          const existing = options.transports || this.options.transports;
          options.transports = existing ? existing.slice() : [];
          const logger = createLogger(options);
          logger.on("close", () => this._delete(id));
          this.loggers.set(id, logger);
        }
        return this.loggers.get(id);
      }
      get(id, options) {
        return this.add(id, options);
      }
      has(id) {
        return !!this.loggers.has(id);
      }
      close(id) {
        if (id) {
          return this._removeLogger(id);
        }
        this.loggers.forEach((val, key2) => this._removeLogger(key2));
      }
      _removeLogger(id) {
        if (!this.loggers.has(id)) {
          return;
        }
        const logger = this.loggers.get(id);
        logger.close();
        this._delete(id);
      }
      _delete(id) {
        this.loggers.delete(id);
      }
    };
  }
});

// ../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston.js
var require_winston = __commonJS({
  "../../node_modules/.store/winston-npm-3.8.2-2035e9cac4/node_modules/winston/lib/winston.js"(exports2) {
    "use strict";
    var logform = require_logform();
    var { warn } = require_common();
    exports2.version = require_package().version;
    exports2.transports = require_transports();
    exports2.config = require_config2();
    exports2.addColors = logform.levels;
    exports2.format = logform.format;
    exports2.createLogger = require_create_logger();
    exports2.ExceptionHandler = require_exception_handler();
    exports2.RejectionHandler = require_rejection_handler();
    exports2.Container = require_container();
    exports2.Transport = require_winston_transport();
    exports2.loggers = new exports2.Container();
    var defaultLogger = exports2.createLogger();
    Object.keys(exports2.config.npm.levels).concat([
      "log",
      "query",
      "stream",
      "add",
      "remove",
      "clear",
      "profile",
      "startTimer",
      "handleExceptions",
      "unhandleExceptions",
      "handleRejections",
      "unhandleRejections",
      "configure",
      "child"
    ]).forEach(
      (method) => exports2[method] = (...args) => defaultLogger[method](...args)
    );
    Object.defineProperty(exports2, "level", {
      get() {
        return defaultLogger.level;
      },
      set(val) {
        defaultLogger.level = val;
      }
    });
    Object.defineProperty(exports2, "exceptions", {
      get() {
        return defaultLogger.exceptions;
      }
    });
    ["exitOnError"].forEach((prop) => {
      Object.defineProperty(exports2, prop, {
        get() {
          return defaultLogger[prop];
        },
        set(val) {
          defaultLogger[prop] = val;
        }
      });
    });
    Object.defineProperty(exports2, "default", {
      get() {
        return {
          exceptionHandlers: defaultLogger.exceptionHandlers,
          rejectionHandlers: defaultLogger.rejectionHandlers,
          transports: defaultLogger.transports
        };
      }
    });
    warn.deprecated(exports2, "setLevels");
    warn.forFunctions(exports2, "useFormat", ["cli"]);
    warn.forProperties(exports2, "useFormat", ["padLevels", "stripColors"]);
    warn.forFunctions(exports2, "deprecated", [
      "addRewriter",
      "addFilter",
      "clone",
      "extend"
    ]);
    warn.forProperties(exports2, "deprecated", ["emitErrs", "levelLength"]);
    warn.moved(exports2, "createLogger", "Logger");
  }
});

// ../../node_modules/.store/object-hash-npm-2.2.0-d97a921cc1/node_modules/object-hash/index.js
var require_object_hash = __commonJS({
  "../../node_modules/.store/object-hash-npm-2.2.0-d97a921cc1/node_modules/object-hash/index.js"(exports2, module2) {
    "use strict";
    var crypto2 = __require("crypto");
    exports2 = module2.exports = objectHash;
    function objectHash(object, options) {
      options = applyDefaults(object, options);
      return hash(object, options);
    }
    exports2.sha1 = function(object) {
      return objectHash(object);
    };
    exports2.keys = function(object) {
      return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
    };
    exports2.MD5 = function(object) {
      return objectHash(object, { algorithm: "md5", encoding: "hex" });
    };
    exports2.keysMD5 = function(object) {
      return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
    };
    var hashes = crypto2.getHashes ? crypto2.getHashes().slice() : ["sha1", "md5"];
    hashes.push("passthrough");
    var encodings = ["buffer", "hex", "binary", "base64"];
    function applyDefaults(object, sourceOptions) {
      sourceOptions = sourceOptions || {};
      var options = {};
      options.algorithm = sourceOptions.algorithm || "sha1";
      options.encoding = sourceOptions.encoding || "hex";
      options.excludeValues = sourceOptions.excludeValues ? true : false;
      options.algorithm = options.algorithm.toLowerCase();
      options.encoding = options.encoding.toLowerCase();
      options.ignoreUnknown = sourceOptions.ignoreUnknown !== true ? false : true;
      options.respectType = sourceOptions.respectType === false ? false : true;
      options.respectFunctionNames = sourceOptions.respectFunctionNames === false ? false : true;
      options.respectFunctionProperties = sourceOptions.respectFunctionProperties === false ? false : true;
      options.unorderedArrays = sourceOptions.unorderedArrays !== true ? false : true;
      options.unorderedSets = sourceOptions.unorderedSets === false ? false : true;
      options.unorderedObjects = sourceOptions.unorderedObjects === false ? false : true;
      options.replacer = sourceOptions.replacer || void 0;
      options.excludeKeys = sourceOptions.excludeKeys || void 0;
      if (typeof object === "undefined") {
        throw new Error("Object argument required.");
      }
      for (var i2 = 0; i2 < hashes.length; ++i2) {
        if (hashes[i2].toLowerCase() === options.algorithm.toLowerCase()) {
          options.algorithm = hashes[i2];
        }
      }
      if (hashes.indexOf(options.algorithm) === -1) {
        throw new Error('Algorithm "' + options.algorithm + '"  not supported. supported values: ' + hashes.join(", "));
      }
      if (encodings.indexOf(options.encoding) === -1 && options.algorithm !== "passthrough") {
        throw new Error('Encoding "' + options.encoding + '"  not supported. supported values: ' + encodings.join(", "));
      }
      return options;
    }
    function isNativeFunction(f) {
      if (typeof f !== "function") {
        return false;
      }
      var exp = /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i;
      return exp.exec(Function.prototype.toString.call(f)) != null;
    }
    function hash(object, options) {
      var hashingStream;
      if (options.algorithm !== "passthrough") {
        hashingStream = crypto2.createHash(options.algorithm);
      } else {
        hashingStream = new PassThrough2();
      }
      if (typeof hashingStream.write === "undefined") {
        hashingStream.write = hashingStream.update;
        hashingStream.end = hashingStream.update;
      }
      var hasher = typeHasher(options, hashingStream);
      hasher.dispatch(object);
      if (!hashingStream.update) {
        hashingStream.end("");
      }
      if (hashingStream.digest) {
        return hashingStream.digest(options.encoding === "buffer" ? void 0 : options.encoding);
      }
      var buf = hashingStream.read();
      if (options.encoding === "buffer") {
        return buf;
      }
      return buf.toString(options.encoding);
    }
    exports2.writeToStream = function(object, options, stream) {
      if (typeof stream === "undefined") {
        stream = options;
        options = {};
      }
      options = applyDefaults(object, options);
      return typeHasher(options, stream).dispatch(object);
    };
    function typeHasher(options, writeTo, context) {
      context = context || [];
      var write = function(str) {
        if (writeTo.update) {
          return writeTo.update(str, "utf8");
        } else {
          return writeTo.write(str, "utf8");
        }
      };
      return {
        dispatch: function(value) {
          if (options.replacer) {
            value = options.replacer(value);
          }
          var type2 = typeof value;
          if (value === null) {
            type2 = "null";
          }
          return this["_" + type2](value);
        },
        _object: function(object) {
          var pattern = /\[object (.*)\]/i;
          var objString = Object.prototype.toString.call(object);
          var objType = pattern.exec(objString);
          if (!objType) {
            objType = "unknown:[" + objString + "]";
          } else {
            objType = objType[1];
          }
          objType = objType.toLowerCase();
          var objectNumber = null;
          if ((objectNumber = context.indexOf(object)) >= 0) {
            return this.dispatch("[CIRCULAR:" + objectNumber + "]");
          } else {
            context.push(object);
          }
          if (typeof Buffer !== "undefined" && Buffer.isBuffer && Buffer.isBuffer(object)) {
            write("buffer:");
            return write(object);
          }
          if (objType !== "object" && objType !== "function" && objType !== "asyncfunction") {
            if (this["_" + objType]) {
              this["_" + objType](object);
            } else if (options.ignoreUnknown) {
              return write("[" + objType + "]");
            } else {
              throw new Error('Unknown object type "' + objType + '"');
            }
          } else {
            var keys = Object.keys(object);
            if (options.unorderedObjects) {
              keys = keys.sort();
            }
            if (options.respectType !== false && !isNativeFunction(object)) {
              keys.splice(0, 0, "prototype", "__proto__", "constructor");
            }
            if (options.excludeKeys) {
              keys = keys.filter(function(key2) {
                return !options.excludeKeys(key2);
              });
            }
            write("object:" + keys.length + ":");
            var self2 = this;
            return keys.forEach(function(key2) {
              self2.dispatch(key2);
              write(":");
              if (!options.excludeValues) {
                self2.dispatch(object[key2]);
              }
              write(",");
            });
          }
        },
        _array: function(arr, unordered) {
          unordered = typeof unordered !== "undefined" ? unordered : options.unorderedArrays !== false;
          var self2 = this;
          write("array:" + arr.length + ":");
          if (!unordered || arr.length <= 1) {
            return arr.forEach(function(entry) {
              return self2.dispatch(entry);
            });
          }
          var contextAdditions = [];
          var entries = arr.map(function(entry) {
            var strm = new PassThrough2();
            var localContext = context.slice();
            var hasher = typeHasher(options, strm, localContext);
            hasher.dispatch(entry);
            contextAdditions = contextAdditions.concat(localContext.slice(context.length));
            return strm.read().toString();
          });
          context = context.concat(contextAdditions);
          entries.sort();
          return this._array(entries, false);
        },
        _date: function(date) {
          return write("date:" + date.toJSON());
        },
        _symbol: function(sym) {
          return write("symbol:" + sym.toString());
        },
        _error: function(err2) {
          return write("error:" + err2.toString());
        },
        _boolean: function(bool) {
          return write("bool:" + bool.toString());
        },
        _string: function(string) {
          write("string:" + string.length + ":");
          write(string.toString());
        },
        _function: function(fn) {
          write("fn:");
          if (isNativeFunction(fn)) {
            this.dispatch("[native]");
          } else {
            this.dispatch(fn.toString());
          }
          if (options.respectFunctionNames !== false) {
            this.dispatch("function-name:" + String(fn.name));
          }
          if (options.respectFunctionProperties) {
            this._object(fn);
          }
        },
        _number: function(number) {
          return write("number:" + number.toString());
        },
        _xml: function(xml) {
          return write("xml:" + xml.toString());
        },
        _null: function() {
          return write("Null");
        },
        _undefined: function() {
          return write("Undefined");
        },
        _regexp: function(regex) {
          return write("regex:" + regex.toString());
        },
        _uint8array: function(arr) {
          write("uint8array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _uint8clampedarray: function(arr) {
          write("uint8clampedarray:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _int8array: function(arr) {
          write("uint8array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _uint16array: function(arr) {
          write("uint16array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _int16array: function(arr) {
          write("uint16array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _uint32array: function(arr) {
          write("uint32array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _int32array: function(arr) {
          write("uint32array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _float32array: function(arr) {
          write("float32array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _float64array: function(arr) {
          write("float64array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _arraybuffer: function(arr) {
          write("arraybuffer:");
          return this.dispatch(new Uint8Array(arr));
        },
        _url: function(url) {
          return write("url:" + url.toString(), "utf8");
        },
        _map: function(map) {
          write("map:");
          var arr = Array.from(map);
          return this._array(arr, options.unorderedSets !== false);
        },
        _set: function(set) {
          write("set:");
          var arr = Array.from(set);
          return this._array(arr, options.unorderedSets !== false);
        },
        _file: function(file) {
          write("file:");
          return this.dispatch([file.name, file.size, file.type, file.lastModfied]);
        },
        _blob: function() {
          if (options.ignoreUnknown) {
            return write("[blob]");
          }
          throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
        },
        _domwindow: function() {
          return write("domwindow");
        },
        _bigint: function(number) {
          return write("bigint:" + number.toString());
        },
        _process: function() {
          return write("process");
        },
        _timer: function() {
          return write("timer");
        },
        _pipe: function() {
          return write("pipe");
        },
        _tcp: function() {
          return write("tcp");
        },
        _udp: function() {
          return write("udp");
        },
        _tty: function() {
          return write("tty");
        },
        _statwatcher: function() {
          return write("statwatcher");
        },
        _securecontext: function() {
          return write("securecontext");
        },
        _connection: function() {
          return write("connection");
        },
        _zlib: function() {
          return write("zlib");
        },
        _context: function() {
          return write("context");
        },
        _nodescript: function() {
          return write("nodescript");
        },
        _httpparser: function() {
          return write("httpparser");
        },
        _dataview: function() {
          return write("dataview");
        },
        _signal: function() {
          return write("signal");
        },
        _fsevent: function() {
          return write("fsevent");
        },
        _tlswrap: function() {
          return write("tlswrap");
        }
      };
    }
    function PassThrough2() {
      return {
        buf: "",
        write: function(b) {
          this.buf += b;
        },
        end: function(b) {
          this.buf += b;
        },
        read: function() {
          return this.buf;
        }
      };
    }
  }
});

// ../../node_modules/.store/moment-npm-2.29.4-902943305d/node_modules/moment/moment.js
var require_moment = __commonJS({
  "../../node_modules/.store/moment-npm-2.29.4-902943305d/node_modules/moment/moment.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
    })(exports2, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i2, arrLen = arr.length;
        for (i2 = 0; i2 < arrLen; ++i2) {
          res.push(fn(arr[i2], i2));
        }
        return res;
      }
      function extend(a, b) {
        for (var i2 in b) {
          if (hasOwnProp(b, i2)) {
            a[i2] = b[i2];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i2;
          for (i2 = 0; i2 < len; i2++) {
            if (i2 in t && fun.call(this, t[i2], i2, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i2) {
            return i2 != null;
          }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i2, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i2 = 0; i2 < momentPropertiesLen; i2++) {
            prop = momentProperties[i2];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg2, i2, key2, argLen = arguments.length;
            for (i2 = 0; i2 < argLen; i2++) {
              arg2 = "";
              if (typeof arguments[i2] === "object") {
                arg2 += "\n[" + i2 + "] ";
                for (key2 in arguments[0]) {
                  if (hasOwnProp(arguments[0], key2)) {
                    arg2 += key2 + ": " + arguments[0][key2] + ", ";
                  }
                }
                arg2 = arg2.slice(0, -2);
              } else {
                arg2 = arguments[i2];
              }
              args.push(arg2);
            }
            warn(
              msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i2;
        for (i2 in config) {
          if (hasOwnProp(config, i2)) {
            prop = config[i2];
            if (isFunction(prop)) {
              this[i2] = prop;
            } else {
              this["_" + i2] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
        );
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i2, res = [];
          for (i2 in obj) {
            if (hasOwnProp(obj, i2)) {
              res.push(i2);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key2, mom, now2) {
        var output = this._calendar[key2] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func2 = callback;
        if (typeof callback === "string") {
          func2 = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func2;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func2.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(
              func2.apply(this, arguments),
              token2
            );
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i2, length;
        for (i2 = 0, length = array.length; i2 < length; i2++) {
          if (formatTokenFunctions[array[i2]]) {
            array[i2] = formatTokenFunctions[array[i2]];
          } else {
            array[i2] = removeFormattingTokens(array[i2]);
          }
        }
        return function(mom) {
          var output = "", i3;
          for (i3 = 0; i3 < length; i3++) {
            output += isFunction(array[i3]) ? array[i3].call(mom, format2) : array[i3];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i2 = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i2 >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(
            localFormattingTokens,
            replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i2 -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key2) {
        var format2 = this._longDateFormat[key2], formatUpper = this._longDateFormat[key2.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key2] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key2];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
      }
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
      }
      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](
              value,
              mom.month(),
              daysInMonth(value, mom.month())
            );
          } else {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
          for (i2 = 0; i2 < prioritizedLen; i2++) {
            this[prioritized[i2].unit](units[prioritized[i2].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(
          s.replace("\\", "").replace(
            /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
            function(matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }
          )
        );
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i2, func2 = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func2 = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i2 = 0; i2 < tokenLen; i2++) {
          tokens[token2[i2]] = func2;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i2;
          for (i2 = 0; i2 < this.length; ++i2) {
            if (this[i2] === o) {
              return i2;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addUnitAlias("month", "M");
      addUnitPriority("month", 8);
      addRegexToken("M", match1to2);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
        "_"
      ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i2, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i2 = 0; i2 < 12; ++i2) {
            mom = createUTC([2e3, i2]);
            this._shortMonthsParse[i2] = this.monthsShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i2, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i2 = 0; i2 < 12; i2++) {
          mom = createUTC([2e3, i2]);
          if (strict && !this._longMonthsParse[i2]) {
            this._longMonthsParse[i2] = new RegExp(
              "^" + this.months(mom, "").replace(".", "") + "$",
              "i"
            );
            this._shortMonthsParse[i2] = new RegExp(
              "^" + this.monthsShort(mom, "").replace(".", "") + "$",
              "i"
            );
          }
          if (!strict && !this._monthsParse[i2]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
            return i2;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
            return i2;
          } else if (!strict && this._monthsParse[i2].test(monthName)) {
            return i2;
          }
        }
      }
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
        for (i2 = 0; i2 < 12; i2++) {
          mom = createUTC([2e3, i2]);
          shortPieces.push(this.monthsShort(mom, ""));
          longPieces.push(this.months(mom, ""));
          mixedPieces.push(this.months(mom, ""));
          mixedPieces.push(this.monthsShort(mom, ""));
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i2 = 0; i2 < 12; i2++) {
          shortPieces[i2] = regexEscape(shortPieces[i2]);
          longPieces[i2] = regexEscape(longPieces[i2]);
        }
        for (i2 = 0; i2 < 24; i2++) {
          mixedPieces[i2] = regexEscape(mixedPieces[i2]);
        }
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._monthsShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addUnitAlias("year", "y");
      addUnitPriority("year", 1);
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addUnitAlias("week", "w");
      addUnitAlias("isoWeek", "W");
      addUnitPriority("week", 5);
      addUnitPriority("isoWeek", 5);
      addRegexToken("w", match1to2);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(
        ["w", "ww", "W", "WW"],
        function(input, week, config, token2) {
          week[token2.substr(0, 1)] = toInt(input);
        }
      );
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        doy: 6
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addUnitAlias("day", "d");
      addUnitAlias("weekday", "e");
      addUnitAlias("isoWeekday", "E");
      addUnitPriority("day", 11);
      addUnitPriority("weekday", 11);
      addUnitPriority("isoWeekday", 11);
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i2 = 0; i2 < 7; ++i2) {
            mom = createUTC([2e3, 1]).day(i2);
            this._minWeekdaysParse[i2] = this.weekdaysMin(
              mom,
              ""
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i2] = this.weekdaysShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i2, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i2 = 0; i2 < 7; i2++) {
          mom = createUTC([2e3, 1]).day(i2);
          if (strict && !this._fullWeekdaysParse[i2]) {
            this._fullWeekdaysParse[i2] = new RegExp(
              "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._shortWeekdaysParse[i2] = new RegExp(
              "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._minWeekdaysParse[i2] = new RegExp(
              "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
          }
          if (!this._weekdaysParse[i2]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i2] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
            return i2;
          } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
            return i2;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
        for (i2 = 0; i2 < 7; i2++) {
          mom = createUTC([2e3, 1]).day(i2);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._weekdaysShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
        this._weekdaysMinStrictRegex = new RegExp(
          "^(" + minPieces.join("|") + ")",
          "i"
        );
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      addUnitAlias("hour", "h");
      addUnitPriority("hour", 13);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2);
      addRegexToken("h", match1to2);
      addRegexToken("k", match1to2);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i2, minl = Math.min(arr1.length, arr2.length);
        for (i2 = 0; i2 < minl; i2 += 1) {
          if (arr1[i2] !== arr2[i2]) {
            return i2;
          }
        }
        return minl;
      }
      function normalizeLocale(key2) {
        return key2 ? key2.toLowerCase().replace("_", "-") : key2;
      }
      function chooseLocale(names) {
        var i2 = 0, j, next, locale2, split;
        while (i2 < names.length) {
          split = normalizeLocale(names[i2]).split("-");
          j = split.length;
          next = normalizeLocale(names[i2 + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i2++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return name.match("^[^/\\\\]*$") != null;
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = __require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key2, values) {
        var data;
        if (key2) {
          if (isUndefined(values)) {
            data = getLocale(key2);
          } else {
            data = defineLocale(key2, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn(
                "Locale " + key2 + " not found. Did you forget to load it?"
              );
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key2) {
        var locale2;
        if (key2 && key2._locale && key2._locale._abbr) {
          key2 = key2._locale._abbr;
        }
        if (!key2) {
          return globalLocale;
        }
        if (!isArray(key2)) {
          locale2 = loadLocale(key2);
          if (locale2) {
            return locale2;
          }
          key2 = [key2];
        }
        return chooseLocale(key2);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i2, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i2 = 0, l = isoDatesLen; i2 < l; i2++) {
            if (isoDates[i2][1].exec(match[1])) {
              dateFormat = isoDates[i2][0];
              allowTime = isoDates[i2][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i2 = 0, l = isoTimesLen; i2 < l; i2++) {
              if (isoTimes[i2][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i2][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
            parsedInput[0],
            parsedInput[1],
            parsedInput[2]
          ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate(
        "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
        function(config) {
          config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
        }
      );
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i2 = 0; i2 < 3 && config._a[i2] == null; ++i2) {
          config._a[i2] = input[i2] = currentDate[i2];
        }
        for (; i2 < 7; i2++) {
          config._a[i2] = input[i2] = config._a[i2] == null ? i2 === 2 ? 1 : 0 : config._a[i2];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(
            w.GG,
            config._a[YEAR],
            weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i2 = 0; i2 < tokenLen; i2++) {
          token2 = tokens2[i2];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(
              string.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
        );
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i2 = 0; i2 < configfLen; i2++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i2];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i2 = normalizeObjectUnits(config._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
        config._a = map(
          [i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond],
          function(obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate(
        "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }
      ), prototypeMax = deprecate(
        "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        }
      );
      function pickBy(fn, moments) {
        var res, i2;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i2 = 1; i2 < moments.length; ++i2) {
          if (!moments[i2].isValid() || moments[i2][fn](res)) {
            res = moments[i2];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key2, unitHasDecimal = false, i2, orderLen = ordering.length;
        for (key2 in m) {
          if (hasOwnProp(m, key2) && !(indexOf.call(ordering, key2) !== -1 && (m[key2] == null || !isNaN(m[key2])))) {
            return false;
          }
        }
        for (i2 = 0; i2 < orderLen; ++i2) {
          if (m[ordering[i2]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i2]]) !== toInt(m[ordering[i2]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
        for (i2 = 0; i2 < len; i2++) {
          if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(
                this,
                createDuration(input - offset2, "m"),
                1,
                false
              );
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key2) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key2) {
            duration[key2] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(
            createLocal(duration.from),
            createLocal(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i2, property, propertyLen = properties.length;
        for (i2 = 0; i2 < propertyLen; i2 += 1) {
          property = properties[i2];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i2, property;
        for (i2 = 0; i2 < properties.length; i2 += 1) {
          property = properties[i2];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(
          output || this.localeData().calendar(format2, this, createLocal(now2))
        );
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(
            m,
            utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(
          m,
          utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func2 = "moment", zone = "", prefix2, year, datetime, suffix;
        if (!this.isLocal()) {
          func2 = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix2 = "[" + func2 + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix2 + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key2) {
        var newLocaleData;
        if (key2 === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key2);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate(
        "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
        function(key2) {
          if (key2 === void 0) {
            return this.localeData();
          } else {
            return this.locale(key2);
          }
        }
      );
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3,
              1
            );
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            );
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3 + 3,
              1
            ) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday() + 7
            ) - 1;
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1) + 7
            ) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            ) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(
        ["N", "NN", "NNN", "NNNN", "NNNNN"],
        function(input, array, config, token2) {
          var era = config._locale.erasParse(input, token2, config._strict);
          if (era) {
            getParsingFlags(config).era = era;
          } else {
            getParsingFlags(config).invalidEra = input;
          }
        }
      );
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i2, l, date, eras = this._eras || getLocale("en")._eras;
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          switch (typeof eras[i2].since) {
            case "string":
              date = hooks(eras[i2].since).startOf("day");
              eras[i2].since = date.valueOf();
              break;
          }
          switch (typeof eras[i2].until) {
            case "undefined":
              eras[i2].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i2].until).startOf("day").valueOf();
              eras[i2].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i2, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          name = eras[i2].name.toUpperCase();
          abbr = eras[i2].abbr.toUpperCase();
          narrow = eras[i2].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i2];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i2];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i2];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i2];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i2, l, val, eras = this.localeData().eras();
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].name;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i2, l, val, eras = this.localeData().eras();
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].narrow;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i2, l, val, eras = this.localeData().eras();
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until) {
            return eras[i2].abbr;
          }
          if (eras[i2].until <= val && val <= eras[i2].since) {
            return eras[i2].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i2, l, dir, val, eras = this.localeData().eras();
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          dir = eras[i2].since <= eras[i2].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
            return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l, eras = this.eras();
        for (i2 = 0, l = eras.length; i2 < l; ++i2) {
          namePieces.push(regexEscape(eras[i2].name));
          abbrPieces.push(regexEscape(eras[i2].abbr));
          narrowPieces.push(regexEscape(eras[i2].narrow));
          mixedPieces.push(regexEscape(eras[i2].name));
          mixedPieces.push(regexEscape(eras[i2].abbr));
          mixedPieces.push(regexEscape(eras[i2].narrow));
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp(
          "^(" + narrowPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addUnitAlias("weekYear", "gg");
      addUnitAlias("isoWeekYear", "GG");
      addUnitPriority("weekYear", 1);
      addUnitPriority("isoWeekYear", 1);
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(
        ["gggg", "ggggg", "GGGG", "GGGGG"],
        function(input, week, config, token2) {
          week[token2.substr(0, 2)] = toInt(input);
        }
      );
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday(),
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addUnitAlias("quarter", "Q");
      addUnitPriority("quarter", 7);
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addUnitAlias("date", "D");
      addUnitPriority("date", 9);
      addRegexToken("D", match1to2);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addUnitAlias("dayOfYear", "DDD");
      addUnitPriority("dayOfYear", 4);
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round(
          (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
        ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addUnitAlias("minute", "m");
      addUnitPriority("minute", 14);
      addRegexToken("m", match1to2);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addUnitAlias("second", "s");
      addUnitPriority("second", 15);
      addRegexToken("s", match1to2);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addUnitAlias("millisecond", "ms");
      addUnitPriority("millisecond", 16);
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto2 = Moment.prototype;
      proto2.add = add;
      proto2.calendar = calendar$1;
      proto2.clone = clone;
      proto2.diff = diff;
      proto2.endOf = endOf;
      proto2.format = format;
      proto2.from = from;
      proto2.fromNow = fromNow;
      proto2.to = to;
      proto2.toNow = toNow;
      proto2.get = stringGet;
      proto2.invalidAt = invalidAt;
      proto2.isAfter = isAfter;
      proto2.isBefore = isBefore;
      proto2.isBetween = isBetween;
      proto2.isSame = isSame;
      proto2.isSameOrAfter = isSameOrAfter;
      proto2.isSameOrBefore = isSameOrBefore;
      proto2.isValid = isValid$2;
      proto2.lang = lang;
      proto2.locale = locale;
      proto2.localeData = localeData;
      proto2.max = prototypeMax;
      proto2.min = prototypeMin;
      proto2.parsingFlags = parsingFlags;
      proto2.set = stringSet;
      proto2.startOf = startOf;
      proto2.subtract = subtract;
      proto2.toArray = toArray;
      proto2.toObject = toObject;
      proto2.toDate = toDate;
      proto2.toISOString = toISOString;
      proto2.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto2[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto2.toJSON = toJSON;
      proto2.toString = toString;
      proto2.unix = unix;
      proto2.valueOf = valueOf;
      proto2.creationData = creationData;
      proto2.eraName = getEraName;
      proto2.eraNarrow = getEraNarrow;
      proto2.eraAbbr = getEraAbbr;
      proto2.eraYear = getEraYear;
      proto2.year = getSetYear;
      proto2.isLeapYear = getIsLeapYear;
      proto2.weekYear = getSetWeekYear;
      proto2.isoWeekYear = getSetISOWeekYear;
      proto2.quarter = proto2.quarters = getSetQuarter;
      proto2.month = getSetMonth;
      proto2.daysInMonth = getDaysInMonth;
      proto2.week = proto2.weeks = getSetWeek;
      proto2.isoWeek = proto2.isoWeeks = getSetISOWeek;
      proto2.weeksInYear = getWeeksInYear;
      proto2.weeksInWeekYear = getWeeksInWeekYear;
      proto2.isoWeeksInYear = getISOWeeksInYear;
      proto2.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto2.date = getSetDayOfMonth;
      proto2.day = proto2.days = getSetDayOfWeek;
      proto2.weekday = getSetLocaleDayOfWeek;
      proto2.isoWeekday = getSetISODayOfWeek;
      proto2.dayOfYear = getSetDayOfYear;
      proto2.hour = proto2.hours = getSetHour;
      proto2.minute = proto2.minutes = getSetMinute;
      proto2.second = proto2.seconds = getSetSecond;
      proto2.millisecond = proto2.milliseconds = getSetMillisecond;
      proto2.utcOffset = getSetOffset;
      proto2.utc = setOffsetToUTC;
      proto2.local = setOffsetToLocal;
      proto2.parseZone = setOffsetToParsedOffset;
      proto2.hasAlignedHourOffset = hasAlignedHourOffset;
      proto2.isDST = isDaylightSavingTime;
      proto2.isLocal = isLocal;
      proto2.isUtcOffset = isUtcOffset;
      proto2.isUtc = isUtc;
      proto2.isUTC = isUtc;
      proto2.zoneAbbr = getZoneAbbr;
      proto2.zoneName = getZoneName;
      proto2.dates = deprecate(
        "dates accessor is deprecated. Use date instead.",
        getSetDayOfMonth
      );
      proto2.months = deprecate(
        "months accessor is deprecated. Use month instead",
        getSetMonth
      );
      proto2.years = deprecate(
        "years accessor is deprecated. Use year instead",
        getSetYear
      );
      proto2.zone = deprecate(
        "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
        getSetZone
      );
      proto2.isDSTShifted = deprecate(
        "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
        isDaylightSavingTimeShifted
      );
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i2, out = [];
        for (i2 = 0; i2 < 12; i2++) {
          out[i2] = get$1(format2, i2, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i2 = 0; i2 < 7; i2++) {
          out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        getSetGlobalLocale
      );
      hooks.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        getLocale
      );
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        w: null,
        M: 11
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate(
        "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
        toISOString$1
      );
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.29.4";
      setHookCallback(createLocal);
      hooks.fn = proto2;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto2;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        DATE: "YYYY-MM-DD",
        TIME: "HH:mm",
        TIME_SECONDS: "HH:mm:ss",
        TIME_MS: "HH:mm:ss.SSS",
        WEEK: "GGGG-[W]WW",
        MONTH: "YYYY-MM"
      };
      return hooks;
    });
  }
});

// ../../node_modules/.store/file-stream-rotator-npm-0.6.1-eab45fb13d/node_modules/file-stream-rotator/FileStreamRotator.js
var require_FileStreamRotator = __commonJS({
  "../../node_modules/.store/file-stream-rotator-npm-0.6.1-eab45fb13d/node_modules/file-stream-rotator/FileStreamRotator.js"(exports2, module2) {
    "use strict";
    var fs2 = __require("fs");
    var path2 = __require("path");
    var moment = require_moment();
    var crypto2 = __require("crypto");
    var EventEmitter = __require("events");
    var FileStreamRotator = {};
    module2.exports = FileStreamRotator;
    var staticFrequency = ["daily", "test", "m", "h", "custom"];
    var DATE_FORMAT = "YYYYMMDDHHmm";
    var _checkNumAndType = function(type2, num2) {
      if (typeof num2 == "number") {
        switch (type2) {
          case "m":
            if (num2 < 0 || num2 > 60) {
              return false;
            }
            break;
          case "h":
            if (num2 < 0 || num2 > 24) {
              return false;
            }
            break;
        }
        return { type: type2, digit: num2 };
      }
    };
    var _checkDailyAndTest = function(freqType) {
      switch (freqType) {
        case "custom":
        case "daily":
          return { type: freqType, digit: void 0 };
          break;
        case "test":
          return { type: freqType, digit: 0 };
      }
      return false;
    };
    FileStreamRotator.getFrequency = function(frequency) {
      var _f = frequency.toLowerCase().match(/^(\d+)([mh])$/);
      if (_f) {
        return _checkNumAndType(_f[2], parseInt(_f[1]));
      }
      var dailyOrTest = _checkDailyAndTest(frequency);
      if (dailyOrTest) {
        return dailyOrTest;
      }
      return false;
    };
    FileStreamRotator.parseFileSize = function(size) {
      if (size && typeof size == "string") {
        var _s = size.toLowerCase().match(/^((?:0\.)?\d+)([kmg])$/);
        if (_s) {
          switch (_s[2]) {
            case "k":
              return _s[1] * 1024;
            case "m":
              return _s[1] * 1024 * 1024;
            case "g":
              return _s[1] * 1024 * 1024 * 1024;
          }
        }
      }
      return null;
    };
    FileStreamRotator.getDate = function(format, date_format, utc) {
      date_format = date_format || DATE_FORMAT;
      let currentMoment = utc ? moment.utc() : moment().local();
      if (format && staticFrequency.indexOf(format.type) !== -1) {
        switch (format.type) {
          case "m":
            var minute = Math.floor(currentMoment.minutes() / format.digit) * format.digit;
            return currentMoment.minutes(minute).format(date_format);
            break;
          case "h":
            var hour = Math.floor(currentMoment.hour() / format.digit) * format.digit;
            return currentMoment.hour(hour).format(date_format);
            break;
          case "daily":
          case "custom":
          case "test":
            return currentMoment.format(date_format);
        }
      }
      return currentMoment.format(date_format);
    };
    FileStreamRotator.setAuditLog = function(max_logs, audit_file, log_file) {
      var _rtn = null;
      if (max_logs) {
        var use_days = max_logs.toString().substr(-1);
        var _num = max_logs.toString().match(/^(\d+)/);
        if (Number(_num[1]) > 0) {
          var baseLog = path2.dirname(log_file.replace(/%DATE%.+/, "_filename"));
          try {
            if (audit_file) {
              var full_path = path2.resolve(audit_file);
              _rtn = JSON.parse(fs2.readFileSync(full_path, { encoding: "utf-8" }));
            } else {
              var full_path = path2.resolve(baseLog + "/.audit.json");
              _rtn = JSON.parse(fs2.readFileSync(full_path, { encoding: "utf-8" }));
            }
          } catch (e) {
            if (e.code !== "ENOENT") {
              return null;
            }
            _rtn = {
              keep: {
                days: false,
                amount: Number(_num[1])
              },
              auditLog: audit_file || baseLog + "/.audit.json",
              files: []
            };
          }
          _rtn.keep = {
            days: use_days === "d",
            amount: Number(_num[1])
          };
        }
      }
      return _rtn;
    };
    FileStreamRotator.writeAuditLog = function(audit, verbose) {
      try {
        mkDirForFile(audit.auditLog);
        fs2.writeFileSync(audit.auditLog, JSON.stringify(audit, null, 4));
      } catch (e) {
        if (verbose) {
          console.error(new Date(), "[FileStreamRotator] Failed to store log audit at:", audit.auditLog, "Error:", e);
        }
      }
    };
    function removeFile(file, verbose) {
      if (file.hash === crypto2.createHash(file.hashType).update(file.name + "LOG_FILE" + file.date).digest("hex")) {
        try {
          if (fs2.existsSync(file.name)) {
            fs2.unlinkSync(file.name);
          }
        } catch (e) {
          if (verbose) {
            console.error(new Date(), "[FileStreamRotator] Could not remove old log file: ", file.name);
          }
        }
      }
    }
    function createCurrentSymLink(logfile, name, verbose) {
      let symLinkName = name || "current.log";
      let logPath = path2.dirname(logfile);
      let logfileName = path2.basename(logfile);
      let current = logPath + "/" + symLinkName;
      try {
        let stats = fs2.lstatSync(current);
        if (stats.isSymbolicLink()) {
          fs2.unlinkSync(current);
          fs2.symlinkSync(logfileName, current);
        }
      } catch (err2) {
        if (err2 && err2.code == "ENOENT") {
          try {
            fs2.symlinkSync(logfileName, current);
          } catch (e) {
            if (verbose) {
              console.error(new Date(), "[FileStreamRotator] Could not create symlink file: ", current, " -> ", logfileName);
            }
          }
        }
      }
    }
    function createLogWatcher(logfile, verbose, cb2) {
      if (!logfile)
        return null;
      try {
        let stats = fs2.lstatSync(logfile);
        return fs2.watch(logfile, function(event, filename) {
          if (event == "rename") {
            try {
              let stats2 = fs2.lstatSync(logfile);
            } catch (err2) {
              cb2(err2, logfile);
            }
          }
        });
      } catch (err2) {
        if (verbose) {
          console.log(new Date(), "[FileStreamRotator] Could not add watcher for " + logfile);
        }
      }
    }
    FileStreamRotator.addLogToAudit = function(logfile, audit, stream, verbose) {
      if (audit && audit.files) {
        var index = audit.files.findIndex(function(file) {
          return file.name === logfile;
        });
        if (index !== -1) {
          return audit;
        }
        var time = Date.now();
        audit.files.push({
          date: time,
          name: logfile,
          hash: crypto2.createHash(audit.hashType).update(logfile + "LOG_FILE" + time).digest("hex")
        });
        if (audit.keep.days) {
          var oldestDate = moment().subtract(audit.keep.amount, "days").valueOf();
          var recentFiles = audit.files.filter(function(file) {
            if (file.date > oldestDate) {
              return true;
            }
            file.hashType = audit.hashType;
            removeFile(file, verbose);
            stream.emit("logRemoved", file);
            return false;
          });
          audit.files = recentFiles;
        } else {
          var filesToKeep = audit.files.splice(-audit.keep.amount);
          if (audit.files.length > 0) {
            audit.files.filter(function(file) {
              file.hashType = audit.hashType;
              removeFile(file, verbose);
              stream.emit("logRemoved", file);
              return false;
            });
          }
          audit.files = filesToKeep;
        }
        FileStreamRotator.writeAuditLog(audit, verbose);
      }
      return audit;
    };
    FileStreamRotator.getStream = function(options) {
      var frequencyMetaData = null;
      var curDate = null;
      var self2 = this;
      if (!options.filename) {
        console.error(new Date(), "[FileStreamRotator] No filename supplied. Defaulting to STDOUT");
        return process.stdout;
      }
      if (options.frequency) {
        frequencyMetaData = self2.getFrequency(options.frequency);
      }
      let auditLog = self2.setAuditLog(options.max_logs, options.audit_file, options.filename);
      if (auditLog != null) {
        auditLog.hashType = options.audit_hash_type !== void 0 ? options.audit_hash_type : "md5";
      }
      self2.verbose = options.verbose !== void 0 ? options.verbose : true;
      var fileSize = null;
      var fileCount = 0;
      var curSize = 0;
      if (options.size) {
        fileSize = FileStreamRotator.parseFileSize(options.size);
      }
      var dateFormat = options.date_format || DATE_FORMAT;
      if (frequencyMetaData && frequencyMetaData.type == "daily") {
        if (!options.date_format) {
          dateFormat = "YYYY-MM-DD";
        }
        if (moment().format(dateFormat) != moment().endOf("day").format(dateFormat) || moment().format(dateFormat) == moment().add(1, "day").format(dateFormat)) {
          if (self2.verbose) {
            console.log(new Date(), "[FileStreamRotator] Changing type to custom as date format changes more often than once a day or not every day");
          }
          frequencyMetaData.type = "custom";
        }
      }
      if (frequencyMetaData) {
        curDate = options.frequency ? self2.getDate(frequencyMetaData, dateFormat, options.utc) : "";
      }
      options.create_symlink = options.create_symlink || false;
      options.extension = options.extension || "";
      var filename = options.filename;
      var oldFile = null;
      var logfile = filename + (curDate ? "." + curDate : "");
      if (filename.match(/%DATE%/)) {
        logfile = filename.replace(/%DATE%/g, curDate ? curDate : self2.getDate(null, dateFormat, options.utc));
      }
      if (fileSize) {
        var lastLogFile = null;
        var t_log = logfile;
        var f = null;
        if (auditLog && auditLog.files && auditLog.files instanceof Array && auditLog.files.length > 0) {
          var lastEntry = auditLog.files[auditLog.files.length - 1].name;
          if (lastEntry.match(t_log)) {
            var lastCount = lastEntry.match(t_log + "\\.(\\d+)");
            if (lastCount) {
              t_log = lastEntry;
              fileCount = lastCount[1];
            }
          }
        }
        if (fileCount == 0 && t_log == logfile) {
          t_log += options.extension;
        }
        while (f = fs2.existsSync(t_log)) {
          lastLogFile = t_log;
          fileCount++;
          t_log = logfile + "." + fileCount + options.extension;
        }
        if (lastLogFile) {
          var lastLogFileStats = fs2.statSync(lastLogFile);
          if (lastLogFileStats.size < fileSize) {
            t_log = lastLogFile;
            fileCount--;
            curSize = lastLogFileStats.size;
          }
        }
        logfile = t_log;
      } else {
        logfile += options.extension;
      }
      if (self2.verbose) {
        console.log(new Date(), "[FileStreamRotator] Logging to: ", logfile);
      }
      mkDirForFile(logfile);
      var file_options = options.file_options || { flags: "a" };
      var rotateStream = fs2.createWriteStream(logfile, file_options);
      if (curDate && frequencyMetaData && staticFrequency.indexOf(frequencyMetaData.type) > -1 || fileSize > 0) {
        if (self2.verbose) {
          console.log(new Date(), "[FileStreamRotator] Rotating file: ", frequencyMetaData ? frequencyMetaData.type : "", fileSize ? "size: " + fileSize : "");
        }
        var stream = new EventEmitter();
        stream.auditLog = auditLog;
        stream.end = function() {
          rotateStream.end.apply(rotateStream, arguments);
        };
        BubbleEvents(rotateStream, stream);
        stream.on("close", function() {
          if (logWatcher) {
            logWatcher.close();
          }
        });
        stream.on("new", function(newLog) {
          stream.auditLog = self2.addLogToAudit(newLog, stream.auditLog, stream, self2.verbose);
          if (options.create_symlink) {
            createCurrentSymLink(newLog, options.symlink_name, self2.verbose);
          }
          if (options.watch_log) {
            stream.emit("addWatcher", newLog);
          }
        });
        var logWatcher;
        stream.on("addWatcher", function(newLog) {
          if (logWatcher) {
            logWatcher.close();
          }
          if (!options.watch_log) {
            return;
          }
          logWatcher = createLogWatcher(newLog, self2.verbose, function(err2, newLog2) {
            stream.emit("createLog", newLog2);
          });
        });
        stream.on("createLog", function(file) {
          try {
            let stats = fs2.lstatSync(file);
          } catch (err2) {
            if (rotateStream && rotateStream.end == "function") {
              rotateStream.end();
            }
            rotateStream = fs2.createWriteStream(file, file_options);
            stream.emit("new", file);
            BubbleEvents(rotateStream, stream);
          }
        });
        stream.write = function(str, encoding) {
          var newDate = frequencyMetaData ? this.getDate(frequencyMetaData, dateFormat, options.utc) : curDate;
          if (newDate != curDate || fileSize && curSize > fileSize) {
            var newLogfile = filename + (curDate && frequencyMetaData ? "." + newDate : "");
            if (filename.match(/%DATE%/) && curDate) {
              newLogfile = filename.replace(/%DATE%/g, newDate);
            }
            if (fileSize && curSize > fileSize) {
              fileCount++;
              newLogfile += "." + fileCount + options.extension;
            } else {
              fileCount = 0;
              newLogfile += options.extension;
            }
            curSize = 0;
            if (self2.verbose) {
              console.log(new Date(), __require("util").format("[FileStreamRotator] Changing logs from %s to %s", logfile, newLogfile));
            }
            curDate = newDate;
            oldFile = logfile;
            logfile = newLogfile;
            if (options.end_stream === true) {
              rotateStream.end();
            } else {
              rotateStream.destroy();
            }
            mkDirForFile(logfile);
            rotateStream = fs2.createWriteStream(newLogfile, file_options);
            stream.emit("new", newLogfile);
            stream.emit("rotate", oldFile, newLogfile);
            BubbleEvents(rotateStream, stream);
          }
          rotateStream.write(str, encoding);
          curSize += Buffer.byteLength(str, encoding);
        }.bind(this);
        process.nextTick(function() {
          stream.emit("new", logfile);
        });
        stream.emit("new", logfile);
        return stream;
      } else {
        if (self2.verbose) {
          console.log(new Date(), "[FileStreamRotator] File won't be rotated: ", options.frequency, options.size);
        }
        process.nextTick(function() {
          rotateStream.emit("new", logfile);
        });
        return rotateStream;
      }
    };
    var mkDirForFile = function(pathWithFile) {
      var _path = path2.dirname(pathWithFile);
      _path.split(path2.sep).reduce(
        function(fullPath, folder) {
          fullPath += folder + path2.sep;
          if (!fs2.existsSync(fullPath)) {
            try {
              fs2.mkdirSync(fullPath);
            } catch (e) {
              if (e.code !== "EEXIST") {
                throw e;
              }
            }
          }
          return fullPath;
        },
        ""
      );
    };
    var BubbleEvents = function BubbleEvents2(emitter, proxy) {
      emitter.on("close", function() {
        proxy.emit("close");
      });
      emitter.on("finish", function() {
        proxy.emit("finish");
      });
      emitter.on("error", function(err2) {
        proxy.emit("error", err2);
      });
      emitter.on("open", function(fd) {
        proxy.emit("open", fd);
      });
    };
  }
});

// ../../node_modules/.store/winston-daily-rotate-file-virtual-d00b8e865d/node_modules/winston-daily-rotate-file/daily-rotate-file.js
var require_daily_rotate_file = __commonJS({
  "../../node_modules/.store/winston-daily-rotate-file-virtual-d00b8e865d/node_modules/winston-daily-rotate-file/daily-rotate-file.js"(exports2, module2) {
    "use strict";
    var fs2 = __require("fs");
    var os2 = __require("os");
    var path2 = __require("path");
    var util = __require("util");
    var zlib = __require("zlib");
    var hash = require_object_hash();
    var MESSAGE = require_triple_beam().MESSAGE;
    var PassThrough2 = __require("stream").PassThrough;
    var Transport = require_winston_transport();
    var loggerDefaults = {
      json: false,
      colorize: false,
      eol: os2.EOL,
      logstash: null,
      prettyPrint: false,
      label: null,
      stringify: false,
      depth: null,
      showLevel: true,
      timestamp: function() {
        return new Date().toISOString();
      }
    };
    var DailyRotateFile = function(options) {
      options = options || {};
      Transport.call(this, options);
      function throwIf(target) {
        Array.prototype.slice.call(arguments, 1).forEach(function(name) {
          if (options[name]) {
            throw new Error("Cannot set " + name + " and " + target + " together");
          }
        });
      }
      function getMaxSize(size) {
        if (size && typeof size === "string") {
          var _s = size.toLowerCase().match(/^((?:0\.)?\d+)([k|m|g])$/);
          if (_s) {
            return size;
          }
        } else if (size && Number.isInteger(size)) {
          var sizeK = Math.round(size / 1024);
          return sizeK === 0 ? "1k" : sizeK + "k";
        }
        return null;
      }
      function isValidFileName(filename) {
        return !/["<>|:*?\\/\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f]/g.test(filename);
      }
      function isValidDirName(dirname) {
        return !/["<>|\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f]/g.test(dirname);
      }
      this.options = Object.assign({}, loggerDefaults, options);
      if (options.stream) {
        throwIf("stream", "filename", "maxsize");
        this.logStream = new PassThrough2();
        this.logStream.pipe(options.stream);
      } else {
        this.filename = options.filename ? path2.basename(options.filename) : "winston.log";
        this.dirname = options.dirname || path2.dirname(options.filename);
        if (!isValidFileName(this.filename) || !isValidDirName(this.dirname)) {
          throw new Error("Your path or filename contain an invalid character.");
        }
        var self2 = this;
        this.logStream = require_FileStreamRotator().getStream({
          filename: path2.join(this.dirname, this.filename),
          frequency: options.frequency ? options.frequency : "custom",
          date_format: options.datePattern ? options.datePattern : "YYYY-MM-DD",
          verbose: false,
          size: getMaxSize(options.maxSize),
          max_logs: options.maxFiles,
          end_stream: true,
          audit_file: options.auditFile ? options.auditFile : path2.join(self2.dirname, "." + hash(options) + "-audit.json"),
          file_options: options.options ? options.options : { flags: "a" },
          utc: options.utc ? options.utc : false,
          extension: options.extension ? options.extension : "",
          create_symlink: options.createSymlink ? options.createSymlink : false,
          symlink_name: options.symlinkName ? options.symlinkName : "current.log",
          watch_log: options.watchLog ? options.watchLog : false,
          audit_hash_type: options.auditHashType ? options.auditHashType : "sha256"
        });
        this.logStream.on("new", function(newFile) {
          self2.emit("new", newFile);
        });
        this.logStream.on("rotate", function(oldFile, newFile) {
          self2.emit("rotate", oldFile, newFile);
        });
        this.logStream.on("logRemoved", function(params) {
          if (options.zippedArchive) {
            var gzName = params.name + ".gz";
            if (fs2.existsSync(gzName)) {
              try {
                fs2.unlinkSync(gzName);
              } catch (_err) {
              }
              self2.emit("logRemoved", gzName);
              return;
            }
          }
          self2.emit("logRemoved", params.name);
        });
        if (options.zippedArchive) {
          this.logStream.on("rotate", function(oldFile) {
            var oldFileExist = fs2.existsSync(oldFile);
            var gzExist = fs2.existsSync(oldFile + ".gz");
            if (!oldFileExist || gzExist) {
              return;
            }
            var gzip = zlib.createGzip();
            var inp = fs2.createReadStream(oldFile);
            var out = fs2.createWriteStream(oldFile + ".gz");
            inp.pipe(gzip).pipe(out).on("finish", function() {
              if (fs2.existsSync(oldFile)) {
                fs2.unlinkSync(oldFile);
              }
              self2.emit("archive", oldFile + ".gz");
            });
          });
        }
        if (options.watchLog) {
          this.logStream.on("addWatcher", (newFile) => {
            self2.emit("addWatcher", newFile);
          });
        }
      }
    };
    module2.exports = DailyRotateFile;
    util.inherits(DailyRotateFile, Transport);
    DailyRotateFile.prototype.name = "dailyRotateFile";
    var noop2 = function() {
    };
    DailyRotateFile.prototype.log = function(info, callback) {
      callback = callback || noop2;
      this.logStream.write(info[MESSAGE] + this.options.eol);
      this.emit("logged", info);
      callback(null, true);
    };
    DailyRotateFile.prototype.close = function() {
      var self2 = this;
      if (this.logStream) {
        this.logStream.end(function() {
          self2.emit("finish");
        });
      }
    };
    DailyRotateFile.prototype.query = function(options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.options.json) {
        throw new Error("query() may not be used without the json option being set to true");
      }
      if (!this.filename) {
        throw new Error("query() may not be used when initializing with a stream");
      }
      var self2 = this;
      var results = [];
      options = options || {};
      options.rows = options.rows || options.limit || 10;
      options.start = options.start || 0;
      options.until = options.until || new Date();
      if (typeof options.until !== "object") {
        options.until = new Date(options.until);
      }
      options.from = options.from || options.until - 24 * 60 * 60 * 1e3;
      if (typeof options.from !== "object") {
        options.from = new Date(options.from);
      }
      options.order = options.order || "desc";
      var logFiles = function() {
        var fileRegex = new RegExp(self2.filename.replace("%DATE%", ".*"), "i");
        return fs2.readdirSync(self2.dirname).filter(function(file) {
          return path2.basename(file).match(fileRegex);
        });
      }();
      if (logFiles.length === 0 && callback) {
        callback(null, results);
      }
      (function processLogFile(file) {
        if (!file) {
          return;
        }
        var logFile = path2.join(self2.dirname, file);
        var buff = "";
        var stream;
        if (file.endsWith(".gz")) {
          stream = new PassThrough2();
          fs2.createReadStream(logFile).pipe(zlib.createGunzip()).pipe(stream);
        } else {
          stream = fs2.createReadStream(logFile, {
            encoding: "utf8"
          });
        }
        stream.on("error", function(err2) {
          if (stream.readable) {
            stream.destroy();
          }
          if (!callback) {
            return;
          }
          return err2.code === "ENOENT" ? callback(null, results) : callback(err2);
        });
        stream.on("data", function(data) {
          data = (buff + data).split(/\n+/);
          var l = data.length - 1;
          for (var i2 = 0; i2 < l; i2++) {
            add(data[i2]);
          }
          buff = data[l];
        });
        stream.on("end", function() {
          if (buff) {
            add(buff, true);
          }
          if (logFiles.length) {
            processLogFile(logFiles.shift());
          } else if (callback) {
            results.sort(function(a, b) {
              var d1 = new Date(a.timestamp).getTime();
              var d2 = new Date(b.timestamp).getTime();
              return d1 > d2 ? 1 : d1 < d2 ? -1 : 0;
            });
            if (options.order === "desc") {
              results = results.reverse();
            }
            var start = options.start || 0;
            var limit = options.limit || results.length;
            results = results.slice(start, start + limit);
            if (options.fields) {
              results = results.map(function(log) {
                var obj = {};
                options.fields.forEach(function(key2) {
                  obj[key2] = log[key2];
                });
                return obj;
              });
            }
            callback(null, results);
          }
        });
        function add(buff2, attempt) {
          try {
            var log = JSON.parse(buff2);
            if (!log || typeof log !== "object") {
              return;
            }
            var time = new Date(log.timestamp);
            if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log.level) {
              return;
            }
            results.push(log);
          } catch (e) {
            if (!attempt) {
              stream.emit("error", e);
            }
          }
        }
      })(logFiles.shift());
    };
  }
});

// ../../node_modules/.store/winston-daily-rotate-file-virtual-d00b8e865d/node_modules/winston-daily-rotate-file/index.js
var require_winston_daily_rotate_file = __commonJS({
  "../../node_modules/.store/winston-daily-rotate-file-virtual-d00b8e865d/node_modules/winston-daily-rotate-file/index.js"(exports2, module2) {
    "use strict";
    var winston2 = require_winston();
    var DailyRotateFile = require_daily_rotate_file();
    winston2.transports.DailyRotateFile = DailyRotateFile;
    module2.exports = DailyRotateFile;
  }
});

// ../../node_modules/.store/ansi-colors-npm-4.1.3-8ffd0ae6c7/node_modules/ansi-colors/symbols.js
var require_symbols = __commonJS({
  "../../node_modules/.store/ansi-colors-npm-4.1.3-8ffd0ae6c7/node_modules/ansi-colors/symbols.js"(exports2, module2) {
    "use strict";
    var isHyper = typeof process !== "undefined" && process.env.TERM_PROGRAM === "Hyper";
    var isWindows = typeof process !== "undefined" && process.platform === "win32";
    var isLinux = typeof process !== "undefined" && process.platform === "linux";
    var common2 = {
      ballotDisabled: "\u2612",
      ballotOff: "\u2610",
      ballotOn: "\u2611",
      bullet: "\u2022",
      bulletWhite: "\u25E6",
      fullBlock: "\u2588",
      heart: "\u2764",
      identicalTo: "\u2261",
      line: "\u2500",
      mark: "\u203B",
      middot: "\xB7",
      minus: "\uFF0D",
      multiplication: "\xD7",
      obelus: "\xF7",
      pencilDownRight: "\u270E",
      pencilRight: "\u270F",
      pencilUpRight: "\u2710",
      percent: "%",
      pilcrow2: "\u2761",
      pilcrow: "\xB6",
      plusMinus: "\xB1",
      question: "?",
      section: "\xA7",
      starsOff: "\u2606",
      starsOn: "\u2605",
      upDownArrow: "\u2195"
    };
    var windows = Object.assign({}, common2, {
      check: "\u221A",
      cross: "\xD7",
      ellipsisLarge: "...",
      ellipsis: "...",
      info: "i",
      questionSmall: "?",
      pointer: ">",
      pointerSmall: "\xBB",
      radioOff: "( )",
      radioOn: "(*)",
      warning: "\u203C"
    });
    var other = Object.assign({}, common2, {
      ballotCross: "\u2718",
      check: "\u2714",
      cross: "\u2716",
      ellipsisLarge: "\u22EF",
      ellipsis: "\u2026",
      info: "\u2139",
      questionFull: "\uFF1F",
      questionSmall: "\uFE56",
      pointer: isLinux ? "\u25B8" : "\u276F",
      pointerSmall: isLinux ? "\u2023" : "\u203A",
      radioOff: "\u25EF",
      radioOn: "\u25C9",
      warning: "\u26A0"
    });
    module2.exports = isWindows && !isHyper ? windows : other;
    Reflect.defineProperty(module2.exports, "common", { enumerable: false, value: common2 });
    Reflect.defineProperty(module2.exports, "windows", { enumerable: false, value: windows });
    Reflect.defineProperty(module2.exports, "other", { enumerable: false, value: other });
  }
});

// ../../node_modules/.store/ansi-colors-npm-4.1.3-8ffd0ae6c7/node_modules/ansi-colors/index.js
var require_ansi_colors = __commonJS({
  "../../node_modules/.store/ansi-colors-npm-4.1.3-8ffd0ae6c7/node_modules/ansi-colors/index.js"(exports2, module2) {
    "use strict";
    var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var ANSI_REGEX = /[\u001b\u009b][[\]#;?()]*(?:(?:(?:[^\W_]*;?[^\W_]*)\u0007)|(?:(?:[0-9]{1,4}(;[0-9]{0,4})*)?[~0-9=<>cf-nqrtyA-PRZ]))/g;
    var hasColor = () => {
      if (typeof process !== "undefined") {
        return process.env.FORCE_COLOR !== "0";
      }
      return false;
    };
    var create2 = () => {
      const colors = {
        enabled: hasColor(),
        visible: true,
        styles: {},
        keys: {}
      };
      const ansi = (style2) => {
        let open = style2.open = `\x1B[${style2.codes[0]}m`;
        let close = style2.close = `\x1B[${style2.codes[1]}m`;
        let regex = style2.regex = new RegExp(`\\u001b\\[${style2.codes[1]}m`, "g");
        style2.wrap = (input, newline) => {
          if (input.includes(close))
            input = input.replace(regex, close + open);
          let output = open + input + close;
          return newline ? output.replace(/\r*\n/g, `${close}$&${open}`) : output;
        };
        return style2;
      };
      const wrap = (style2, input, newline) => {
        return typeof style2 === "function" ? style2(input) : style2.wrap(input, newline);
      };
      const style = (input, stack) => {
        if (input === "" || input == null)
          return "";
        if (colors.enabled === false)
          return input;
        if (colors.visible === false)
          return "";
        let str = "" + input;
        let nl = str.includes("\n");
        let n = stack.length;
        if (n > 0 && stack.includes("unstyle")) {
          stack = [.../* @__PURE__ */ new Set(["unstyle", ...stack])].reverse();
        }
        while (n-- > 0)
          str = wrap(colors.styles[stack[n]], str, nl);
        return str;
      };
      const define2 = (name, codes, type2) => {
        colors.styles[name] = ansi({ name, codes });
        let keys = colors.keys[type2] || (colors.keys[type2] = []);
        keys.push(name);
        Reflect.defineProperty(colors, name, {
          configurable: true,
          enumerable: true,
          set(value) {
            colors.alias(name, value);
          },
          get() {
            let color = (input) => style(input, color.stack);
            Reflect.setPrototypeOf(color, colors);
            color.stack = this.stack ? this.stack.concat(name) : [name];
            return color;
          }
        });
      };
      define2("reset", [0, 0], "modifier");
      define2("bold", [1, 22], "modifier");
      define2("dim", [2, 22], "modifier");
      define2("italic", [3, 23], "modifier");
      define2("underline", [4, 24], "modifier");
      define2("inverse", [7, 27], "modifier");
      define2("hidden", [8, 28], "modifier");
      define2("strikethrough", [9, 29], "modifier");
      define2("black", [30, 39], "color");
      define2("red", [31, 39], "color");
      define2("green", [32, 39], "color");
      define2("yellow", [33, 39], "color");
      define2("blue", [34, 39], "color");
      define2("magenta", [35, 39], "color");
      define2("cyan", [36, 39], "color");
      define2("white", [37, 39], "color");
      define2("gray", [90, 39], "color");
      define2("grey", [90, 39], "color");
      define2("bgBlack", [40, 49], "bg");
      define2("bgRed", [41, 49], "bg");
      define2("bgGreen", [42, 49], "bg");
      define2("bgYellow", [43, 49], "bg");
      define2("bgBlue", [44, 49], "bg");
      define2("bgMagenta", [45, 49], "bg");
      define2("bgCyan", [46, 49], "bg");
      define2("bgWhite", [47, 49], "bg");
      define2("blackBright", [90, 39], "bright");
      define2("redBright", [91, 39], "bright");
      define2("greenBright", [92, 39], "bright");
      define2("yellowBright", [93, 39], "bright");
      define2("blueBright", [94, 39], "bright");
      define2("magentaBright", [95, 39], "bright");
      define2("cyanBright", [96, 39], "bright");
      define2("whiteBright", [97, 39], "bright");
      define2("bgBlackBright", [100, 49], "bgBright");
      define2("bgRedBright", [101, 49], "bgBright");
      define2("bgGreenBright", [102, 49], "bgBright");
      define2("bgYellowBright", [103, 49], "bgBright");
      define2("bgBlueBright", [104, 49], "bgBright");
      define2("bgMagentaBright", [105, 49], "bgBright");
      define2("bgCyanBright", [106, 49], "bgBright");
      define2("bgWhiteBright", [107, 49], "bgBright");
      colors.ansiRegex = ANSI_REGEX;
      colors.hasColor = colors.hasAnsi = (str) => {
        colors.ansiRegex.lastIndex = 0;
        return typeof str === "string" && str !== "" && colors.ansiRegex.test(str);
      };
      colors.alias = (name, color) => {
        let fn = typeof color === "string" ? colors[color] : color;
        if (typeof fn !== "function") {
          throw new TypeError("Expected alias to be the name of an existing color (string) or a function");
        }
        if (!fn.stack) {
          Reflect.defineProperty(fn, "name", { value: name });
          colors.styles[name] = fn;
          fn.stack = [name];
        }
        Reflect.defineProperty(colors, name, {
          configurable: true,
          enumerable: true,
          set(value) {
            colors.alias(name, value);
          },
          get() {
            let color2 = (input) => style(input, color2.stack);
            Reflect.setPrototypeOf(color2, colors);
            color2.stack = this.stack ? this.stack.concat(fn.stack) : fn.stack;
            return color2;
          }
        });
      };
      colors.theme = (custom) => {
        if (!isObject(custom))
          throw new TypeError("Expected theme to be an object");
        for (let name of Object.keys(custom)) {
          colors.alias(name, custom[name]);
        }
        return colors;
      };
      colors.alias("unstyle", (str) => {
        if (typeof str === "string" && str !== "") {
          colors.ansiRegex.lastIndex = 0;
          return str.replace(colors.ansiRegex, "");
        }
        return "";
      });
      colors.alias("noop", (str) => str);
      colors.none = colors.clear = colors.noop;
      colors.stripColor = colors.unstyle;
      colors.symbols = require_symbols();
      colors.define = define2;
      return colors;
    };
    module2.exports = create2();
    module2.exports.create = create2;
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/format.js
var require_format2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/format.js"(exports2, module2) {
    "use strict";
    var InvalidFormatError = class extends Error {
      constructor(formatFn) {
        super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split("\n")[0]}
`);
        Error.captureStackTrace(this, InvalidFormatError);
      }
    };
    module2.exports = (formatFn) => {
      if (formatFn.length > 2) {
        throw new InvalidFormatError(formatFn);
      }
      function Format(options = {}) {
        this.options = options;
      }
      Format.prototype.transform = formatFn;
      function createFormatWrap(opts) {
        return new Format(opts);
      }
      createFormatWrap.Format = Format;
      return createFormatWrap;
    };
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/colorize.js
var require_colorize2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/colorize.js"(exports2, module2) {
    "use strict";
    var colors = require_safe();
    var { LEVEL, MESSAGE } = require_triple_beam();
    colors.enabled = true;
    var hasSpace = /\s+/;
    var Colorizer = class {
      constructor(opts = {}) {
        if (opts.colors) {
          this.addColors(opts.colors);
        }
        this.options = opts;
      }
      static addColors(clrs) {
        const nextColors = Object.keys(clrs).reduce((acc, level) => {
          acc[level] = hasSpace.test(clrs[level]) ? clrs[level].split(hasSpace) : clrs[level];
          return acc;
        }, {});
        Colorizer.allColors = Object.assign({}, Colorizer.allColors || {}, nextColors);
        return Colorizer.allColors;
      }
      addColors(clrs) {
        return Colorizer.addColors(clrs);
      }
      colorize(lookup, level, message) {
        if (typeof message === "undefined") {
          message = level;
        }
        if (!Array.isArray(Colorizer.allColors[lookup])) {
          return colors[Colorizer.allColors[lookup]](message);
        }
        for (let i2 = 0, len = Colorizer.allColors[lookup].length; i2 < len; i2++) {
          message = colors[Colorizer.allColors[lookup][i2]](message);
        }
        return message;
      }
      transform(info, opts) {
        if (opts.all && typeof info[MESSAGE] === "string") {
          info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);
        }
        if (opts.level || opts.all || !opts.message) {
          info.level = this.colorize(info[LEVEL], info.level);
        }
        if (opts.all || opts.message) {
          info.message = this.colorize(info[LEVEL], info.level, info.message);
        }
        return info;
      }
    };
    module2.exports = (opts) => new Colorizer(opts);
    module2.exports.Colorizer = module2.exports.Format = Colorizer;
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/levels.js
var require_levels2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/levels.js"(exports2, module2) {
    "use strict";
    var { Colorizer } = require_colorize2();
    module2.exports = (config) => {
      Colorizer.addColors(config.colors || config);
      return config;
    };
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/align.js
var require_align2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/align.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    module2.exports = format((info) => {
      info.message = `	${info.message}`;
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/errors.js
var require_errors4 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/errors.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    var { LEVEL, MESSAGE } = require_triple_beam();
    module2.exports = format((einfo, { stack }) => {
      if (einfo instanceof Error) {
        const info = Object.assign({}, einfo, {
          level: einfo.level,
          [LEVEL]: einfo[LEVEL] || einfo.level,
          message: einfo.message,
          [MESSAGE]: einfo[MESSAGE] || einfo.message
        });
        if (stack)
          info.stack = einfo.stack;
        return info;
      }
      if (!(einfo.message instanceof Error))
        return einfo;
      const err2 = einfo.message;
      Object.assign(einfo, err2);
      einfo.message = err2.message;
      einfo[MESSAGE] = err2.message;
      if (stack)
        einfo.stack = err2.stack;
      return einfo;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/pad-levels.js
var require_pad_levels2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/pad-levels.js"(exports2, module2) {
    "use strict";
    var { configs, LEVEL, MESSAGE } = require_triple_beam();
    var Padder = class {
      constructor(opts = { levels: configs.npm.levels }) {
        this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);
        this.options = opts;
      }
      static getLongestLevel(levels) {
        const lvls = Object.keys(levels).map((level) => level.length);
        return Math.max(...lvls);
      }
      static paddingForLevel(level, filler, maxLength) {
        const targetLen = maxLength + 1 - level.length;
        const rep = Math.floor(targetLen / filler.length);
        const padding = `${filler}${filler.repeat(rep)}`;
        return padding.slice(0, targetLen);
      }
      static paddingForLevels(levels, filler = " ") {
        const maxLength = Padder.getLongestLevel(levels);
        return Object.keys(levels).reduce((acc, level) => {
          acc[level] = Padder.paddingForLevel(level, filler, maxLength);
          return acc;
        }, {});
      }
      transform(info, opts) {
        info.message = `${this.paddings[info[LEVEL]]}${info.message}`;
        if (info[MESSAGE]) {
          info[MESSAGE] = `${this.paddings[info[LEVEL]]}${info[MESSAGE]}`;
        }
        return info;
      }
    };
    module2.exports = (opts) => new Padder(opts);
    module2.exports.Padder = module2.exports.Format = Padder;
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/cli.js
var require_cli3 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/cli.js"(exports2, module2) {
    "use strict";
    var { Colorizer } = require_colorize2();
    var { Padder } = require_pad_levels2();
    var { configs, MESSAGE } = require_triple_beam();
    var CliFormat = class {
      constructor(opts = {}) {
        if (!opts.levels) {
          opts.levels = configs.cli.levels;
        }
        this.colorizer = new Colorizer(opts);
        this.padder = new Padder(opts);
        this.options = opts;
      }
      transform(info, opts) {
        this.colorizer.transform(
          this.padder.transform(info, opts),
          opts
        );
        info[MESSAGE] = `${info.level}:${info.message}`;
        return info;
      }
    };
    module2.exports = (opts) => new CliFormat(opts);
    module2.exports.Format = CliFormat;
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/combine.js
var require_combine2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/combine.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    function cascade(formats) {
      if (!formats.every(isValidFormat)) {
        return;
      }
      return (info) => {
        let obj = info;
        for (let i2 = 0; i2 < formats.length; i2++) {
          obj = formats[i2].transform(obj, formats[i2].options);
          if (!obj) {
            return false;
          }
        }
        return obj;
      };
    }
    function isValidFormat(fmt) {
      if (typeof fmt.transform !== "function") {
        throw new Error([
          "No transform function found on format. Did you create a format instance?",
          "const myFormat = format(formatFn);",
          "const instance = myFormat();"
        ].join("\n"));
      }
      return true;
    }
    module2.exports = (...formats) => {
      const combinedFormat = format(cascade(formats));
      const instance = combinedFormat();
      instance.Format = combinedFormat.Format;
      return instance;
    };
    module2.exports.cascade = cascade;
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/json.js
var require_json3 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/json.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    var { MESSAGE } = require_triple_beam();
    var stringify = require_safe_stable_stringify();
    function replacer(key2, value) {
      if (typeof value === "bigint")
        return value.toString();
      return value;
    }
    module2.exports = format((info, opts) => {
      const jsonStringify = stringify.configure(opts);
      info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/label.js
var require_label2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/label.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    module2.exports = format((info, opts) => {
      if (opts.message) {
        info.message = `[${opts.label}] ${info.message}`;
        return info;
      }
      info.label = opts.label;
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/logstash.js
var require_logstash2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/logstash.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    var { MESSAGE } = require_triple_beam();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format((info) => {
      const logstash = {};
      if (info.message) {
        logstash["@message"] = info.message;
        delete info.message;
      }
      if (info.timestamp) {
        logstash["@timestamp"] = info.timestamp;
        delete info.timestamp;
      }
      logstash["@fields"] = info;
      info[MESSAGE] = jsonStringify(logstash);
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/metadata.js
var require_metadata2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/metadata.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    function fillExcept(info, fillExceptKeys, metadataKey) {
      const savedKeys = fillExceptKeys.reduce((acc, key2) => {
        acc[key2] = info[key2];
        delete info[key2];
        return acc;
      }, {});
      const metadata = Object.keys(info).reduce((acc, key2) => {
        acc[key2] = info[key2];
        delete info[key2];
        return acc;
      }, {});
      Object.assign(info, savedKeys, {
        [metadataKey]: metadata
      });
      return info;
    }
    function fillWith(info, fillWithKeys, metadataKey) {
      info[metadataKey] = fillWithKeys.reduce((acc, key2) => {
        acc[key2] = info[key2];
        delete info[key2];
        return acc;
      }, {});
      return info;
    }
    module2.exports = format((info, opts = {}) => {
      let metadataKey = "metadata";
      if (opts.key) {
        metadataKey = opts.key;
      }
      let fillExceptKeys = [];
      if (!opts.fillExcept && !opts.fillWith) {
        fillExceptKeys.push("level");
        fillExceptKeys.push("message");
      }
      if (opts.fillExcept) {
        fillExceptKeys = opts.fillExcept;
      }
      if (fillExceptKeys.length > 0) {
        return fillExcept(info, fillExceptKeys, metadataKey);
      }
      if (opts.fillWith) {
        return fillWith(info, opts.fillWith, metadataKey);
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/ms.js
var require_ms3 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/ms.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    var ms = require_ms();
    module2.exports = format((info) => {
      const curr = +new Date();
      exports2.diff = curr - (exports2.prevTime || curr);
      exports2.prevTime = curr;
      info.ms = `+${ms(exports2.diff)}`;
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/pretty-print.js
var require_pretty_print2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/pretty-print.js"(exports2, module2) {
    "use strict";
    var inspect = __require("util").inspect;
    var format = require_format2();
    var { LEVEL, MESSAGE, SPLAT } = require_triple_beam();
    module2.exports = format((info, opts = {}) => {
      const stripped = Object.assign({}, info);
      delete stripped[LEVEL];
      delete stripped[MESSAGE];
      delete stripped[SPLAT];
      info[MESSAGE] = inspect(stripped, false, opts.depth || null, opts.colorize);
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/printf.js
var require_printf2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/printf.js"(exports2, module2) {
    "use strict";
    var { MESSAGE } = require_triple_beam();
    var Printf = class {
      constructor(templateFn) {
        this.template = templateFn;
      }
      transform(info) {
        info[MESSAGE] = this.template(info);
        return info;
      }
    };
    module2.exports = (opts) => new Printf(opts);
    module2.exports.Printf = module2.exports.Format = Printf;
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/simple.js
var require_simple2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/simple.js"(exports2, module2) {
    "use strict";
    var format = require_format2();
    var { MESSAGE } = require_triple_beam();
    var jsonStringify = require_safe_stable_stringify();
    module2.exports = format((info) => {
      const stringifiedRest = jsonStringify(Object.assign({}, info, {
        level: void 0,
        message: void 0,
        splat: void 0
      }));
      const padding = info.padding && info.padding[info.level] || "";
      if (stringifiedRest !== "{}") {
        info[MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;
      } else {
        info[MESSAGE] = `${info.level}:${padding} ${info.message}`;
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/splat.js
var require_splat2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/splat.js"(exports2, module2) {
    "use strict";
    var util = __require("util");
    var { SPLAT } = require_triple_beam();
    var formatRegExp = /%[scdjifoO%]/g;
    var escapedPercent = /%%/g;
    var Splatter = class {
      constructor(opts) {
        this.options = opts;
      }
      _splat(info, tokens) {
        const msg = info.message;
        const splat = info[SPLAT] || info.splat || [];
        const percents = msg.match(escapedPercent);
        const escapes = percents && percents.length || 0;
        const expectedSplat = tokens.length - escapes;
        const extraSplat = expectedSplat - splat.length;
        const metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];
        const metalen = metas.length;
        if (metalen) {
          for (let i2 = 0; i2 < metalen; i2++) {
            Object.assign(info, metas[i2]);
          }
        }
        info.message = util.format(msg, ...splat);
        return info;
      }
      transform(info) {
        const msg = info.message;
        const splat = info[SPLAT] || info.splat;
        if (!splat || !splat.length) {
          return info;
        }
        const tokens = msg && msg.match && msg.match(formatRegExp);
        if (!tokens && (splat || splat.length)) {
          const metas = splat.length > 1 ? splat.splice(0) : splat;
          const metalen = metas.length;
          if (metalen) {
            for (let i2 = 0; i2 < metalen; i2++) {
              Object.assign(info, metas[i2]);
            }
          }
          return info;
        }
        if (tokens) {
          return this._splat(info, tokens);
        }
        return info;
      }
    };
    module2.exports = (opts) => new Splatter(opts);
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/timestamp.js
var require_timestamp2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/timestamp.js"(exports2, module2) {
    "use strict";
    var fecha = require_fecha_umd();
    var format = require_format2();
    module2.exports = format((info, opts = {}) => {
      if (opts.format) {
        info.timestamp = typeof opts.format === "function" ? opts.format() : fecha.format(new Date(), opts.format);
      }
      if (!info.timestamp) {
        info.timestamp = new Date().toISOString();
      }
      if (opts.alias) {
        info[opts.alias] = info.timestamp;
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/uncolorize.js
var require_uncolorize2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/uncolorize.js"(exports2, module2) {
    "use strict";
    var colors = require_safe();
    var format = require_format2();
    var { MESSAGE } = require_triple_beam();
    module2.exports = format((info, opts) => {
      if (opts.level !== false) {
        info.level = colors.strip(info.level);
      }
      if (opts.message !== false) {
        info.message = colors.strip(String(info.message));
      }
      if (opts.raw !== false && info[MESSAGE]) {
        info[MESSAGE] = colors.strip(String(info[MESSAGE]));
      }
      return info;
    });
  }
});

// ../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/index.js
var require_logform2 = __commonJS({
  "../../node_modules/.store/logform-npm-2.4.2-c83969e14e/node_modules/logform/index.js"(exports2) {
    "use strict";
    var format = exports2.format = require_format2();
    exports2.levels = require_levels2();
    function exposeFormat(name, requireFormat) {
      Object.defineProperty(format, name, {
        get() {
          return requireFormat();
        },
        configurable: true
      });
    }
    exposeFormat("align", function() {
      return require_align2();
    });
    exposeFormat("errors", function() {
      return require_errors4();
    });
    exposeFormat("cli", function() {
      return require_cli3();
    });
    exposeFormat("combine", function() {
      return require_combine2();
    });
    exposeFormat("colorize", function() {
      return require_colorize2();
    });
    exposeFormat("json", function() {
      return require_json3();
    });
    exposeFormat("label", function() {
      return require_label2();
    });
    exposeFormat("logstash", function() {
      return require_logstash2();
    });
    exposeFormat("metadata", function() {
      return require_metadata2();
    });
    exposeFormat("ms", function() {
      return require_ms3();
    });
    exposeFormat("padLevels", function() {
      return require_pad_levels2();
    });
    exposeFormat("prettyPrint", function() {
      return require_pretty_print2();
    });
    exposeFormat("printf", function() {
      return require_printf2();
    });
    exposeFormat("simple", function() {
      return require_simple2();
    });
    exposeFormat("splat", function() {
      return require_splat2();
    });
    exposeFormat("timestamp", function() {
      return require_timestamp2();
    });
    exposeFormat("uncolorize", function() {
      return require_uncolorize2();
    });
  }
});

// ../core/build/log/Colorizer.js
var require_Colorizer = __commonJS({
  "../core/build/log/Colorizer.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.colorizer = void 0;
    var ansi_colors_1 = __importDefault(require_ansi_colors());
    var logform_1 = require_logform2();
    var winston_1 = __importDefault(require_winston());
    var defaultColors = winston_1.default.config.npm.colors;
    var primaryAndInlineTagRegex = /\[([^\]]+)\]/g;
    function getBgColorName(color) {
      return `bg${color[0].toUpperCase()}${color.slice(1)}`;
    }
    function colorizeTextAndTags(textWithTags, textColor, bgColor) {
      return textColor(textWithTags.replace(primaryAndInlineTagRegex, (match, group1) => bgColor("[") + ansi_colors_1.default.inverse(group1) + bgColor("]")));
    }
    exports2.colorizer = (0, logform_1.format)((info, _opts) => {
      const textColor = ansi_colors_1.default[defaultColors[info.level]];
      const bgColor = ansi_colors_1.default[getBgColorName(defaultColors[info.level])];
      if (typeof info.message === "string") {
        info.message = colorizeTextAndTags(info.message, textColor, bgColor);
      } else {
        info.message = info.message.map((msg) => colorizeTextAndTags(msg, textColor, bgColor));
      }
      info.direction = ansi_colors_1.default.white(info.direction);
      if (info.label) {
        info.label = ansi_colors_1.default.gray.inverse(info.label);
      }
      if (info.timestamp) {
        info.timestamp = ansi_colors_1.default.gray(info.timestamp);
      }
      if (info.primaryTags) {
        info.primaryTags = colorizeTextAndTags(info.primaryTags, textColor, bgColor);
      }
      if (info.secondaryTags) {
        info.secondaryTags = ansi_colors_1.default.gray(info.secondaryTags);
      }
      return info;
    });
  }
});

// ../core/build/log/shared_safe.js
var require_shared_safe = __commonJS({
  "../core/build/log/shared_safe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringToNodeList = exports2.nonUndefinedLogConfigKeys = exports2.getNodeTag = exports2.LOG_PREFIX_WIDTH = exports2.LOG_WIDTH = exports2.directionPrefixPadding = exports2.CONTROL_CHAR_WIDTH = exports2.getDirectionPrefix = exports2.channelPadding = exports2.timestampPadding = exports2.timestampPaddingShort = exports2.timestampFormatShort = void 0;
    var strings_1 = require_strings();
    exports2.timestampFormatShort = "HH:mm:ss.SSS";
    exports2.timestampPaddingShort = " ".repeat(exports2.timestampFormatShort.length + 1);
    exports2.timestampPadding = " ".repeat(new Date().toISOString().length + 1);
    exports2.channelPadding = " ".repeat(7);
    function getDirectionPrefix(direction) {
      return direction === "inbound" ? "\xAB " : direction === "outbound" ? "\xBB " : "  ";
    }
    exports2.getDirectionPrefix = getDirectionPrefix;
    exports2.CONTROL_CHAR_WIDTH = 2;
    exports2.directionPrefixPadding = " ".repeat(exports2.CONTROL_CHAR_WIDTH);
    exports2.LOG_WIDTH = 80;
    exports2.LOG_PREFIX_WIDTH = 20;
    function getNodeTag(nodeId) {
      return "Node " + (0, strings_1.padStart)(nodeId.toString(), 3, "0");
    }
    exports2.getNodeTag = getNodeTag;
    exports2.nonUndefinedLogConfigKeys = [
      "enabled",
      "level",
      "transports",
      "logToFile",
      "maxFiles",
      "filename",
      "forceConsole"
    ];
    function stringToNodeList(nodes) {
      if (!nodes)
        return void 0;
      return nodes.split(",").map((n) => parseInt(n)).filter((n) => !Number.isNaN(n));
    }
    exports2.stringToNodeList = stringToNodeList;
  }
});

// ../core/build/log/shared.js
var require_shared = __commonJS({
  "../core/build/log/shared.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.restoreSilence = exports2.unsilence = exports2.tagify = exports2.messageRecordToLines = exports2.messageToLines = exports2.messageFitsIntoOneLine = exports2.createDefaultTransportFormat = exports2.logMessageFormatter = exports2.createLogMessagePrinter = exports2.createLoggerFormat = exports2.ZWaveLogContainer = exports2.ZWaveLoggerBase = void 0;
    var shared_1 = require_build();
    var path2 = __importStar(__require("path"));
    var triple_beam_1 = require_triple_beam();
    var winston_1 = __importDefault(require_winston());
    var winston_daily_rotate_file_1 = __importDefault(require_winston_daily_rotate_file());
    var Colorizer_1 = require_Colorizer();
    var shared_safe_1 = require_shared_safe();
    var { combine, timestamp, label } = winston_1.default.format;
    var loglevels = triple_beam_1.configs.npm.levels;
    var isTTY = process.stdout.isTTY;
    var isUnitTest = process.env.NODE_ENV === "test";
    var ZWaveLoggerBase = class {
      constructor(loggers, logLabel) {
        this.container = loggers;
        this.logger = this.container.getLogger(logLabel);
      }
    };
    exports2.ZWaveLoggerBase = ZWaveLoggerBase;
    var ZWaveLogContainer = class extends winston_1.default.Container {
      constructor(config = {}) {
        super();
        this.loglevelVisibleCache = /* @__PURE__ */ new Map();
        this.logConfig = {
          enabled: true,
          level: getTransportLoglevel(),
          logToFile: !!process.env.LOGTOFILE,
          maxFiles: 7,
          nodeFilter: (0, shared_safe_1.stringToNodeList)(process.env.LOG_NODES),
          transports: void 0,
          filename: __require.main ? path2.join(path2.dirname(__require.main.filename), `zwavejs_%DATE%.log`) : path2.join(__dirname, "../../..", `zwavejs_%DATE%.log`),
          forceConsole: false
        };
        this.updateConfiguration(config);
      }
      getLogger(label2) {
        if (!this.has(label2)) {
          this.add(label2, {
            transports: this.getAllTransports(),
            format: createLoggerFormat(label2),
            level: "silly"
          });
        }
        return this.get(label2);
      }
      updateConfiguration(config) {
        var _a2, _b;
        for (const key2 of shared_safe_1.nonUndefinedLogConfigKeys) {
          if (key2 in config && config[key2] === void 0) {
            delete config[key2];
          }
        }
        const changedLoggingTarget = config.logToFile != void 0 && config.logToFile !== this.logConfig.logToFile || config.forceConsole != void 0 && config.forceConsole !== this.logConfig.forceConsole;
        if (typeof config.level === "number") {
          config.level = loglevelFromNumber(config.level);
        }
        const changedLogLevel = config.level != void 0 && config.level !== this.logConfig.level;
        if (config.filename != void 0 && !config.filename.includes("%DATE%")) {
          config.filename += "_%DATE%.log";
        }
        const changedFilename = config.filename != void 0 && config.filename !== this.logConfig.filename;
        if (config.maxFiles != void 0) {
          if (typeof config.maxFiles !== "number" || config.maxFiles < 1 || config.maxFiles > 365) {
            delete config.maxFiles;
          }
        }
        const changedMaxFiles = config.maxFiles != void 0 && config.maxFiles !== this.logConfig.maxFiles;
        this.logConfig = Object.assign(this.logConfig, config);
        if (changedLogLevel) {
          this.loglevelVisibleCache.clear();
        }
        const recreateInternalTransports = this.fileTransport == void 0 && this.consoleTransport == void 0 || changedLoggingTarget || changedFilename || changedMaxFiles;
        if (recreateInternalTransports) {
          (_a2 = this.fileTransport) == null ? void 0 : _a2.destroy();
          this.fileTransport = void 0;
          (_b = this.consoleTransport) == null ? void 0 : _b.destroy();
          this.consoleTransport = void 0;
        }
        if (recreateInternalTransports || config.transports != void 0) {
          this.loggers.forEach((logger) => logger.configure({ transports: this.getAllTransports() }));
        }
      }
      getConfiguration() {
        return this.logConfig;
      }
      isLoglevelVisible(loglevel) {
        if (!this.fileTransport && !this.consoleTransport && (!this.logConfig.transports || this.logConfig.transports.length === 0)) {
          return false;
        }
        if (!this.loglevelVisibleCache.has(loglevel)) {
          this.loglevelVisibleCache.set(loglevel, loglevel in loglevels && loglevels[loglevel] <= loglevels[this.logConfig.level]);
        }
        return this.loglevelVisibleCache.get(loglevel);
      }
      destroy() {
        for (const key2 in this.loggers) {
          this.close(key2);
        }
        this.fileTransport = void 0;
        this.consoleTransport = void 0;
        this.logConfig.transports = [];
      }
      getAllTransports() {
        return [
          ...this.getInternalTransports(),
          ...this.logConfig.transports ?? []
        ];
      }
      getInternalTransports() {
        const ret = [];
        if (this.logConfig.enabled && this.logConfig.logToFile) {
          if (!this.fileTransport) {
            this.fileTransport = this.createFileTransport();
          }
          ret.push(this.fileTransport);
        } else if (!isUnitTest && (isTTY || this.logConfig.forceConsole)) {
          if (!this.consoleTransport) {
            this.consoleTransport = this.createConsoleTransport();
          }
          ret.push(this.consoleTransport);
        }
        return ret;
      }
      createConsoleTransport() {
        return new winston_1.default.transports.Console({
          format: createDefaultTransportFormat2(
            isTTY || isUnitTest,
            isTTY
          ),
          silent: this.isConsoleTransportSilent()
        });
      }
      isConsoleTransportSilent() {
        return process.env.NODE_ENV === "test" || !this.logConfig.enabled;
      }
      isFileTransportSilent() {
        return !this.logConfig.enabled;
      }
      createFileTransport() {
        const ret = new winston_daily_rotate_file_1.default({
          filename: this.logConfig.filename,
          auditFile: `${this.logConfig.filename.replace("_%DATE%", "_logrotate").replace(/\.log$/, "")}.json`,
          datePattern: "YYYY-MM-DD",
          createSymlink: true,
          symlinkName: path2.basename(this.logConfig.filename).replace(`_%DATE%`, "_current"),
          zippedArchive: true,
          maxFiles: `${this.logConfig.maxFiles}d`,
          format: createDefaultTransportFormat2(false, false),
          silent: this.isFileTransportSilent()
        });
        ret.on("new", (newFilename) => {
          console.log(`Logging to file:
	${newFilename}`);
        });
        return ret;
      }
      shouldLogNode(nodeId) {
        if (!this.logConfig.nodeFilter)
          return true;
        return this.logConfig.nodeFilter.includes(nodeId);
      }
    };
    exports2.ZWaveLogContainer = ZWaveLogContainer;
    function getTransportLoglevel() {
      return process.env.LOGLEVEL in loglevels ? process.env.LOGLEVEL : "debug";
    }
    function loglevelFromNumber(numLevel) {
      if (numLevel == void 0)
        return;
      for (const [level, value] of Object.entries(loglevels)) {
        if (value === numLevel)
          return level;
      }
    }
    function createLoggerFormat(channel) {
      return combine(
        label({ label: channel }),
        timestamp()
      );
    }
    exports2.createLoggerFormat = createLoggerFormat;
    function createLogMessagePrinter(shortTimestamps) {
      return {
        transform: (info) => {
          const messageLines = messageToLines(info.message);
          if (info.secondaryTagPadding == void 0)
            info.secondaryTagPadding = -1;
          let firstLine = [
            info.primaryTags,
            messageLines[0],
            info.secondaryTagPadding < 0 ? void 0 : " ".repeat(info.secondaryTagPadding),
            info.secondaryTagPadding === 0 && info.secondaryTags ? " " + info.secondaryTags : info.secondaryTags
          ].filter((item) => !!item).join(" ");
          firstLine = `${info.timestamp} ${info.label} ${info.direction}${firstLine}`;
          const lines = [firstLine];
          if (info.multiline) {
            lines.push(...messageLines.slice(1).map((line) => (shortTimestamps ? shared_safe_1.timestampPaddingShort : shared_safe_1.timestampPadding) + shared_safe_1.channelPadding + shared_safe_1.directionPrefixPadding + line));
          }
          info[triple_beam_1.MESSAGE] = lines.join("\n");
          return info;
        }
      };
    }
    exports2.createLogMessagePrinter = createLogMessagePrinter;
    exports2.logMessageFormatter = {
      transform: (info) => {
        const messageLines = messageToLines(info.message);
        const firstMessageLineLength = messageLines[0].length;
        info.multiline = messageLines.length > 1 || !messageFitsIntoOneLine(info, info.message.length);
        if (info.secondaryTags) {
          info.secondaryTagPadding = Math.max(
            -1,
            shared_safe_1.LOG_WIDTH - 1 - calculateFirstLineLength(info, firstMessageLineLength)
          );
        }
        if (info.multiline) {
          const lines = [];
          let isFirstLine = true;
          for (let message of messageLines) {
            while (message.length) {
              const cut = Math.min(message.length, isFirstLine ? shared_safe_1.LOG_WIDTH - calculateFirstLineLength(info, 0) - 1 : shared_safe_1.LOG_WIDTH - shared_safe_1.CONTROL_CHAR_WIDTH);
              isFirstLine = false;
              lines.push(message.substr(0, cut));
              message = message.substr(cut);
            }
          }
          info.message = lines.join("\n");
        }
        return info;
      }
    };
    function createDefaultTransportFormat2(colorize2, shortTimestamps) {
      const formats = [
        shortTimestamps ? timestamp({ format: shared_safe_1.timestampFormatShort }) : void 0,
        exports2.logMessageFormatter,
        colorize2 ? (0, Colorizer_1.colorizer)() : void 0,
        createLogMessagePrinter(shortTimestamps)
      ].filter((f) => !!f);
      return combine(...formats);
    }
    exports2.createDefaultTransportFormat = createDefaultTransportFormat2;
    function calculateFirstLineLength(info, firstMessageLineLength) {
      return [
        shared_safe_1.CONTROL_CHAR_WIDTH - 1,
        firstMessageLineLength,
        (info.primaryTags || "").length,
        (info.secondaryTags || "").length
      ].filter((len) => len > 0).reduce((prev, val) => prev + (prev > 0 ? 1 : 0) + val);
    }
    function messageFitsIntoOneLine(info, messageLength) {
      const totalLength = calculateFirstLineLength(info, messageLength);
      return totalLength <= shared_safe_1.LOG_WIDTH;
    }
    exports2.messageFitsIntoOneLine = messageFitsIntoOneLine;
    function messageToLines(message) {
      if (typeof message === "string") {
        return message.split("\n");
      } else if (message.length > 0) {
        return message;
      } else {
        return [""];
      }
    }
    exports2.messageToLines = messageToLines;
    function messageRecordToLines(message) {
      const entries = Object.entries(message);
      if (!entries.length)
        return [];
      const maxKeyLength = Math.max(...entries.map(([key2]) => key2.length));
      return (0, shared_1.flatMap)(entries, ([key2, value]) => `${key2}:${" ".repeat(Math.max(maxKeyLength - key2.length + 1, 1))}${value}`.split("\n").map((line) => line.trimRight()));
    }
    exports2.messageRecordToLines = messageRecordToLines;
    function tagify(tags) {
      return tags.map((pfx) => `[${pfx}]`).join(" ");
    }
    exports2.tagify = tagify;
    function unsilence(logger) {
      const consoleTransport = logger.transports.find((t) => t.name === "console");
      if (consoleTransport) {
        const ret = !!consoleTransport.silent;
        consoleTransport.silent = false;
        return ret;
      }
      return false;
    }
    exports2.unsilence = unsilence;
    function restoreSilence(logger, original) {
      const consoleTransport = logger.transports.find((t) => t.name === "console");
      if (consoleTransport) {
        consoleTransport.silent = original;
      }
    }
    exports2.restoreSilence = restoreSilence;
  }
});

// ../core/build/log/Controller.js
var require_Controller = __commonJS({
  "../core/build/log/Controller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ControllerLogger = exports2.CONTROLLER_LABEL = void 0;
    var typeguards_1 = require_typeguards();
    var CommandClasses_1 = require_CommandClasses();
    var InterviewStage_1 = require_InterviewStage();
    var shared_1 = require_shared();
    var shared_safe_1 = require_shared_safe();
    exports2.CONTROLLER_LABEL = "CNTRLR";
    var CONTROLLER_LOGLEVEL = "info";
    var VALUE_LOGLEVEL = "debug";
    var ControllerLogger = class extends shared_1.ZWaveLoggerBase {
      constructor(loggers) {
        super(loggers, exports2.CONTROLLER_LABEL);
        this.valueEventPrefixes = Object.freeze({
          added: "+",
          updated: "~",
          removed: "-",
          notification: "!"
        });
      }
      isValueLogVisible() {
        return this.container.isLoglevelVisible(VALUE_LOGLEVEL);
      }
      isControllerLogVisible() {
        return this.container.isLoglevelVisible(CONTROLLER_LOGLEVEL);
      }
      print(message, level) {
        const actualLevel = level || CONTROLLER_LOGLEVEL;
        if (!this.container.isLoglevelVisible(actualLevel))
          return;
        this.logger.log({
          level: actualLevel,
          message,
          direction: (0, shared_safe_1.getDirectionPrefix)("none"),
          context: { source: "controller", type: "controller" }
        });
      }
      logNode(nodeId, messageOrOptions, logLevel) {
        if (typeof messageOrOptions === "string") {
          return this.logNode(nodeId, {
            message: messageOrOptions,
            level: logLevel
          });
        }
        const { level, message, direction, endpoint } = messageOrOptions;
        const actualLevel = level || CONTROLLER_LOGLEVEL;
        if (!this.container.isLoglevelVisible(actualLevel))
          return;
        if (!this.container.shouldLogNode(nodeId))
          return;
        const context = {
          nodeId,
          source: "controller",
          type: "node",
          direction: direction || "none"
        };
        if (endpoint)
          context.endpoint = endpoint;
        this.logger.log({
          level: actualLevel,
          primaryTags: (0, shared_1.tagify)([(0, shared_safe_1.getNodeTag)(nodeId)]),
          message,
          secondaryTags: endpoint ? (0, shared_1.tagify)([`Endpoint ${endpoint}`]) : void 0,
          direction: (0, shared_safe_1.getDirectionPrefix)(direction || "none"),
          context
        });
      }
      formatValue(value) {
        if ((0, typeguards_1.isObject)(value))
          return JSON.stringify(value);
        if (typeof value !== "string")
          return String(value);
        return `"${value}"`;
      }
      value(change, args) {
        if (!this.isValueLogVisible())
          return;
        if (!this.container.shouldLogNode(args.nodeId))
          return;
        const context = {
          nodeId: args.nodeId,
          change,
          commandClass: args.commandClass,
          internal: args.internal,
          property: args.property,
          source: "controller",
          type: "value"
        };
        const primaryTags = [
          (0, shared_safe_1.getNodeTag)(args.nodeId),
          this.valueEventPrefixes[change],
          CommandClasses_1.CommandClasses[args.commandClass]
        ];
        const secondaryTags = [];
        if (args.endpoint != void 0) {
          context.endpoint = args.endpoint;
          secondaryTags.push(`Endpoint ${args.endpoint}`);
        }
        if (args.internal === true) {
          secondaryTags.push("internal");
        }
        let message = args.property.toString();
        if (args.propertyKey != void 0) {
          context.propertyKey = args.propertyKey;
          message += `[${args.propertyKey}]`;
        }
        switch (change) {
          case "added":
            message += `: ${this.formatValue(args.newValue)}`;
            break;
          case "updated": {
            const _args = args;
            message += `: ${this.formatValue(_args.prevValue)} => ${this.formatValue(_args.newValue)}`;
            break;
          }
          case "removed":
            message += ` (was ${this.formatValue(args.prevValue)})`;
            break;
          case "notification":
            message += `: ${this.formatValue(args.value)}`;
            break;
        }
        this.logger.log({
          level: VALUE_LOGLEVEL,
          primaryTags: (0, shared_1.tagify)(primaryTags),
          secondaryTags: (0, shared_1.tagify)(secondaryTags),
          message,
          direction: (0, shared_safe_1.getDirectionPrefix)("none"),
          context
        });
      }
      metadataUpdated(args) {
        if (!this.isValueLogVisible())
          return;
        if (!this.container.shouldLogNode(args.nodeId))
          return;
        const context = {
          nodeId: args.nodeId,
          commandClass: args.commandClass,
          internal: args.internal,
          property: args.property,
          source: "controller",
          type: "value"
        };
        const primaryTags = [
          (0, shared_safe_1.getNodeTag)(args.nodeId),
          CommandClasses_1.CommandClasses[args.commandClass]
        ];
        const secondaryTags = [];
        if (args.endpoint != void 0) {
          context.endpoint = args.endpoint;
          secondaryTags.push(`Endpoint ${args.endpoint}`);
        }
        if (args.internal === true) {
          secondaryTags.push("internal");
        }
        let message = args.property.toString();
        if (args.propertyKey != void 0) {
          context.propertyKey = args.propertyKey;
          message += `[${args.propertyKey}]`;
        }
        message += ": metadata updated";
        this.logger.log({
          level: VALUE_LOGLEVEL,
          primaryTags: (0, shared_1.tagify)(primaryTags),
          secondaryTags: (0, shared_1.tagify)(secondaryTags),
          message,
          direction: (0, shared_safe_1.getDirectionPrefix)("none"),
          context
        });
      }
      interviewStage(node) {
        if (!this.isControllerLogVisible())
          return;
        if (!this.container.shouldLogNode(node.id))
          return;
        this.logger.log({
          level: CONTROLLER_LOGLEVEL,
          primaryTags: (0, shared_1.tagify)([(0, shared_safe_1.getNodeTag)(node.id)]),
          message: node.interviewStage === InterviewStage_1.InterviewStage.Complete ? "Interview completed" : `Interview stage completed: ${InterviewStage_1.InterviewStage[node.interviewStage]}`,
          direction: (0, shared_safe_1.getDirectionPrefix)("none"),
          context: {
            nodeId: node.id,
            source: "controller",
            type: "node",
            direction: "none"
          }
        });
      }
      interviewStart(node) {
        if (!this.isControllerLogVisible())
          return;
        if (!this.container.shouldLogNode(node.id))
          return;
        const message = `Beginning interview - last completed stage: ${InterviewStage_1.InterviewStage[node.interviewStage]}`;
        this.logger.log({
          level: CONTROLLER_LOGLEVEL,
          primaryTags: (0, shared_1.tagify)([(0, shared_safe_1.getNodeTag)(node.id)]),
          message,
          direction: (0, shared_safe_1.getDirectionPrefix)("none"),
          context: {
            nodeId: node.id,
            source: "controller",
            type: "node",
            direction: "none"
          }
        });
      }
    };
    exports2.ControllerLogger = ControllerLogger;
  }
});

// ../core/build/security/bufferUtils.js
var require_bufferUtils = __commonJS({
  "../core/build/security/bufferUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.increment = exports2.xor = exports2.leftShift1 = exports2.zeroPad = void 0;
    function zeroPad(input, blockSize) {
      const padding = input.length % blockSize === 0 ? Buffer.from([]) : Buffer.alloc(blockSize - input.length % blockSize, 0);
      return {
        output: Buffer.concat([input, padding]),
        paddingLength: padding.length
      };
    }
    exports2.zeroPad = zeroPad;
    function leftShift1(input) {
      const ret = Buffer.allocUnsafe(input.length);
      for (let i2 = 0; i2 < input.length - 1; i2++) {
        ret[i2] = (input[i2] << 1) + (!!(input[i2 + 1] & 128) ? 1 : 0);
      }
      ret[ret.length - 1] = input[input.length - 1] << 1;
      return ret;
    }
    exports2.leftShift1 = leftShift1;
    function xor(b1, b2) {
      if (b1.length !== b2.length) {
        throw new Error("The buffers must have the same length");
      }
      const ret = Buffer.allocUnsafe(b1.length);
      for (let i2 = 0; i2 < b1.length; i2++) {
        ret[i2] = b1[i2] ^ b2[i2];
      }
      return ret;
    }
    exports2.xor = xor;
    function increment(buffer2) {
      for (let i2 = buffer2.length - 1; i2 >= 0; i2--) {
        buffer2[i2] += 1;
        if (buffer2[i2] !== 0)
          break;
      }
    }
    exports2.increment = increment;
  }
});

// ../core/build/security/crypto.js
var require_crypto = __commonJS({
  "../core/build/security/crypto.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decryptAES128CCM = exports2.encryptAES128CCM = exports2.SECURITY_S2_AUTH_TAG_LENGTH = exports2.deriveMEI = exports2.computeNoncePRK = exports2.deriveNetworkKeys = exports2.deriveTempKeys = exports2.computePRK = exports2.computeCMAC = exports2.encodeX25519KeyDERSPKI = exports2.encodeX25519KeyDERPKCS8 = exports2.decodeX25519KeyDER = exports2.computeMAC = exports2.decryptAES128OFB = exports2.encryptAES128OFB = exports2.encryptAES128ECB = void 0;
    var crypto2 = __importStar(__require("crypto"));
    var bufferUtils_1 = require_bufferUtils();
    function encrypt(algorithm, blockSize, trimToInputLength, input, key2, iv) {
      const cipher = crypto2.createCipheriv(algorithm, key2, iv);
      cipher.setAutoPadding(false);
      const { output: plaintext, paddingLength } = (0, bufferUtils_1.zeroPad)(input, blockSize);
      const ret = Buffer.concat([cipher.update(plaintext), cipher.final()]);
      if (trimToInputLength && paddingLength > 0) {
        return ret.slice(0, -paddingLength);
      } else {
        return ret;
      }
    }
    function decrypt(algorithm, blockSize, trimToInputLength, input, key2, iv) {
      const cipher = crypto2.createDecipheriv(algorithm, key2, iv);
      cipher.setAutoPadding(false);
      const { output: ciphertext, paddingLength } = (0, bufferUtils_1.zeroPad)(input, blockSize);
      const ret = Buffer.concat([cipher.update(ciphertext), cipher.final()]);
      if (trimToInputLength && paddingLength > 0) {
        return ret.slice(0, -paddingLength);
      } else {
        return ret;
      }
    }
    function encryptAES128ECB(plaintext, key2) {
      return encrypt("aes-128-ecb", 16, false, plaintext, key2, Buffer.from([]));
    }
    exports2.encryptAES128ECB = encryptAES128ECB;
    exports2.encryptAES128OFB = encrypt.bind(void 0, "aes-128-ofb", 16, true);
    exports2.decryptAES128OFB = decrypt.bind(void 0, "aes-128-ofb", 16, true);
    function computeMAC(authData, key2, iv = Buffer.alloc(16, 0)) {
      const ciphertext = encrypt("aes-128-cbc", 16, false, authData, key2, iv);
      return ciphertext.slice(-16, -8);
    }
    exports2.computeMAC = computeMAC;
    function decodeX25519KeyDER(key2) {
      return key2.slice(-32);
    }
    exports2.decodeX25519KeyDER = decodeX25519KeyDER;
    function encodeX25519KeyDERPKCS8(key2) {
      return Buffer.concat([
        Buffer.from("302e020100300506032b656e04220420", "hex"),
        key2
      ]);
    }
    exports2.encodeX25519KeyDERPKCS8 = encodeX25519KeyDERPKCS8;
    function encodeX25519KeyDERSPKI(key2) {
      return Buffer.concat([Buffer.from("302a300506032b656e032100", "hex"), key2]);
    }
    exports2.encodeX25519KeyDERSPKI = encodeX25519KeyDERSPKI;
    var Z128 = Buffer.alloc(16, 0);
    var R128 = Buffer.from("00000000000000000000000000000087", "hex");
    function generateAES128CMACSubkeys(key2) {
      const L = encryptAES128ECB(Z128, key2);
      const k1 = !(L[0] & 128) ? (0, bufferUtils_1.leftShift1)(L) : (0, bufferUtils_1.xor)((0, bufferUtils_1.leftShift1)(L), R128);
      const k2 = !(k1[0] & 128) ? (0, bufferUtils_1.leftShift1)(k1) : (0, bufferUtils_1.xor)((0, bufferUtils_1.leftShift1)(k1), R128);
      return [k1, k2];
    }
    function computeCMAC(message, key2) {
      const blockSize = 16;
      const numBlocks = Math.ceil(message.length / blockSize);
      let lastBlock = message.slice((numBlocks - 1) * blockSize);
      const lastBlockIsComplete = message.length > 0 && message.length % blockSize === 0;
      if (!lastBlockIsComplete) {
        lastBlock = (0, bufferUtils_1.zeroPad)(Buffer.concat([lastBlock, Buffer.from([128])]), blockSize).output;
      }
      let ret = Z128;
      for (let i2 = 0; i2 < numBlocks - 1; i2++) {
        ret = (0, bufferUtils_1.xor)(ret, message.slice(i2 * blockSize, (i2 + 1) * blockSize));
        ret = encryptAES128ECB(ret, key2);
      }
      const [k1, k2] = generateAES128CMACSubkeys(key2);
      ret = (0, bufferUtils_1.xor)(ret, (0, bufferUtils_1.xor)(lastBlockIsComplete ? k1 : k2, lastBlock));
      ret = encryptAES128ECB(ret, key2);
      return ret.slice(0, blockSize);
    }
    exports2.computeCMAC = computeCMAC;
    var constantPRK = Buffer.alloc(16, 51);
    function computePRK(ecdhSharedSecret, pubKeyA, pubKeyB) {
      const message = Buffer.concat([ecdhSharedSecret, pubKeyA, pubKeyB]);
      return computeCMAC(message, constantPRK);
    }
    exports2.computePRK = computePRK;
    var constantTE = Buffer.alloc(15, 136);
    function deriveTempKeys(PRK) {
      const T1 = computeCMAC(Buffer.concat([constantTE, Buffer.from([1])]), PRK);
      const T2 = computeCMAC(Buffer.concat([T1, constantTE, Buffer.from([2])]), PRK);
      const T3 = computeCMAC(Buffer.concat([T2, constantTE, Buffer.from([3])]), PRK);
      return {
        tempKeyCCM: T1,
        tempPersonalizationString: Buffer.concat([T2, T3])
      };
    }
    exports2.deriveTempKeys = deriveTempKeys;
    var constantNK = Buffer.alloc(15, 85);
    function deriveNetworkKeys(PNK) {
      const T1 = computeCMAC(Buffer.concat([constantNK, Buffer.from([1])]), PNK);
      const T2 = computeCMAC(Buffer.concat([T1, constantNK, Buffer.from([2])]), PNK);
      const T3 = computeCMAC(Buffer.concat([T2, constantNK, Buffer.from([3])]), PNK);
      const T4 = computeCMAC(Buffer.concat([T3, constantNK, Buffer.from([4])]), PNK);
      return {
        keyCCM: T1,
        keyMPAN: T4,
        personalizationString: Buffer.concat([T2, T3])
      };
    }
    exports2.deriveNetworkKeys = deriveNetworkKeys;
    var constantNonce = Buffer.alloc(16, 38);
    function computeNoncePRK(senderEI, receiverEI) {
      const message = Buffer.concat([senderEI, receiverEI]);
      return computeCMAC(message, constantNonce);
    }
    exports2.computeNoncePRK = computeNoncePRK;
    var constantEI = Buffer.alloc(15, 136);
    function deriveMEI(noncePRK) {
      const T1 = computeCMAC(Buffer.concat([
        constantEI,
        Buffer.from([0]),
        constantEI,
        Buffer.from([1])
      ]), noncePRK);
      const T2 = computeCMAC(Buffer.concat([T1, constantEI, Buffer.from([2])]), noncePRK);
      return Buffer.concat([T1, T2]);
    }
    exports2.deriveMEI = deriveMEI;
    exports2.SECURITY_S2_AUTH_TAG_LENGTH = 8;
    function encryptAES128CCM(key2, iv, plaintext, additionalData, authTagLength) {
      const algorithm = `aes-128-ccm`;
      const cipher = crypto2.createCipheriv(algorithm, key2, iv, { authTagLength });
      cipher.setAAD(additionalData, { plaintextLength: plaintext.length });
      const ciphertext = cipher.update(plaintext);
      cipher.final();
      const authTag = cipher.getAuthTag();
      return { ciphertext, authTag };
    }
    exports2.encryptAES128CCM = encryptAES128CCM;
    function decryptAES128CCM(key2, iv, ciphertext, additionalData, authTag) {
      const algorithm = `aes-128-ccm`;
      const decipher = crypto2.createDecipheriv(algorithm, key2, iv, {
        authTagLength: authTag.length
      });
      decipher.setAuthTag(authTag);
      decipher.setAAD(additionalData, { plaintextLength: ciphertext.length });
      const plaintext = decipher.update(ciphertext);
      let authOK = false;
      try {
        decipher.final();
        authOK = true;
      } catch (e) {
      }
      return { plaintext, authOK };
    }
    exports2.decryptAES128CCM = decryptAES128CCM;
  }
});

// ../core/build/security/shared_safe.js
var require_shared_safe2 = __commonJS({
  "../core/build/security/shared_safe.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidDSK = exports2.tryParseDSKFromQRCodeString = void 0;
    function tryParseDSKFromQRCodeString(qr) {
      qr = qr.trim();
      if (qr.startsWith("zws2dsk:")) {
        qr = qr.slice("zws2dsk:".length);
      }
      if (isValidDSK(qr)) {
        return qr;
      }
    }
    exports2.tryParseDSKFromQRCodeString = tryParseDSKFromQRCodeString;
    function isValidDSK(dsk) {
      const patternMatches = /^(\d{5}-){7}\d{5}$/.test(dsk);
      if (!patternMatches)
        return false;
      return dsk.split("-").map((p) => parseInt(p, 10)).every((p) => p <= 65535);
    }
    exports2.isValidDSK = isValidDSK;
  }
});

// ../core/build/security/DSK.js
var require_DSK = __commonJS({
  "../core/build/security/DSK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.authHomeIdFromDSK = exports2.nwiHomeIdFromDSK = exports2.dskFromString = exports2.dskToString = void 0;
    var strings_1 = require_strings();
    var ZWaveError_1 = require_ZWaveError();
    var shared_safe_1 = require_shared_safe2();
    function dskToString(dsk) {
      if (dsk.length !== 16) {
        throw new ZWaveError_1.ZWaveError(`DSK length must be 16 bytes, got ${dsk.length}`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
      }
      let ret = "";
      for (let i2 = 0; i2 < 16; i2 += 2) {
        if (i2 > 0)
          ret += "-";
        ret += (0, strings_1.padStart)(dsk.readUInt16BE(i2).toString(10), 5, "0");
      }
      return ret;
    }
    exports2.dskToString = dskToString;
    function dskFromString(dsk) {
      if (!(0, shared_safe_1.isValidDSK)(dsk)) {
        throw new ZWaveError_1.ZWaveError(`The DSK must be in the form "aaaaa-bbbbb-ccccc-ddddd-eeeee-fffff-11111-22222"`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
      }
      const ret = Buffer.allocUnsafe(16);
      const parts = dsk.split("-");
      for (let i2 = 0; i2 < 8; i2++) {
        const partAsNumber = parseInt(parts[i2], 10);
        ret.writeUInt16BE(partAsNumber, i2 * 2);
      }
      return ret;
    }
    exports2.dskFromString = dskFromString;
    function nwiHomeIdFromDSK(dsk) {
      const ret = Buffer.allocUnsafe(4);
      dsk.copy(ret, 0, 8, 12);
      ret[0] |= 192;
      ret[3] &= 254;
      return ret;
    }
    exports2.nwiHomeIdFromDSK = nwiHomeIdFromDSK;
    function authHomeIdFromDSK(dsk) {
      const ret = Buffer.allocUnsafe(4);
      dsk.copy(ret, 0, 12, 16);
      ret[0] &= 63;
      ret[3] |= 1;
      return ret;
    }
    exports2.authHomeIdFromDSK = authHomeIdFromDSK;
  }
});

// ../core/build/security/Manager.js
var require_Manager = __commonJS({
  "../core/build/security/Manager.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SecurityManager = exports2.generateEncryptionKey = exports2.generateAuthKey = void 0;
    var crypto_1 = __require("crypto");
    var ZWaveError_1 = require_ZWaveError();
    var crypto_2 = require_crypto();
    var authKeyBase = Buffer.alloc(16, 85);
    var encryptionKeyBase = Buffer.alloc(16, 170);
    function generateAuthKey(networkKey) {
      return (0, crypto_2.encryptAES128ECB)(authKeyBase, networkKey);
    }
    exports2.generateAuthKey = generateAuthKey;
    function generateEncryptionKey(networkKey) {
      return (0, crypto_2.encryptAES128ECB)(encryptionKeyBase, networkKey);
    }
    exports2.generateEncryptionKey = generateEncryptionKey;
    var SecurityManager = class {
      constructor(options) {
        this._nonceStore = /* @__PURE__ */ new Map();
        this._freeNonceIDs = /* @__PURE__ */ new Set();
        this._nonceTimers = /* @__PURE__ */ new Map();
        this.networkKey = options.networkKey;
        this.ownNodeId = options.ownNodeId;
        this.nonceTimeout = options.nonceTimeout;
      }
      get networkKey() {
        return this._networkKey;
      }
      set networkKey(v) {
        if (v.length !== 16) {
          throw new ZWaveError_1.ZWaveError(`The network key must be 16 bytes long!`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        }
        this._networkKey = v;
        this._authKey = generateAuthKey(this._networkKey);
        this._encryptionKey = generateEncryptionKey(this._networkKey);
      }
      get authKey() {
        return this._authKey;
      }
      get encryptionKey() {
        return this._encryptionKey;
      }
      normalizeId(id) {
        let ret;
        if (typeof id === "number") {
          ret = {
            issuer: this.ownNodeId,
            nonceId: id
          };
        } else {
          ret = {
            issuer: id.issuer,
            nonceId: id.nonceId
          };
        }
        return JSON.stringify(ret);
      }
      generateNonce(receiver, length) {
        let nonce;
        let nonceId;
        do {
          nonce = (0, crypto_1.randomBytes)(length);
          nonceId = this.getNonceId(nonce);
        } while (this.hasNonce(nonceId));
        this.setNonce(nonceId, { receiver, nonce }, { free: false });
        return nonce;
      }
      getNonceId(nonce) {
        return nonce[0];
      }
      setNonce(id, entry, { free = true } = {}) {
        const key2 = this.normalizeId(id);
        if (this._nonceTimers.has(key2)) {
          clearTimeout(this._nonceTimers.get(key2));
        }
        this._nonceStore.set(key2, entry);
        if (free)
          this._freeNonceIDs.add(key2);
        this._nonceTimers.set(key2, setTimeout(() => {
          this.expireNonce(key2);
        }, this.nonceTimeout).unref());
      }
      deleteAllNoncesForReceiver(receiver) {
        for (const [key2, entry] of this._nonceStore) {
          if (entry.receiver === receiver) {
            this.deleteNonceInternal(key2);
          }
        }
      }
      deleteNonce(id) {
        var _a2;
        const key2 = this.normalizeId(id);
        const nonceReceiver = (_a2 = this._nonceStore.get(key2)) == null ? void 0 : _a2.receiver;
        this.deleteNonceInternal(key2);
        if (nonceReceiver) {
          this.deleteAllNoncesForReceiver(nonceReceiver);
        }
      }
      deleteNonceInternal(key2) {
        if (this._nonceTimers.has(key2)) {
          clearTimeout(this._nonceTimers.get(key2));
        }
        this._nonceStore.delete(key2);
        this._nonceTimers.delete(key2);
        this._freeNonceIDs.delete(key2);
      }
      expireNonce(key2) {
        this.deleteNonceInternal(key2);
      }
      getNonce(id) {
        var _a2;
        return (_a2 = this._nonceStore.get(this.normalizeId(id))) == null ? void 0 : _a2.nonce;
      }
      hasNonce(id) {
        return this._nonceStore.has(this.normalizeId(id));
      }
      getFreeNonce(nodeId) {
        var _a2;
        for (const key2 of this._freeNonceIDs) {
          const nonceKey = JSON.parse(key2);
          if (nonceKey.issuer === nodeId) {
            this._freeNonceIDs.delete(key2);
            return (_a2 = this._nonceStore.get(key2)) == null ? void 0 : _a2.nonce;
          }
        }
      }
    };
    exports2.SecurityManager = SecurityManager;
  }
});

// ../core/build/security/SecurityClass.js
var require_SecurityClass = __commonJS({
  "../core/build/security/SecurityClass.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHighestSecurityClass = exports2.securityClassOrder = exports2.securityClassIsS2 = exports2.SecurityClass = void 0;
    var SecurityClass2;
    (function(SecurityClass3) {
      SecurityClass3[SecurityClass3["Temporary"] = -2] = "Temporary";
      SecurityClass3[SecurityClass3["None"] = -1] = "None";
      SecurityClass3[SecurityClass3["S2_Unauthenticated"] = 0] = "S2_Unauthenticated";
      SecurityClass3[SecurityClass3["S2_Authenticated"] = 1] = "S2_Authenticated";
      SecurityClass3[SecurityClass3["S2_AccessControl"] = 2] = "S2_AccessControl";
      SecurityClass3[SecurityClass3["S0_Legacy"] = 7] = "S0_Legacy";
    })(SecurityClass2 = exports2.SecurityClass || (exports2.SecurityClass = {}));
    function securityClassIsS2(secClass) {
      return secClass != void 0 && secClass >= SecurityClass2.S2_Unauthenticated && secClass <= SecurityClass2.S2_AccessControl;
    }
    exports2.securityClassIsS2 = securityClassIsS2;
    exports2.securityClassOrder = [
      SecurityClass2.S2_AccessControl,
      SecurityClass2.S2_Authenticated,
      SecurityClass2.S2_Unauthenticated,
      SecurityClass2.S0_Legacy
    ];
    function getHighestSecurityClass(securityClasses) {
      for (const cls of exports2.securityClassOrder) {
        if (securityClasses.includes(cls))
          return cls;
      }
      return SecurityClass2.None;
    }
    exports2.getHighestSecurityClass = getHighestSecurityClass;
  }
});

// ../core/build/util/crc.js
var require_crc = __commonJS({
  "../core/build/util/crc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CRC16_CCITT = void 0;
    function CRC16_CCITT(data, startValue = 7439) {
      let crc = startValue;
      const poly = 4129;
      for (let i2 = 0; i2 < data.length; i2++) {
        for (let bitMask = 128; bitMask !== 0; bitMask >>= 1) {
          const xorFlag = !!(data[i2] & bitMask) !== !!(crc & 32768);
          crc <<= 1;
          if (xorFlag)
            crc ^= poly;
        }
      }
      return crc & 65535;
    }
    exports2.CRC16_CCITT = CRC16_CCITT;
  }
});

// ../core/build/util/graph.js
var require_graph = __commonJS({
  "../core/build/util/graph.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.topologicalSort = exports2.GraphNode = void 0;
    var GraphNode = class {
      constructor(value, edges = []) {
        this.value = value;
        this.edges = new Set(edges);
      }
    };
    exports2.GraphNode = GraphNode;
    function topologicalSort(graph) {
      const ret = [];
      while (graph.length) {
        const nodesWithoutDependencies = graph.filter((node) => node.edges.size === 0);
        if (!nodesWithoutDependencies.length) {
          throw new Error("Circular dependency detected!");
        }
        const newNodes = nodesWithoutDependencies.map((node) => node.value);
        ret.push(...newNodes);
        graph = graph.filter((node) => node.edges.size > 0);
        for (const node of graph) {
          for (const visited of nodesWithoutDependencies) {
            node.edges.delete(visited);
          }
        }
      }
      return ret;
    }
    exports2.topologicalSort = topologicalSort;
  }
});

// ../core/build/util/_Types.js
var require_Types = __commonJS({
  "../core/build/util/_Types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/math/index.js
var require_math = __commonJS({
  "../../node_modules/.store/alcalzone-shared-npm-4.0.8-be62d2a70b/node_modules/alcalzone-shared/math/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.roundTo = exports2.clamp = void 0;
    function clamp(value, min, max) {
      if (min > max) {
        [min, max] = [max, min];
      }
      if (value < min)
        return min;
      if (value > max)
        return max;
      return value;
    }
    exports2.clamp = clamp;
    function roundTo(value, digits) {
      const exp = Math.pow(10, digits);
      return Math.round(value * exp) / exp;
    }
    exports2.roundTo = roundTo;
  }
});

// ../core/build/values/Duration.js
var require_Duration = __commonJS({
  "../core/build/values/Duration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Duration = void 0;
    var math_1 = require_math();
    var ZWaveError_1 = require_ZWaveError();
    var durationStringRegex = /^(?:(?<hoursStr>\d+)h)?(?:(?<minutesStr>\d+)m)?(?:(?<secondsStr>\d+)s)?$/i;
    var Duration = class {
      constructor(value, unit) {
        this.unit = unit;
        switch (unit) {
          case "minutes":
            if (value === 0)
              this.unit = "seconds";
            break;
          case "unknown":
          case "default":
            value = 0;
            break;
        }
        this.value = value;
      }
      get value() {
        return this._value;
      }
      set value(v) {
        this._value = (0, math_1.clamp)(v, 0, 127);
      }
      static parseReport(payload) {
        if (payload == void 0)
          return void 0;
        if (payload === 255)
          return void 0;
        if (payload === 254)
          return new Duration(0, "unknown");
        const isMinutes = !!(payload & 128);
        const value = (payload & 127) + (isMinutes ? 1 : 0);
        return new Duration(value, isMinutes ? "minutes" : "seconds");
      }
      static parseSet(payload) {
        if (payload == void 0)
          return void 0;
        if (payload === 255)
          return new Duration(0, "default");
        const isMinutes = !!(payload & 128);
        const value = (payload & 127) + (isMinutes ? 1 : 0);
        return new Duration(value, isMinutes ? "minutes" : "seconds");
      }
      static parseString(text) {
        if (!text.length)
          return void 0;
        if (text === "default")
          return new Duration(0, "default");
        const match = durationStringRegex.exec(text);
        if (!match)
          return void 0;
        const { hoursStr, minutesStr, secondsStr } = match.groups;
        const hours = hoursStr ? parseInt(hoursStr) : 0;
        const minutes = minutesStr ? parseInt(minutesStr) : 0;
        const seconds = secondsStr ? parseInt(secondsStr) : 0;
        if (hours) {
          if (hours * 60 + minutes <= 127) {
            return new Duration(60 * hours + minutes, "minutes");
          }
        } else if (minutes * 60 + seconds > 127) {
          return new Duration(minutes + Math.round(seconds / 60), "minutes");
        } else {
          return new Duration(minutes * 60 + seconds, "seconds");
        }
      }
      static from(input) {
        if (input instanceof Duration) {
          return input;
        } else if (input) {
          return Duration.parseString(input);
        } else {
          return void 0;
        }
      }
      serializeSet() {
        if (this.unit === "default")
          return 255;
        if (this.unit === "unknown")
          throw new ZWaveError_1.ZWaveError("Set commands don't support unknown durations", ZWaveError_1.ZWaveErrorCodes.CC_Invalid);
        const isMinutes = this.unit === "minutes";
        let payload = isMinutes ? 128 : 0;
        payload += this._value - (isMinutes ? 1 : 0) & 127;
        return payload;
      }
      serializeReport() {
        if (this.unit === "unknown")
          return 254;
        const isMinutes = this.unit === "minutes";
        let payload = isMinutes ? 128 : 0;
        payload += this._value - (isMinutes ? 1 : 0) & 127;
        return payload;
      }
      toJSON() {
        if (this.unit === "default" || this.unit === "unknown")
          return this.unit;
        return {
          value: this.value,
          unit: this.unit
        };
      }
      toMilliseconds() {
        switch (this.unit) {
          case "minutes":
            return this._value * 6e4;
          case "seconds":
            return this._value * 1e3;
        }
      }
      toString() {
        let ret = "";
        switch (this.unit) {
          case "minutes":
            if (this._value > 60) {
              ret += `${Math.floor(this._value / 60)}h`;
            }
            ret += `${this._value % 60}m`;
            return ret;
          case "seconds":
            if (this._value > 60) {
              ret += `${Math.floor(this._value / 60)}m`;
            }
            ret += `${this._value % 60}s`;
            return ret;
          default:
            return this.unit;
        }
      }
    };
    exports2.Duration = Duration;
  }
});

// ../core/build/values/Cache.js
var require_Cache = __commonJS({
  "../core/build/values/Cache.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeCacheValue = exports2.serializeCacheValue = void 0;
    var objects_1 = require_objects();
    var typeguards_1 = require_typeguards();
    var Duration_1 = require_Duration();
    var SPECIAL_TYPE_KEY = "$$type$$";
    function serializeCacheValue(value) {
      if (value instanceof Map) {
        return {
          ...(0, objects_1.composeObject)([...value.entries()].map(([k, v]) => [
            k,
            serializeCacheValue(v)
          ])),
          [SPECIAL_TYPE_KEY]: "map"
        };
      } else if (value instanceof Duration_1.Duration) {
        const valueAsJSON = value.toJSON();
        return {
          ...typeof valueAsJSON === "string" ? { unit: valueAsJSON } : valueAsJSON,
          [SPECIAL_TYPE_KEY]: "duration"
        };
      } else if (Buffer.isBuffer(value)) {
        return {
          [SPECIAL_TYPE_KEY]: "buffer",
          data: value.toString("hex")
        };
      } else if (typeof value === "number" || typeof value === "string" || typeof value === "boolean" || (0, typeguards_1.isObject)(value) || (0, typeguards_1.isArray)(value)) {
        return value;
      }
    }
    exports2.serializeCacheValue = serializeCacheValue;
    function deserializeCacheValue(value) {
      if ((0, typeguards_1.isObject)(value)) {
        const specialType = value[SPECIAL_TYPE_KEY];
        if (specialType === "map") {
          const { [SPECIAL_TYPE_KEY]: _, ...rest } = value;
          return new Map(Object.entries(rest).map(([k, v]) => [/^\d+$/.test(k) ? parseInt(k, 10) : k, v]).map(([k, v]) => [k, deserializeCacheValue(v)]));
        } else if (specialType === "duration") {
          return new Duration_1.Duration(value.value ?? 1, value.unit);
        } else if (specialType === "buffer") {
          return Buffer.from(value.data, "hex");
        }
      }
      return value;
    }
    exports2.deserializeCacheValue = deserializeCacheValue;
  }
});

// ../core/build/values/CacheBackedMap.js
var require_CacheBackedMap = __commonJS({
  "../core/build/values/CacheBackedMap.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CacheBackedMap = void 0;
    var CacheBackedMap = class {
      constructor(cache3, cacheKeys) {
        this.cache = cache3;
        this.cacheKeys = cacheKeys;
        this.map = /* @__PURE__ */ new Map();
        for (const [key2, value] of this.cache.entries()) {
          if (key2.startsWith(this.cacheKeys.prefix)) {
            const suffix = key2.substring(this.cacheKeys.prefix.length);
            const suffixKey = this.cacheKeys.suffixDeserializer(suffix);
            if (suffixKey !== void 0) {
              this.map.set(suffixKey, value);
            }
          }
        }
        this.forEach = this.map.forEach.bind(this.map);
        this.get = this.map.get.bind(this.map);
        this.has = this.map.has.bind(this.map);
        this.entries = this.map.entries.bind(this.map);
        this.keys = this.map.keys.bind(this.map);
        this.values = this.map.values.bind(this.map);
        this[Symbol.iterator] = this.map[Symbol.iterator].bind(this.map);
      }
      keyToCacheKey(key2) {
        return this.cacheKeys.prefix + this.cacheKeys.suffixSerializer(key2);
      }
      clear() {
        for (const key2 of this.map.keys()) {
          this.cache.delete(this.keyToCacheKey(key2));
        }
        this.map.clear();
      }
      delete(key2) {
        const ret = this.map.delete(key2);
        if (ret)
          this.cache.delete(this.keyToCacheKey(key2));
        return ret;
      }
      set(key2, value) {
        this.map.set(key2, value);
        this.cache.set(this.keyToCacheKey(key2), value);
        return this;
      }
      get size() {
        return this.map.size;
      }
      get [Symbol.toStringTag]() {
        return "Map";
      }
    };
    exports2.CacheBackedMap = CacheBackedMap;
  }
});

// ../core/build/values/Primitive.js
var require_Primitive = __commonJS({
  "../core/build/values/Primitive.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.encodePartial = exports2.parsePartial = exports2.encodeNodeBitMask = exports2.parseNodeBitMask = exports2.encodeBitMask = exports2.parseBitMask = exports2.encodeFloatWithScale = exports2.getIntegerLimits = exports2.getMinIntegerSize = exports2.IntegerLimits = exports2.parseFloatWithScale = exports2.parseNumber = exports2.parseMaybeNumber = exports2.encodeMaybeBoolean = exports2.encodeBoolean = exports2.parseBoolean = exports2.parseMaybeBoolean = exports2.unknownBoolean = exports2.unknownNumber = void 0;
    var consts_1 = require_consts();
    var ZWaveError_1 = require_ZWaveError();
    var misc_1 = require_misc();
    exports2.unknownNumber = "unknown";
    exports2.unknownBoolean = "unknown";
    function parseMaybeBoolean(val, preserveUnknown = true) {
      return val === 254 ? preserveUnknown ? exports2.unknownBoolean : void 0 : parseBoolean(val);
    }
    exports2.parseMaybeBoolean = parseMaybeBoolean;
    function parseBoolean(val) {
      return val === 0 ? false : val === 255 ? true : void 0;
    }
    exports2.parseBoolean = parseBoolean;
    function encodeBoolean(val) {
      return val ? 255 : 0;
    }
    exports2.encodeBoolean = encodeBoolean;
    function encodeMaybeBoolean(val) {
      return val === "unknown" ? 254 : val ? 255 : 0;
    }
    exports2.encodeMaybeBoolean = encodeMaybeBoolean;
    function parseMaybeNumber(val) {
      return val === 254 ? exports2.unknownNumber : parseNumber(val);
    }
    exports2.parseMaybeNumber = parseMaybeNumber;
    function parseNumber(val) {
      return val <= 99 ? val : val === 255 ? 99 : void 0;
    }
    exports2.parseNumber = parseNumber;
    function parseFloatWithScale(payload, allowEmpty = false) {
      (0, misc_1.validatePayload)(payload.length >= 1);
      const precision = (payload[0] & 224) >>> 5;
      const scale = (payload[0] & 24) >>> 3;
      const size = payload[0] & 7;
      if (allowEmpty && size === 0) {
        (0, misc_1.validatePayload)(precision === 0, scale === 0);
        return { bytesRead: 1 };
      } else {
        (0, misc_1.validatePayload)(size >= 1, size <= 4, payload.length >= 1 + size);
        const value = payload.readIntBE(1, size) / Math.pow(10, precision);
        return { value, scale, bytesRead: 1 + size };
      }
    }
    exports2.parseFloatWithScale = parseFloatWithScale;
    function getPrecision(num2) {
      if (!Number.isFinite(num2))
        return 0;
      let e = 1;
      let p = 0;
      while (Math.round(num2 * e) / e !== num2) {
        e *= 10;
        p++;
      }
      return p;
    }
    exports2.IntegerLimits = Object.freeze({
      UInt8: Object.freeze({ min: 0, max: 255 }),
      UInt16: Object.freeze({ min: 0, max: 65535 }),
      UInt24: Object.freeze({ min: 0, max: 16777215 }),
      UInt32: Object.freeze({ min: 0, max: 4294967295 }),
      Int8: Object.freeze({ min: -128, max: 127 }),
      Int16: Object.freeze({ min: -32768, max: 32767 }),
      Int24: Object.freeze({ min: -8388608, max: 8388607 }),
      Int32: Object.freeze({ min: -2147483648, max: 2147483647 })
    });
    function getMinIntegerSize(value, signed) {
      if (signed) {
        if (value >= exports2.IntegerLimits.Int8.min && value <= exports2.IntegerLimits.Int8.max)
          return 1;
        else if (value >= exports2.IntegerLimits.Int16.min && value <= exports2.IntegerLimits.Int16.max)
          return 2;
        else if (value >= exports2.IntegerLimits.Int32.min && value <= exports2.IntegerLimits.Int32.max)
          return 4;
      } else if (value >= 0) {
        if (value <= exports2.IntegerLimits.UInt8.max)
          return 1;
        if (value <= exports2.IntegerLimits.UInt16.max)
          return 2;
        if (value <= exports2.IntegerLimits.UInt32.max)
          return 4;
      }
    }
    exports2.getMinIntegerSize = getMinIntegerSize;
    function getIntegerLimits(size, signed) {
      return exports2.IntegerLimits[`${signed ? "" : "U"}Int${size * 8}`];
    }
    exports2.getIntegerLimits = getIntegerLimits;
    function encodeFloatWithScale(value, scale, override = {}) {
      const precision = override.precision ?? Math.min(getPrecision(value), 7);
      value = Math.round(value * Math.pow(10, precision));
      let size = getMinIntegerSize(value, true);
      if (size == void 0) {
        throw new ZWaveError_1.ZWaveError(`Cannot encode the value ${value} because its too large or too small to fit into 4 bytes`, ZWaveError_1.ZWaveErrorCodes.Arithmetic);
      } else if (override.size != void 0 && override.size > size) {
        size = override.size;
      }
      const ret = Buffer.allocUnsafe(1 + size);
      ret[0] = (precision & 7) << 5 | (scale & 3) << 3 | size & 7;
      ret.writeIntBE(value, 1, size);
      return ret;
    }
    exports2.encodeFloatWithScale = encodeFloatWithScale;
    function parseBitMask(mask2, startValue = 1) {
      const numBits = mask2.length * 8;
      const ret = [];
      for (let index = 1; index <= numBits; index++) {
        const byteNum = index - 1 >>> 3;
        const bitNum = (index - 1) % 8;
        if ((mask2[byteNum] & 2 ** bitNum) !== 0)
          ret.push(index + startValue - 1);
      }
      return ret;
    }
    exports2.parseBitMask = parseBitMask;
    function encodeBitMask(values, maxValue, startValue = 1) {
      const numBytes = Math.ceil((maxValue - startValue + 1) / 8);
      const ret = Buffer.alloc(numBytes, 0);
      for (let val = startValue; val <= maxValue; val++) {
        if (values.indexOf(val) === -1)
          continue;
        const byteNum = val - startValue >>> 3;
        const bitNum = (val - startValue) % 8;
        ret[byteNum] |= 2 ** bitNum;
      }
      return ret;
    }
    exports2.encodeBitMask = encodeBitMask;
    function parseNodeBitMask(mask2) {
      return parseBitMask(mask2.slice(0, consts_1.NUM_NODEMASK_BYTES));
    }
    exports2.parseNodeBitMask = parseNodeBitMask;
    function encodeNodeBitMask(nodeIDs) {
      return encodeBitMask(nodeIDs, consts_1.NUM_NODEMASK_BYTES);
    }
    exports2.encodeNodeBitMask = encodeNodeBitMask;
    function parsePartial(value, bitMask, signed) {
      const shift = (0, misc_1.getMinimumShiftForBitMask)(bitMask);
      const width = (0, misc_1.getBitMaskWidth)(bitMask);
      let ret = (value & bitMask) >>> shift;
      if (signed && !!(ret & 2 ** (width - 1))) {
        ret = ~(~ret & bitMask >>> shift);
      }
      return ret;
    }
    exports2.parsePartial = parsePartial;
    function encodePartial(fullValue, partialValue, bitMask) {
      const ret = fullValue & ~bitMask | partialValue << (0, misc_1.getMinimumShiftForBitMask)(bitMask) & bitMask;
      return ret >>> 0;
    }
    exports2.encodePartial = encodePartial;
  }
});

// ../core/build/values/Metadata.js
var require_Metadata = __commonJS({
  "../core/build/values/Metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ValueMetadata = exports2.ConfigValueFormat = exports2.enumValuesToMetadataStates = exports2.getNumericEnumValues = void 0;
    var safe_1 = require_index_safe();
    var Primitive_1 = require_Primitive();
    var isIntegerRegex = /^\d+$/;
    function getNumericEnumValues(enumeration) {
      return Object.keys(enumeration).filter((val) => isIntegerRegex.test(val)).map((val) => parseInt(val, 10));
    }
    exports2.getNumericEnumValues = getNumericEnumValues;
    function enumValuesToMetadataStates(enumeration, values) {
      const ret = {};
      if (values == void 0)
        values = getNumericEnumValues(enumeration);
      for (const value of values) {
        ret[value] = (0, safe_1.getEnumMemberName)(enumeration, value);
      }
      return ret;
    }
    exports2.enumValuesToMetadataStates = enumValuesToMetadataStates;
    var define2 = () => (definition) => {
      return definition;
    };
    var defineAny = define2();
    var defineNumeric = define2();
    var defineBoolean = define2();
    var defineString = define2();
    var defineBuffer = define2();
    var defineDuration = define2();
    var ConfigValueFormat;
    (function(ConfigValueFormat2) {
      ConfigValueFormat2[ConfigValueFormat2["SignedInteger"] = 0] = "SignedInteger";
      ConfigValueFormat2[ConfigValueFormat2["UnsignedInteger"] = 1] = "UnsignedInteger";
      ConfigValueFormat2[ConfigValueFormat2["Enumerated"] = 2] = "Enumerated";
      ConfigValueFormat2[ConfigValueFormat2["BitField"] = 3] = "BitField";
    })(ConfigValueFormat = exports2.ConfigValueFormat || (exports2.ConfigValueFormat = {}));
    var _default = defineAny({
      type: "any",
      readable: true,
      writeable: true
    });
    var _readonly = {
      writeable: false
    };
    var _writeonly = {
      readable: false
    };
    var Any = defineAny({
      ..._default
    });
    var ReadOnly = defineAny({
      ..._default,
      ..._readonly
    });
    var WriteOnly = defineAny({
      ..._default,
      ..._writeonly
    });
    var Boolean2 = defineBoolean({
      ..._default,
      type: "boolean"
    });
    var ReadOnlyBoolean = defineBoolean({
      ...Boolean2,
      ..._readonly
    });
    var WriteOnlyBoolean = defineBoolean({
      ...Boolean2,
      ..._writeonly
    });
    var Number2 = defineNumeric({
      ..._default,
      type: "number"
    });
    var ReadOnlyNumber = defineNumeric({
      ...Number2,
      ..._readonly
    });
    var WriteOnlyNumber = defineNumeric({
      ...Number2,
      ..._writeonly
    });
    var UInt8 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.UInt8
    });
    var ReadOnlyUInt8 = defineNumeric({
      ...UInt8,
      ..._readonly
    });
    var WriteOnlyUInt8 = defineNumeric({
      ...UInt8,
      ..._writeonly
    });
    var UInt16 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.UInt16
    });
    var ReadOnlyUInt16 = defineNumeric({
      ...UInt16,
      ..._readonly
    });
    var WriteOnlyUInt16 = defineNumeric({
      ...UInt16,
      ..._writeonly
    });
    var UInt24 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.UInt24
    });
    var ReadOnlyUInt24 = defineNumeric({
      ...UInt24,
      ..._readonly
    });
    var WriteOnlyUInt24 = defineNumeric({
      ...UInt24,
      ..._writeonly
    });
    var UInt32 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.UInt32
    });
    var ReadOnlyUInt32 = defineNumeric({
      ...UInt32,
      ..._readonly
    });
    var WriteOnlyUInt32 = defineNumeric({
      ...UInt32,
      ..._writeonly
    });
    var Int8 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.Int8
    });
    var ReadOnlyInt8 = defineNumeric({
      ...Int8,
      ..._readonly
    });
    var WriteOnlyInt8 = defineNumeric({
      ...Int8,
      ..._writeonly
    });
    var Int16 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.Int16
    });
    var ReadOnlyInt16 = defineNumeric({
      ...Int16,
      ..._readonly
    });
    var WriteOnlyInt16 = defineNumeric({
      ...Int16,
      ..._writeonly
    });
    var Int24 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.Int24
    });
    var ReadOnlyInt24 = defineNumeric({
      ...Int24,
      ..._readonly
    });
    var WriteOnlyInt24 = defineNumeric({
      ...Int24,
      ..._writeonly
    });
    var Int32 = defineNumeric({
      ..._default,
      type: "number",
      ...Primitive_1.IntegerLimits.Int32
    });
    var ReadOnlyInt32 = defineNumeric({
      ...Int32,
      ..._readonly
    });
    var WriteOnlyInt32 = defineNumeric({
      ...Int32,
      ..._writeonly
    });
    var String2 = defineString({
      ..._default,
      type: "string"
    });
    var ReadOnlyString = defineString({
      ...String2,
      ..._readonly
    });
    var WriteOnlyString = defineString({
      ...String2,
      ..._writeonly
    });
    var Color = defineString({
      ...String2,
      type: "color"
    });
    var ReadOnlyColor = defineString({
      ...Color,
      ..._readonly
    });
    var WriteOnlyColor = defineString({
      ...Color,
      ..._writeonly
    });
    var Level = defineNumeric({
      ...UInt8,
      max: 99
    });
    var ReadOnlyLevel = defineNumeric({
      ...Level,
      ..._readonly
    });
    var WriteOnlyLevel = defineNumeric({
      ...Level,
      ..._writeonly
    });
    var _Duration = defineDuration({
      ..._default,
      type: "duration"
    });
    var ReadOnlyDuration = defineDuration({
      ..._Duration,
      ..._readonly
    });
    var WriteOnlyDuration = defineDuration({
      ..._Duration,
      ..._writeonly
    });
    var _Buffer = defineBuffer({
      ..._default,
      type: "buffer"
    });
    var ReadOnlyBuffer = defineBuffer({
      ..._Buffer,
      ..._readonly
    });
    var WriteOnlyBuffer = defineBuffer({
      ..._Buffer,
      ..._writeonly
    });
    exports2.ValueMetadata = {
      Any: Object.freeze(Any),
      ReadOnly: Object.freeze(ReadOnly),
      WriteOnly: Object.freeze(WriteOnly),
      Number: Object.freeze(Number2),
      ReadOnlyNumber: Object.freeze(ReadOnlyNumber),
      WriteOnlyNumber: Object.freeze(WriteOnlyNumber),
      UInt8: Object.freeze(UInt8),
      UInt16: Object.freeze(UInt16),
      UInt24: Object.freeze(UInt24),
      UInt32: Object.freeze(UInt32),
      Int8: Object.freeze(Int8),
      Int16: Object.freeze(Int16),
      Int24: Object.freeze(Int24),
      Int32: Object.freeze(Int32),
      ReadOnlyUInt8: Object.freeze(ReadOnlyUInt8),
      ReadOnlyUInt16: Object.freeze(ReadOnlyUInt16),
      ReadOnlyUInt24: Object.freeze(ReadOnlyUInt24),
      ReadOnlyUInt32: Object.freeze(ReadOnlyUInt32),
      ReadOnlyInt8: Object.freeze(ReadOnlyInt8),
      ReadOnlyInt16: Object.freeze(ReadOnlyInt16),
      ReadOnlyInt24: Object.freeze(ReadOnlyInt24),
      ReadOnlyInt32: Object.freeze(ReadOnlyInt32),
      WriteOnlyUInt8: Object.freeze(WriteOnlyUInt8),
      WriteOnlyUInt16: Object.freeze(WriteOnlyUInt16),
      WriteOnlyUInt24: Object.freeze(WriteOnlyUInt24),
      WriteOnlyUInt32: Object.freeze(WriteOnlyUInt32),
      WriteOnlyInt8: Object.freeze(WriteOnlyInt8),
      WriteOnlyInt16: Object.freeze(WriteOnlyInt16),
      WriteOnlyInt24: Object.freeze(WriteOnlyInt24),
      WriteOnlyInt32: Object.freeze(WriteOnlyInt32),
      Level: Object.freeze(Level),
      ReadOnlyLevel: Object.freeze(ReadOnlyLevel),
      WriteOnlyLevel: Object.freeze(WriteOnlyLevel),
      Boolean: Object.freeze(Boolean2),
      ReadOnlyBoolean: Object.freeze(ReadOnlyBoolean),
      WriteOnlyBoolean: Object.freeze(WriteOnlyBoolean),
      String: Object.freeze(String2),
      ReadOnlyString: Object.freeze(ReadOnlyString),
      WriteOnlyString: Object.freeze(WriteOnlyString),
      Color: Object.freeze(Color),
      ReadOnlyColor: Object.freeze(ReadOnlyColor),
      WriteOnlyColor: Object.freeze(WriteOnlyColor),
      Duration: Object.freeze(_Duration),
      ReadOnlyDuration: Object.freeze(ReadOnlyDuration),
      WriteOnlyDuration: Object.freeze(WriteOnlyDuration),
      Buffer: Object.freeze(_Buffer),
      ReadOnlyBuffer: Object.freeze(ReadOnlyBuffer),
      WriteOnlyBuffer: Object.freeze(WriteOnlyBuffer)
    };
  }
});

// ../core/build/values/Timeout.js
var require_Timeout = __commonJS({
  "../core/build/values/Timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Timeout = void 0;
    var math_1 = require_math();
    var Timeout = class {
      constructor(value, unit) {
        this.unit = unit;
        if (value === 0)
          this.unit = "none";
        switch (unit) {
          case "none":
          case "infinite":
            value = 0;
            break;
        }
        this.value = value;
      }
      get value() {
        return this._value;
      }
      set value(v) {
        this._value = (0, math_1.clamp)(v, 0, this.unit === "seconds" ? 60 : 191);
      }
      static parse(payload) {
        if (payload == void 0)
          return void 0;
        if (payload === 255)
          return new Timeout(0, "infinite");
        const isMinutes = !!(payload & 64);
        const value = (payload & 63) + (isMinutes ? 1 : 0);
        return new Timeout(value, isMinutes ? "minutes" : "seconds");
      }
      serialize() {
        if (this.unit === "infinite")
          return 255;
        if (this.unit === "none")
          return 0;
        const isMinutes = this.unit === "minutes";
        return (isMinutes ? 64 : 0) | this._value & 63;
      }
      toJSON() {
        if (this.unit === "none" || this.unit === "infinite")
          return this.unit;
        return {
          value: this.value,
          unit: this.unit
        };
      }
      toMilliseconds() {
        switch (this.unit) {
          case "none":
            return 0;
          case "minutes":
            return this._value * 6e4;
          case "seconds":
            return this._value * 1e3;
          case "infinite":
            return Number.POSITIVE_INFINITY;
        }
      }
      toString() {
        switch (this.unit) {
          case "minutes":
            return `[Timeout: ${this._value}${this.value === 1 ? "minute" : "minutes"}]`;
          case "seconds":
            return `[Timeout: ${this._value}${this.value === 1 ? "second" : "seconds"}]`;
          default:
            return `[Timeout: ${this.unit}]`;
        }
      }
    };
    exports2.Timeout = Timeout;
  }
});

// ../core/build/values/_Types.js
var require_Types2 = __commonJS({
  "../core/build/values/_Types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// ../core/build/index_safe.js
var require_index_safe2 = __commonJS({
  "../core/build/index_safe.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_ICommandClass(), exports2);
    __exportStar(require_IZWaveEndpoint(), exports2);
    __exportStar(require_IZWaveNode(), exports2);
    __exportStar(require_CommandClasses(), exports2);
    __exportStar(require_ControllerCapabilities(), exports2);
    __exportStar(require_LibraryTypes(), exports2);
    __exportStar(require_NodeInfo(), exports2);
    __exportStar(require_Protocols(), exports2);
    __exportStar(require_RFRegion(), exports2);
    __exportStar(require_ZWaveApiVersion(), exports2);
    __exportStar(require_consts(), exports2);
    __exportStar(require_ZWaveError(), exports2);
    __exportStar(require_shared_safe(), exports2);
    __exportStar(require_DSK(), exports2);
    __exportStar(require_SecurityClass(), exports2);
    __exportStar(require_shared_safe2(), exports2);
    __exportStar(require_crc(), exports2);
    __exportStar(require_graph(), exports2);
    __exportStar(require_misc(), exports2);
    __exportStar(require_Types(), exports2);
    __exportStar(require_Cache(), exports2);
    __exportStar(require_CacheBackedMap(), exports2);
    __exportStar(require_Duration(), exports2);
    __exportStar(require_Metadata(), exports2);
    __exportStar(require_Primitive(), exports2);
    __exportStar(require_Timeout(), exports2);
    __exportStar(require_Types2(), exports2);
  }
});

// ../../node_modules/.store/dayjs-npm-1.11.5-a825142dc5/node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "../../node_modules/.store/dayjs-npm-1.11.5-a825142dc5/node_modules/dayjs/dayjs.min.js"(exports2, module2) {
    !function(t, e) {
      "object" == typeof exports2 && "undefined" != typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
    }(exports2, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i2 = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, g = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i3 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i3, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i3 = e2.clone().add(r2, f), s2 = n2 - i3 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i3) / (s2 ? i3 - u2 : u2 - i3)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i2, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return void 0 === t2;
      } }, v = "en", D = {};
      D[v] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function t2(e2, n2, r2) {
        var i3;
        if (!e2)
          return v;
        if ("string" == typeof e2) {
          var s2 = e2.toLowerCase();
          D[s2] && (i3 = s2), n2 && (D[s2] = n2, i3 = s2);
          var u2 = e2.split("-");
          if (!i3 && u2.length > 1)
            return t2(u2[0]);
        } else {
          var a2 = e2.name;
          D[a2] = e2, i3 = a2;
        }
        return !r2 && i3 && (v = i3), i3 || !r2 && v;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = "object" == typeof e2 ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = g;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (null === e2)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if ("string" == typeof e2 && !/Z$/i.test(e2)) {
              var r2 = e2.match(l);
              if (r2) {
                var i3 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i3, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === $);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $2 = function(t3, e3) {
            var i3 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i3 : i3.endOf(a);
          }, l2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? $2(1, 0) : $2(31, 11);
            case f:
              return r2 ? $2(1, M3) : $2(0, M3 + 1);
            case o:
              var v2 = this.$locale().weekStart || 0, D2 = (y2 < v2 ? y2 + 7 : y2) - v2;
              return $2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a:
            case d:
              return l2(g2 + "Hours", 0);
            case u:
              return l2(g2 + "Minutes", 1);
            case s:
              return l2(g2 + "Seconds", 2);
            case i2:
              return l2(g2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i2] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            $2 && this.$d[$2](l2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, $2 = this;
          r2 = Number(r2);
          var l2 = O.p(h2), y2 = function(t2) {
            var e2 = w($2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
          };
          if (l2 === f)
            return this.set(f, this.$M + r2);
          if (l2 === c)
            return this.set(c, this.$y + r2);
          if (l2 === a)
            return y2(1);
          if (l2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i2] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || $;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i3 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i4, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i4[n3].slice(0, s3);
          }, c2 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i3 };
          return r2.replace(y, function(t3, e3) {
            return e3 || l2[t3] || i3.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, $2) {
          var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, v2 = O.m(this, M3);
          return v2 = (l2 = {}, l2[c] = v2 / 12, l2[f] = v2, l2[h] = v2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i2] = g2 / t, l2)[y2] || g2, $2 ? v2 : O.a(v2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), T = _.prototype;
      return w.prototype = T, [["$ms", r], ["$s", i2], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        T[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  }
});

// ../core/build/util/date.js
var require_date = __commonJS({
  "../core/build/util/date.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.formatDate = exports2.timespan = exports2.highResTimestamp = exports2.getDSTInfo = exports2.getDefaultDSTInfo = void 0;
    var dayjs_1 = __importDefault(require_dayjs_min());
    function getDefaultDSTInfo(defaultOffset) {
      const thisYear = new Date().getUTCFullYear();
      if (defaultOffset == void 0)
        defaultOffset = -new Date().getTimezoneOffset();
      return {
        startDate: new Date(Date.UTC(thisYear, 2, 31, 1)),
        endDate: new Date(Date.UTC(thisYear, 9, 31, 1)),
        standardOffset: defaultOffset,
        dstOffset: defaultOffset
      };
    }
    exports2.getDefaultDSTInfo = getDefaultDSTInfo;
    function findSwitchDate(date1, date2, offset) {
      const stepSize = 6e4;
      function middleDate(date12, date22) {
        const middleTime = Math.floor((date12.getTime() + date22.getTime()) / 2 / stepSize) * stepSize;
        return new Date(middleTime);
      }
      while (date1 < date2) {
        const mid = middleDate(date1, date2);
        if (mid.getTimezoneOffset() === offset) {
          date2 = mid;
        } else {
          date1 = new Date(mid.getTime() + stepSize);
        }
      }
      if (date1.getTimezoneOffset() !== offset)
        return void 0;
      return date1;
    }
    function getDSTInfo(now = new Date()) {
      const halfAYearAgo = (0, dayjs_1.default)(now).subtract(6, "months").toDate();
      const inAHalfYear = (0, dayjs_1.default)(now).add(6, "months").toDate();
      if (now.getTimezoneOffset() === halfAYearAgo.getTimezoneOffset() || now.getTimezoneOffset() === inAHalfYear.getTimezoneOffset()) {
        return getDefaultDSTInfo();
      }
      const offsets = [
        -now.getTimezoneOffset(),
        -inAHalfYear.getTimezoneOffset()
      ];
      const dates = [
        findSwitchDate(halfAYearAgo, now, -offsets[0]),
        findSwitchDate(now, inAHalfYear, -offsets[1])
      ];
      if (dates[0] == void 0 || dates[1] == void 0) {
        return getDefaultDSTInfo();
      }
      if (offsets[0] > offsets[1]) {
        return {
          startDate: dates[0],
          endDate: dates[1],
          dstOffset: offsets[0],
          standardOffset: offsets[1]
        };
      } else {
        return {
          startDate: dates[1],
          endDate: dates[0],
          dstOffset: offsets[1],
          standardOffset: offsets[0]
        };
      }
    }
    exports2.getDSTInfo = getDSTInfo;
    function highResTimestamp() {
      const [s, ns] = process.hrtime();
      return s * 1e9 + ns;
    }
    exports2.highResTimestamp = highResTimestamp;
    exports2.timespan = Object.freeze({
      seconds: (num2) => Math.round(num2 * 1e3),
      minutes: (num2) => exports2.timespan.seconds(num2 * 60),
      hours: (num2) => exports2.timespan.minutes(num2 * 60),
      days: (num2) => exports2.timespan.hours(num2 * 24)
    });
    function formatDate(date, format) {
      return (0, dayjs_1.default)(date).format(format);
    }
    exports2.formatDate = formatDate;
  }
});

// ../core/build/security/ctr_drbg.js
var require_ctr_drbg = __commonJS({
  "../core/build/security/ctr_drbg.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CtrDRBG = void 0;
    var bufferUtils_1 = require_bufferUtils();
    var crypto_1 = require_crypto();
    var MAX_GENERATE_LENGTH = 65536;
    var CtrDRBG = class {
      constructor(bits, derivation, entropy, nonce, pers) {
        this.ctr = Buffer.alloc(16, 0);
        this.keySize = bits >>> 3;
        this.blkSize = 16;
        this.entSize = this.keySize + this.blkSize;
        this.slab = Buffer.alloc(this.entSize);
        this.K = this.slab.slice(0, this.keySize);
        this.V = this.slab.slice(this.keySize);
        this.derivation = derivation;
        this.initialized = false;
        if (entropy)
          this.init(entropy, nonce, pers);
      }
      init(entropy, nonce = Buffer.alloc(0), pers = Buffer.alloc(0)) {
        let seed;
        if (this.derivation) {
          seed = this.derive(entropy, nonce, pers);
        } else {
          if (entropy.length + nonce.length > this.entSize)
            throw new Error("Entropy is too long.");
          if (pers.length > this.entSize)
            throw new Error("Personalization string is too long.");
          seed = Buffer.alloc(this.entSize, 0);
          entropy.copy(seed, 0);
          nonce.copy(seed, entropy.length);
          for (let i2 = 0; i2 < pers.length; i2++)
            seed[i2] ^= pers[i2];
        }
        this.slab.fill(0);
        this.V.copy(this.ctr, 0);
        this.update(seed);
        this.initialized = true;
        return this;
      }
      reseed(entropy, add = Buffer.alloc(0)) {
        if (!this.initialized)
          throw new Error("DRBG not initialized.");
        let seed;
        if (this.derivation) {
          seed = this.derive(entropy, add);
        } else {
          if (add.length > this.entSize)
            throw new Error("Additional data is too long.");
          seed = Buffer.alloc(this.entSize, 0);
          entropy.copy(seed, 0);
          for (let i2 = 0; i2 < add.length; i2++)
            seed[i2] ^= add[i2];
        }
        this.update(seed);
        return this;
      }
      next() {
        (0, bufferUtils_1.increment)(this.ctr);
        return (0, crypto_1.encryptAES128ECB)(this.ctr, this.K);
      }
      generate(len, add) {
        if (!this.initialized)
          throw new Error("DRBG not initialized.");
        if (len > MAX_GENERATE_LENGTH)
          throw new Error("Requested length is too long.");
        if (add && add.length > 0) {
          if (this.derivation)
            add = this.derive(add);
          this.update(add);
        }
        const blocks = Math.ceil(len / this.blkSize);
        const out = Buffer.alloc(blocks * this.blkSize);
        for (let i2 = 0; i2 < blocks; i2++) {
          const ciphertext = this.next();
          ciphertext.copy(out, i2 * this.blkSize);
        }
        this.update(add);
        this.initialized = true;
        return out.slice(0, len);
      }
      update(seed = Buffer.alloc(0)) {
        if (seed.length > this.entSize)
          throw new Error("Seed is too long.");
        const newSlab = Buffer.alloc(this.slab.length, 0);
        for (let i2 = 0; i2 < this.entSize; i2 += this.blkSize) {
          this.next().copy(newSlab, i2);
        }
        for (let i2 = 0; i2 < seed.length; i2++)
          newSlab[i2] ^= seed[i2];
        newSlab.copy(this.slab, 0);
        this.V.copy(this.ctr, 0);
        return this;
      }
      serialize(...input) {
        const N = this.entSize;
        let L = 0;
        for (const item of input)
          L += item.length;
        let size = this.blkSize + 4 + 4 + L + 1;
        if (size % this.blkSize)
          size += this.blkSize - size % this.blkSize;
        const S = Buffer.alloc(size, 0);
        let pos = this.blkSize;
        S.writeUInt32BE(L, pos);
        pos += 4;
        S.writeUInt32BE(N, pos);
        pos += 4;
        for (const item of input)
          pos += item.copy(S, pos);
        S[pos++] = 128;
        return S;
      }
      derive(...input) {
        const S = this.serialize(...input);
        const N = S.length / this.blkSize;
        const K = Buffer.alloc(this.keySize);
        const blocks = Math.ceil(this.entSize / this.blkSize);
        const slab = Buffer.alloc(blocks * this.blkSize);
        const out = Buffer.alloc(blocks * this.blkSize);
        const chain = Buffer.alloc(this.blkSize);
        for (let i2 = 0; i2 < K.length; i2++)
          K[i2] = i2;
        for (let i2 = 0; i2 < blocks; i2++) {
          chain.fill(0);
          S.writeUInt32BE(i2, 0);
          for (let j = 0; j < N; j++) {
            for (let k2 = 0; k2 < chain.length; k2++)
              chain[k2] ^= S[j * this.blkSize + k2];
            (0, crypto_1.encryptAES128ECB)(chain, K).copy(chain, 0);
          }
          chain.copy(slab, i2 * this.blkSize);
        }
        const k = slab.slice(0, this.keySize);
        const x = slab.slice(this.keySize, this.entSize);
        for (let i2 = 0; i2 < blocks; i2++) {
          (0, crypto_1.encryptAES128ECB)(x, k).copy(x, 0);
          x.copy(out, i2 * this.blkSize);
        }
        return out.slice(0, this.entSize);
      }
    };
    exports2.CtrDRBG = CtrDRBG;
  }
});

// ../core/build/security/Manager2.js
var require_Manager2 = __commonJS({
  "../core/build/security/Manager2.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SecurityManager2 = exports2.MPANState = exports2.SPANState = void 0;
    var shared_1 = require_build();
    var crypto2 = __importStar(__require("crypto"));
    var ZWaveError_1 = require_ZWaveError();
    var index_safe_1 = require_index_safe2();
    var date_1 = require_date();
    var bufferUtils_1 = require_bufferUtils();
    var crypto_1 = require_crypto();
    var ctr_drbg_1 = require_ctr_drbg();
    var SecurityClass_1 = require_SecurityClass();
    var SPANState;
    (function(SPANState2) {
      SPANState2[SPANState2["None"] = 0] = "None";
      SPANState2[SPANState2["RemoteEI"] = 1] = "RemoteEI";
      SPANState2[SPANState2["LocalEI"] = 2] = "LocalEI";
      SPANState2[SPANState2["SPAN"] = 3] = "SPAN";
    })(SPANState = exports2.SPANState || (exports2.SPANState = {}));
    var MPANState;
    (function(MPANState2) {
      MPANState2[MPANState2["None"] = 0] = "None";
      MPANState2[MPANState2["OutOfSync"] = 1] = "OutOfSync";
      MPANState2[MPANState2["MPAN"] = 2] = "MPAN";
    })(MPANState = exports2.MPANState || (exports2.MPANState = {}));
    var SINGLECAST_MAX_SEQ_NUMS = 10;
    var SINGLECAST_NONCE_EXPIRY_NS = 500 * 1e3 * 1e3;
    var SecurityManager2 = class {
      constructor() {
        this.spanTable = /* @__PURE__ */ new Map();
        this.tempKeys = /* @__PURE__ */ new Map();
        this.ownSequenceNumbers = /* @__PURE__ */ new Map();
        this.peerSequenceNumbers = /* @__PURE__ */ new Map();
        this.mpanStates = /* @__PURE__ */ new Map();
        this.peerMPANs = /* @__PURE__ */ new Map();
        this.networkKeys = /* @__PURE__ */ new Map();
        this.multicastGroups = /* @__PURE__ */ new Map();
        this.multicastGroupLookup = /* @__PURE__ */ new Map();
        this.getNextMulticastGroupId = (0, shared_1.createWrappingCounter)(255);
        this.rng = new ctr_drbg_1.CtrDRBG(128, false, crypto2.randomBytes(32), void 0, Buffer.alloc(32, 0));
      }
      setKey(securityClass, key2) {
        if (key2.length !== 16) {
          throw new ZWaveError_1.ZWaveError(`The network key must consist of 16 bytes!`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        } else if (!(securityClass in SecurityClass_1.SecurityClass) || securityClass <= SecurityClass_1.SecurityClass.None) {
          throw new ZWaveError_1.ZWaveError(`Invalid security class!`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        }
        this.networkKeys.set(securityClass, {
          pnk: key2,
          ...(0, crypto_1.deriveNetworkKeys)(key2)
        });
      }
      createMulticastGroup(nodeIDs, s2SecurityClass) {
        const newHash = (0, index_safe_1.encodeNodeBitMask)(nodeIDs).toString("hex");
        if (this.multicastGroupLookup.has(newHash)) {
          return this.multicastGroupLookup.get(newHash);
        }
        const groupId = this.getNextMulticastGroupId();
        if (this.multicastGroups.has(groupId)) {
          const oldGroup = this.multicastGroups.get(groupId);
          this.multicastGroups.delete(groupId);
          const oldHash = (0, index_safe_1.encodeNodeBitMask)(oldGroup.nodeIDs).toString("hex");
          this.multicastGroupLookup.delete(oldHash);
        }
        this.multicastGroups.set(groupId, {
          nodeIDs,
          securityClass: s2SecurityClass,
          sequenceNumber: crypto2.randomInt(256)
        });
        this.multicastGroupLookup.set(newHash, groupId);
        this.mpanStates.delete(groupId);
        return groupId;
      }
      getMulticastGroup(group) {
        return this.multicastGroups.get(group);
      }
      hasKeysForSecurityClass(securityClass) {
        return this.networkKeys.has(securityClass);
      }
      getKeysForSecurityClass(securityClass) {
        const keys = this.networkKeys.get(securityClass);
        if (!keys) {
          throw new ZWaveError_1.ZWaveError(`The network key for the security class ${(0, shared_1.getEnumMemberName)(SecurityClass_1.SecurityClass, securityClass)} has not been set up yet!`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        return { ...keys };
      }
      getKeysForNode(peerNodeID) {
        const spanState = this.getSPANState(peerNodeID);
        if (spanState.type === SPANState.SPAN && spanState.securityClass === SecurityClass_1.SecurityClass.Temporary) {
          if (this.tempKeys.has(peerNodeID))
            return this.tempKeys.get(peerNodeID);
          throw new ZWaveError_1.ZWaveError(`Temporary encryption key for node ${peerNodeID} is not known!`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        } else if (spanState.type !== SPANState.SPAN) {
          throw new ZWaveError_1.ZWaveError(`Security class for node ${peerNodeID} is not yet known!`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        return this.getKeysForSecurityClass(spanState.securityClass);
      }
      getSPANState(peerNodeID) {
        return this.spanTable.get(peerNodeID) ?? { type: SPANState.None };
      }
      hasUsedSecurityClass(peerNodeID, securityClass) {
        const spanState = this.spanTable.get(peerNodeID);
        if (!spanState)
          return false;
        if (spanState.type !== SPANState.SPAN)
          return false;
        return spanState.securityClass === securityClass;
      }
      generateNonce(receiver) {
        const receiverEI = this.rng.generate(16);
        if (receiver != void 0) {
          this.spanTable.set(receiver, {
            type: SPANState.LocalEI,
            receiverEI
          });
        }
        return receiverEI;
      }
      setSPANState(peerNodeID, state) {
        if (state.type === SPANState.None) {
          this.spanTable.delete(peerNodeID);
        } else {
          this.spanTable.set(peerNodeID, state);
        }
      }
      deleteNonce(receiver) {
        this.spanTable.delete(receiver);
        this.peerSequenceNumbers.delete(receiver);
      }
      initializeSPAN(peerNodeId, securityClass, senderEI, receiverEI) {
        if (senderEI.length !== 16 || receiverEI.length !== 16) {
          throw new ZWaveError_1.ZWaveError(`The entropy input must consist of 16 bytes`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        }
        const keys = this.getKeysForSecurityClass(securityClass);
        const noncePRK = (0, crypto_1.computeNoncePRK)(senderEI, receiverEI);
        const MEI = (0, crypto_1.deriveMEI)(noncePRK);
        this.spanTable.set(peerNodeId, {
          securityClass,
          type: SPANState.SPAN,
          rng: new ctr_drbg_1.CtrDRBG(128, false, MEI, void 0, keys.personalizationString)
        });
      }
      initializeTempSPAN(peerNodeId, senderEI, receiverEI) {
        if (senderEI.length !== 16 || receiverEI.length !== 16) {
          throw new ZWaveError_1.ZWaveError(`The entropy input must consist of 16 bytes`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        }
        const keys = this.tempKeys.get(peerNodeId);
        const noncePRK = (0, crypto_1.computeNoncePRK)(senderEI, receiverEI);
        const MEI = (0, crypto_1.deriveMEI)(noncePRK);
        this.spanTable.set(peerNodeId, {
          securityClass: SecurityClass_1.SecurityClass.Temporary,
          type: SPANState.SPAN,
          rng: new ctr_drbg_1.CtrDRBG(128, false, MEI, void 0, keys.personalizationString)
        });
      }
      isDuplicateSinglecast(peerNodeId, sequenceNumber) {
        var _a2;
        return ((_a2 = this.peerSequenceNumbers.get(peerNodeId)) == null ? void 0 : _a2.includes(sequenceNumber)) ?? false;
      }
      storeSequenceNumber(peerNodeId, sequenceNumber) {
        if (this.peerSequenceNumbers.has(peerNodeId)) {
          const arr = this.peerSequenceNumbers.get(peerNodeId);
          const prev = arr[arr.length - 1];
          arr.push(sequenceNumber);
          if (arr.length > SINGLECAST_MAX_SEQ_NUMS)
            arr.shift();
          return prev;
        } else {
          this.peerSequenceNumbers.set(peerNodeId, [sequenceNumber]);
        }
      }
      storeRemoteEI(peerNodeId, remoteEI) {
        if (remoteEI.length !== 16) {
          throw new ZWaveError_1.ZWaveError(`The entropy input must consist of 16 bytes`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        }
        this.spanTable.set(peerNodeId, {
          type: SPANState.RemoteEI,
          receiverEI: remoteEI
        });
      }
      nextNonce(peerNodeId, store) {
        const spanState = this.spanTable.get(peerNodeId);
        if ((spanState == null ? void 0 : spanState.type) !== SPANState.SPAN) {
          throw new ZWaveError_1.ZWaveError(`The Singlecast PAN has not been initialized for Node ${peerNodeId}`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        const nonce = spanState.rng.generate(16).slice(0, 13);
        spanState.currentSPAN = store ? {
          nonce,
          expires: (0, date_1.highResTimestamp)() + SINGLECAST_NONCE_EXPIRY_NS
        } : void 0;
        return nonce;
      }
      nextSequenceNumber(peerNodeId) {
        let seq = this.ownSequenceNumbers.get(peerNodeId);
        if (seq == void 0) {
          seq = crypto2.randomInt(256);
        } else {
          seq = seq + 1 & 255;
        }
        this.ownSequenceNumbers.set(peerNodeId, seq);
        return seq;
      }
      nextMulticastSequenceNumber(groupId) {
        const group = this.multicastGroups.get(groupId);
        if (!group) {
          throw new ZWaveError_1.ZWaveError(`Multicast group ${groupId} does not exist!`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        let seq = group.sequenceNumber;
        seq = seq + 1 & 255;
        group.sequenceNumber = seq;
        return seq;
      }
      getInnerMPANState(groupId) {
        return this.mpanStates.get(groupId);
      }
      getMulticastKeyAndIV(groupId) {
        const group = this.getMulticastGroup(groupId);
        if (!group) {
          throw new ZWaveError_1.ZWaveError(`Multicast group ${groupId} does not exist!`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        const keys = this.getKeysForSecurityClass(group.securityClass);
        if (!this.mpanStates.has(groupId)) {
          this.mpanStates.set(groupId, this.rng.generate(16));
        }
        const stateN = this.mpanStates.get(groupId);
        const ret = (0, crypto_1.encryptAES128ECB)(stateN, keys.keyMPAN).slice(0, 13);
        (0, bufferUtils_1.increment)(stateN);
        return {
          key: keys.keyCCM,
          iv: ret
        };
      }
      tryIncrementMPAN(groupId) {
        const stateN = this.mpanStates.get(groupId);
        if (stateN)
          (0, bufferUtils_1.increment)(stateN);
      }
      nextPeerMPAN(peerNodeId, groupId) {
        const mpanState = this.getPeerMPAN(peerNodeId, groupId);
        if (mpanState.type !== MPANState.MPAN) {
          throw new ZWaveError_1.ZWaveError(`No peer multicast PAN exists for Node ${peerNodeId}, group ${groupId}`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        const keys = this.getKeysForNode(peerNodeId);
        if (!keys || !("keyMPAN" in keys)) {
          throw new ZWaveError_1.ZWaveError(`The network keys for the security class of Node ${peerNodeId} have not been set up yet!`, ZWaveError_1.ZWaveErrorCodes.Security2CC_NotInitialized);
        }
        const stateN = mpanState.currentMPAN;
        const ret = (0, crypto_1.encryptAES128ECB)(stateN, keys.keyMPAN);
        (0, bufferUtils_1.increment)(stateN);
        return ret;
      }
      tryIncrementPeerMPAN(peerNodeId, groupId) {
        const mpanState = this.getPeerMPAN(peerNodeId, groupId);
        if ((mpanState == null ? void 0 : mpanState.type) !== MPANState.MPAN)
          return;
        const stateN = mpanState.currentMPAN;
        (0, bufferUtils_1.increment)(stateN);
      }
      getPeerMPAN(peerNodeId, groupId) {
        var _a2;
        return ((_a2 = this.peerMPANs.get(peerNodeId)) == null ? void 0 : _a2.get(groupId)) ?? {
          type: MPANState.None
        };
      }
      resetOutOfSyncMPANs(peerNodeId) {
        const entries = this.peerMPANs.get(peerNodeId);
        if (!entries)
          return;
        for (const [groupId, state] of entries) {
          if (state.type === MPANState.OutOfSync) {
            entries.delete(groupId);
          }
        }
      }
      storePeerMPAN(peerNodeId, groupId, mpanState) {
        if (!this.peerMPANs.has(peerNodeId)) {
          this.peerMPANs.set(peerNodeId, /* @__PURE__ */ new Map());
        }
        this.peerMPANs.get(peerNodeId).set(groupId, mpanState);
      }
    };
    exports2.SecurityManager2 = SecurityManager2;
  }
});

// ../core/build/security/QR.js
var require_QR = __commonJS({
  "../core/build/security/QR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseQRCodeString = exports2.ProvisioningInformationType = exports2.QRCodeVersion = void 0;
    var crypto_1 = __require("crypto");
    var Protocols_1 = require_Protocols();
    var ZWaveError_1 = require_ZWaveError();
    var Primitive_1 = require_Primitive();
    var DSK_1 = require_DSK();
    var SecurityClass_1 = require_SecurityClass();
    function readNumber(qr, offset, length) {
      return parseInt(qr.substr(offset, length), 10);
    }
    function fail(reason) {
      throw new ZWaveError_1.ZWaveError(`Invalid QR code: ${reason}`, ZWaveError_1.ZWaveErrorCodes.Security2CC_InvalidQRCode);
    }
    function readLevel(qr, offset) {
      const ret = readNumber(qr, offset, 2);
      if (ret > 99)
        fail("invalid data");
      return ret;
    }
    function readUInt8(qr, offset) {
      const ret = readNumber(qr, offset, 3);
      if (ret > 255)
        fail("invalid data");
      return ret;
    }
    function readUInt16(qr, offset) {
      const ret = readNumber(qr, offset, 5);
      if (ret > 65535)
        fail("invalid data");
      return ret;
    }
    var onlyDigitsRegex = /^\d+$/;
    var minQRCodeLength = 52;
    var QRCodeVersion;
    (function(QRCodeVersion2) {
      QRCodeVersion2[QRCodeVersion2["S2"] = 0] = "S2";
      QRCodeVersion2[QRCodeVersion2["SmartStart"] = 1] = "SmartStart";
    })(QRCodeVersion = exports2.QRCodeVersion || (exports2.QRCodeVersion = {}));
    var ProvisioningInformationType;
    (function(ProvisioningInformationType2) {
      ProvisioningInformationType2[ProvisioningInformationType2["ProductType"] = 0] = "ProductType";
      ProvisioningInformationType2[ProvisioningInformationType2["ProductId"] = 1] = "ProductId";
      ProvisioningInformationType2[ProvisioningInformationType2["MaxInclusionRequestInterval"] = 2] = "MaxInclusionRequestInterval";
      ProvisioningInformationType2[ProvisioningInformationType2["UUID16"] = 3] = "UUID16";
      ProvisioningInformationType2[ProvisioningInformationType2["SupportedProtocols"] = 4] = "SupportedProtocols";
      ProvisioningInformationType2[ProvisioningInformationType2["Name"] = 50] = "Name";
      ProvisioningInformationType2[ProvisioningInformationType2["Location"] = 51] = "Location";
      ProvisioningInformationType2[ProvisioningInformationType2["SmartStartInclusionSetting"] = 52] = "SmartStartInclusionSetting";
      ProvisioningInformationType2[ProvisioningInformationType2["AdvancedJoining"] = 53] = "AdvancedJoining";
      ProvisioningInformationType2[ProvisioningInformationType2["BootstrappingMode"] = 54] = "BootstrappingMode";
      ProvisioningInformationType2[ProvisioningInformationType2["NetworkStatus"] = 55] = "NetworkStatus";
    })(ProvisioningInformationType = exports2.ProvisioningInformationType || (exports2.ProvisioningInformationType = {}));
    function parseTLVData(type2, data) {
      switch (type2) {
        case ProvisioningInformationType.ProductType: {
          const deviceClasses = readUInt16(data, 0);
          const installerIconType = readUInt16(data, 5);
          const ret = {
            genericDeviceClass: deviceClasses >>> 8,
            specificDeviceClass: deviceClasses & 255,
            installerIconType
          };
          return ret;
        }
        case ProvisioningInformationType.ProductId: {
          const manufacturerId = readUInt16(data, 0);
          const productType = readUInt16(data, 5);
          const productId = readUInt16(data, 10);
          const applicationVersionNumeric = readUInt16(data, 15);
          const applicationVersion = `${applicationVersionNumeric >>> 8}.${applicationVersionNumeric & 255}`;
          const ret = {
            manufacturerId,
            productType,
            productId,
            applicationVersion
          };
          return ret;
        }
        case ProvisioningInformationType.MaxInclusionRequestInterval: {
          const maxInclusionRequestInterval = 128 * readLevel(data, 0);
          const ret = {
            maxInclusionRequestInterval
          };
          return ret;
        }
        case ProvisioningInformationType.UUID16: {
          const buffer2 = Buffer.allocUnsafe(16);
          const presentationFormat = readLevel(data, 0);
          if (presentationFormat !== 0)
            return;
          for (let chunk = 0; chunk < 8; chunk++) {
            const value = readUInt16(data, 2 + chunk * 5);
            buffer2.writeUInt16BE(value, chunk * 2);
          }
          const ret = {
            uuid: buffer2.toString("hex")
          };
          return ret;
        }
        case ProvisioningInformationType.SupportedProtocols: {
          const bitMask = Buffer.from([
            data.length === 2 ? readLevel(data, 0) : data.length === 3 ? readUInt8(data, 0) : data.length === 5 ? readUInt16(data, 0) : 0
          ]);
          const supportedProtocols = (0, Primitive_1.parseBitMask)(bitMask, Protocols_1.Protocols.ZWave);
          const ret = {
            supportedProtocols
          };
          return ret;
        }
      }
    }
    function parseTLV(qr) {
      let offset = 0;
      if (qr.length - offset < 4)
        fail("incomplete TLV block");
      const typeCritical = readLevel(qr, offset);
      const type2 = typeCritical >>> 1;
      const critical = !!(typeCritical & 1);
      const length = readLevel(qr, offset + 2);
      offset += 4;
      if (qr.length - offset < length)
        fail("incomplete TLV block");
      const data = qr.substr(offset, length);
      offset += length;
      const parsed = parseTLVData(type2, data);
      if (!parsed && critical)
        fail("Unsupported critical TLV block");
      let entry;
      if (parsed) {
        entry = {
          type: type2,
          ...parsed
        };
      } else {
        entry = {
          type: type2,
          [ProvisioningInformationType[type2]]: data
        };
      }
      return {
        entry,
        charsRead: offset
      };
    }
    function parseQRCodeString(qr) {
      qr = qr.trim();
      if (!qr.startsWith("90"))
        fail("must start with 90");
      if (qr.length < minQRCodeLength)
        fail("too short");
      if (!onlyDigitsRegex.test(qr))
        fail("contains invalid characters");
      const version = readLevel(qr, 2);
      if (version > QRCodeVersion.SmartStart)
        fail("invalid version");
      const checksum = readUInt16(qr, 4);
      const hash = (0, crypto_1.createHash)("sha1");
      hash.update(Buffer.from(qr.slice(9), "ascii"));
      const expectedChecksum = hash.digest().readUInt16BE(0);
      if (checksum !== expectedChecksum)
        fail("invalid checksum");
      const requestedKeysBitmask = readUInt8(qr, 9);
      const requestedSecurityClasses = (0, Primitive_1.parseBitMask)(Buffer.from([requestedKeysBitmask]), SecurityClass_1.SecurityClass.S2_Unauthenticated);
      if (!requestedSecurityClasses.every((k) => k in SecurityClass_1.SecurityClass)) {
        fail("invalid security class requested");
      }
      let offset = 12;
      const dsk = Buffer.allocUnsafe(16);
      for (let dskBlock = 0; dskBlock < 8; dskBlock++) {
        const block = readUInt16(qr, offset);
        dsk.writeUInt16BE(block, dskBlock * 2);
        offset += 5;
      }
      const ret = {
        version,
        requestedSecurityClasses,
        securityClasses: [...requestedSecurityClasses],
        dsk: (0, DSK_1.dskToString)(dsk)
      };
      let hasProductID = false;
      let hasProductType = false;
      while (offset < qr.length) {
        const { entry: { type: type2, ...data }, charsRead } = parseTLV(qr.slice(offset));
        offset += charsRead;
        if (type2 === ProvisioningInformationType.ProductId) {
          hasProductID = true;
        } else if (type2 === ProvisioningInformationType.ProductType) {
          hasProductType = true;
        }
        Object.assign(ret, data);
      }
      if (!hasProductID || !hasProductType) {
        fail("missing required fields");
      }
      return ret;
    }
    exports2.parseQRCodeString = parseQRCodeString;
  }
});

// ../core/build/test/assertZWaveError.js
var require_assertZWaveError = __commonJS({
  "../core/build/test/assertZWaveError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assertZWaveError = void 0;
    function assertZWaveError(t, valueOrFactory, options = {}) {
      const { messageMatches, errorCode, context } = options;
      function _assertZWaveError(e) {
        t.is(e.constructor.name, "ZWaveError");
        t.is(typeof e.code, "number");
      }
      function handleError(e) {
        _assertZWaveError(e);
        if (messageMatches != void 0) {
          const regex = messageMatches instanceof RegExp ? messageMatches : new RegExp(messageMatches);
          t.regex(e.message, regex);
        }
        if (errorCode != void 0)
          t.is(e.code, errorCode);
        if (context != void 0)
          t.is(e.context, context);
      }
      function fail() {
        throw new Error("The factory function did not throw any error!");
      }
      if (typeof valueOrFactory === "function") {
        try {
          const result = valueOrFactory();
          if (result instanceof Promise) {
            return result.then(
              fail,
              handleError
            );
          }
        } catch (e) {
          return void handleError(e);
        }
        fail();
      } else {
        handleError(valueOrFactory);
      }
      return void 0;
    }
    exports2.assertZWaveError = assertZWaveError;
  }
});

// ../../node_modules/.store/reflect-metadata-npm-0.1.13-c525998e20/node_modules/reflect-metadata/Reflect.js
var require_Reflect = __commonJS({
  "../../node_modules/.store/reflect-metadata-npm-0.1.13-c525998e20/node_modules/reflect-metadata/Reflect.js"() {
    var Reflect2;
    (function(Reflect3) {
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
        var exporter = makeExporter(Reflect3);
        if (typeof root.Reflect === "undefined") {
          root.Reflect = Reflect3;
        } else {
          exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
          return function(key2, value) {
            if (typeof target[key2] !== "function") {
              Object.defineProperty(target, key2, { configurable: true, writable: true, value });
            }
            if (previous)
              previous(key2, value);
          };
        }
      })(function(exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function";
        var supportsProto = { __proto__: [] } instanceof Array;
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
          create: supportsCreate ? function() {
            return MakeDictionary(/* @__PURE__ */ Object.create(null));
          } : supportsProto ? function() {
            return MakeDictionary({ __proto__: null });
          } : function() {
            return MakeDictionary({});
          },
          has: downLevel ? function(map, key2) {
            return hasOwn.call(map, key2);
          } : function(map, key2) {
            return key2 in map;
          },
          get: downLevel ? function(map, key2) {
            return hasOwn.call(map, key2) ? map[key2] : void 0;
          } : function(map, key2) {
            return map[key2];
          }
        };
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        var Metadata = new _WeakMap();
        function decorate(decorators, target, propertyKey, attributes) {
          if (!IsUndefined(propertyKey)) {
            if (!IsArray(decorators))
              throw new TypeError();
            if (!IsObject(target))
              throw new TypeError();
            if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
              throw new TypeError();
            if (IsNull(attributes))
              attributes = void 0;
            propertyKey = ToPropertyKey(propertyKey);
            return DecorateProperty(decorators, target, propertyKey, attributes);
          } else {
            if (!IsArray(decorators))
              throw new TypeError();
            if (!IsConstructor(target))
              throw new TypeError();
            return DecorateConstructor(decorators, target);
          }
        }
        exporter("decorate", decorate);
        function metadata(metadataKey, metadataValue) {
          function decorator(target, propertyKey) {
            if (!IsObject(target))
              throw new TypeError();
            if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
              throw new TypeError();
            OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
          }
          return decorator;
        }
        exporter("metadata", metadata);
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        function hasMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        function hasOwnMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        function getMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        function getOwnMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        function getMetadataKeys(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        function getOwnMetadataKeys(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        function deleteMetadata(metadataKey, target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey))
            propertyKey = ToPropertyKey(propertyKey);
          var metadataMap = GetOrCreateMetadataMap(target, propertyKey, false);
          if (IsUndefined(metadataMap))
            return false;
          if (!metadataMap.delete(metadataKey))
            return false;
          if (metadataMap.size > 0)
            return true;
          var targetMetadata = Metadata.get(target);
          targetMetadata.delete(propertyKey);
          if (targetMetadata.size > 0)
            return true;
          Metadata.delete(target);
          return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
          for (var i2 = decorators.length - 1; i2 >= 0; --i2) {
            var decorator = decorators[i2];
            var decorated = decorator(target);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
              if (!IsConstructor(decorated))
                throw new TypeError();
              target = decorated;
            }
          }
          return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
          for (var i2 = decorators.length - 1; i2 >= 0; --i2) {
            var decorator = decorators[i2];
            var decorated = decorator(target, propertyKey, descriptor);
            if (!IsUndefined(decorated) && !IsNull(decorated)) {
              if (!IsObject(decorated))
                throw new TypeError();
              descriptor = decorated;
            }
          }
          return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
          var targetMetadata = Metadata.get(O);
          if (IsUndefined(targetMetadata)) {
            if (!Create)
              return void 0;
            targetMetadata = new _Map();
            Metadata.set(O, targetMetadata);
          }
          var metadataMap = targetMetadata.get(P);
          if (IsUndefined(metadataMap)) {
            if (!Create)
              return void 0;
            metadataMap = new _Map();
            targetMetadata.set(P, metadataMap);
          }
          return metadataMap;
        }
        function OrdinaryHasMetadata(MetadataKey, O, P) {
          var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
          if (hasOwn2)
            return true;
          var parent = OrdinaryGetPrototypeOf(O);
          if (!IsNull(parent))
            return OrdinaryHasMetadata(MetadataKey, parent, P);
          return false;
        }
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
          var metadataMap = GetOrCreateMetadataMap(O, P, false);
          if (IsUndefined(metadataMap))
            return false;
          return ToBoolean(metadataMap.has(MetadataKey));
        }
        function OrdinaryGetMetadata(MetadataKey, O, P) {
          var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
          if (hasOwn2)
            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
          var parent = OrdinaryGetPrototypeOf(O);
          if (!IsNull(parent))
            return OrdinaryGetMetadata(MetadataKey, parent, P);
          return void 0;
        }
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
          var metadataMap = GetOrCreateMetadataMap(O, P, false);
          if (IsUndefined(metadataMap))
            return void 0;
          return metadataMap.get(MetadataKey);
        }
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
          var metadataMap = GetOrCreateMetadataMap(O, P, true);
          metadataMap.set(MetadataKey, MetadataValue);
        }
        function OrdinaryMetadataKeys(O, P) {
          var ownKeys = OrdinaryOwnMetadataKeys(O, P);
          var parent = OrdinaryGetPrototypeOf(O);
          if (parent === null)
            return ownKeys;
          var parentKeys = OrdinaryMetadataKeys(parent, P);
          if (parentKeys.length <= 0)
            return ownKeys;
          if (ownKeys.length <= 0)
            return parentKeys;
          var set = new _Set();
          var keys = [];
          for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
            var key2 = ownKeys_1[_i];
            var hasKey = set.has(key2);
            if (!hasKey) {
              set.add(key2);
              keys.push(key2);
            }
          }
          for (var _a2 = 0, parentKeys_1 = parentKeys; _a2 < parentKeys_1.length; _a2++) {
            var key2 = parentKeys_1[_a2];
            var hasKey = set.has(key2);
            if (!hasKey) {
              set.add(key2);
              keys.push(key2);
            }
          }
          return keys;
        }
        function OrdinaryOwnMetadataKeys(O, P) {
          var keys = [];
          var metadataMap = GetOrCreateMetadataMap(O, P, false);
          if (IsUndefined(metadataMap))
            return keys;
          var keysObj = metadataMap.keys();
          var iterator = GetIterator(keysObj);
          var k = 0;
          while (true) {
            var next = IteratorStep(iterator);
            if (!next) {
              keys.length = k;
              return keys;
            }
            var nextValue = IteratorValue(next);
            try {
              keys[k] = nextValue;
            } catch (e) {
              try {
                IteratorClose(iterator);
              } finally {
                throw e;
              }
            }
            k++;
          }
        }
        function Type(x) {
          if (x === null)
            return 1;
          switch (typeof x) {
            case "undefined":
              return 0;
            case "boolean":
              return 2;
            case "string":
              return 3;
            case "symbol":
              return 4;
            case "number":
              return 5;
            case "object":
              return x === null ? 1 : 6;
            default:
              return 6;
          }
        }
        function IsUndefined(x) {
          return x === void 0;
        }
        function IsNull(x) {
          return x === null;
        }
        function IsSymbol(x) {
          return typeof x === "symbol";
        }
        function IsObject(x) {
          return typeof x === "object" ? x !== null : typeof x === "function";
        }
        function ToPrimitive(input, PreferredType) {
          switch (Type(input)) {
            case 0:
              return input;
            case 1:
              return input;
            case 2:
              return input;
            case 3:
              return input;
            case 4:
              return input;
            case 5:
              return input;
          }
          var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
          var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
          if (exoticToPrim !== void 0) {
            var result = exoticToPrim.call(input, hint);
            if (IsObject(result))
              throw new TypeError();
            return result;
          }
          return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        function OrdinaryToPrimitive(O, hint) {
          if (hint === "string") {
            var toString_1 = O.toString;
            if (IsCallable(toString_1)) {
              var result = toString_1.call(O);
              if (!IsObject(result))
                return result;
            }
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
              var result = valueOf.call(O);
              if (!IsObject(result))
                return result;
            }
          } else {
            var valueOf = O.valueOf;
            if (IsCallable(valueOf)) {
              var result = valueOf.call(O);
              if (!IsObject(result))
                return result;
            }
            var toString_2 = O.toString;
            if (IsCallable(toString_2)) {
              var result = toString_2.call(O);
              if (!IsObject(result))
                return result;
            }
          }
          throw new TypeError();
        }
        function ToBoolean(argument) {
          return !!argument;
        }
        function ToString(argument) {
          return "" + argument;
        }
        function ToPropertyKey(argument) {
          var key2 = ToPrimitive(argument, 3);
          if (IsSymbol(key2))
            return key2;
          return ToString(key2);
        }
        function IsArray(argument) {
          return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
        }
        function IsCallable(argument) {
          return typeof argument === "function";
        }
        function IsConstructor(argument) {
          return typeof argument === "function";
        }
        function IsPropertyKey(argument) {
          switch (Type(argument)) {
            case 3:
              return true;
            case 4:
              return true;
            default:
              return false;
          }
        }
        function GetMethod(V, P) {
          var func2 = V[P];
          if (func2 === void 0 || func2 === null)
            return void 0;
          if (!IsCallable(func2))
            throw new TypeError();
          return func2;
        }
        function GetIterator(obj) {
          var method = GetMethod(obj, iteratorSymbol);
          if (!IsCallable(method))
            throw new TypeError();
          var iterator = method.call(obj);
          if (!IsObject(iterator))
            throw new TypeError();
          return iterator;
        }
        function IteratorValue(iterResult) {
          return iterResult.value;
        }
        function IteratorStep(iterator) {
          var result = iterator.next();
          return result.done ? false : result;
        }
        function IteratorClose(iterator) {
          var f = iterator["return"];
          if (f)
            f.call(iterator);
        }
        function OrdinaryGetPrototypeOf(O) {
          var proto2 = Object.getPrototypeOf(O);
          if (typeof O !== "function" || O === functionPrototype)
            return proto2;
          if (proto2 !== functionPrototype)
            return proto2;
          var prototype = O.prototype;
          var prototypeProto = prototype && Object.getPrototypeOf(prototype);
          if (prototypeProto == null || prototypeProto === Object.prototype)
            return proto2;
          var constructor = prototypeProto.constructor;
          if (typeof constructor !== "function")
            return proto2;
          if (constructor === O)
            return proto2;
          return constructor;
        }
        function CreateMapPolyfill() {
          var cacheSentinel = {};
          var arraySentinel = [];
          var MapIterator = function() {
            function MapIterator2(keys, values, selector) {
              this._index = 0;
              this._keys = keys;
              this._values = values;
              this._selector = selector;
            }
            MapIterator2.prototype["@@iterator"] = function() {
              return this;
            };
            MapIterator2.prototype[iteratorSymbol] = function() {
              return this;
            };
            MapIterator2.prototype.next = function() {
              var index = this._index;
              if (index >= 0 && index < this._keys.length) {
                var result = this._selector(this._keys[index], this._values[index]);
                if (index + 1 >= this._keys.length) {
                  this._index = -1;
                  this._keys = arraySentinel;
                  this._values = arraySentinel;
                } else {
                  this._index++;
                }
                return { value: result, done: false };
              }
              return { value: void 0, done: true };
            };
            MapIterator2.prototype.throw = function(error) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              throw error;
            };
            MapIterator2.prototype.return = function(value) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              return { value, done: true };
            };
            return MapIterator2;
          }();
          return function() {
            function Map2() {
              this._keys = [];
              this._values = [];
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            }
            Object.defineProperty(Map2.prototype, "size", {
              get: function() {
                return this._keys.length;
              },
              enumerable: true,
              configurable: true
            });
            Map2.prototype.has = function(key2) {
              return this._find(key2, false) >= 0;
            };
            Map2.prototype.get = function(key2) {
              var index = this._find(key2, false);
              return index >= 0 ? this._values[index] : void 0;
            };
            Map2.prototype.set = function(key2, value) {
              var index = this._find(key2, true);
              this._values[index] = value;
              return this;
            };
            Map2.prototype.delete = function(key2) {
              var index = this._find(key2, false);
              if (index >= 0) {
                var size = this._keys.length;
                for (var i2 = index + 1; i2 < size; i2++) {
                  this._keys[i2 - 1] = this._keys[i2];
                  this._values[i2 - 1] = this._values[i2];
                }
                this._keys.length--;
                this._values.length--;
                if (key2 === this._cacheKey) {
                  this._cacheKey = cacheSentinel;
                  this._cacheIndex = -2;
                }
                return true;
              }
              return false;
            };
            Map2.prototype.clear = function() {
              this._keys.length = 0;
              this._values.length = 0;
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            };
            Map2.prototype.keys = function() {
              return new MapIterator(this._keys, this._values, getKey);
            };
            Map2.prototype.values = function() {
              return new MapIterator(this._keys, this._values, getValue2);
            };
            Map2.prototype.entries = function() {
              return new MapIterator(this._keys, this._values, getEntry);
            };
            Map2.prototype["@@iterator"] = function() {
              return this.entries();
            };
            Map2.prototype[iteratorSymbol] = function() {
              return this.entries();
            };
            Map2.prototype._find = function(key2, insert) {
              if (this._cacheKey !== key2) {
                this._cacheIndex = this._keys.indexOf(this._cacheKey = key2);
              }
              if (this._cacheIndex < 0 && insert) {
                this._cacheIndex = this._keys.length;
                this._keys.push(key2);
                this._values.push(void 0);
              }
              return this._cacheIndex;
            };
            return Map2;
          }();
          function getKey(key2, _) {
            return key2;
          }
          function getValue2(_, value) {
            return value;
          }
          function getEntry(key2, value) {
            return [key2, value];
          }
        }
        function CreateSetPolyfill() {
          return function() {
            function Set2() {
              this._map = new _Map();
            }
            Object.defineProperty(Set2.prototype, "size", {
              get: function() {
                return this._map.size;
              },
              enumerable: true,
              configurable: true
            });
            Set2.prototype.has = function(value) {
              return this._map.has(value);
            };
            Set2.prototype.add = function(value) {
              return this._map.set(value, value), this;
            };
            Set2.prototype.delete = function(value) {
              return this._map.delete(value);
            };
            Set2.prototype.clear = function() {
              this._map.clear();
            };
            Set2.prototype.keys = function() {
              return this._map.keys();
            };
            Set2.prototype.values = function() {
              return this._map.values();
            };
            Set2.prototype.entries = function() {
              return this._map.entries();
            };
            Set2.prototype["@@iterator"] = function() {
              return this.keys();
            };
            Set2.prototype[iteratorSymbol] = function() {
              return this.keys();
            };
            return Set2;
          }();
        }
        function CreateWeakMapPolyfill() {
          var UUID_SIZE = 16;
          var keys = HashMap.create();
          var rootKey = CreateUniqueKey();
          return function() {
            function WeakMap2() {
              this._key = CreateUniqueKey();
            }
            WeakMap2.prototype.has = function(target) {
              var table = GetOrCreateWeakMapTable(target, false);
              return table !== void 0 ? HashMap.has(table, this._key) : false;
            };
            WeakMap2.prototype.get = function(target) {
              var table = GetOrCreateWeakMapTable(target, false);
              return table !== void 0 ? HashMap.get(table, this._key) : void 0;
            };
            WeakMap2.prototype.set = function(target, value) {
              var table = GetOrCreateWeakMapTable(target, true);
              table[this._key] = value;
              return this;
            };
            WeakMap2.prototype.delete = function(target) {
              var table = GetOrCreateWeakMapTable(target, false);
              return table !== void 0 ? delete table[this._key] : false;
            };
            WeakMap2.prototype.clear = function() {
              this._key = CreateUniqueKey();
            };
            return WeakMap2;
          }();
          function CreateUniqueKey() {
            var key2;
            do
              key2 = "@@WeakMap@@" + CreateUUID();
            while (HashMap.has(keys, key2));
            keys[key2] = true;
            return key2;
          }
          function GetOrCreateWeakMapTable(target, create2) {
            if (!hasOwn.call(target, rootKey)) {
              if (!create2)
                return void 0;
              Object.defineProperty(target, rootKey, { value: HashMap.create() });
            }
            return target[rootKey];
          }
          function FillRandomBytes(buffer2, size) {
            for (var i2 = 0; i2 < size; ++i2)
              buffer2[i2] = Math.random() * 255 | 0;
            return buffer2;
          }
          function GenRandomBytes(size) {
            if (typeof Uint8Array === "function") {
              if (typeof crypto !== "undefined")
                return crypto.getRandomValues(new Uint8Array(size));
              if (typeof msCrypto !== "undefined")
                return msCrypto.getRandomValues(new Uint8Array(size));
              return FillRandomBytes(new Uint8Array(size), size);
            }
            return FillRandomBytes(new Array(size), size);
          }
          function CreateUUID() {
            var data = GenRandomBytes(UUID_SIZE);
            data[6] = data[6] & 79 | 64;
            data[8] = data[8] & 191 | 128;
            var result = "";
            for (var offset = 0; offset < UUID_SIZE; ++offset) {
              var byte = data[offset];
              if (offset === 4 || offset === 6 || offset === 8)
                result += "-";
              if (byte < 16)
                result += "0";
              result += byte.toString(16).toLowerCase();
            }
            return result;
          }
        }
        function MakeDictionary(obj) {
          obj.__ = void 0;
          delete obj.__;
          return obj;
        }
      });
    })(Reflect2 || (Reflect2 = {}));
  }
});

// ../core/build/util/decorators.js
var require_decorators = __commonJS({
  "../core/build/util/decorators.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createReflectionDecoratorPair = exports2.createValuelessReflectionDecorator = exports2.createSimpleReflectionDecorator = exports2.createReflectionDecorator = void 0;
    require_Reflect();
    function createReflectionDecorator({
      name,
      valueFromArgs,
      constructorLookupKey
    }) {
      const key2 = Symbol.for(`METADATA_${name}`);
      const mapKey = Symbol.for(`METADATA_MAP_${name}`);
      const lookupTarget = /* @__PURE__ */ Object.create(null);
      const grp = {
        decorator: (...args) => {
          const value = valueFromArgs(...args);
          let body = (target) => {
            Reflect.defineMetadata(key2, value, target);
            if (constructorLookupKey === false)
              return;
            const reverseLookupKey = (constructorLookupKey == null ? void 0 : constructorLookupKey(target, ...args)) ?? String(value);
            const map = Reflect.getMetadata(mapKey, lookupTarget) || /* @__PURE__ */ new Map();
            map.set(reverseLookupKey, target);
            Reflect.defineMetadata(mapKey, map, lookupTarget);
          };
          body = Object.defineProperty(body, "name", {
            value: "decoratorBody_" + name
          });
          return body;
        },
        lookupValue: (target) => {
          return Reflect.getMetadata(key2, target.constructor);
        },
        lookupValueStatic: (constr) => {
          return Reflect.getMetadata(key2, constr);
        },
        lookupConstructorByValue: (value) => {
          if (constructorLookupKey === false) {
            throw new Error("Constructor lookup is disabled for this decorator!");
          } else if (constructorLookupKey) {
            throw new Error("Cannot lookup constructor by value when constructorLookupKey is used");
          } else {
            return grp.lookupConstructorByKey(String(value));
          }
        },
        lookupConstructorByKey: (key3) => {
          if (constructorLookupKey === false) {
            throw new Error("Constructor lookup is disabled for this decorator!");
          }
          const map = Reflect.getMetadata(mapKey, lookupTarget);
          return map == null ? void 0 : map.get(key3);
        }
      };
      for (const property of [
        "decorator",
        "lookupValue",
        "lookupValueStatic",
        "lookupConstructorByValue",
        "lookupConstructorByKey"
      ]) {
        grp[property] = Object.defineProperty(grp[property], "name", {
          value: `${property}_${name}`
        });
      }
      return grp;
    }
    exports2.createReflectionDecorator = createReflectionDecorator;
    function createSimpleReflectionDecorator({ name }) {
      const decorator = createReflectionDecorator({
        name,
        valueFromArgs: (arg2) => arg2
      });
      const ret = {
        decorator: decorator.decorator,
        lookupValue: decorator.lookupValue,
        lookupValueStatic: decorator.lookupValueStatic,
        lookupConstructor: decorator.lookupConstructorByValue
      };
      return ret;
    }
    exports2.createSimpleReflectionDecorator = createSimpleReflectionDecorator;
    function createValuelessReflectionDecorator({ name }) {
      const decorator = createReflectionDecorator({
        name,
        valueFromArgs: () => true
      });
      const ret = {
        decorator: decorator.decorator,
        isDecorated: (target) => !!decorator.lookupValue(target),
        isDecoratedStatic: (constr) => !!decorator.lookupValueStatic(constr)
      };
      return ret;
    }
    exports2.createValuelessReflectionDecorator = createValuelessReflectionDecorator;
    function createReflectionDecoratorPair({ superName, subName }) {
      const superDecorator = createReflectionDecorator({
        name: superName,
        valueFromArgs: (arg2) => arg2
      });
      const getLookupKey = (superArg, subArg) => {
        return JSON.stringify({ [superName]: superArg, [subName]: subArg });
      };
      const subDecorator = createReflectionDecorator({
        name: subName,
        valueFromArgs: (arg2) => arg2,
        constructorLookupKey: (target, subArg) => {
          const superArg = superDecorator.lookupValueStatic(target);
          return getLookupKey(superArg, subArg);
        }
      });
      const ret = {
        superDecorator: superDecorator.decorator,
        subDecorator: subDecorator.decorator,
        lookupSuperValue: superDecorator.lookupValue,
        lookupSubValue: subDecorator.lookupValue,
        lookupSuperValueStatic: superDecorator.lookupValueStatic,
        lookupSubValueStatic: subDecorator.lookupValueStatic,
        lookupSuperConstructor: superDecorator.lookupConstructorByValue,
        lookupSubConstructor: (...args) => {
          return subDecorator.lookupConstructorByKey(getLookupKey(args[0], args[1]));
        }
      };
      return ret;
    }
    exports2.createReflectionDecoratorPair = createReflectionDecoratorPair;
  }
});

// ../../node_modules/.store/nrf-intel-hex-npm-1.3.0-9ccea86980/node_modules/nrf-intel-hex/intel-hex.cjs.js
var require_intel_hex_cjs = __commonJS({
  "../../node_modules/.store/nrf-intel-hex-npm-1.3.0-9ccea86980/node_modules/nrf-intel-hex/intel-hex.cjs.js"(exports2, module2) {
    "use strict";
    var hexLineRegexp = /:([0-9A-Fa-f]{8,})([0-9A-Fa-f]{2})(?:\r\n|\r|\n|)/g;
    function checksum(bytes) {
      return -bytes.reduce(function(sum, v) {
        return sum + v;
      }, 0) & 255;
    }
    function checksumTwo(array1, array2) {
      var partial1 = array1.reduce(function(sum, v) {
        return sum + v;
      }, 0);
      var partial2 = array2.reduce(function(sum, v) {
        return sum + v;
      }, 0);
      return -(partial1 + partial2) & 255;
    }
    function hexpad(number) {
      return number.toString(16).toUpperCase().padStart(2, "0");
    }
    Number.isInteger = Number.isInteger || function(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    var MemoryMap = function MemoryMap2(blocks) {
      var this$1 = this;
      this._blocks = /* @__PURE__ */ new Map();
      if (blocks && typeof blocks[Symbol.iterator] === "function") {
        for (var tuple of blocks) {
          if (!(tuple instanceof Array) || tuple.length !== 2) {
            throw new Error("First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined");
          }
          this$1.set(tuple[0], tuple[1]);
        }
      } else if (typeof blocks === "object") {
        var addrs = Object.keys(blocks);
        for (var addr of addrs) {
          this$1.set(parseInt(addr), blocks[addr]);
        }
      } else if (blocks !== void 0 && blocks !== null) {
        throw new Error("First parameter to MemoryMap constructor must be an iterable of [addr, bytes] or undefined");
      }
    };
    var prototypeAccessors = { size: { configurable: true } };
    MemoryMap.prototype.set = function set(addr, value) {
      if (!Number.isInteger(addr)) {
        throw new Error("Address passed to MemoryMap is not an integer");
      }
      if (addr < 0) {
        throw new Error("Address passed to MemoryMap is negative");
      }
      if (!(value instanceof Uint8Array)) {
        throw new Error("Bytes passed to MemoryMap are not an Uint8Array");
      }
      return this._blocks.set(addr, value);
    };
    MemoryMap.prototype.get = function get(addr) {
      return this._blocks.get(addr);
    };
    MemoryMap.prototype.clear = function clear() {
      return this._blocks.clear();
    };
    MemoryMap.prototype.delete = function delete$1(addr) {
      return this._blocks.delete(addr);
    };
    MemoryMap.prototype.entries = function entries() {
      return this._blocks.entries();
    };
    MemoryMap.prototype.forEach = function forEach(callback, that) {
      return this._blocks.forEach(callback, that);
    };
    MemoryMap.prototype.has = function has(addr) {
      return this._blocks.has(addr);
    };
    MemoryMap.prototype.keys = function keys() {
      return this._blocks.keys();
    };
    MemoryMap.prototype.values = function values() {
      return this._blocks.values();
    };
    prototypeAccessors.size.get = function() {
      return this._blocks.size;
    };
    MemoryMap.prototype[Symbol.iterator] = function() {
      return this._blocks[Symbol.iterator]();
    };
    MemoryMap.fromHex = function fromHex(hexText, maxBlockSize) {
      if (maxBlockSize === void 0)
        maxBlockSize = Infinity;
      var blocks = new MemoryMap();
      var lastCharacterParsed = 0;
      var matchResult;
      var recordCount = 0;
      var ulba = 0;
      hexLineRegexp.lastIndex = 0;
      while ((matchResult = hexLineRegexp.exec(hexText)) !== null) {
        recordCount++;
        if (lastCharacterParsed !== matchResult.index) {
          throw new Error(
            "Malformed hex file: Could not parse between characters " + lastCharacterParsed + " and " + matchResult.index + ' ("' + hexText.substring(lastCharacterParsed, Math.min(matchResult.index, lastCharacterParsed + 16)).trim() + '")'
          );
        }
        lastCharacterParsed = hexLineRegexp.lastIndex;
        var recordStr = matchResult[1];
        var recordChecksum = matchResult[2];
        var recordBytes = new Uint8Array(recordStr.match(/[\da-f]{2}/gi).map(function(h) {
          return parseInt(h, 16);
        }));
        var recordLength = recordBytes[0];
        if (recordLength + 4 !== recordBytes.length) {
          throw new Error("Mismatched record length at record " + recordCount + " (" + matchResult[0].trim() + "), expected " + recordLength + " data bytes but actual length is " + (recordBytes.length - 4));
        }
        var cs = checksum(recordBytes);
        if (parseInt(recordChecksum, 16) !== cs) {
          throw new Error("Checksum failed at record " + recordCount + " (" + matchResult[0].trim() + "), should be " + cs.toString(16));
        }
        var offset = (recordBytes[1] << 8) + recordBytes[2];
        var recordType = recordBytes[3];
        var data = recordBytes.subarray(4);
        if (recordType === 0) {
          if (blocks.has(ulba + offset)) {
            throw new Error("Duplicated data at record " + recordCount + " (" + matchResult[0].trim() + ")");
          }
          if (offset + data.length > 65536) {
            throw new Error(
              "Data at record " + recordCount + " (" + matchResult[0].trim() + ") wraps over 0xFFFF. This would trigger ambiguous behaviour. Please restructure your data so that for every record the data offset plus the data length do not exceed 0xFFFF."
            );
          }
          blocks.set(ulba + offset, data);
        } else {
          if (offset !== 0) {
            throw new Error("Record " + recordCount + " (" + matchResult[0].trim() + ") must have 0000 as data offset.");
          }
          switch (recordType) {
            case 1:
              if (lastCharacterParsed !== hexText.length) {
                throw new Error("There is data after an EOF record at record " + recordCount);
              }
              return blocks.join(maxBlockSize);
            case 2:
              ulba = (data[0] << 8) + data[1] << 4;
              break;
            case 3:
              break;
            case 4:
              ulba = (data[0] << 8) + data[1] << 16;
              break;
            case 5:
              break;
            default:
              throw new Error("Invalid record type 0x" + hexpad(recordType) + " at record " + recordCount + " (should be between 0x00 and 0x05)");
          }
        }
      }
      if (recordCount) {
        throw new Error("No EOF record at end of file");
      } else {
        throw new Error("Malformed .hex file, could not parse any registers");
      }
    };
    MemoryMap.prototype.join = function join(maxBlockSize) {
      var this$1 = this;
      if (maxBlockSize === void 0)
        maxBlockSize = Infinity;
      var sortedKeys = Array.from(this.keys()).sort(function(a, b) {
        return a - b;
      });
      var blockSizes = /* @__PURE__ */ new Map();
      var lastBlockAddr = -1;
      var lastBlockEndAddr = -1;
      for (var i2 = 0, l = sortedKeys.length; i2 < l; i2++) {
        var blockAddr = sortedKeys[i2];
        var blockLength = this$1.get(sortedKeys[i2]).length;
        if (lastBlockEndAddr === blockAddr && lastBlockEndAddr - lastBlockAddr < maxBlockSize) {
          blockSizes.set(lastBlockAddr, blockSizes.get(lastBlockAddr) + blockLength);
          lastBlockEndAddr += blockLength;
        } else if (lastBlockEndAddr <= blockAddr) {
          blockSizes.set(blockAddr, blockLength);
          lastBlockAddr = blockAddr;
          lastBlockEndAddr = blockAddr + blockLength;
        } else {
          throw new Error("Overlapping data around address 0x" + blockAddr.toString(16));
        }
      }
      var mergedBlocks = new MemoryMap();
      var mergingBlock;
      var mergingBlockAddr = -1;
      for (var i$1 = 0, l$1 = sortedKeys.length; i$1 < l$1; i$1++) {
        var blockAddr$1 = sortedKeys[i$1];
        if (blockSizes.has(blockAddr$1)) {
          mergingBlock = new Uint8Array(blockSizes.get(blockAddr$1));
          mergedBlocks.set(blockAddr$1, mergingBlock);
          mergingBlockAddr = blockAddr$1;
        }
        mergingBlock.set(this$1.get(blockAddr$1), blockAddr$1 - mergingBlockAddr);
      }
      return mergedBlocks;
    };
    MemoryMap.overlapMemoryMaps = function overlapMemoryMaps(memoryMaps) {
      var cuts = /* @__PURE__ */ new Set();
      for (var [, blocks] of memoryMaps) {
        for (var [address, block] of blocks) {
          cuts.add(address);
          cuts.add(address + block.length);
        }
      }
      var orderedCuts = Array.from(cuts.values()).sort(function(a, b) {
        return a - b;
      });
      var overlaps = /* @__PURE__ */ new Map();
      var loop = function(i3, l2) {
        var cut = orderedCuts[i3];
        var nextCut = orderedCuts[i3 + 1];
        var tuples = [];
        for (var [setId, blocks$1] of memoryMaps) {
          var blockAddr = Array.from(blocks$1.keys()).reduce(function(acc, val) {
            if (val > cut) {
              return acc;
            }
            return Math.max(acc, val);
          }, -1);
          if (blockAddr !== -1) {
            var block$1 = blocks$1.get(blockAddr);
            var subBlockStart = cut - blockAddr;
            var subBlockEnd = nextCut - blockAddr;
            if (subBlockStart < block$1.length) {
              tuples.push([setId, block$1.subarray(subBlockStart, subBlockEnd)]);
            }
          }
        }
        if (tuples.length) {
          overlaps.set(cut, tuples);
        }
      };
      for (var i2 = 0, l = orderedCuts.length - 1; i2 < l; i2++)
        loop(i2, l);
      return overlaps;
    };
    MemoryMap.flattenOverlaps = function flattenOverlaps(overlaps) {
      return new MemoryMap(
        Array.from(overlaps.entries()).map(function(ref) {
          var address = ref[0];
          var tuples = ref[1];
          return [address, tuples[tuples.length - 1][1]];
        })
      );
    };
    MemoryMap.prototype.paginate = function paginate(pageSize, pad) {
      var this$1 = this;
      if (pageSize === void 0)
        pageSize = 1024;
      if (pad === void 0)
        pad = 255;
      if (pageSize <= 0) {
        throw new Error("Page size must be greater than zero");
      }
      var outPages = new MemoryMap();
      var page;
      var sortedKeys = Array.from(this.keys()).sort(function(a, b) {
        return a - b;
      });
      for (var i2 = 0, l = sortedKeys.length; i2 < l; i2++) {
        var blockAddr = sortedKeys[i2];
        var block = this$1.get(blockAddr);
        var blockLength = block.length;
        var blockEnd = blockAddr + blockLength;
        for (var pageAddr = blockAddr - blockAddr % pageSize; pageAddr < blockEnd; pageAddr += pageSize) {
          page = outPages.get(pageAddr);
          if (!page) {
            page = new Uint8Array(pageSize);
            page.fill(pad);
            outPages.set(pageAddr, page);
          }
          var offset = pageAddr - blockAddr;
          var subBlock = void 0;
          if (offset <= 0) {
            subBlock = block.subarray(0, Math.min(pageSize + offset, blockLength));
            page.set(subBlock, -offset);
          } else {
            subBlock = block.subarray(offset, offset + Math.min(pageSize, blockLength - offset));
            page.set(subBlock, 0);
          }
        }
      }
      return outPages;
    };
    MemoryMap.prototype.getUint32 = function getUint32(offset, littleEndian) {
      var this$1 = this;
      var keys = Array.from(this.keys());
      for (var i2 = 0, l = keys.length; i2 < l; i2++) {
        var blockAddr = keys[i2];
        var block = this$1.get(blockAddr);
        var blockLength = block.length;
        var blockEnd = blockAddr + blockLength;
        if (blockAddr <= offset && offset + 4 <= blockEnd) {
          return new DataView(block.buffer, offset - blockAddr, 4).getUint32(0, littleEndian);
        }
      }
      return;
    };
    MemoryMap.prototype.asHexString = function asHexString(lineSize) {
      var this$1 = this;
      if (lineSize === void 0)
        lineSize = 16;
      var lowAddress = 0;
      var highAddress = -1 << 16;
      var records = [];
      if (lineSize <= 0) {
        throw new Error("Size of record must be greater than zero");
      } else if (lineSize > 255) {
        throw new Error("Size of record must be less than 256");
      }
      var offsetRecord = new Uint8Array(6);
      var recordHeader = new Uint8Array(4);
      var sortedKeys = Array.from(this.keys()).sort(function(a, b) {
        return a - b;
      });
      for (var i2 = 0, l = sortedKeys.length; i2 < l; i2++) {
        var blockAddr = sortedKeys[i2];
        var block = this$1.get(blockAddr);
        if (!(block instanceof Uint8Array)) {
          throw new Error("Block at offset " + blockAddr + " is not an Uint8Array");
        }
        if (blockAddr < 0) {
          throw new Error("Block at offset " + blockAddr + " has a negative thus invalid address");
        }
        var blockSize = block.length;
        if (!blockSize) {
          continue;
        }
        if (blockAddr > highAddress + 65535) {
          highAddress = blockAddr - blockAddr % 65536;
          lowAddress = 0;
          offsetRecord[0] = 2;
          offsetRecord[1] = 0;
          offsetRecord[2] = 0;
          offsetRecord[3] = 4;
          offsetRecord[4] = highAddress >> 24;
          offsetRecord[5] = highAddress >> 16;
          records.push(
            ":" + Array.prototype.map.call(offsetRecord, hexpad).join("") + hexpad(checksum(offsetRecord))
          );
        }
        if (blockAddr < highAddress + lowAddress) {
          throw new Error(
            "Block starting at 0x" + blockAddr.toString(16) + " overlaps with a previous block."
          );
        }
        lowAddress = blockAddr % 65536;
        var blockOffset = 0;
        var blockEnd = blockAddr + blockSize;
        if (blockEnd > 4294967295) {
          throw new Error("Data cannot be over 0xFFFFFFFF");
        }
        while (highAddress + lowAddress < blockEnd) {
          if (lowAddress > 65535) {
            highAddress += 1 << 16;
            lowAddress = 0;
            offsetRecord[0] = 2;
            offsetRecord[1] = 0;
            offsetRecord[2] = 0;
            offsetRecord[3] = 4;
            offsetRecord[4] = highAddress >> 24;
            offsetRecord[5] = highAddress >> 16;
            records.push(
              ":" + Array.prototype.map.call(offsetRecord, hexpad).join("") + hexpad(checksum(offsetRecord))
            );
          }
          var recordSize = -1;
          while (lowAddress < 65536 && recordSize) {
            recordSize = Math.min(
              lineSize,
              blockEnd - highAddress - lowAddress,
              65536 - lowAddress
            );
            if (recordSize) {
              recordHeader[0] = recordSize;
              recordHeader[1] = lowAddress >> 8;
              recordHeader[2] = lowAddress;
              recordHeader[3] = 0;
              var subBlock = block.subarray(blockOffset, blockOffset + recordSize);
              records.push(
                ":" + Array.prototype.map.call(recordHeader, hexpad).join("") + Array.prototype.map.call(subBlock, hexpad).join("") + hexpad(checksumTwo(recordHeader, subBlock))
              );
              blockOffset += recordSize;
              lowAddress += recordSize;
            }
          }
        }
      }
      records.push(":00000001FF");
      return records.join("\n");
    };
    MemoryMap.prototype.clone = function clone() {
      var this$1 = this;
      var cloned = new MemoryMap();
      for (var [addr, value] of this$1) {
        cloned.set(addr, new Uint8Array(value));
      }
      return cloned;
    };
    MemoryMap.fromPaddedUint8Array = function fromPaddedUint8Array(bytes, padByte, minPadLength) {
      if (padByte === void 0)
        padByte = 255;
      if (minPadLength === void 0)
        minPadLength = 64;
      if (!(bytes instanceof Uint8Array)) {
        throw new Error("Bytes passed to fromPaddedUint8Array are not an Uint8Array");
      }
      var memMap = new MemoryMap();
      var consecutivePads = 0;
      var lastNonPad = -1;
      var firstNonPad = 0;
      var skippingBytes = false;
      var l = bytes.length;
      for (var addr = 0; addr < l; addr++) {
        var byte = bytes[addr];
        if (byte === padByte) {
          consecutivePads++;
          if (consecutivePads >= minPadLength) {
            if (lastNonPad !== -1) {
              memMap.set(firstNonPad, bytes.subarray(firstNonPad, lastNonPad + 1));
            }
            skippingBytes = true;
          }
        } else {
          if (skippingBytes) {
            skippingBytes = false;
            firstNonPad = addr;
          }
          lastNonPad = addr;
          consecutivePads = 0;
        }
      }
      if (!skippingBytes && lastNonPad !== -1) {
        memMap.set(firstNonPad, bytes.subarray(firstNonPad, l));
      }
      return memMap;
    };
    MemoryMap.prototype.slice = function slice(address, length) {
      var this$1 = this;
      if (length === void 0)
        length = Infinity;
      if (length < 0) {
        throw new Error("Length of the slice cannot be negative");
      }
      var sliced = new MemoryMap();
      for (var [blockAddr, block] of this$1) {
        var blockLength = block.length;
        if (blockAddr + blockLength >= address && blockAddr < address + length) {
          var sliceStart = Math.max(address, blockAddr);
          var sliceEnd = Math.min(address + length, blockAddr + blockLength);
          var sliceLength = sliceEnd - sliceStart;
          var relativeSliceStart = sliceStart - blockAddr;
          if (sliceLength > 0) {
            sliced.set(sliceStart, block.subarray(relativeSliceStart, relativeSliceStart + sliceLength));
          }
        }
      }
      return sliced;
    };
    MemoryMap.prototype.slicePad = function slicePad(address, length, padByte) {
      var this$1 = this;
      if (padByte === void 0)
        padByte = 255;
      if (length < 0) {
        throw new Error("Length of the slice cannot be negative");
      }
      var out = new Uint8Array(length).fill(padByte);
      for (var [blockAddr, block] of this$1) {
        var blockLength = block.length;
        if (blockAddr + blockLength >= address && blockAddr < address + length) {
          var sliceStart = Math.max(address, blockAddr);
          var sliceEnd = Math.min(address + length, blockAddr + blockLength);
          var sliceLength = sliceEnd - sliceStart;
          var relativeSliceStart = sliceStart - blockAddr;
          if (sliceLength > 0) {
            out.set(block.subarray(relativeSliceStart, relativeSliceStart + sliceLength), sliceStart - address);
          }
        }
      }
      return out;
    };
    MemoryMap.prototype.contains = function contains(memMap) {
      var this$1 = this;
      for (var [blockAddr, block] of memMap) {
        var blockLength = block.length;
        var slice = this$1.slice(blockAddr, blockLength).join().get(blockAddr);
        if (!slice || slice.length !== blockLength) {
          return false;
        }
        for (var i2 in block) {
          if (block[i2] !== slice[i2]) {
            return false;
          }
        }
      }
      return true;
    };
    Object.defineProperties(MemoryMap.prototype, prototypeAccessors);
    module2.exports = MemoryMap;
  }
});

// ../core/build/util/firmware.js
var require_firmware = __commonJS({
  "../core/build/util/firmware.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractFirmware = exports2.guessFirmwareFileFormat = void 0;
    var shared_1 = require_build();
    var crypto2 = __importStar(__require("crypto"));
    var nrf_intel_hex_1 = __importDefault(require_intel_hex_cjs());
    var ZWaveError_1 = require_ZWaveError();
    var crc_1 = require_crc();
    var firmwareIndicators = {
      aeotec: Buffer.from("Zensys.ZWave", "utf8"),
      gecko: 3944195587,
      hec: Buffer.from("HSENC2", "ascii")
    };
    function guessFirmwareFileFormat(filename, rawData) {
      if (filename.endsWith(".bin")) {
        return "bin";
      } else if ((filename.endsWith(".exe") || filename.endsWith(".ex_")) && rawData.includes(firmwareIndicators.aeotec)) {
        return "aeotec";
      } else if (/\.(hex|ota|otz)$/.test(filename)) {
        return filename.slice(-3);
      } else if (filename.endsWith(".gbl") && rawData.readUInt32BE(0) === firmwareIndicators.gecko) {
        return "gecko";
      } else if (filename.endsWith(".hec") && rawData.slice(0, firmwareIndicators.hec.length).equals(firmwareIndicators.hec)) {
        return "hec";
      } else {
        throw new ZWaveError_1.ZWaveError("Could not detect firmware format", ZWaveError_1.ZWaveErrorCodes.Invalid_Firmware_File);
      }
    }
    exports2.guessFirmwareFileFormat = guessFirmwareFileFormat;
    function extractFirmware(rawData, format) {
      switch (format) {
        case "aeotec":
          return extractFirmwareAeotec(rawData);
        case "otz":
        case "ota":
          if (rawData.every((b) => b <= 127)) {
            try {
              return extractFirmwareHEX(rawData);
            } catch (e) {
              if (e instanceof ZWaveError_1.ZWaveError && e.code === ZWaveError_1.ZWaveErrorCodes.Argument_Invalid) {
              } else {
                throw e;
              }
            }
          }
          return extractFirmwareRAW(rawData);
        case "hex":
          return extractFirmwareHEX(rawData);
        case "hec":
          return extractFirmwareHEC(rawData);
        case "gecko":
          return extractFirmwareRAW(rawData);
        case "bin":
          return extractFirmwareRAW(rawData);
      }
    }
    exports2.extractFirmware = extractFirmware;
    function extractFirmwareRAW(data) {
      return { data };
    }
    function extractFirmwareAeotec(data) {
      if (data.readUInt16BE(0) !== 19802) {
        throw new ZWaveError_1.ZWaveError("This does not appear to be a valid Aeotec updater (not an executable)!", ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
      }
      const firmwareStart = data.readUInt32BE(data.length - 8);
      const firmwareLength = data.readUInt32BE(data.length - 4);
      let numControlBytes = 8;
      if (data.includes(Buffer.from("ImageCalcCrc16", "ascii"))) {
        numControlBytes += 2;
      }
      switch (true) {
        case firmwareStart + firmwareLength === data.length - 256 - numControlBytes:
          break;
        case firmwareStart + firmwareLength === data.length - 256 - 8:
          numControlBytes = 8;
          break;
        default:
          throw new ZWaveError_1.ZWaveError("This does not appear to be a valid Aeotec updater (invalid firmware length)!", ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
      }
      const firmwareData = data.slice(firmwareStart, firmwareStart + firmwareLength);
      const firmwareNameBytes = data.slice(data.length - 256 - numControlBytes).slice(0, 256);
      if (numControlBytes === 10) {
        const checksum = data.readUInt16BE(data.length - 10);
        const actualChecksum = (0, crc_1.CRC16_CCITT)(Buffer.concat([firmwareData, firmwareNameBytes]), 65173);
        if (checksum !== actualChecksum) {
          throw new ZWaveError_1.ZWaveError("This does not appear to be a valid Aeotec updater (invalid checksum)!", ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        }
      }
      const firmwareTarget = firmwareNameBytes[0] < 32 ? firmwareNameBytes[0] : void 0;
      const firmwareNameOffset = firmwareTarget == void 0 ? 0 : 1;
      const firmwareName = firmwareNameBytes.slice(firmwareNameOffset, firmwareNameBytes.indexOf(0, firmwareNameOffset)).toString("utf8");
      if (!/^[a-zA-Z0-9_ -]+$/.test(firmwareName)) {
        throw new ZWaveError_1.ZWaveError("This does not appear to be a valid Aeotec updater (invalid firmware name)!", ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
      }
      const ret = {
        data: firmwareData
      };
      if (firmwareTarget != void 0) {
        ret.firmwareTarget = firmwareTarget;
      }
      if (/__TargetZwave__/.test(firmwareName)) {
        ret.firmwareTarget = 0;
      } else {
        const match = /__TargetMcu(\d)__/.exec(firmwareName);
        if (match)
          ret.firmwareTarget = +match[1];
      }
      return ret;
    }
    function extractFirmwareHEX(dataHEX) {
      try {
        if (Buffer.isBuffer(dataHEX)) {
          dataHEX = dataHEX.toString("ascii");
        }
        const memMap = nrf_intel_hex_1.default.fromHex(dataHEX);
        let data = Buffer.from([]);
        for (const [offset, chunk] of memMap.entries()) {
          data = Buffer.concat([
            data,
            Buffer.alloc(offset - data.length, 255),
            chunk
          ]);
        }
        return { data };
      } catch (e) {
        if (/Malformed/.test((0, shared_1.getErrorMessage)(e))) {
          throw new ZWaveError_1.ZWaveError("Could not parse HEX firmware file!", ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
        } else {
          throw e;
        }
      }
    }
    function extractFirmwareHEC(data) {
      const key2 = "d7a68def0f4a1241940f6cb8017121d15f0e2682e258c9f7553e706e834923b7";
      const iv = "0e6519297530583708612a2823663844";
      const decipher = crypto2.createDecipheriv("aes-256-cbc", Buffer.from(key2, "hex"), Buffer.from(iv, "hex"));
      const ciphertext = Buffer.from(data.slice(6).toString("ascii"), "base64");
      const plaintext = Buffer.concat([
        decipher.update(ciphertext),
        decipher.final()
      ]).toString("ascii").replace(/ /g, "\n");
      return extractFirmwareHEX(plaintext);
    }
  }
});

// ../core/build/values/ValueDB.js
var require_ValueDB = __commonJS({
  "../core/build/values/ValueDB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.indexDBsByNode = exports2.dbKeyToValueIdFast = exports2.ValueDB = exports2.valueIdToString = exports2.normalizeValueID = exports2.assertValueID = exports2.isValueID = void 0;
    var shared_1 = require_build();
    var ZWaveError_1 = require_ZWaveError();
    function isValueID(param) {
      if (typeof param.commandClass !== "number")
        return false;
      if (typeof param.property !== "number" && typeof param.property !== "string") {
        return false;
      }
      if (param.propertyKey != void 0 && typeof param.propertyKey !== "number" && typeof param.propertyKey !== "string") {
        return false;
      }
      if (param.endpoint != void 0 && typeof param.endpoint !== "number") {
        return false;
      }
      return true;
    }
    exports2.isValueID = isValueID;
    function assertValueID(param) {
      if (!isValueID(param)) {
        throw new ZWaveError_1.ZWaveError(`Invalid ValueID passed!`, ZWaveError_1.ZWaveErrorCodes.Argument_Invalid);
      }
    }
    exports2.assertValueID = assertValueID;
    function normalizeValueID(valueID) {
      assertValueID(valueID);
      const { commandClass, endpoint, property, propertyKey } = valueID;
      const normalized = {
        commandClass,
        endpoint: endpoint ?? 0,
        property
      };
      if (propertyKey != void 0)
        normalized.propertyKey = propertyKey;
      return normalized;
    }
    exports2.normalizeValueID = normalizeValueID;
    function valueIdToString(valueID) {
      return JSON.stringify(normalizeValueID(valueID));
    }
    exports2.valueIdToString = valueIdToString;
    var ValueDB = class extends shared_1.TypedEventEmitter {
      constructor(nodeId, valueDB, metadataDB, ownKeys) {
        super();
        this.nodeId = nodeId;
        this._db = valueDB;
        this._metadata = metadataDB;
        this._index = ownKeys ?? this.buildIndex();
      }
      buildIndex() {
        const ret = /* @__PURE__ */ new Set();
        for (const key2 of this._db.keys()) {
          if (compareDBKeyFast(key2, this.nodeId))
            ret.add(key2);
        }
        for (const key2 of this._metadata.keys()) {
          if (!ret.has(key2) && compareDBKeyFast(key2, this.nodeId))
            ret.add(key2);
        }
        return ret;
      }
      valueIdToDBKey(valueID) {
        return JSON.stringify({
          nodeId: this.nodeId,
          ...normalizeValueID(valueID)
        });
      }
      dbKeyToValueId(key2) {
        try {
          return dbKeyToValueIdFast(key2);
        } catch {
          return JSON.parse(key2);
        }
      }
      setValue(valueId, value, options = {}) {
        let dbKey;
        try {
          dbKey = this.valueIdToDBKey(valueId);
        } catch (e) {
          if ((0, ZWaveError_1.isZWaveError)(e) && e.code === ZWaveError_1.ZWaveErrorCodes.Argument_Invalid && options.noThrow === true) {
            return;
          }
          throw e;
        }
        if (options.stateful !== false) {
          const cbArg = {
            ...valueId,
            newValue: value
          };
          let event;
          if (this._db.has(dbKey)) {
            event = "value updated";
            cbArg.prevValue = this._db.get(dbKey);
            if (options.source)
              cbArg.source = options.source;
          } else {
            event = "value added";
          }
          this._index.add(dbKey);
          this._db.set(dbKey, value, options.updateTimestamp !== false);
          if (valueId.commandClass >= 0 && options.noEvent !== true) {
            this.emit(event, cbArg);
          }
        } else if (valueId.commandClass >= 0) {
          this.emit("value notification", {
            ...valueId,
            value
          });
        }
      }
      removeValue(valueId, options = {}) {
        const dbKey = this.valueIdToDBKey(valueId);
        if (!this._metadata.has(dbKey)) {
          this._index.delete(dbKey);
        }
        if (this._db.has(dbKey)) {
          const prevValue = this._db.get(dbKey);
          this._db.delete(dbKey);
          if (valueId.commandClass >= 0 && options.noEvent !== true) {
            const cbArg = {
              ...valueId,
              prevValue
            };
            this.emit("value removed", cbArg);
          }
          return true;
        }
        return false;
      }
      getValue(valueId) {
        const key2 = this.valueIdToDBKey(valueId);
        return this._db.get(key2);
      }
      hasValue(valueId) {
        const key2 = this.valueIdToDBKey(valueId);
        return this._db.has(key2);
      }
      findValues(predicate) {
        const ret = [];
        for (const key2 of this._index) {
          if (!this._db.has(key2))
            continue;
          const { nodeId, ...valueId } = this.dbKeyToValueId(key2);
          if (predicate(valueId)) {
            ret.push({ ...valueId, value: this._db.get(key2) });
          }
        }
        return ret;
      }
      getValues(forCC) {
        const ret = [];
        for (const key2 of this._index) {
          if (compareDBKeyFast(key2, this.nodeId, { commandClass: forCC }) && this._db.has(key2)) {
            const { nodeId, ...valueId } = this.dbKeyToValueId(key2);
            const value = this._db.get(key2);
            ret.push({ ...valueId, value });
          }
        }
        return ret;
      }
      getTimestamp(valueId) {
        const key2 = this.valueIdToDBKey(valueId);
        return this._db.getTimestamp(key2);
      }
      clear(options = {}) {
        for (const key2 of this._index) {
          const { nodeId, ...valueId } = this.dbKeyToValueId(key2);
          if (this._db.has(key2)) {
            const prevValue = this._db.get(key2);
            this._db.delete(key2);
            if (valueId.commandClass >= 0 && options.noEvent !== true) {
              const cbArg = {
                ...valueId,
                prevValue
              };
              this.emit("value removed", cbArg);
            }
          }
          if (this._metadata.has(key2)) {
            this._metadata.delete(key2);
            if (valueId.commandClass >= 0 && options.noEvent !== true) {
              const cbArg = {
                ...valueId,
                metadata: void 0
              };
              this.emit("metadata updated", cbArg);
            }
          }
        }
        this._index.clear();
      }
      setMetadata(valueId, metadata, options = {}) {
        let dbKey;
        try {
          dbKey = this.valueIdToDBKey(valueId);
        } catch (e) {
          if ((0, ZWaveError_1.isZWaveError)(e) && e.code === ZWaveError_1.ZWaveErrorCodes.Argument_Invalid && options.noThrow === true) {
            return;
          }
          throw e;
        }
        if (metadata) {
          this._index.add(dbKey);
          this._metadata.set(dbKey, metadata);
        } else {
          if (!this._db.has(dbKey)) {
            this._index.delete(dbKey);
          }
          this._metadata.delete(dbKey);
        }
        const cbArg = {
          ...valueId,
          metadata
        };
        if (valueId.commandClass >= 0 && options.noEvent !== true) {
          this.emit("metadata updated", cbArg);
        }
      }
      hasMetadata(valueId) {
        const key2 = this.valueIdToDBKey(valueId);
        return this._metadata.has(key2);
      }
      getMetadata(valueId) {
        const key2 = this.valueIdToDBKey(valueId);
        return this._metadata.get(key2);
      }
      getAllMetadata(forCC) {
        const ret = [];
        for (const key2 of this._index) {
          if (compareDBKeyFast(key2, this.nodeId, { commandClass: forCC }) && this._metadata.has(key2)) {
            const { nodeId, ...valueId } = this.dbKeyToValueId(key2);
            const metadata = this._metadata.get(key2);
            ret.push({ ...valueId, metadata });
          }
        }
        return ret;
      }
      findMetadata(predicate) {
        const ret = [];
        for (const key2 of this._index) {
          if (!this._metadata.has(key2))
            continue;
          const { nodeId, ...valueId } = this.dbKeyToValueId(key2);
          if (predicate(valueId)) {
            ret.push({ ...valueId, metadata: this._metadata.get(key2) });
          }
        }
        return ret;
      }
    };
    exports2.ValueDB = ValueDB;
    function dbKeyToValueIdFast(key2) {
      let start = 10;
      if (key2.charCodeAt(start - 1) !== 58) {
        console.error(key2.slice(start - 1));
        throw new Error("Invalid input format!");
      }
      let end = start + 1;
      const len = key2.length;
      while (end < len && key2.charCodeAt(end) !== 44)
        end++;
      const nodeId = parseInt(key2.slice(start, end));
      start = end + 16;
      if (key2.charCodeAt(start - 1) !== 58)
        throw new Error("Invalid input format!");
      end = start + 1;
      while (end < len && key2.charCodeAt(end) !== 44)
        end++;
      const commandClass = parseInt(key2.slice(start, end));
      start = end + 12;
      if (key2.charCodeAt(start - 1) !== 58)
        throw new Error("Invalid input format!");
      end = start + 1;
      while (end < len && key2.charCodeAt(end) !== 44)
        end++;
      const endpoint = parseInt(key2.slice(start, end));
      start = end + 12;
      if (key2.charCodeAt(start - 1) !== 58)
        throw new Error("Invalid input format!");
      let property;
      if (key2.charCodeAt(start) === 34) {
        start++;
        end = start + 1;
        while (end < len && key2.charCodeAt(end) !== 34)
          end++;
        property = key2.slice(start, end);
        end++;
      } else {
        end = start + 1;
        while (end < len && key2.charCodeAt(end) !== 44 && key2.charCodeAt(end) !== 125)
          end++;
        property = parseInt(key2.slice(start, end));
      }
      if (key2.charCodeAt(end) !== 125) {
        let propertyKey;
        start = end + 15;
        if (key2.charCodeAt(start - 1) !== 58)
          throw new Error("Invalid input format!");
        if (key2.charCodeAt(start) === 34) {
          start++;
          end = start + 1;
          while (end < len && key2.charCodeAt(end) !== 34)
            end++;
          propertyKey = key2.slice(start, end);
          end++;
        } else {
          end = start + 1;
          while (end < len && key2.charCodeAt(end) !== 44 && key2.charCodeAt(end) !== 125)
            end++;
          propertyKey = parseInt(key2.slice(start, end));
        }
        return {
          nodeId,
          commandClass,
          endpoint,
          property,
          propertyKey
        };
      } else {
        return {
          nodeId,
          commandClass,
          endpoint,
          property
        };
      }
    }
    exports2.dbKeyToValueIdFast = dbKeyToValueIdFast;
    function compareDBKeyFast(key2, nodeId, valueId) {
      if (-1 === key2.indexOf(`{"nodeId":${nodeId},`))
        return false;
      if (!valueId)
        return true;
      if ("commandClass" in valueId) {
        if (-1 === key2.indexOf(`,"commandClass":${valueId.commandClass},`))
          return false;
      }
      if ("endpoint" in valueId) {
        if (-1 === key2.indexOf(`,"endpoint":${valueId.endpoint},`))
          return false;
      }
      if (typeof valueId.property === "string") {
        if (-1 === key2.indexOf(`,"property":"${valueId.property}"`))
          return false;
      } else if (typeof valueId.property === "number") {
        if (-1 === key2.indexOf(`,"property":${valueId.property}`))
          return false;
      }
      if (typeof valueId.propertyKey === "string") {
        if (-1 === key2.indexOf(`,"propertyKey":"${valueId.propertyKey}"`))
          return false;
      } else if (typeof valueId.propertyKey === "number") {
        if (-1 === key2.indexOf(`,"propertyKey":${valueId.propertyKey}`))
          return false;
      }
      return true;
    }
    function indexDBsByNode(databases) {
      const indexes = /* @__PURE__ */ new Map();
      for (const db of databases) {
        for (const key2 of db.keys()) {
          const nodeId = extractNodeIdFromDBKeyFast(key2);
          if (nodeId == void 0)
            continue;
          if (!indexes.has(nodeId)) {
            indexes.set(nodeId, /* @__PURE__ */ new Set());
          }
          indexes.get(nodeId).add(key2);
        }
      }
      return indexes;
    }
    exports2.indexDBsByNode = indexDBsByNode;
    function extractNodeIdFromDBKeyFast(key2) {
      const start = 10;
      if (key2.charCodeAt(start - 1) !== 58) {
        return void 0;
      }
      let end = start + 1;
      const len = key2.length;
      while (end < len && key2.charCodeAt(end) !== 44)
        end++;
      return parseInt(key2.slice(start, end));
    }
  }
});

// ../core/build/index.js
var require_build2 = __commonJS({
  "../core/build/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_ICommandClass(), exports2);
    __exportStar(require_IZWaveEndpoint(), exports2);
    __exportStar(require_IZWaveNode(), exports2);
    __exportStar(require_CommandClasses(), exports2);
    __exportStar(require_ControllerCapabilities(), exports2);
    __exportStar(require_LibraryTypes(), exports2);
    __exportStar(require_NodeInfo(), exports2);
    __exportStar(require_Protocols(), exports2);
    __exportStar(require_RFRegion(), exports2);
    __exportStar(require_ZWaveApiVersion(), exports2);
    __exportStar(require_consts(), exports2);
    __exportStar(require_ZWaveError(), exports2);
    __exportStar(require_Controller(), exports2);
    __exportStar(require_shared(), exports2);
    __exportStar(require_shared_safe(), exports2);
    __exportStar(require_crypto(), exports2);
    __exportStar(require_DSK(), exports2);
    __exportStar(require_Manager(), exports2);
    __exportStar(require_Manager2(), exports2);
    __exportStar(require_QR(), exports2);
    __exportStar(require_SecurityClass(), exports2);
    __exportStar(require_shared_safe2(), exports2);
    __exportStar(require_assertZWaveError(), exports2);
    __exportStar(require_crc(), exports2);
    __exportStar(require_date(), exports2);
    __exportStar(require_decorators(), exports2);
    __exportStar(require_firmware(), exports2);
    __exportStar(require_graph(), exports2);
    __exportStar(require_misc(), exports2);
    __exportStar(require_Types(), exports2);
    __exportStar(require_Cache(), exports2);
    __exportStar(require_CacheBackedMap(), exports2);
    __exportStar(require_Duration(), exports2);
    __exportStar(require_Metadata(), exports2);
    __exportStar(require_Primitive(), exports2);
    __exportStar(require_Timeout(), exports2);
    __exportStar(require_ValueDB(), exports2);
    __exportStar(require_Types2(), exports2);
  }
});

// ../../node_modules/.store/lodash.isequal-npm-4.5.0-f8b0f64d63/node_modules/lodash.isequal/index.js
var require_lodash = __commonJS({
  "../../node_modules/.store/lodash.isequal-npm-4.5.0-f8b0f64d63/node_modules/lodash.isequal/index.js"(exports2, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func2) {
      return function(value) {
        return func2(value);
      };
    }
    function cacheHas(cache3, key2) {
      return cache3.has(key2);
    }
    function getValue2(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key2) {
        result[++index] = [key2, value];
      });
      return result;
    }
    function overArg(func2, transform) {
      return function(arg2) {
        return func2(transform(arg2));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView2 = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key2) {
      var result = this.has(key2) && delete this.__data__[key2];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    function hashSet(key2, value) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    function listCacheSet(key2, value) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        ++this.size;
        data.push([key2, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key2) {
      var result = getMapData(this, key2)["delete"](key2);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    function mapCacheSet(key2, value) {
      var data = getMapData(this, key2), size = data.size;
      data.set(key2, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key2) {
      var data = this.__data__, result = data["delete"](key2);
      this.size = data.size;
      return result;
    }
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    function stackSet(key2, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key2, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length)))) {
          result.push(key2);
        }
      }
      return result;
    }
    function assocIndexOf(array, key2) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key2 = objProps[index];
        if (!(isPartial ? key2 in other : hasOwnProperty.call(other, key2))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key2 = objProps[index];
        var objValue = object[key2], othValue = other[key2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key2 == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key2) {
      var value = getValue2(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type2 = typeof value;
      return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func2) {
      return !!maskSrcKey && maskSrcKey in func2;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto2;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function toSource(func2) {
      if (func2 != null) {
        try {
          return funcToString.call(func2);
        } catch (e) {
        }
        try {
          return func2 + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type2 = typeof value;
      return value != null && (type2 == "object" || type2 == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function stubArray() {
      return [];
    }
    function stubFalse() {
      return false;
    }
    module2.exports = isEqual2;
  }
});

// ../../node_modules/.store/arr-rotate-npm-1.0.0-1651ef756b/node_modules/arr-rotate/index.js
var require_arr_rotate = __commonJS({
  "../../node_modules/.store/arr-rotate-npm-1.0.0-1651ef756b/node_modules/arr-rotate/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (input, n) => {
      if (!Array.isArray(input)) {
        throw new TypeError(`Expected an array, got ${typeof input}`);
      }
      const x = input.slice();
      const num2 = typeof n === "number" ? n : 0;
      return x.splice(-num2 % x.length).concat(x);
    };
  }
});

// src/cli.tsx
var import_shared6 = __toESM(require_build(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render.js
import { Stream } from "node:stream";
import process12 from "node:process";

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/ink.js
var import_react10 = __toESM(require_react(), 1);
var import_throttle = __toESM(require_throttle(), 1);
import process11 from "node:process";

// ../../node_modules/.store/ansi-escapes-npm-6.0.0-eab622440e/node_modules/ansi-escapes/index.js
import process2 from "node:process";
var ESC = "\x1B[";
var OSC = "\x1B]";
var BEL = "\x07";
var SEP = ";";
var isTerminalApp = process2.env.TERM_PROGRAM === "Apple_Terminal";
var ansiEscapes = {};
ansiEscapes.cursorTo = (x, y) => {
  if (typeof x !== "number") {
    throw new TypeError("The `x` argument is required");
  }
  if (typeof y !== "number") {
    return ESC + (x + 1) + "G";
  }
  return ESC + (y + 1) + SEP + (x + 1) + "H";
};
ansiEscapes.cursorMove = (x, y) => {
  if (typeof x !== "number") {
    throw new TypeError("The `x` argument is required");
  }
  let returnValue = "";
  if (x < 0) {
    returnValue += ESC + -x + "D";
  } else if (x > 0) {
    returnValue += ESC + x + "C";
  }
  if (y < 0) {
    returnValue += ESC + -y + "A";
  } else if (y > 0) {
    returnValue += ESC + y + "B";
  }
  return returnValue;
};
ansiEscapes.cursorUp = (count = 1) => ESC + count + "A";
ansiEscapes.cursorDown = (count = 1) => ESC + count + "B";
ansiEscapes.cursorForward = (count = 1) => ESC + count + "C";
ansiEscapes.cursorBackward = (count = 1) => ESC + count + "D";
ansiEscapes.cursorLeft = ESC + "G";
ansiEscapes.cursorSavePosition = isTerminalApp ? "\x1B7" : ESC + "s";
ansiEscapes.cursorRestorePosition = isTerminalApp ? "\x1B8" : ESC + "u";
ansiEscapes.cursorGetPosition = ESC + "6n";
ansiEscapes.cursorNextLine = ESC + "E";
ansiEscapes.cursorPrevLine = ESC + "F";
ansiEscapes.cursorHide = ESC + "?25l";
ansiEscapes.cursorShow = ESC + "?25h";
ansiEscapes.eraseLines = (count) => {
  let clear = "";
  for (let i2 = 0; i2 < count; i2++) {
    clear += ansiEscapes.eraseLine + (i2 < count - 1 ? ansiEscapes.cursorUp() : "");
  }
  if (count) {
    clear += ansiEscapes.cursorLeft;
  }
  return clear;
};
ansiEscapes.eraseEndLine = ESC + "K";
ansiEscapes.eraseStartLine = ESC + "1K";
ansiEscapes.eraseLine = ESC + "2K";
ansiEscapes.eraseDown = ESC + "J";
ansiEscapes.eraseUp = ESC + "1J";
ansiEscapes.eraseScreen = ESC + "2J";
ansiEscapes.scrollUp = ESC + "S";
ansiEscapes.scrollDown = ESC + "T";
ansiEscapes.clearScreen = "\x1Bc";
ansiEscapes.clearTerminal = process2.platform === "win32" ? `${ansiEscapes.eraseScreen}${ESC}0f` : `${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;
ansiEscapes.beep = BEL;
ansiEscapes.link = (text, url) => [
  OSC,
  "8",
  SEP,
  SEP,
  url,
  BEL,
  text,
  OSC,
  "8",
  SEP,
  SEP,
  BEL
].join("");
ansiEscapes.image = (buffer2, options = {}) => {
  let returnValue = `${OSC}1337;File=inline=1`;
  if (options.width) {
    returnValue += `;width=${options.width}`;
  }
  if (options.height) {
    returnValue += `;height=${options.height}`;
  }
  if (options.preserveAspectRatio === false) {
    returnValue += ";preserveAspectRatio=0";
  }
  return returnValue + ":" + buffer2.toString("base64") + BEL;
};
ansiEscapes.iTerm = {
  setCwd: (cwd2 = process2.cwd()) => `${OSC}50;CurrentDir=${cwd2}${BEL}`,
  annotation(message, options = {}) {
    let returnValue = `${OSC}1337;`;
    const hasX = typeof options.x !== "undefined";
    const hasY = typeof options.y !== "undefined";
    if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== "undefined")) {
      throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
    }
    message = message.replace(/\|/g, "");
    returnValue += options.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=";
    if (options.length > 0) {
      returnValue += (hasX ? [message, options.length, options.x, options.y] : [options.length, message]).join("|");
    } else {
      returnValue += message;
    }
    return returnValue + BEL;
  }
};
var ansi_escapes_default = ansiEscapes;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/ink.js
var import_is_ci = __toESM(require_is_ci(), 1);

// ../../node_modules/.store/auto-bind-npm-5.0.1-a3b4e3a569/node_modules/auto-bind/index.js
var getAllProperties = (object) => {
  const properties = /* @__PURE__ */ new Set();
  do {
    for (const key2 of Reflect.ownKeys(object)) {
      properties.add([object, key2]);
    }
  } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
  return properties;
};
function autoBind(self2, { include, exclude } = {}) {
  const filter = (key2) => {
    const match = (pattern) => typeof pattern === "string" ? key2 === pattern : pattern.test(key2);
    if (include) {
      return include.some(match);
    }
    if (exclude) {
      return !exclude.some(match);
    }
    return true;
  };
  for (const [object, key2] of getAllProperties(self2.constructor.prototype)) {
    if (key2 === "constructor" || !filter(key2)) {
      continue;
    }
    const descriptor = Reflect.getOwnPropertyDescriptor(object, key2);
    if (descriptor && typeof descriptor.value === "function") {
      self2[key2] = self2[key2].bind(self2);
    }
  }
  return self2;
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/ink.js
var import_signal_exit2 = __toESM(require_signal_exit(), 1);

// ../../node_modules/.store/patch-console-npm-2.0.0-1a883acd35/node_modules/patch-console/dist/index.js
import { PassThrough } from "node:stream";
var consoleMethods = [
  "assert",
  "count",
  "countReset",
  "debug",
  "dir",
  "dirxml",
  "error",
  "group",
  "groupCollapsed",
  "groupEnd",
  "info",
  "log",
  "table",
  "time",
  "timeEnd",
  "timeLog",
  "trace",
  "warn"
];
var originalMethods = {};
var patchConsole = (callback) => {
  const stdout = new PassThrough();
  const stderr = new PassThrough();
  stdout.write = (data) => {
    callback("stdout", data);
  };
  stderr.write = (data) => {
    callback("stderr", data);
  };
  const internalConsole = new console.Console(stdout, stderr);
  for (const method of consoleMethods) {
    originalMethods[method] = console[method];
    console[method] = internalConsole[method];
  }
  return () => {
    for (const method of consoleMethods) {
      console[method] = originalMethods[method];
    }
    originalMethods = {};
  };
};
var dist_default = patchConsole;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/reconciler.js
var import_react_reconciler = __toESM(require_react_reconciler(), 1);
var import_constants = __toESM(require_constants(), 1);
var import_yoga_layout_prebuilt3 = __toESM(require_entry_browser(), 1);
import process3 from "node:process";

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/dom.js
var import_yoga_layout_prebuilt2 = __toESM(require_entry_browser(), 1);

// ../../node_modules/.store/ansi-regex-npm-6.0.1-8d663a607d/node_modules/ansi-regex/index.js
function ansiRegex({ onlyFirst = false } = {}) {
  const pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|");
  return new RegExp(pattern, onlyFirst ? void 0 : "g");
}

// ../../node_modules/.store/strip-ansi-npm-7.0.1-668c121204/node_modules/strip-ansi/index.js
function stripAnsi(string) {
  if (typeof string !== "string") {
    throw new TypeError(`Expected a \`string\`, got \`${typeof string}\``);
  }
  return string.replace(ansiRegex(), "");
}

// ../../node_modules/.store/string-width-npm-5.1.2-bf60531341/node_modules/string-width/index.js
var import_eastasianwidth = __toESM(require_eastasianwidth(), 1);
var import_emoji_regex = __toESM(require_emoji_regex(), 1);
function stringWidth(string, options = {}) {
  if (typeof string !== "string" || string.length === 0) {
    return 0;
  }
  options = {
    ambiguousIsNarrow: true,
    ...options
  };
  string = stripAnsi(string);
  if (string.length === 0) {
    return 0;
  }
  string = string.replace((0, import_emoji_regex.default)(), "  ");
  const ambiguousCharacterWidth = options.ambiguousIsNarrow ? 1 : 2;
  let width = 0;
  for (const character of string) {
    const codePoint = character.codePointAt(0);
    if (codePoint <= 31 || codePoint >= 127 && codePoint <= 159) {
      continue;
    }
    if (codePoint >= 768 && codePoint <= 879) {
      continue;
    }
    const code = import_eastasianwidth.default.eastAsianWidth(character);
    switch (code) {
      case "F":
      case "W":
        width += 2;
        break;
      case "A":
        width += ambiguousCharacterWidth;
        break;
      default:
        width += 1;
    }
  }
  return width;
}

// ../../node_modules/.store/widest-line-npm-4.0.1-e0740b8930/node_modules/widest-line/index.js
function widestLine(string) {
  let lineWidth = 0;
  for (const line of string.split("\n")) {
    lineWidth = Math.max(lineWidth, stringWidth(line));
  }
  return lineWidth;
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/measure-text.js
var cache = {};
var measureText = (text) => {
  if (text.length === 0) {
    return {
      width: 0,
      height: 0
    };
  }
  const cachedDimensions = cache[text];
  if (cachedDimensions) {
    return cachedDimensions;
  }
  const width = widestLine(text);
  const height = text.split("\n").length;
  cache[text] = { width, height };
  return { width, height };
};
var measure_text_default = measureText;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/styles.js
var import_yoga_layout_prebuilt = __toESM(require_entry_browser(), 1);
var applyPositionStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("position" in style) {
    node.setPositionType(style.position === "absolute" ? import_yoga_layout_prebuilt.default.POSITION_TYPE_ABSOLUTE : import_yoga_layout_prebuilt.default.POSITION_TYPE_RELATIVE);
  }
};
var applyMarginStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("marginLeft" in style) {
    node.setMargin(import_yoga_layout_prebuilt.default.EDGE_START, style.marginLeft || 0);
  }
  if ("marginRight" in style) {
    node.setMargin(import_yoga_layout_prebuilt.default.EDGE_END, style.marginRight || 0);
  }
  if ("marginTop" in style) {
    node.setMargin(import_yoga_layout_prebuilt.default.EDGE_TOP, style.marginTop || 0);
  }
  if ("marginBottom" in style) {
    node.setMargin(import_yoga_layout_prebuilt.default.EDGE_BOTTOM, style.marginBottom || 0);
  }
};
var applyPaddingStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("paddingLeft" in style) {
    node.setPadding(import_yoga_layout_prebuilt.default.EDGE_LEFT, style.paddingLeft || 0);
  }
  if ("paddingRight" in style) {
    node.setPadding(import_yoga_layout_prebuilt.default.EDGE_RIGHT, style.paddingRight || 0);
  }
  if ("paddingTop" in style) {
    node.setPadding(import_yoga_layout_prebuilt.default.EDGE_TOP, style.paddingTop || 0);
  }
  if ("paddingBottom" in style) {
    node.setPadding(import_yoga_layout_prebuilt.default.EDGE_BOTTOM, style.paddingBottom || 0);
  }
};
var applyFlexStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("flexGrow" in style) {
    node.setFlexGrow(style.flexGrow ?? 0);
  }
  if ("flexShrink" in style) {
    node.setFlexShrink(typeof style.flexShrink === "number" ? style.flexShrink : 1);
  }
  if ("flexDirection" in style) {
    if (style.flexDirection === "row") {
      node.setFlexDirection(import_yoga_layout_prebuilt.default.FLEX_DIRECTION_ROW);
    }
    if (style.flexDirection === "row-reverse") {
      node.setFlexDirection(import_yoga_layout_prebuilt.default.FLEX_DIRECTION_ROW_REVERSE);
    }
    if (style.flexDirection === "column") {
      node.setFlexDirection(import_yoga_layout_prebuilt.default.FLEX_DIRECTION_COLUMN);
    }
    if (style.flexDirection === "column-reverse") {
      node.setFlexDirection(import_yoga_layout_prebuilt.default.FLEX_DIRECTION_COLUMN_REVERSE);
    }
  }
  if ("flexBasis" in style) {
    if (typeof style.flexBasis === "number") {
      node.setFlexBasis(style.flexBasis);
    } else if (typeof style.flexBasis === "string") {
      node.setFlexBasisPercent(Number.parseInt(style.flexBasis, 10));
    } else {
      node.setFlexBasis(Number.NaN);
    }
  }
  if ("alignItems" in style) {
    if (style.alignItems === "stretch" || !style.alignItems) {
      node.setAlignItems(import_yoga_layout_prebuilt.default.ALIGN_STRETCH);
    }
    if (style.alignItems === "flex-start") {
      node.setAlignItems(import_yoga_layout_prebuilt.default.ALIGN_FLEX_START);
    }
    if (style.alignItems === "center") {
      node.setAlignItems(import_yoga_layout_prebuilt.default.ALIGN_CENTER);
    }
    if (style.alignItems === "flex-end") {
      node.setAlignItems(import_yoga_layout_prebuilt.default.ALIGN_FLEX_END);
    }
  }
  if ("alignSelf" in style) {
    if (style.alignSelf === "auto" || !style.alignSelf) {
      node.setAlignSelf(import_yoga_layout_prebuilt.default.ALIGN_AUTO);
    }
    if (style.alignSelf === "flex-start") {
      node.setAlignSelf(import_yoga_layout_prebuilt.default.ALIGN_FLEX_START);
    }
    if (style.alignSelf === "center") {
      node.setAlignSelf(import_yoga_layout_prebuilt.default.ALIGN_CENTER);
    }
    if (style.alignSelf === "flex-end") {
      node.setAlignSelf(import_yoga_layout_prebuilt.default.ALIGN_FLEX_END);
    }
  }
  if ("justifyContent" in style) {
    if (style.justifyContent === "flex-start" || !style.justifyContent) {
      node.setJustifyContent(import_yoga_layout_prebuilt.default.JUSTIFY_FLEX_START);
    }
    if (style.justifyContent === "center") {
      node.setJustifyContent(import_yoga_layout_prebuilt.default.JUSTIFY_CENTER);
    }
    if (style.justifyContent === "flex-end") {
      node.setJustifyContent(import_yoga_layout_prebuilt.default.JUSTIFY_FLEX_END);
    }
    if (style.justifyContent === "space-between") {
      node.setJustifyContent(import_yoga_layout_prebuilt.default.JUSTIFY_SPACE_BETWEEN);
    }
    if (style.justifyContent === "space-around") {
      node.setJustifyContent(import_yoga_layout_prebuilt.default.JUSTIFY_SPACE_AROUND);
    }
  }
};
var applyDimensionStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("width" in style) {
    if (typeof style.width === "number") {
      node.setWidth(style.width);
    } else if (typeof style.width === "string") {
      node.setWidthPercent(Number.parseInt(style.width, 10));
    } else {
      node.setWidthAuto();
    }
  }
  if ("height" in style) {
    if (typeof style.height === "number") {
      node.setHeight(style.height);
    } else if (typeof style.height === "string") {
      node.setHeightPercent(Number.parseInt(style.height, 10));
    } else {
      node.setHeightAuto();
    }
  }
  if ("minWidth" in style) {
    if (typeof style.minWidth === "string") {
      node.setMinWidthPercent(Number.parseInt(style.minWidth, 10));
    } else {
      node.setMinWidth(style.minWidth ?? 0);
    }
  }
  if ("minHeight" in style) {
    if (typeof style.minHeight === "string") {
      node.setMinHeightPercent(Number.parseInt(style.minHeight, 10));
    } else {
      node.setMinHeight(style.minHeight ?? 0);
    }
  }
};
var applyDisplayStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("display" in style) {
    node.setDisplay(style.display === "flex" ? import_yoga_layout_prebuilt.default.DISPLAY_FLEX : import_yoga_layout_prebuilt.default.DISPLAY_NONE);
  }
};
var applyBorderStyles = (domNode, style) => {
  const node = domNode.yogaNode;
  if ("borderStyle" in style) {
    const borderWidth = domNode.nodeName === "ink-line" ? 0 : typeof style.borderStyle === "string" ? 1 : 0;
    node.setBorder(import_yoga_layout_prebuilt.default.EDGE_TOP, borderWidth);
    node.setBorder(import_yoga_layout_prebuilt.default.EDGE_BOTTOM, borderWidth);
    node.setBorder(import_yoga_layout_prebuilt.default.EDGE_LEFT, borderWidth);
    node.setBorder(import_yoga_layout_prebuilt.default.EDGE_RIGHT, borderWidth);
  }
};
var styles = (node, style = {}) => {
  applyPositionStyles(node, style);
  applyMarginStyles(node, style);
  applyPaddingStyles(node, style);
  applyFlexStyles(node, style);
  applyDimensionStyles(node, style);
  applyDisplayStyles(node, style);
  applyBorderStyles(node, style);
};
var styles_default = styles;

// ../../node_modules/.store/ansi-styles-npm-6.1.1-85a805bda9/node_modules/ansi-styles/index.js
var ANSI_BACKGROUND_OFFSET = 10;
var wrapAnsi16 = (offset = 0) => (code) => `\x1B[${code + offset}m`;
var wrapAnsi256 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
var wrapAnsi16m = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
function assembleStyles() {
  const codes = /* @__PURE__ */ new Map();
  const styles4 = {
    modifier: {
      reset: [0, 0],
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      overline: [53, 55],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29]
    },
    color: {
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      blackBright: [90, 39],
      redBright: [91, 39],
      greenBright: [92, 39],
      yellowBright: [93, 39],
      blueBright: [94, 39],
      magentaBright: [95, 39],
      cyanBright: [96, 39],
      whiteBright: [97, 39]
    },
    bgColor: {
      bgBlack: [40, 49],
      bgRed: [41, 49],
      bgGreen: [42, 49],
      bgYellow: [43, 49],
      bgBlue: [44, 49],
      bgMagenta: [45, 49],
      bgCyan: [46, 49],
      bgWhite: [47, 49],
      bgBlackBright: [100, 49],
      bgRedBright: [101, 49],
      bgGreenBright: [102, 49],
      bgYellowBright: [103, 49],
      bgBlueBright: [104, 49],
      bgMagentaBright: [105, 49],
      bgCyanBright: [106, 49],
      bgWhiteBright: [107, 49]
    }
  };
  styles4.color.gray = styles4.color.blackBright;
  styles4.bgColor.bgGray = styles4.bgColor.bgBlackBright;
  styles4.color.grey = styles4.color.blackBright;
  styles4.bgColor.bgGrey = styles4.bgColor.bgBlackBright;
  for (const [groupName, group] of Object.entries(styles4)) {
    for (const [styleName, style] of Object.entries(group)) {
      styles4[styleName] = {
        open: `\x1B[${style[0]}m`,
        close: `\x1B[${style[1]}m`
      };
      group[styleName] = styles4[styleName];
      codes.set(style[0], style[1]);
    }
    Object.defineProperty(styles4, groupName, {
      value: group,
      enumerable: false
    });
  }
  Object.defineProperty(styles4, "codes", {
    value: codes,
    enumerable: false
  });
  styles4.color.close = "\x1B[39m";
  styles4.bgColor.close = "\x1B[49m";
  styles4.color.ansi = wrapAnsi16();
  styles4.color.ansi256 = wrapAnsi256();
  styles4.color.ansi16m = wrapAnsi16m();
  styles4.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
  styles4.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
  styles4.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
  Object.defineProperties(styles4, {
    rgbToAnsi256: {
      value: (red, green, blue) => {
        if (red === green && green === blue) {
          if (red < 8) {
            return 16;
          }
          if (red > 248) {
            return 231;
          }
          return Math.round((red - 8) / 247 * 24) + 232;
        }
        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
      },
      enumerable: false
    },
    hexToRgb: {
      value: (hex) => {
        const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
        if (!matches) {
          return [0, 0, 0];
        }
        let [colorString] = matches;
        if (colorString.length === 3) {
          colorString = [...colorString].map((character) => character + character).join("");
        }
        const integer = Number.parseInt(colorString, 16);
        return [
          integer >> 16 & 255,
          integer >> 8 & 255,
          integer & 255
        ];
      },
      enumerable: false
    },
    hexToAnsi256: {
      value: (hex) => styles4.rgbToAnsi256(...styles4.hexToRgb(hex)),
      enumerable: false
    },
    ansi256ToAnsi: {
      value: (code) => {
        if (code < 8) {
          return 30 + code;
        }
        if (code < 16) {
          return 90 + (code - 8);
        }
        let red;
        let green;
        let blue;
        if (code >= 232) {
          red = ((code - 232) * 10 + 8) / 255;
          green = red;
          blue = red;
        } else {
          code -= 16;
          const remainder = code % 36;
          red = Math.floor(code / 36) / 5;
          green = Math.floor(remainder / 6) / 5;
          blue = remainder % 6 / 5;
        }
        const value = Math.max(red, green, blue) * 2;
        if (value === 0) {
          return 30;
        }
        let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
        if (value === 2) {
          result += 60;
        }
        return result;
      },
      enumerable: false
    },
    rgbToAnsi: {
      value: (red, green, blue) => styles4.ansi256ToAnsi(styles4.rgbToAnsi256(red, green, blue)),
      enumerable: false
    },
    hexToAnsi: {
      value: (hex) => styles4.ansi256ToAnsi(styles4.hexToAnsi256(hex)),
      enumerable: false
    }
  });
  return styles4;
}
var ansiStyles = assembleStyles();
var ansi_styles_default = ansiStyles;

// ../../node_modules/.store/wrap-ansi-npm-8.1.0-26a4e6ae28/node_modules/wrap-ansi/index.js
var ESCAPES = /* @__PURE__ */ new Set([
  "\x1B",
  "\x9B"
]);
var END_CODE = 39;
var ANSI_ESCAPE_BELL = "\x07";
var ANSI_CSI = "[";
var ANSI_OSC = "]";
var ANSI_SGR_TERMINATOR = "m";
var ANSI_ESCAPE_LINK = `${ANSI_OSC}8;;`;
var wrapAnsiCode = (code) => `${ESCAPES.values().next().value}${ANSI_CSI}${code}${ANSI_SGR_TERMINATOR}`;
var wrapAnsiHyperlink = (uri) => `${ESCAPES.values().next().value}${ANSI_ESCAPE_LINK}${uri}${ANSI_ESCAPE_BELL}`;
var wordLengths = (string) => string.split(" ").map((character) => stringWidth(character));
var wrapWord = (rows, word, columns) => {
  const characters = [...word];
  let isInsideEscape = false;
  let isInsideLinkEscape = false;
  let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
  for (const [index, character] of characters.entries()) {
    const characterLength = stringWidth(character);
    if (visible + characterLength <= columns) {
      rows[rows.length - 1] += character;
    } else {
      rows.push(character);
      visible = 0;
    }
    if (ESCAPES.has(character)) {
      isInsideEscape = true;
      isInsideLinkEscape = characters.slice(index + 1).join("").startsWith(ANSI_ESCAPE_LINK);
    }
    if (isInsideEscape) {
      if (isInsideLinkEscape) {
        if (character === ANSI_ESCAPE_BELL) {
          isInsideEscape = false;
          isInsideLinkEscape = false;
        }
      } else if (character === ANSI_SGR_TERMINATOR) {
        isInsideEscape = false;
      }
      continue;
    }
    visible += characterLength;
    if (visible === columns && index < characters.length - 1) {
      rows.push("");
      visible = 0;
    }
  }
  if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
    rows[rows.length - 2] += rows.pop();
  }
};
var stringVisibleTrimSpacesRight = (string) => {
  const words = string.split(" ");
  let last = words.length;
  while (last > 0) {
    if (stringWidth(words[last - 1]) > 0) {
      break;
    }
    last--;
  }
  if (last === words.length) {
    return string;
  }
  return words.slice(0, last).join(" ") + words.slice(last).join("");
};
var exec = (string, columns, options = {}) => {
  if (options.trim !== false && string.trim() === "") {
    return "";
  }
  let returnValue = "";
  let escapeCode;
  let escapeUrl;
  const lengths = wordLengths(string);
  let rows = [""];
  for (const [index, word] of string.split(" ").entries()) {
    if (options.trim !== false) {
      rows[rows.length - 1] = rows[rows.length - 1].trimStart();
    }
    let rowLength = stringWidth(rows[rows.length - 1]);
    if (index !== 0) {
      if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
        rows.push("");
        rowLength = 0;
      }
      if (rowLength > 0 || options.trim === false) {
        rows[rows.length - 1] += " ";
        rowLength++;
      }
    }
    if (options.hard && lengths[index] > columns) {
      const remainingColumns = columns - rowLength;
      const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
      const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
      if (breaksStartingNextLine < breaksStartingThisLine) {
        rows.push("");
      }
      wrapWord(rows, word, columns);
      continue;
    }
    if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
      if (options.wordWrap === false && rowLength < columns) {
        wrapWord(rows, word, columns);
        continue;
      }
      rows.push("");
    }
    if (rowLength + lengths[index] > columns && options.wordWrap === false) {
      wrapWord(rows, word, columns);
      continue;
    }
    rows[rows.length - 1] += word;
  }
  if (options.trim !== false) {
    rows = rows.map((row2) => stringVisibleTrimSpacesRight(row2));
  }
  const pre = [...rows.join("\n")];
  for (const [index, character] of pre.entries()) {
    returnValue += character;
    if (ESCAPES.has(character)) {
      const { groups } = new RegExp(`(?:\\${ANSI_CSI}(?<code>\\d+)m|\\${ANSI_ESCAPE_LINK}(?<uri>.*)${ANSI_ESCAPE_BELL})`).exec(pre.slice(index).join("")) || { groups: {} };
      if (groups.code !== void 0) {
        const code2 = Number.parseFloat(groups.code);
        escapeCode = code2 === END_CODE ? void 0 : code2;
      } else if (groups.uri !== void 0) {
        escapeUrl = groups.uri.length === 0 ? void 0 : groups.uri;
      }
    }
    const code = ansi_styles_default.codes.get(Number(escapeCode));
    if (pre[index + 1] === "\n") {
      if (escapeUrl) {
        returnValue += wrapAnsiHyperlink("");
      }
      if (escapeCode && code) {
        returnValue += wrapAnsiCode(code);
      }
    } else if (character === "\n") {
      if (escapeCode && code) {
        returnValue += wrapAnsiCode(escapeCode);
      }
      if (escapeUrl) {
        returnValue += wrapAnsiHyperlink(escapeUrl);
      }
    }
  }
  return returnValue;
};
function wrapAnsi(string, columns, options) {
  return String(string).normalize().replace(/\r\n/g, "\n").split("\n").map((line) => exec(line, columns, options)).join("\n");
}

// ../../node_modules/.store/is-fullwidth-code-point-npm-4.0.0-848488b60d/node_modules/is-fullwidth-code-point/index.js
function isFullwidthCodePoint(codePoint) {
  if (!Number.isInteger(codePoint)) {
    return false;
  }
  return codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141);
}

// ../../node_modules/.store/slice-ansi-npm-5.0.0-8cd4f226df/node_modules/slice-ansi/index.js
var astralRegex = /^[\uD800-\uDBFF][\uDC00-\uDFFF]$/;
var ESCAPES2 = [
  "\x1B",
  "\x9B"
];
var wrapAnsi2 = (code) => `${ESCAPES2[0]}[${code}m`;
var checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
  let output = [];
  ansiCodes = [...ansiCodes];
  for (let ansiCode of ansiCodes) {
    const ansiCodeOrigin = ansiCode;
    if (ansiCode.includes(";")) {
      ansiCode = ansiCode.split(";")[0][0] + "0";
    }
    const item = ansi_styles_default.codes.get(Number.parseInt(ansiCode, 10));
    if (item) {
      const indexEscape = ansiCodes.indexOf(item.toString());
      if (indexEscape === -1) {
        output.push(wrapAnsi2(isEscapes ? item : ansiCodeOrigin));
      } else {
        ansiCodes.splice(indexEscape, 1);
      }
    } else if (isEscapes) {
      output.push(wrapAnsi2(0));
      break;
    } else {
      output.push(wrapAnsi2(ansiCodeOrigin));
    }
  }
  if (isEscapes) {
    output = output.filter((element, index) => output.indexOf(element) === index);
    if (endAnsiCode !== void 0) {
      const fistEscapeCode = wrapAnsi2(ansi_styles_default.codes.get(Number.parseInt(endAnsiCode, 10)));
      output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
    }
  }
  return output.join("");
};
function sliceAnsi(string, begin, end) {
  const characters = [...string];
  const ansiCodes = [];
  let stringEnd = typeof end === "number" ? end : characters.length;
  let isInsideEscape = false;
  let ansiCode;
  let visible = 0;
  let output = "";
  for (const [index, character] of characters.entries()) {
    let leftEscape = false;
    if (ESCAPES2.includes(character)) {
      const code = /\d[^m]*/.exec(string.slice(index, index + 18));
      ansiCode = code && code.length > 0 ? code[0] : void 0;
      if (visible < stringEnd) {
        isInsideEscape = true;
        if (ansiCode !== void 0) {
          ansiCodes.push(ansiCode);
        }
      }
    } else if (isInsideEscape && character === "m") {
      isInsideEscape = false;
      leftEscape = true;
    }
    if (!isInsideEscape && !leftEscape) {
      visible++;
    }
    if (!astralRegex.test(character) && isFullwidthCodePoint(character.codePointAt())) {
      visible++;
      if (typeof end !== "number") {
        stringEnd++;
      }
    }
    if (visible > begin && visible <= stringEnd) {
      output += character;
    } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
      output = checkAnsi(ansiCodes);
    } else if (visible >= stringEnd) {
      output += checkAnsi(ansiCodes, true, ansiCode);
      break;
    }
  }
  return output;
}

// ../../node_modules/.store/cli-truncate-npm-3.1.0-654d2989ef/node_modules/cli-truncate/index.js
function getIndexOfNearestSpace(string, wantedIndex, shouldSearchRight) {
  if (string.charAt(wantedIndex) === " ") {
    return wantedIndex;
  }
  for (let index = 1; index <= 3; index++) {
    if (shouldSearchRight) {
      if (string.charAt(wantedIndex + index) === " ") {
        return wantedIndex + index;
      }
    } else if (string.charAt(wantedIndex - index) === " ") {
      return wantedIndex - index;
    }
  }
  return wantedIndex;
}
function cliTruncate(text, columns, options) {
  options = {
    position: "end",
    preferTruncationOnSpace: false,
    truncationCharacter: "\u2026",
    ...options
  };
  const { position, space, preferTruncationOnSpace } = options;
  let { truncationCharacter } = options;
  if (typeof text !== "string") {
    throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
  }
  if (typeof columns !== "number") {
    throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
  }
  if (columns < 1) {
    return "";
  }
  if (columns === 1) {
    return truncationCharacter;
  }
  const length = stringWidth(text);
  if (length <= columns) {
    return text;
  }
  if (position === "start") {
    if (preferTruncationOnSpace) {
      const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
      return truncationCharacter + sliceAnsi(text, nearestSpace, length).trim();
    }
    if (space === true) {
      truncationCharacter += " ";
    }
    return truncationCharacter + sliceAnsi(text, length - columns + stringWidth(truncationCharacter), length);
  }
  if (position === "middle") {
    if (space === true) {
      truncationCharacter = ` ${truncationCharacter} `;
    }
    const half = Math.floor(columns / 2);
    if (preferTruncationOnSpace) {
      const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
      const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
      return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + truncationCharacter + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
    }
    return sliceAnsi(text, 0, half) + truncationCharacter + sliceAnsi(text, length - (columns - half) + stringWidth(truncationCharacter), length);
  }
  if (position === "end") {
    if (preferTruncationOnSpace) {
      const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
      return sliceAnsi(text, 0, nearestSpace) + truncationCharacter;
    }
    if (space === true) {
      truncationCharacter = ` ${truncationCharacter}`;
    }
    return sliceAnsi(text, 0, columns - stringWidth(truncationCharacter)) + truncationCharacter;
  }
  throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/wrap-text.js
var cache2 = {};
var wrapText = (text, maxWidth, wrapType) => {
  const cacheKey = text + String(maxWidth) + String(wrapType);
  const cachedText = cache2[cacheKey];
  if (cachedText) {
    return cachedText;
  }
  let wrappedText = text;
  if (wrapType === "wrap") {
    wrappedText = wrapAnsi(text, maxWidth, {
      trim: false,
      hard: true
    });
  }
  if (wrapType.startsWith("truncate")) {
    let position = "end";
    if (wrapType === "truncate-middle") {
      position = "middle";
    }
    if (wrapType === "truncate-start") {
      position = "start";
    }
    wrappedText = cliTruncate(text, maxWidth, { position });
  }
  cache2[cacheKey] = wrappedText;
  return wrappedText;
};
var wrap_text_default = wrapText;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/squash-text-nodes.js
var squashTextNodes = (node) => {
  let text = "";
  if (node.childNodes.length > 0) {
    for (const childNode of node.childNodes) {
      let nodeText = "";
      if (childNode.nodeName === "#text") {
        nodeText = childNode.nodeValue;
      } else {
        if (childNode.nodeName === "ink-text" || childNode.nodeName === "ink-virtual-text") {
          nodeText = squashTextNodes(childNode);
        }
        if (nodeText.length > 0 && typeof childNode.internal_transform === "function") {
          nodeText = childNode.internal_transform(nodeText);
        }
      }
      text += nodeText;
    }
  }
  return text;
};
var squash_text_nodes_default = squashTextNodes;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/dom.js
var createNode = (nodeName) => {
  var _a2;
  const node = {
    nodeName,
    style: {},
    attributes: {},
    childNodes: [],
    parentNode: void 0,
    yogaNode: nodeName === "ink-virtual-text" ? void 0 : import_yoga_layout_prebuilt2.default.Node.create()
  };
  if (nodeName === "ink-text") {
    (_a2 = node.yogaNode) == null ? void 0 : _a2.setMeasureFunc(measureTextNode.bind(null, node));
  }
  return node;
};
var appendChildNode = (node, childNode) => {
  var _a2;
  if (childNode.parentNode) {
    removeChildNode(childNode.parentNode, childNode);
  }
  childNode.parentNode = node;
  node.childNodes.push(childNode);
  if (childNode.yogaNode) {
    (_a2 = node.yogaNode) == null ? void 0 : _a2.insertChild(childNode.yogaNode, node.yogaNode.getChildCount());
  }
  if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
    markNodeAsDirty(node);
  }
};
var insertBeforeNode = (node, newChildNode, beforeChildNode) => {
  var _a2, _b;
  if (newChildNode.parentNode) {
    removeChildNode(newChildNode.parentNode, newChildNode);
  }
  newChildNode.parentNode = node;
  const index = node.childNodes.indexOf(beforeChildNode);
  if (index >= 0) {
    node.childNodes.splice(index, 0, newChildNode);
    if (newChildNode.yogaNode) {
      (_a2 = node.yogaNode) == null ? void 0 : _a2.insertChild(newChildNode.yogaNode, index);
    }
    return;
  }
  node.childNodes.push(newChildNode);
  if (newChildNode.yogaNode) {
    (_b = node.yogaNode) == null ? void 0 : _b.insertChild(newChildNode.yogaNode, node.yogaNode.getChildCount());
  }
  if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
    markNodeAsDirty(node);
  }
};
var removeChildNode = (node, removeNode) => {
  var _a2, _b;
  if (removeNode.yogaNode) {
    (_b = (_a2 = removeNode.parentNode) == null ? void 0 : _a2.yogaNode) == null ? void 0 : _b.removeChild(removeNode.yogaNode);
  }
  removeNode.parentNode = void 0;
  const index = node.childNodes.indexOf(removeNode);
  if (index >= 0) {
    node.childNodes.splice(index, 1);
  }
  if (node.nodeName === "ink-text" || node.nodeName === "ink-virtual-text") {
    markNodeAsDirty(node);
  }
};
var setAttribute = (node, key2, value) => {
  node.attributes[key2] = value;
};
var setStyle = (node, style) => {
  node.style = style;
  if (node.yogaNode) {
    styles_default(node, style);
  }
};
var createTextNode = (text) => {
  const node = {
    nodeName: "#text",
    nodeValue: text,
    yogaNode: void 0,
    parentNode: void 0,
    style: {}
  };
  setTextNodeValue(node, text);
  return node;
};
var measureTextNode = function(node, width) {
  var _a2;
  const text = node.nodeName === "#text" ? node.nodeValue : squash_text_nodes_default(node);
  const dimensions = measure_text_default(text);
  if (dimensions.width <= width) {
    return dimensions;
  }
  if (dimensions.width >= 1 && width > 0 && width < 1) {
    return dimensions;
  }
  const textWrap = ((_a2 = node.style) == null ? void 0 : _a2.textWrap) ?? "wrap";
  const wrappedText = wrap_text_default(text, width, textWrap);
  return measure_text_default(wrappedText);
};
var findClosestYogaNode = (node) => {
  if (!(node == null ? void 0 : node.parentNode)) {
    return void 0;
  }
  return node.yogaNode ?? findClosestYogaNode(node.parentNode);
};
var markNodeAsDirty = (node) => {
  const yogaNode = findClosestYogaNode(node);
  yogaNode == null ? void 0 : yogaNode.markDirty();
};
var setTextNodeValue = (node, text) => {
  if (typeof text !== "string") {
    text = String(text);
  }
  node.nodeValue = text;
  markNodeAsDirty(node);
};

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/reconciler.js
if (process3.env["DEV"] === "true") {
  try {
    await Promise.resolve().then(() => (init_devtools(), devtools_exports));
  } catch (error) {
    if (error.code === "MODULE_NOT_FOUND") {
      console.warn(`
Debugging with React Devtools requires \`react-devtools-core\` dependency to be installed.

$ npm install --save-dev react-devtools-core
				`.trim() + "\n");
    } else {
      throw error;
    }
  }
}
var cleanupYogaNode = (node) => {
  node == null ? void 0 : node.unsetMeasureFunc();
  node == null ? void 0 : node.freeRecursive();
};
var reconciler_default = (0, import_react_reconciler.default)({
  getRootHostContext: () => ({
    isInsideText: false
  }),
  prepareForCommit: () => null,
  preparePortalMount: () => null,
  clearContainer: () => false,
  resetAfterCommit(rootNode) {
    if (rootNode.isStaticDirty) {
      rootNode.isStaticDirty = false;
      if (typeof rootNode.onImmediateRender === "function") {
        rootNode.onImmediateRender();
      }
      return;
    }
    if (typeof rootNode.onRender === "function") {
      rootNode.onRender();
    }
  },
  getChildHostContext(parentHostContext, type2) {
    const previousIsInsideText = parentHostContext.isInsideText;
    const isInsideText = type2 === "ink-text" || type2 === "ink-virtual-text";
    if (previousIsInsideText === isInsideText) {
      return parentHostContext;
    }
    return { isInsideText };
  },
  shouldSetTextContent: () => false,
  createInstance(originalType, newProps, _root, hostContext) {
    if (hostContext.isInsideText && originalType === "ink-box") {
      throw new Error(`<Box> can\u2019t be nested inside <Text> component`);
    }
    if (hostContext.isInsideText && originalType === "ink-line") {
      throw new Error(`<Line> can\u2019t be nested inside <Text> component`);
    }
    const type2 = originalType === "ink-text" && hostContext.isInsideText ? "ink-virtual-text" : originalType;
    const node = createNode(type2);
    for (const [key2, value] of Object.entries(newProps)) {
      if (key2 === "children") {
        continue;
      }
      if (key2 === "style") {
        setStyle(node, value);
        continue;
      }
      if (key2 === "internal_transform") {
        node.internal_transform = value;
        continue;
      }
      if (key2 === "internal_static") {
        node.internal_static = true;
        continue;
      }
      setAttribute(node, key2, value);
    }
    return node;
  },
  createTextInstance(text, _root, hostContext) {
    if (!hostContext.isInsideText) {
      throw new Error(`Text string "${text}" must be rendered inside <Text> component`);
    }
    return createTextNode(text);
  },
  resetTextContent() {
  },
  hideTextInstance(node) {
    setTextNodeValue(node, "");
  },
  unhideTextInstance(node, text) {
    setTextNodeValue(node, text);
  },
  getPublicInstance: (instance) => instance,
  hideInstance(node) {
    var _a2;
    (_a2 = node.yogaNode) == null ? void 0 : _a2.setDisplay(import_yoga_layout_prebuilt3.default.DISPLAY_NONE);
  },
  unhideInstance(node) {
    var _a2;
    (_a2 = node.yogaNode) == null ? void 0 : _a2.setDisplay(import_yoga_layout_prebuilt3.default.DISPLAY_FLEX);
  },
  appendInitialChild: appendChildNode,
  appendChild: appendChildNode,
  insertBefore: insertBeforeNode,
  finalizeInitialChildren(node, _type, _props, rootNode) {
    if (node.internal_static) {
      rootNode.isStaticDirty = true;
      rootNode.staticNode = node;
    }
    return false;
  },
  isPrimaryRenderer: true,
  supportsMutation: true,
  supportsPersistence: false,
  supportsHydration: false,
  scheduleTimeout: setTimeout,
  cancelTimeout: clearTimeout,
  noTimeout: -1,
  getCurrentEventPriority: () => import_constants.DefaultEventPriority,
  beforeActiveInstanceBlur() {
  },
  afterActiveInstanceBlur() {
  },
  detachDeletedInstance() {
  },
  getInstanceFromNode: () => null,
  prepareScopeUpdate() {
  },
  getInstanceFromScope: () => null,
  appendChildToContainer: appendChildNode,
  insertInContainerBefore: insertBeforeNode,
  removeChildFromContainer(node, removeNode) {
    removeChildNode(node, removeNode);
    cleanupYogaNode(removeNode.yogaNode);
  },
  prepareUpdate(node, _type, oldProps, newProps, rootNode) {
    if (node.internal_static) {
      rootNode.isStaticDirty = true;
    }
    const updatePayload = {};
    const keys = Object.keys(newProps);
    for (const key2 of keys) {
      if (newProps[key2] !== oldProps[key2]) {
        const isStyle = key2 === "style" && typeof newProps["style"] === "object" && typeof oldProps["style"] === "object";
        if (isStyle) {
          const newStyle = newProps["style"];
          const oldStyle = oldProps["style"];
          const styleKeys = Object.keys(newStyle);
          for (const styleKey of styleKeys) {
            if (styleKey === "borderStyle" || styleKey === "borderColor") {
              if (typeof updatePayload["style"] !== "object") {
                const style = {};
                updatePayload["style"] = style;
              }
              updatePayload["style"].borderStyle = newStyle.borderStyle;
              updatePayload["style"].borderColor = newStyle.borderColor;
              updatePayload["style"].overflowX = newStyle.overflowX;
              updatePayload["style"].overflowY = newStyle.overflowY;
            }
            if (newStyle[styleKey] !== oldStyle[styleKey]) {
              if (typeof updatePayload["style"] !== "object") {
                const style = {};
                updatePayload["style"] = style;
              }
              updatePayload["style"][styleKey] = newStyle[styleKey];
            }
          }
          continue;
        }
        updatePayload[key2] = newProps[key2];
      }
    }
    return updatePayload;
  },
  commitUpdate(node, updatePayload) {
    for (const [key2, value] of Object.entries(updatePayload)) {
      if (key2 === "children") {
        continue;
      }
      if (key2 === "style") {
        setStyle(node, value);
        continue;
      }
      if (key2 === "internal_transform") {
        node.internal_transform = value;
        continue;
      }
      if (key2 === "internal_static") {
        node.internal_static = true;
        continue;
      }
      setAttribute(node, key2, value);
    }
  },
  commitTextUpdate(node, _oldText, newText) {
    setTextNodeValue(node, newText);
  },
  removeChild(node, removeNode) {
    removeChildNode(node, removeNode);
    cleanupYogaNode(removeNode.yogaNode);
  }
});

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/renderer.js
var import_yoga_layout_prebuilt6 = __toESM(require_entry_browser(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render-node-to-output.js
var import_yoga_layout_prebuilt5 = __toESM(require_entry_browser(), 1);

// ../../node_modules/.store/indent-string-npm-5.0.0-35eaa3b052/node_modules/indent-string/index.js
function indentString(string, count = 1, options = {}) {
  const {
    indent = " ",
    includeEmptyLines = false
  } = options;
  if (typeof string !== "string") {
    throw new TypeError(
      `Expected \`input\` to be a \`string\`, got \`${typeof string}\``
    );
  }
  if (typeof count !== "number") {
    throw new TypeError(
      `Expected \`count\` to be a \`number\`, got \`${typeof count}\``
    );
  }
  if (count < 0) {
    throw new RangeError(
      `Expected \`count\` to be at least 0, got \`${count}\``
    );
  }
  if (typeof indent !== "string") {
    throw new TypeError(
      `Expected \`options.indent\` to be a \`string\`, got \`${typeof indent}\``
    );
  }
  if (count === 0) {
    return string;
  }
  const regex = includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
  return string.replace(regex, indent.repeat(count));
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/get-max-width.js
var import_yoga_layout_prebuilt4 = __toESM(require_entry_browser(), 1);
var getMaxWidth = (yogaNode) => {
  return yogaNode.getComputedWidth() - yogaNode.getComputedPadding(import_yoga_layout_prebuilt4.default.EDGE_LEFT) - yogaNode.getComputedPadding(import_yoga_layout_prebuilt4.default.EDGE_RIGHT) - yogaNode.getComputedBorder(import_yoga_layout_prebuilt4.default.EDGE_LEFT) - yogaNode.getComputedBorder(import_yoga_layout_prebuilt4.default.EDGE_RIGHT);
};
var get_max_width_default = getMaxWidth;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render-border.js
var import_cli_boxes = __toESM(require_cli_boxes(), 1);

// ../../node_modules/.store/chalk-npm-5.2.0-bedd808592/node_modules/chalk/source/vendor/ansi-styles/index.js
var ANSI_BACKGROUND_OFFSET2 = 10;
var wrapAnsi162 = (offset = 0) => (code) => `\x1B[${code + offset}m`;
var wrapAnsi2562 = (offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`;
var wrapAnsi16m2 = (offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`;
var styles2 = {
  modifier: {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    overline: [53, 55],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29]
  },
  color: {
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    blackBright: [90, 39],
    gray: [90, 39],
    grey: [90, 39],
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39]
  },
  bgColor: {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    bgBlackBright: [100, 49],
    bgGray: [100, 49],
    bgGrey: [100, 49],
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49]
  }
};
var modifierNames = Object.keys(styles2.modifier);
var foregroundColorNames = Object.keys(styles2.color);
var backgroundColorNames = Object.keys(styles2.bgColor);
var colorNames = [...foregroundColorNames, ...backgroundColorNames];
function assembleStyles2() {
  const codes = /* @__PURE__ */ new Map();
  for (const [groupName, group] of Object.entries(styles2)) {
    for (const [styleName, style] of Object.entries(group)) {
      styles2[styleName] = {
        open: `\x1B[${style[0]}m`,
        close: `\x1B[${style[1]}m`
      };
      group[styleName] = styles2[styleName];
      codes.set(style[0], style[1]);
    }
    Object.defineProperty(styles2, groupName, {
      value: group,
      enumerable: false
    });
  }
  Object.defineProperty(styles2, "codes", {
    value: codes,
    enumerable: false
  });
  styles2.color.close = "\x1B[39m";
  styles2.bgColor.close = "\x1B[49m";
  styles2.color.ansi = wrapAnsi162();
  styles2.color.ansi256 = wrapAnsi2562();
  styles2.color.ansi16m = wrapAnsi16m2();
  styles2.bgColor.ansi = wrapAnsi162(ANSI_BACKGROUND_OFFSET2);
  styles2.bgColor.ansi256 = wrapAnsi2562(ANSI_BACKGROUND_OFFSET2);
  styles2.bgColor.ansi16m = wrapAnsi16m2(ANSI_BACKGROUND_OFFSET2);
  Object.defineProperties(styles2, {
    rgbToAnsi256: {
      value(red, green, blue) {
        if (red === green && green === blue) {
          if (red < 8) {
            return 16;
          }
          if (red > 248) {
            return 231;
          }
          return Math.round((red - 8) / 247 * 24) + 232;
        }
        return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
      },
      enumerable: false
    },
    hexToRgb: {
      value(hex) {
        const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
        if (!matches) {
          return [0, 0, 0];
        }
        let [colorString] = matches;
        if (colorString.length === 3) {
          colorString = [...colorString].map((character) => character + character).join("");
        }
        const integer = Number.parseInt(colorString, 16);
        return [
          integer >> 16 & 255,
          integer >> 8 & 255,
          integer & 255
        ];
      },
      enumerable: false
    },
    hexToAnsi256: {
      value: (hex) => styles2.rgbToAnsi256(...styles2.hexToRgb(hex)),
      enumerable: false
    },
    ansi256ToAnsi: {
      value(code) {
        if (code < 8) {
          return 30 + code;
        }
        if (code < 16) {
          return 90 + (code - 8);
        }
        let red;
        let green;
        let blue;
        if (code >= 232) {
          red = ((code - 232) * 10 + 8) / 255;
          green = red;
          blue = red;
        } else {
          code -= 16;
          const remainder = code % 36;
          red = Math.floor(code / 36) / 5;
          green = Math.floor(remainder / 6) / 5;
          blue = remainder % 6 / 5;
        }
        const value = Math.max(red, green, blue) * 2;
        if (value === 0) {
          return 30;
        }
        let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
        if (value === 2) {
          result += 60;
        }
        return result;
      },
      enumerable: false
    },
    rgbToAnsi: {
      value: (red, green, blue) => styles2.ansi256ToAnsi(styles2.rgbToAnsi256(red, green, blue)),
      enumerable: false
    },
    hexToAnsi: {
      value: (hex) => styles2.ansi256ToAnsi(styles2.hexToAnsi256(hex)),
      enumerable: false
    }
  });
  return styles2;
}
var ansiStyles2 = assembleStyles2();
var ansi_styles_default2 = ansiStyles2;

// ../../node_modules/.store/chalk-npm-5.2.0-bedd808592/node_modules/chalk/source/vendor/supports-color/index.js
import process4 from "node:process";
import os from "node:os";
import tty from "node:tty";
function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : process4.argv) {
  const prefix2 = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
  const position = argv.indexOf(prefix2 + flag);
  const terminatorPosition = argv.indexOf("--");
  return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
}
var { env } = process4;
var flagForceColor;
if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
  flagForceColor = 0;
} else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
  flagForceColor = 1;
}
function envForceColor() {
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      return 1;
    }
    if (env.FORCE_COLOR === "false") {
      return 0;
    }
    return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
  }
}
function translateLevel(level) {
  if (level === 0) {
    return false;
  }
  return {
    level,
    hasBasic: true,
    has256: level >= 2,
    has16m: level >= 3
  };
}
function _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
  const noFlagForceColor = envForceColor();
  if (noFlagForceColor !== void 0) {
    flagForceColor = noFlagForceColor;
  }
  const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
  if (forceColor === 0) {
    return 0;
  }
  if (sniffFlags) {
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
  }
  if ("TF_BUILD" in env && "AGENT_NAME" in env) {
    return 1;
  }
  if (haveStream && !streamIsTTY && forceColor === void 0) {
    return 0;
  }
  const min = forceColor || 0;
  if (env.TERM === "dumb") {
    return min;
  }
  if (process4.platform === "win32") {
    const osRelease = os.release().split(".");
    if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
      return Number(osRelease[2]) >= 14931 ? 3 : 2;
    }
    return 1;
  }
  if ("CI" in env) {
    if ("GITHUB_ACTIONS" in env) {
      return 3;
    }
    if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
      return 1;
    }
    return min;
  }
  if ("TEAMCITY_VERSION" in env) {
    return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
  }
  if (env.COLORTERM === "truecolor") {
    return 3;
  }
  if (env.TERM === "xterm-kitty") {
    return 3;
  }
  if ("TERM_PROGRAM" in env) {
    const version = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
    switch (env.TERM_PROGRAM) {
      case "iTerm.app": {
        return version >= 3 ? 3 : 2;
      }
      case "Apple_Terminal": {
        return 2;
      }
    }
  }
  if (/-256(color)?$/i.test(env.TERM)) {
    return 2;
  }
  if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    return 1;
  }
  if ("COLORTERM" in env) {
    return 1;
  }
  return min;
}
function createSupportsColor(stream, options = {}) {
  const level = _supportsColor(stream, {
    streamIsTTY: stream && stream.isTTY,
    ...options
  });
  return translateLevel(level);
}
var supportsColor = {
  stdout: createSupportsColor({ isTTY: tty.isatty(1) }),
  stderr: createSupportsColor({ isTTY: tty.isatty(2) })
};
var supports_color_default = supportsColor;

// ../../node_modules/.store/chalk-npm-5.2.0-bedd808592/node_modules/chalk/source/utilities.js
function stringReplaceAll(string, substring, replacer) {
  let index = string.indexOf(substring);
  if (index === -1) {
    return string;
  }
  const substringLength = substring.length;
  let endIndex = 0;
  let returnValue = "";
  do {
    returnValue += string.slice(endIndex, index) + substring + replacer;
    endIndex = index + substringLength;
    index = string.indexOf(substring, endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}
function stringEncaseCRLFWithFirstIndex(string, prefix2, postfix, index) {
  let endIndex = 0;
  let returnValue = "";
  do {
    const gotCR = string[index - 1] === "\r";
    returnValue += string.slice(endIndex, gotCR ? index - 1 : index) + prefix2 + (gotCR ? "\r\n" : "\n") + postfix;
    endIndex = index + 1;
    index = string.indexOf("\n", endIndex);
  } while (index !== -1);
  returnValue += string.slice(endIndex);
  return returnValue;
}

// ../../node_modules/.store/chalk-npm-5.2.0-bedd808592/node_modules/chalk/source/index.js
var { stdout: stdoutColor, stderr: stderrColor } = supports_color_default;
var GENERATOR = Symbol("GENERATOR");
var STYLER = Symbol("STYLER");
var IS_EMPTY = Symbol("IS_EMPTY");
var levelMapping = [
  "ansi",
  "ansi",
  "ansi256",
  "ansi16m"
];
var styles3 = /* @__PURE__ */ Object.create(null);
var applyOptions = (object, options = {}) => {
  if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    throw new Error("The `level` option should be an integer from 0 to 3");
  }
  const colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options.level === void 0 ? colorLevel : options.level;
};
var chalkFactory = (options) => {
  const chalk2 = (...strings) => strings.join(" ");
  applyOptions(chalk2, options);
  Object.setPrototypeOf(chalk2, createChalk.prototype);
  return chalk2;
};
function createChalk(options) {
  return chalkFactory(options);
}
Object.setPrototypeOf(createChalk.prototype, Function.prototype);
for (const [styleName, style] of Object.entries(ansi_styles_default2)) {
  styles3[styleName] = {
    get() {
      const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
      Object.defineProperty(this, styleName, { value: builder });
      return builder;
    }
  };
}
styles3.visible = {
  get() {
    const builder = createBuilder(this, this[STYLER], true);
    Object.defineProperty(this, "visible", { value: builder });
    return builder;
  }
};
var getModelAnsi = (model, level, type2, ...arguments_) => {
  if (model === "rgb") {
    if (level === "ansi16m") {
      return ansi_styles_default2[type2].ansi16m(...arguments_);
    }
    if (level === "ansi256") {
      return ansi_styles_default2[type2].ansi256(ansi_styles_default2.rgbToAnsi256(...arguments_));
    }
    return ansi_styles_default2[type2].ansi(ansi_styles_default2.rgbToAnsi(...arguments_));
  }
  if (model === "hex") {
    return getModelAnsi("rgb", level, type2, ...ansi_styles_default2.hexToRgb(...arguments_));
  }
  return ansi_styles_default2[type2][model](...arguments_);
};
var usedModels = ["rgb", "hex", "ansi256"];
for (const model of usedModels) {
  styles3[model] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "color", ...arguments_), ansi_styles_default2.color.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
  const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
  styles3[bgModel] = {
    get() {
      const { level } = this;
      return function(...arguments_) {
        const styler = createStyler(getModelAnsi(model, levelMapping[level], "bgColor", ...arguments_), ansi_styles_default2.bgColor.close, this[STYLER]);
        return createBuilder(this, styler, this[IS_EMPTY]);
      };
    }
  };
}
var proto = Object.defineProperties(() => {
}, {
  ...styles3,
  level: {
    enumerable: true,
    get() {
      return this[GENERATOR].level;
    },
    set(level) {
      this[GENERATOR].level = level;
    }
  }
});
var createStyler = (open, close, parent) => {
  let openAll;
  let closeAll;
  if (parent === void 0) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open,
    close,
    openAll,
    closeAll,
    parent
  };
};
var createBuilder = (self2, _styler, _isEmpty) => {
  const builder = (...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
  Object.setPrototypeOf(builder, proto);
  builder[GENERATOR] = self2;
  builder[STYLER] = _styler;
  builder[IS_EMPTY] = _isEmpty;
  return builder;
};
var applyStyle = (self2, string) => {
  if (self2.level <= 0 || !string) {
    return self2[IS_EMPTY] ? "" : string;
  }
  let styler = self2[STYLER];
  if (styler === void 0) {
    return string;
  }
  const { openAll, closeAll } = styler;
  if (string.includes("\x1B")) {
    while (styler !== void 0) {
      string = stringReplaceAll(string, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  const lfIndex = string.indexOf("\n");
  if (lfIndex !== -1) {
    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
  }
  return openAll + string + closeAll;
};
Object.defineProperties(createChalk.prototype, styles3);
var chalk = createChalk();
var chalkStderr = createChalk({ level: stderrColor ? stderrColor.level : 0 });
var source_default = chalk;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/colorize.js
var rgbRegex = /^rgb\(\s?(\d+),\s?(\d+),\s?(\d+)\s?\)$/;
var ansiRegex2 = /^ansi256\(\s?(\d+)\s?\)$/;
var isNamedColor = (color) => {
  return color in source_default;
};
var colorize = (str, color, type2) => {
  if (!color) {
    return str;
  }
  if (isNamedColor(color)) {
    if (type2 === "foreground") {
      return source_default[color](str);
    }
    const methodName = `bg${color[0].toUpperCase() + color.slice(1)}`;
    return source_default[methodName](str);
  }
  if (color.startsWith("#")) {
    return type2 === "foreground" ? source_default.hex(color)(str) : source_default.bgHex(color)(str);
  }
  if (color.startsWith("ansi256")) {
    const matches = ansiRegex2.exec(color);
    if (!matches) {
      return str;
    }
    const value = Number(matches[1]);
    return type2 === "foreground" ? source_default.ansi256(value)(str) : source_default.bgAnsi256(value)(str);
  }
  if (color.startsWith("rgb")) {
    const matches = rgbRegex.exec(color);
    if (!matches) {
      return str;
    }
    const firstValue = Number(matches[1]);
    const secondValue = Number(matches[2]);
    const thirdValue = Number(matches[3]);
    return type2 === "foreground" ? source_default.rgb(firstValue, secondValue, thirdValue)(str) : source_default.bgRgb(firstValue, secondValue, thirdValue)(str);
  }
  return str;
};
var colorize_default = colorize;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render-border.js
var renderBorder = (x, y, node, output) => {
  if (typeof node.style.borderStyle === "string") {
    const width = node.yogaNode.getComputedWidth();
    const height = node.yogaNode.getComputedHeight();
    const color = node.style.borderColor;
    const box = import_cli_boxes.default[node.style.borderStyle];
    const topBorder = colorize_default(box.topLeft + box.top.repeat(width - 2) + box.topRight, color, "foreground");
    const verticalBorder = (colorize_default(box.left, color, "foreground") + "\n").repeat(height - 2);
    const bottomBorder = colorize_default(box.bottomLeft + box.bottom.repeat(width - 2) + box.bottomRight, color, "foreground");
    output.write(x, y, topBorder, { transformers: [] });
    output.write(x, y + 1, verticalBorder, { transformers: [] });
    output.write(x + width - 1, y + 1, verticalBorder, { transformers: [] });
    output.write(x, y + height - 1, bottomBorder, { transformers: [] });
  }
};
var render_border_default = renderBorder;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render-line.js
var import_cli_boxes2 = __toESM(require_cli_boxes(), 1);
var renderLine = (x, y, node, output) => {
  if (typeof node.style.borderStyle === "string") {
    const width = Math.max(1, node.yogaNode.getComputedWidth());
    const height = Math.max(1, node.yogaNode.getComputedHeight());
    const color = node.style.borderColor;
    const box = import_cli_boxes2.default[node.style.borderStyle];
    const border = node.attributes.orientation === "vertical" ? (colorize_default(box.left, color, "foreground") + "\n").repeat(height) : colorize_default(box.top.repeat(width), color, "foreground");
    output.write(x, y, border, { transformers: [] });
  }
};
var render_line_default = renderLine;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render-node-to-output.js
var applyPaddingToText = (node, text) => {
  var _a2;
  const yogaNode = (_a2 = node.childNodes[0]) == null ? void 0 : _a2.yogaNode;
  if (yogaNode) {
    const offsetX = yogaNode.getComputedLeft();
    const offsetY = yogaNode.getComputedTop();
    text = "\n".repeat(offsetY) + indentString(text, offsetX);
  }
  return text;
};
var renderNodeToOutput = (node, output, options) => {
  const { offsetX = 0, offsetY = 0, transformers = [], skipStaticElements } = options;
  if (skipStaticElements && node.internal_static) {
    return;
  }
  const { yogaNode } = node;
  if (yogaNode) {
    if (yogaNode.getDisplay() === import_yoga_layout_prebuilt5.default.DISPLAY_NONE) {
      return;
    }
    const x = offsetX + yogaNode.getComputedLeft();
    const y = offsetY + yogaNode.getComputedTop();
    let newTransformers = transformers;
    if (typeof node.internal_transform === "function") {
      newTransformers = [node.internal_transform, ...transformers];
    }
    if (node.nodeName === "ink-text") {
      let text = squash_text_nodes_default(node);
      if (text.length > 0) {
        const currentWidth = widestLine(text);
        const maxWidth = get_max_width_default(yogaNode);
        if (currentWidth > maxWidth) {
          const textWrap = node.style.textWrap ?? "wrap";
          text = wrap_text_default(text, maxWidth, textWrap);
        }
        text = applyPaddingToText(node, text);
        output.write(x, y, text, { transformers: newTransformers });
      }
      return;
    }
    if (node.nodeName === "ink-line") {
      render_line_default(x, y, node, output);
      return;
    }
    let clipped = false;
    if (node.nodeName === "ink-box") {
      render_border_default(x, y, node, output);
      const clipHorizontally = node.style.overflowX === "hidden";
      const clipVertically = node.style.overflowY === "hidden";
      if (clipHorizontally || clipVertically) {
        const x1 = clipHorizontally ? x + yogaNode.getComputedBorder(import_yoga_layout_prebuilt5.default.EDGE_LEFT) : void 0;
        const x2 = clipHorizontally ? x + yogaNode.getComputedWidth() - yogaNode.getComputedBorder(import_yoga_layout_prebuilt5.default.EDGE_RIGHT) : void 0;
        const y1 = clipVertically ? y + yogaNode.getComputedBorder(import_yoga_layout_prebuilt5.default.EDGE_TOP) : void 0;
        const y2 = clipVertically ? y + yogaNode.getComputedHeight() - yogaNode.getComputedBorder(import_yoga_layout_prebuilt5.default.EDGE_BOTTOM) : void 0;
        output.clip({ x1, x2, y1, y2 });
        clipped = true;
      }
    }
    if (node.nodeName === "ink-root" || node.nodeName === "ink-box") {
      for (const childNode of node.childNodes) {
        renderNodeToOutput(childNode, output, {
          offsetX: x,
          offsetY: y,
          transformers: newTransformers,
          skipStaticElements
        });
      }
      if (clipped) {
        output.unclip();
      }
    }
  }
};
var render_node_to_output_default = renderNodeToOutput;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/output.js
var import_emoji_regex2 = __toESM(require_emoji_regex2(), 1);
var emojiRegex2 = (0, import_emoji_regex2.default)();
var Output = class {
  constructor(options) {
    Object.defineProperty(this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "operations", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    const { width, height } = options;
    this.width = width;
    this.height = height;
  }
  write(x, y, text, options) {
    const { transformers } = options;
    if (!text) {
      return;
    }
    this.operations.push({
      type: "write",
      x,
      y,
      text,
      transformers
    });
  }
  clip(clip) {
    this.operations.push({
      type: "clip",
      clip
    });
  }
  unclip() {
    this.operations.push({
      type: "unclip"
    });
  }
  get() {
    var _a2;
    const output = [];
    for (let y = 0; y < this.height; y++) {
      output.push(" ".repeat(this.width));
    }
    const clips = [];
    for (const operation of this.operations) {
      if (operation.type === "clip") {
        clips.push(operation.clip);
      }
      if (operation.type === "unclip") {
        clips.pop();
      }
      if (operation.type === "write") {
        const { text, transformers } = operation;
        let { x, y } = operation;
        let lines = text.split("\n");
        const clip = clips[clips.length - 1];
        if (clip) {
          const clipHorizontally = typeof (clip == null ? void 0 : clip.x1) === "number" && typeof (clip == null ? void 0 : clip.x2) === "number";
          const clipVertically = typeof (clip == null ? void 0 : clip.y1) === "number" && typeof (clip == null ? void 0 : clip.y2) === "number";
          if (clipHorizontally) {
            const width = widestLine(text);
            if (x + width < clip.x1 || x > clip.x2) {
              continue;
            }
          }
          if (clipVertically) {
            const height = lines.length;
            if (y + height < clip.y1 || y > clip.y2) {
              continue;
            }
          }
          if (clipHorizontally) {
            lines = lines.map((line) => {
              const from = x < clip.x1 ? clip.x1 - x : 0;
              const width = stringWidth(line);
              const to = x + width > clip.x2 ? clip.x2 - x : width;
              return sliceAnsi(line, from, to);
            });
            if (x < clip.x1) {
              x = clip.x1;
            }
          }
          if (clipVertically) {
            const from = y < clip.y1 ? clip.y1 - y : 0;
            const height = lines.length;
            const to = y + height > clip.y2 ? clip.y2 - y : height;
            lines = lines.slice(from, to);
            if (y < clip.y1) {
              y = clip.y1;
            }
          }
        }
        let offsetY = 0;
        for (let line of lines) {
          const currentLine = output[y + offsetY];
          if (!currentLine) {
            continue;
          }
          const width = stringWidth(line);
          for (const transformer of transformers) {
            line = transformer(line);
          }
          const emojiCount = ((_a2 = currentLine.match(emojiRegex2)) == null ? void 0 : _a2.length) ?? 0;
          output[y + offsetY] = sliceAnsi(currentLine, 0, x - emojiCount) + line + sliceAnsi(currentLine, x - emojiCount + width);
          offsetY++;
        }
      }
    }
    const generatedOutput = output.map((line) => line.trimEnd()).join("\n");
    return {
      output: generatedOutput,
      height: output.length
    };
  }
};

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/renderer.js
var renderer = (node, terminalWidth) => {
  var _a2;
  node.yogaNode.setWidth(terminalWidth);
  if (node.yogaNode) {
    node.yogaNode.calculateLayout(void 0, void 0, import_yoga_layout_prebuilt6.default.DIRECTION_LTR);
    const output = new Output({
      width: node.yogaNode.getComputedWidth(),
      height: node.yogaNode.getComputedHeight()
    });
    render_node_to_output_default(node, output, { skipStaticElements: true });
    let staticOutput;
    if ((_a2 = node.staticNode) == null ? void 0 : _a2.yogaNode) {
      staticOutput = new Output({
        width: node.staticNode.yogaNode.getComputedWidth(),
        height: node.staticNode.yogaNode.getComputedHeight()
      });
      render_node_to_output_default(node.staticNode, staticOutput, {
        skipStaticElements: false
      });
    }
    const { output: generatedOutput, height: outputHeight } = output.get();
    return {
      output: generatedOutput,
      outputHeight,
      staticOutput: staticOutput ? `${staticOutput.get().output}
` : ""
    };
  }
  return {
    output: "",
    outputHeight: 0,
    staticOutput: ""
  };
};
var renderer_default = renderer;

// ../../node_modules/.store/cli-cursor-npm-4.0.0-08e7cbaf41/node_modules/cli-cursor/index.js
import process6 from "node:process";

// ../../node_modules/.store/restore-cursor-npm-4.0.0-d42254f39d/node_modules/restore-cursor/index.js
var import_onetime = __toESM(require_onetime(), 1);
var import_signal_exit = __toESM(require_signal_exit2(), 1);
import process5 from "node:process";
var restoreCursor = (0, import_onetime.default)(() => {
  (0, import_signal_exit.default)(() => {
    process5.stderr.write("\x1B[?25h");
  }, { alwaysLast: true });
});
var restore_cursor_default = restoreCursor;

// ../../node_modules/.store/cli-cursor-npm-4.0.0-08e7cbaf41/node_modules/cli-cursor/index.js
var isHidden = false;
var cliCursor = {};
cliCursor.show = (writableStream = process6.stderr) => {
  if (!writableStream.isTTY) {
    return;
  }
  isHidden = false;
  writableStream.write("\x1B[?25h");
};
cliCursor.hide = (writableStream = process6.stderr) => {
  if (!writableStream.isTTY) {
    return;
  }
  restore_cursor_default();
  isHidden = true;
  writableStream.write("\x1B[?25l");
};
cliCursor.toggle = (force, writableStream) => {
  if (force !== void 0) {
    isHidden = force;
  }
  if (isHidden) {
    cliCursor.show(writableStream);
  } else {
    cliCursor.hide(writableStream);
  }
};
var cli_cursor_default = cliCursor;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/log-update.js
var create = (stream, { showCursor = false } = {}) => {
  let previousLineCount = 0;
  let previousOutput = "";
  let hasHiddenCursor = false;
  const render2 = (str) => {
    if (!showCursor && !hasHiddenCursor) {
      cli_cursor_default.hide();
      hasHiddenCursor = true;
    }
    const output = str + "\n";
    if (output === previousOutput) {
      return;
    }
    previousOutput = output;
    stream.write(ansi_escapes_default.eraseLines(previousLineCount) + output);
    previousLineCount = output.split("\n").length;
  };
  render2.clear = () => {
    stream.write(ansi_escapes_default.eraseLines(previousLineCount));
    previousOutput = "";
    previousLineCount = 0;
  };
  render2.done = () => {
    previousOutput = "";
    previousLineCount = 0;
    if (!showCursor) {
      cli_cursor_default.show();
      hasHiddenCursor = false;
    }
  };
  return render2;
};
var logUpdate = { create };
var log_update_default = logUpdate;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/instances.js
var instances = /* @__PURE__ */ new WeakMap();
var instances_default = instances;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/App.js
var import_react9 = __toESM(require_react(), 1);
import process10 from "node:process";

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/AppContext.js
var import_react = __toESM(require_react(), 1);
var AppContext = (0, import_react.createContext)({
  exit() {
  }
});
AppContext.displayName = "InternalAppContext";
var AppContext_default = AppContext;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/StdinContext.js
var import_react2 = __toESM(require_react(), 1);
import process7 from "node:process";
var StdinContext = (0, import_react2.createContext)({
  stdin: process7.stdin,
  setRawMode() {
  },
  isRawModeSupported: false,
  internal_exitOnCtrlC: true
});
StdinContext.displayName = "InternalStdinContext";
var StdinContext_default = StdinContext;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/StdoutContext.js
var import_react3 = __toESM(require_react(), 1);
import process8 from "node:process";
var StdoutContext = (0, import_react3.createContext)({
  stdout: process8.stdout,
  write() {
  }
});
StdoutContext.displayName = "InternalStdoutContext";
var StdoutContext_default = StdoutContext;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/StderrContext.js
var import_react4 = __toESM(require_react(), 1);
import process9 from "node:process";
var StderrContext = (0, import_react4.createContext)({
  stderr: process9.stderr,
  write() {
  }
});
StderrContext.displayName = "InternalStderrContext";
var StderrContext_default = StderrContext;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/FocusContext.js
var import_react5 = __toESM(require_react(), 1);
var FocusContext = (0, import_react5.createContext)({
  activeId: void 0,
  add() {
  },
  remove() {
  },
  activate() {
  },
  deactivate() {
  },
  enableFocus() {
  },
  disableFocus() {
  },
  focusNext() {
  },
  focusPrevious() {
  },
  focus() {
  }
});
FocusContext.displayName = "InternalFocusContext";
var FocusContext_default = FocusContext;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/ErrorOverview.js
var import_react8 = __toESM(require_react(), 1);
var import_stack_utils = __toESM(require_stack_utils(), 1);
import * as fs from "node:fs";
import { cwd } from "node:process";

// ../../node_modules/.store/convert-to-spaces-npm-2.0.1-c08fae1ac6/node_modules/convert-to-spaces/dist/index.js
var convertToSpaces = (input, spaces = 2) => {
  return input.replace(/^\t+/gm, ($1) => " ".repeat($1.length * spaces));
};
var dist_default2 = convertToSpaces;

// ../../node_modules/.store/code-excerpt-npm-4.0.0-f453325e6e/node_modules/code-excerpt/dist/index.js
var generateLineNumbers = (line, around) => {
  const lineNumbers = [];
  const min = line - around;
  const max = line + around;
  for (let lineNumber = min; lineNumber <= max; lineNumber++) {
    lineNumbers.push(lineNumber);
  }
  return lineNumbers;
};
var codeExcerpt = (source, line, options = {}) => {
  var _a2;
  if (typeof source !== "string") {
    throw new TypeError("Source code is missing.");
  }
  if (!line || line < 1) {
    throw new TypeError("Line number must start from `1`.");
  }
  const lines = dist_default2(source).split(/\r?\n/);
  if (line > lines.length) {
    return;
  }
  return generateLineNumbers(line, (_a2 = options.around) !== null && _a2 !== void 0 ? _a2 : 3).filter((line2) => lines[line2 - 1] !== void 0).map((line2) => ({ line: line2, value: lines[line2 - 1] }));
};
var dist_default3 = codeExcerpt;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Box.js
var import_react6 = __toESM(require_react(), 1);
var Box = (0, import_react6.forwardRef)(({ children, ...style }, ref) => {
  const transformedStyle = {
    ...style,
    marginLeft: style.marginLeft || style.marginX || style.margin || 0,
    marginRight: style.marginRight || style.marginX || style.margin || 0,
    marginTop: style.marginTop || style.marginY || style.margin || 0,
    marginBottom: style.marginBottom || style.marginY || style.margin || 0,
    paddingLeft: style.paddingLeft || style.paddingX || style.padding || 0,
    paddingRight: style.paddingRight || style.paddingX || style.padding || 0,
    paddingTop: style.paddingTop || style.paddingY || style.padding || 0,
    paddingBottom: style.paddingBottom || style.paddingY || style.padding || 0,
    overflowX: style.overflowX || style.overflow || "visible",
    overflowY: style.overflowY || style.overflow || "visible"
  };
  return import_react6.default.createElement("ink-box", { ref, style: transformedStyle }, children);
});
Box.displayName = "Box";
Box.defaultProps = {
  flexDirection: "row",
  flexGrow: 0,
  flexShrink: 1
};
var Box_default = Box;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Text.js
var import_react7 = __toESM(require_react(), 1);
function Text({ color, backgroundColor, dimColor = false, bold = false, italic = false, underline = false, strikethrough = false, inverse = false, wrap = "wrap", children }) {
  if (children === void 0 || children === null) {
    return null;
  }
  const transform = (children2) => {
    if (dimColor) {
      children2 = source_default.dim(children2);
    }
    if (color) {
      children2 = colorize_default(children2, color, "foreground");
    }
    if (backgroundColor) {
      children2 = colorize_default(children2, backgroundColor, "background");
    }
    if (bold) {
      children2 = source_default.bold(children2);
    }
    if (italic) {
      children2 = source_default.italic(children2);
    }
    if (underline) {
      children2 = source_default.underline(children2);
    }
    if (strikethrough) {
      children2 = source_default.strikethrough(children2);
    }
    if (inverse) {
      children2 = source_default.inverse(children2);
    }
    return children2;
  };
  return import_react7.default.createElement("ink-text", { style: { flexGrow: 0, flexShrink: 1, flexDirection: "row", textWrap: wrap }, internal_transform: transform }, children);
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/ErrorOverview.js
var cleanupPath = (path2) => {
  return path2 == null ? void 0 : path2.replace(`file://${cwd()}/`, "");
};
var stackUtils = new import_stack_utils.default({
  cwd: cwd(),
  internals: import_stack_utils.default.nodeInternals()
});
function ErrorOverview({ error }) {
  const stack = error.stack ? error.stack.split("\n").slice(1) : void 0;
  const origin = stack ? stackUtils.parseLine(stack[0]) : void 0;
  const filePath = cleanupPath(origin == null ? void 0 : origin.file);
  let excerpt;
  let lineWidth = 0;
  if (filePath && (origin == null ? void 0 : origin.line) && fs.existsSync(filePath)) {
    const sourceCode2 = fs.readFileSync(filePath, "utf8");
    excerpt = dist_default3(sourceCode2, origin.line);
    if (excerpt) {
      for (const { line } of excerpt) {
        lineWidth = Math.max(lineWidth, String(line).length);
      }
    }
  }
  return import_react8.default.createElement(
    Box_default,
    { flexDirection: "column", padding: 1 },
    import_react8.default.createElement(
      Box_default,
      null,
      import_react8.default.createElement(
        Text,
        { backgroundColor: "red", color: "white" },
        " ",
        "ERROR",
        " "
      ),
      import_react8.default.createElement(
        Text,
        null,
        " ",
        error.message
      )
    ),
    origin && filePath && import_react8.default.createElement(
      Box_default,
      { marginTop: 1 },
      import_react8.default.createElement(
        Text,
        { dimColor: true },
        filePath,
        ":",
        origin.line,
        ":",
        origin.column
      )
    ),
    origin && excerpt && import_react8.default.createElement(Box_default, { marginTop: 1, flexDirection: "column" }, excerpt.map(({ line, value }) => import_react8.default.createElement(
      Box_default,
      { key: line },
      import_react8.default.createElement(
        Box_default,
        { width: lineWidth + 1 },
        import_react8.default.createElement(
          Text,
          { dimColor: line !== origin.line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0 },
          String(line).padStart(lineWidth, " "),
          ":"
        )
      ),
      import_react8.default.createElement(Text, { key: line, backgroundColor: line === origin.line ? "red" : void 0, color: line === origin.line ? "white" : void 0 }, " " + value)
    ))),
    error.stack && import_react8.default.createElement(Box_default, { marginTop: 1, flexDirection: "column" }, error.stack.split("\n").slice(1).map((line) => {
      const parsedLine = stackUtils.parseLine(line);
      if (!parsedLine) {
        return import_react8.default.createElement(
          Box_default,
          { key: line },
          import_react8.default.createElement(Text, { dimColor: true }, "- "),
          import_react8.default.createElement(Text, { dimColor: true, bold: true }, line)
        );
      }
      return import_react8.default.createElement(
        Box_default,
        { key: line },
        import_react8.default.createElement(Text, { dimColor: true }, "- "),
        import_react8.default.createElement(Text, { dimColor: true, bold: true }, parsedLine.function),
        import_react8.default.createElement(
          Text,
          { dimColor: true, color: "gray" },
          " ",
          "(",
          cleanupPath(parsedLine.file) ?? "",
          ":",
          parsedLine.line,
          ":",
          parsedLine.column,
          ")"
        )
      );
    }))
  );
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/App.js
var tab = "	";
var shiftTab = "\x1B[Z";
var escape = "\x1B";
var App = class extends import_react9.PureComponent {
  constructor() {
    super(...arguments);
    Object.defineProperty(this, "state", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {
        isFocusEnabled: true,
        activeFocusId: void 0,
        focusables: [],
        error: void 0
      }
    });
    Object.defineProperty(this, "rawModeEnabledCount", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "handleSetRawMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (isEnabled) => {
        const { stdin } = this.props;
        if (!this.isRawModeSupported()) {
          if (stdin === process10.stdin) {
            throw new Error("Raw mode is not supported on the current process.stdin, which Ink uses as input stream by default.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
          } else {
            throw new Error("Raw mode is not supported on the stdin provided to Ink.\nRead about how to prevent this error on https://github.com/vadimdemedes/ink/#israwmodesupported");
          }
        }
        stdin.setEncoding("utf8");
        if (isEnabled) {
          if (this.rawModeEnabledCount === 0) {
            stdin.addListener("data", this.handleInput);
            stdin.resume();
            stdin.setRawMode(true);
          }
          this.rawModeEnabledCount++;
          return;
        }
        if (--this.rawModeEnabledCount === 0) {
          stdin.setRawMode(false);
          stdin.removeListener("data", this.handleInput);
          stdin.pause();
        }
      }
    });
    Object.defineProperty(this, "handleInput", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (input) => {
        if (input === "" && this.props.exitOnCtrlC) {
          this.handleExit();
        }
        if (input === escape && this.state.activeFocusId) {
          this.setState({
            activeFocusId: void 0
          });
        }
        if (this.state.isFocusEnabled && this.state.focusables.length > 0) {
          if (input === tab) {
            this.focusNext();
          }
          if (input === shiftTab) {
            this.focusPrevious();
          }
        }
      }
    });
    Object.defineProperty(this, "handleExit", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (error) => {
        if (this.isRawModeSupported()) {
          this.handleSetRawMode(false);
        }
        this.props.onExit(error);
      }
    });
    Object.defineProperty(this, "enableFocus", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        this.setState({
          isFocusEnabled: true
        });
      }
    });
    Object.defineProperty(this, "disableFocus", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        this.setState({
          isFocusEnabled: false
        });
      }
    });
    Object.defineProperty(this, "focus", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (id) => {
        this.setState((previousState) => {
          const hasFocusableId = previousState.focusables.some((focusable) => (focusable == null ? void 0 : focusable.id) === id);
          if (!hasFocusableId) {
            return previousState;
          }
          return { activeFocusId: id };
        });
      }
    });
    Object.defineProperty(this, "focusNext", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        this.setState((previousState) => {
          var _a2;
          const firstFocusableId = (_a2 = previousState.focusables[0]) == null ? void 0 : _a2.id;
          const nextFocusableId = this.findNextFocusable(previousState);
          return {
            activeFocusId: nextFocusableId ?? firstFocusableId
          };
        });
      }
    });
    Object.defineProperty(this, "focusPrevious", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        this.setState((previousState) => {
          var _a2;
          const lastFocusableId = (_a2 = previousState.focusables[previousState.focusables.length - 1]) == null ? void 0 : _a2.id;
          const previousFocusableId = this.findPreviousFocusable(previousState);
          return {
            activeFocusId: previousFocusableId ?? lastFocusableId
          };
        });
      }
    });
    Object.defineProperty(this, "addFocusable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (id, { autoFocus }) => {
        this.setState((previousState) => {
          let nextFocusId = previousState.activeFocusId;
          if (!nextFocusId && autoFocus) {
            nextFocusId = id;
          }
          return {
            activeFocusId: nextFocusId,
            focusables: [
              ...previousState.focusables,
              {
                id,
                isActive: true
              }
            ]
          };
        });
      }
    });
    Object.defineProperty(this, "removeFocusable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (id) => {
        this.setState((previousState) => ({
          activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
          focusables: previousState.focusables.filter((focusable) => {
            return focusable.id !== id;
          })
        }));
      }
    });
    Object.defineProperty(this, "activateFocusable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (id) => {
        this.setState((previousState) => ({
          focusables: previousState.focusables.map((focusable) => {
            if (focusable.id !== id) {
              return focusable;
            }
            return {
              id,
              isActive: true
            };
          })
        }));
      }
    });
    Object.defineProperty(this, "deactivateFocusable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (id) => {
        this.setState((previousState) => ({
          activeFocusId: previousState.activeFocusId === id ? void 0 : previousState.activeFocusId,
          focusables: previousState.focusables.map((focusable) => {
            if (focusable.id !== id) {
              return focusable;
            }
            return {
              id,
              isActive: false
            };
          })
        }));
      }
    });
    Object.defineProperty(this, "findNextFocusable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (state) => {
        const activeIndex = state.focusables.findIndex((focusable) => {
          return focusable.id === state.activeFocusId;
        });
        for (let index = activeIndex + 1; index < state.focusables.length; index++) {
          const focusable = state.focusables[index];
          if (focusable == null ? void 0 : focusable.isActive) {
            return focusable.id;
          }
        }
        return void 0;
      }
    });
    Object.defineProperty(this, "findPreviousFocusable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: (state) => {
        const activeIndex = state.focusables.findIndex((focusable) => {
          return focusable.id === state.activeFocusId;
        });
        for (let index = activeIndex - 1; index >= 0; index--) {
          const focusable = state.focusables[index];
          if (focusable == null ? void 0 : focusable.isActive) {
            return focusable.id;
          }
        }
        return void 0;
      }
    });
  }
  static getDerivedStateFromError(error) {
    return { error };
  }
  isRawModeSupported() {
    return this.props.stdin.isTTY;
  }
  render() {
    return import_react9.default.createElement(
      AppContext_default.Provider,
      {
        value: {
          exit: this.handleExit
        }
      },
      import_react9.default.createElement(
        StdinContext_default.Provider,
        {
          value: {
            stdin: this.props.stdin,
            setRawMode: this.handleSetRawMode,
            isRawModeSupported: this.isRawModeSupported(),
            internal_exitOnCtrlC: this.props.exitOnCtrlC
          }
        },
        import_react9.default.createElement(
          StdoutContext_default.Provider,
          {
            value: {
              stdout: this.props.stdout,
              write: this.props.writeToStdout
            }
          },
          import_react9.default.createElement(
            StderrContext_default.Provider,
            {
              value: {
                stderr: this.props.stderr,
                write: this.props.writeToStderr
              }
            },
            import_react9.default.createElement(
              FocusContext_default.Provider,
              {
                value: {
                  activeId: this.state.activeFocusId,
                  add: this.addFocusable,
                  remove: this.removeFocusable,
                  activate: this.activateFocusable,
                  deactivate: this.deactivateFocusable,
                  enableFocus: this.enableFocus,
                  disableFocus: this.disableFocus,
                  focusNext: this.focusNext,
                  focusPrevious: this.focusPrevious,
                  focus: this.focus
                }
              },
              this.state.error ? import_react9.default.createElement(ErrorOverview, { error: this.state.error }) : this.props.children
            )
          )
        )
      )
    );
  }
  componentDidMount() {
    cli_cursor_default.hide(this.props.stdout);
  }
  componentWillUnmount() {
    cli_cursor_default.show(this.props.stdout);
    if (this.isRawModeSupported()) {
      this.handleSetRawMode(false);
    }
  }
  componentDidCatch(error) {
    this.handleExit(error);
  }
};
Object.defineProperty(App, "displayName", {
  enumerable: true,
  configurable: true,
  writable: true,
  value: "InternalApp"
});

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/ink.js
var isCi = process11.env["CI"] === "false" ? false : import_is_ci.default;
var noop = () => {
};
var Ink = class {
  constructor(options) {
    Object.defineProperty(this, "options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "log", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "throttledLog", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isUnmounted", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "lastOutput", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "container", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "rootNode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fullStaticOutput", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "exitPromise", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "restoreConsole", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "unsubscribeResize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "resolveExitPromise", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
      }
    });
    Object.defineProperty(this, "rejectExitPromise", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
      }
    });
    Object.defineProperty(this, "unsubscribeExit", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
      }
    });
    Object.defineProperty(this, "onRender", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: () => {
        if (this.isUnmounted) {
          return;
        }
        const { output, outputHeight, staticOutput } = renderer_default(
          this.rootNode,
          this.options.stdout.columns || 80
        );
        const hasStaticOutput = staticOutput && staticOutput !== "\n";
        if (this.options.debug) {
          if (hasStaticOutput) {
            this.fullStaticOutput += staticOutput;
          }
          this.options.stdout.write(this.fullStaticOutput + output);
          return;
        }
        if (isCi) {
          if (hasStaticOutput) {
            this.options.stdout.write(staticOutput);
          }
          this.lastOutput = output;
          return;
        }
        if (hasStaticOutput) {
          this.fullStaticOutput += staticOutput;
        }
        if (outputHeight >= this.options.stdout.rows) {
          this.options.stdout.write(ansi_escapes_default.clearTerminal + this.fullStaticOutput + output);
          this.lastOutput = output;
          return;
        }
        if (hasStaticOutput) {
          this.log.clear();
          this.options.stdout.write(staticOutput);
          this.log(output);
        }
        if (!hasStaticOutput && output !== this.lastOutput) {
          this.throttledLog(output);
        }
        this.lastOutput = output;
      }
    });
    autoBind(this);
    this.options = options;
    this.rootNode = createNode("ink-root");
    this.rootNode.onRender = options.debug ? this.onRender : (0, import_throttle.default)(this.onRender, 32, {
      leading: true,
      trailing: true
    });
    this.rootNode.onImmediateRender = this.onRender;
    this.log = log_update_default.create(options.stdout);
    this.throttledLog = options.debug ? this.log : (0, import_throttle.default)(this.log, void 0, {
      leading: true,
      trailing: true
    });
    this.isUnmounted = false;
    this.lastOutput = "";
    this.fullStaticOutput = "";
    this.container = reconciler_default.createContainer(
      this.rootNode,
      0,
      null,
      false,
      null,
      "id",
      () => {
      },
      null
    );
    this.unsubscribeExit = (0, import_signal_exit2.default)(this.unmount, { alwaysLast: false });
    if (process11.env["DEV"] === "true") {
      reconciler_default.injectIntoDevTools({
        bundleType: 0,
        version: "16.13.1",
        rendererPackageName: "ink"
      });
    }
    if (options.patchConsole) {
      this.patchConsole();
    }
    if (!isCi) {
      options.stdout.on("resize", this.onRender);
      this.unsubscribeResize = () => {
        options.stdout.off("resize", this.onRender);
      };
    }
  }
  render(node) {
    const tree = import_react10.default.createElement(App, { stdin: this.options.stdin, stdout: this.options.stdout, stderr: this.options.stderr, writeToStdout: this.writeToStdout, writeToStderr: this.writeToStderr, exitOnCtrlC: this.options.exitOnCtrlC, onExit: this.unmount }, node);
    reconciler_default.updateContainer(tree, this.container, null, noop);
  }
  writeToStdout(data) {
    if (this.isUnmounted) {
      return;
    }
    if (this.options.debug) {
      this.options.stdout.write(data + this.fullStaticOutput + this.lastOutput);
      return;
    }
    if (isCi) {
      this.options.stdout.write(data);
      return;
    }
    this.log.clear();
    this.options.stdout.write(data);
    this.log(this.lastOutput);
  }
  writeToStderr(data) {
    if (this.isUnmounted) {
      return;
    }
    if (this.options.debug) {
      this.options.stderr.write(data);
      this.options.stdout.write(this.fullStaticOutput + this.lastOutput);
      return;
    }
    if (isCi) {
      this.options.stderr.write(data);
      return;
    }
    this.log.clear();
    this.options.stderr.write(data);
    this.log(this.lastOutput);
  }
  unmount(error) {
    if (this.isUnmounted) {
      return;
    }
    this.onRender();
    this.unsubscribeExit();
    if (typeof this.restoreConsole === "function") {
      this.restoreConsole();
    }
    if (typeof this.unsubscribeResize === "function") {
      this.unsubscribeResize();
    }
    if (isCi) {
      this.options.stdout.write(this.lastOutput + "\n");
    } else if (!this.options.debug) {
      this.log.done();
    }
    this.isUnmounted = true;
    reconciler_default.updateContainer(null, this.container, null, noop);
    instances_default.delete(this.options.stdout);
    if (error instanceof Error) {
      this.rejectExitPromise(error);
    } else {
      this.resolveExitPromise();
    }
  }
  async waitUntilExit() {
    if (!this.exitPromise) {
      this.exitPromise = new Promise((resolve, reject) => {
        this.resolveExitPromise = resolve;
        this.rejectExitPromise = reject;
      });
    }
    return this.exitPromise;
  }
  clear() {
    if (!isCi && !this.options.debug) {
      this.log.clear();
    }
  }
  patchConsole() {
    if (this.options.debug) {
      return;
    }
    this.restoreConsole = dist_default((stream, data) => {
      if (stream === "stdout") {
        this.writeToStdout(data);
      }
      if (stream === "stderr") {
        const isReactMessage = data.startsWith("The above error occurred");
        if (!isReactMessage) {
          this.writeToStderr(data);
        }
      }
    });
  }
};

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/render.js
var render = (node, options) => {
  const inkOptions = {
    stdout: process12.stdout,
    stdin: process12.stdin,
    stderr: process12.stderr,
    debug: false,
    exitOnCtrlC: true,
    patchConsole: true,
    ...getOptions(options)
  };
  const instance = getInstance(inkOptions.stdout, () => new Ink(inkOptions));
  instance.render(node);
  return {
    rerender: instance.render,
    unmount() {
      instance.unmount();
    },
    waitUntilExit: instance.waitUntilExit,
    cleanup: () => instances_default.delete(inkOptions.stdout),
    clear: instance.clear
  };
};
var render_default = render;
var getOptions = (stdout = {}) => {
  if (stdout instanceof Stream) {
    return {
      stdout,
      stdin: process12.stdin
    };
  }
  return stdout;
};
var getInstance = (stdout, createInstance) => {
  let instance = instances_default.get(stdout);
  if (!instance) {
    instance = createInstance();
    instances_default.set(stdout, instance);
  }
  return instance;
};

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Line.js
var import_react11 = __toESM(require_react(), 1);
var Line = (0, import_react11.forwardRef)(({ orientation, ...style }, ref) => {
  const transformedStyle = {
    ...style,
    marginLeft: style.marginLeft || style.marginX || style.margin || 0,
    marginRight: style.marginRight || style.marginX || style.margin || 0,
    marginTop: style.marginTop || style.marginY || style.margin || 0,
    marginBottom: style.marginBottom || style.marginY || style.margin || 0,
    width: orientation === "horizontal" ? style.width : 1,
    height: orientation === "vertical" ? style.height : 1
  };
  return import_react11.default.createElement("ink-line", { ref, orientation, style: transformedStyle });
});
Line.displayName = "Line";
Line.defaultProps = {
  orientation: "horizontal"
};
var Line_default = Line;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Static.js
var import_react12 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Transform.js
var import_react13 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Newline.js
var import_react14 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/components/Spacer.js
var import_react15 = __toESM(require_react(), 1);
function Spacer() {
  return import_react15.default.createElement(Box_default, { flexGrow: 1 });
}

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-input.js
var import_react17 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-stdin.js
var import_react16 = __toESM(require_react(), 1);
var useStdin = () => (0, import_react16.useContext)(StdinContext_default);
var use_stdin_default = useStdin;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-input.js
var useInput = (inputHandler, options = {}) => {
  const { stdin, setRawMode, internal_exitOnCtrlC } = use_stdin_default();
  (0, import_react17.useEffect)(() => {
    if (options.isActive === false) {
      return;
    }
    setRawMode(true);
    return () => {
      setRawMode(false);
    };
  }, [options.isActive, setRawMode]);
  (0, import_react17.useEffect)(() => {
    if (options.isActive === false) {
      return;
    }
    const handleData = (data) => {
      let input = String(data);
      const key2 = {
        upArrow: input === "\x1B[A",
        downArrow: input === "\x1B[B",
        leftArrow: input === "\x1B[D",
        rightArrow: input === "\x1B[C",
        pageDown: input === "\x1B[6~",
        pageUp: input === "\x1B[5~",
        return: input === "\r",
        escape: input === "\x1B",
        ctrl: false,
        shift: false,
        tab: input === "	" || input === "\x1B[Z",
        backspace: input === "\b",
        delete: input === "\x7F" || input === "\x1B[3~",
        meta: false
      };
      if (input <= "" && !key2.return) {
        input = String.fromCharCode(
          input.charCodeAt(0) + "a".charCodeAt(0) - 1
        );
        key2.ctrl = true;
      }
      if (input.startsWith("\x1B")) {
        input = input.slice(1);
        key2.meta = true;
      }
      const isLatinUppercase = input >= "A" && input <= "Z";
      const isCyrillicUppercase = input >= "\u0410" && input <= "\u042F";
      if (input.length === 1 && (isLatinUppercase || isCyrillicUppercase)) {
        key2.shift = true;
      }
      if (key2.tab && input === "[Z") {
        key2.shift = true;
      }
      if (key2.tab || key2.backspace || key2.delete) {
        input = "";
      }
      if (!(input === "c" && key2.ctrl) || !internal_exitOnCtrlC) {
        inputHandler(input, key2);
      }
    };
    stdin == null ? void 0 : stdin.on("data", handleData);
    return () => {
      stdin == null ? void 0 : stdin.off("data", handleData);
    };
  }, [options.isActive, stdin, internal_exitOnCtrlC, inputHandler]);
};
var use_input_default = useInput;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-app.js
var import_react18 = __toESM(require_react(), 1);
var useApp = () => (0, import_react18.useContext)(AppContext_default);
var use_app_default = useApp;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-stdout.js
var import_react19 = __toESM(require_react(), 1);
var useStdout = () => (0, import_react19.useContext)(StdoutContext_default);
var use_stdout_default = useStdout;

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-stderr.js
var import_react20 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-focus.js
var import_react21 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/hooks/use-focus-manager.js
var import_react22 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-virtual-613b784875/node_modules/ink/build/measure-element.js
var measureElement = (node) => {
  var _a2, _b;
  return {
    width: ((_a2 = node.yogaNode) == null ? void 0 : _a2.getComputedWidth()) ?? 0,
    height: ((_b = node.yogaNode) == null ? void 0 : _b.getComputedHeight()) ?? 0
  };
};
var measure_element_default = measureElement;

// src/cli.tsx
var import_react51 = __toESM(require_react(), 1);

// src/lib/boxProps.ts
var import_safe = __toESM(require_index_safe(), 1);
function getOuterBoxProps(props) {
  return (0, import_safe.pick)(props, [
    "position",
    "marginLeft",
    "marginRight",
    "marginTop",
    "marginBottom",
    "margin",
    "marginX",
    "marginY",
    "flexGrow",
    "flexShrink",
    "flexBasis",
    "alignSelf",
    "width",
    "height",
    "minWidth",
    "minHeight",
    "borderStyle",
    "borderColor"
  ]);
}
function getInnerBoxProps(props) {
  return (0, import_safe.pick)(props, [
    "paddingLeft",
    "paddingRight",
    "paddingTop",
    "paddingBottom",
    "flexDirection",
    "alignItems",
    "justifyContent",
    "padding",
    "paddingX",
    "paddingY"
  ]);
}

// src/components/Frame.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var FrameLabels = ({ labels }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {
    children: labels.map((label, i2) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
        marginLeft: i2 > 0 ? 2 : 0,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
          bold: typeof label !== "object",
          children: [
            " ",
            label,
            " "
          ]
        })
      }, i2);
    })
  });
};
var FrameLabelGroup = (props) => {
  var _a2, _b, _c;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
        children: ((_a2 = props.left) == null ? void 0 : _a2.some(Boolean)) && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FrameLabels, {
          labels: props.left.filter(Boolean)
        })
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
        children: ((_b = props.center) == null ? void 0 : _b.some(Boolean)) && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FrameLabels, {
          labels: props.center.filter(Boolean)
        })
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
        children: ((_c = props.right) == null ? void 0 : _c.some(Boolean)) && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FrameLabels, {
          labels: props.right.filter(Boolean)
        })
      })
    ]
  });
};
var Frame = (props) => {
  const { topLabels, bottomLabels, ...boxProps } = props;
  const hasTopLabels = topLabels && Object.values(topLabels).some(Boolean);
  const hasBottomLabels = bottomLabels && Object.values(bottomLabels).some(Boolean);
  boxProps.borderStyle ??= "round";
  boxProps.paddingX ??= 1;
  if (hasTopLabels || hasBottomLabels) {
    const outerBoxProps = getOuterBoxProps(boxProps);
    const innerBoxProps = getInnerBoxProps(boxProps);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
      ...outerBoxProps,
      flexDirection: "column",
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
          marginTop: -1,
          marginLeft: (innerBoxProps.padding ?? innerBoxProps.paddingX ?? innerBoxProps.paddingLeft ?? 0) - 1,
          marginRight: (innerBoxProps.padding ?? innerBoxProps.paddingX ?? innerBoxProps.paddingRight ?? 0) - 1,
          flexDirection: "row",
          justifyContent: "space-between",
          flexBasis: 1,
          flexGrow: 0,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FrameLabelGroup, {
            ...topLabels
          })
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
          ...innerBoxProps,
          flexGrow: 1,
          children: boxProps.children
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
          marginBottom: -1,
          marginLeft: (innerBoxProps.padding ?? innerBoxProps.paddingX ?? innerBoxProps.paddingLeft ?? 0) - 1,
          marginRight: (innerBoxProps.padding ?? innerBoxProps.paddingX ?? innerBoxProps.paddingRight ?? 0) - 1,
          flexDirection: "row",
          justifyContent: "space-between",
          flexBasis: 1,
          flexGrow: 0,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(FrameLabelGroup, {
            ...bottomLabels
          })
        })
      ]
    });
  } else {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
      ...boxProps
    });
  }
};

// src/components/Log.tsx
var import_react25 = __toESM(require_react(), 1);

// ../../node_modules/.store/ink-spinner-virtual-acbe74a315/node_modules/ink-spinner/build/index.js
var import_react23 = __toESM(require_react(), 1);
var import_cli_spinners = __toESM(require_cli_spinners(), 1);
function Spinner({ type: type2 = "dots" }) {
  const [frame, setFrame] = (0, import_react23.useState)(0);
  const spinner = import_cli_spinners.default[type2];
  (0, import_react23.useEffect)(() => {
    const timer = setInterval(() => {
      setFrame((previousFrame) => {
        const isLastFrame = previousFrame === spinner.frames.length - 1;
        return isLastFrame ? 0 : previousFrame + 1;
      });
    }, spinner.interval);
    return () => {
      clearInterval(timer);
    };
  }, [spinner]);
  return import_react23.default.createElement(Text, null, spinner.frames[frame]);
}
var build_default = Spinner;

// src/components/HotkeyLabel.tsx
var import_react24 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var specialKeys = {
  upArrow: "\u2191",
  downArrow: "\u2193",
  leftArrow: "\u2190",
  rightArrow: "\u2192",
  pageDown: "PgDn",
  pageUp: "PgUp",
  return: "\u21B2",
  escape: "Esc",
  tab: "\u21B9",
  backspace: "\u2906",
  delete: "Del"
};
function modifiersToString(modifiers = []) {
  let ret = "";
  if (modifiers.includes("ctrl"))
    ret += "Ctrl+";
  if (modifiers.includes("shift"))
    ret += "\u21E7+";
  return ret;
}
function renderHotkey(hotkey, modifiers) {
  if (hotkey in specialKeys) {
    return modifiersToString(modifiers) + specialKeys[hotkey];
  } else {
    return modifiersToString(modifiers) + hotkey.toUpperCase();
  }
}
var HotkeyLabel = (props) => {
  const { hotkey, label, modifiers, ...textProps } = props;
  textProps.color ??= "red";
  textProps.bold ??= true;
  const { color, children, ...rest } = textProps;
  const [isBusy, setIsBusy] = (0, import_react24.useState)(false);
  const busyProps = isBusy ? {
    color: "greenBright"
  } : {};
  use_input_default(async (input, key2) => {
    if (!isBusy && hotkey && props.onPress && (input === hotkey || hotkey in specialKeys && key2[hotkey]) && (modifiers && modifiers.every((mod) => key2[mod]) || !modifiers && !key2.ctrl && !key2.shift)) {
      setIsBusy(true);
      await props.onPress();
      setIsBusy(false);
    }
  });
  const BusySpinner = isBusy ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
        type: "dots"
      })
    ]
  }) : null;
  if (!label) {
    if (hotkey) {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        ...textProps,
        ...busyProps,
        children: [
          renderHotkey(hotkey, modifiers),
          BusySpinner
        ]
      });
    } else {
      throw new Error("At least one of label or hotkey must be provided");
    }
  }
  if (!hotkey) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      ...textProps,
      ...busyProps,
      children: [
        label,
        BusySpinner
      ]
    });
  } else if (hotkey.length !== 1 && !(hotkey in specialKeys)) {
    throw new Error("Hotkey must be a single character or a special key");
  }
  const hotkeyIndex = hotkey.length === 1 && !(modifiers == null ? void 0 : modifiers.length) ? label.toLowerCase().indexOf(hotkey.toLowerCase()) : -1;
  if (isBusy) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      ...rest,
      ...busyProps,
      children: [
        label,
        BusySpinner
      ]
    });
  } else if (hotkeyIndex >= 0) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      ...rest,
      children: [
        label.slice(0, hotkeyIndex),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color,
          children: label.slice(hotkeyIndex, hotkeyIndex + 1)
        }),
        label.slice(hotkeyIndex + 1),
        BusySpinner
      ]
    });
  } else {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      ...rest,
      children: [
        label,
        " ",
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color,
          children: renderHotkey(hotkey, modifiers)
        }),
        BusySpinner
      ]
    });
  }
};

// src/components/Log.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var Log = (props) => {
  const ref = (0, import_react25.useRef)(null);
  const [logHeight, setLogHeight] = (0, import_react25.useState)(0);
  const [scrollOffset, setScrollOffset] = (0, import_react25.useState)(0);
  const [log, setLog] = (0, import_react25.useState)("");
  const renderLog = (0, import_react25.useCallback)(() => {
    const lines = props.buffer.getView(
      Math.max(props.buffer.size - logHeight, 0),
      props.buffer.size
    );
    setLog(lines.join("\n"));
  }, [props.buffer, logHeight]);
  const measure = (0, import_react25.useCallback)(() => {
    if (ref.current) {
      const height = measure_element_default(ref.current).height;
      if (!Number.isNaN(height))
        setLogHeight(height);
    }
  }, [ref, setLogHeight]);
  (0, import_react25.useEffect)(() => {
    measure();
    setTimeout(measure, 30);
  });
  (0, import_react25.useEffect)(() => {
    const listener = () => {
      renderLog();
    };
    props.buffer.on("change", listener);
    return () => {
      props.buffer.off("change", listener);
    };
  }, [props.buffer, scrollOffset, logHeight]);
  (0, import_react25.useEffect)(() => {
    renderLog();
  }, [logHeight]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    minWidth: 104,
    flexGrow: 1,
    ref,
    flexDirection: "row",
    alignItems: "stretch",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
        children: log
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Spacer, {}),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
        flexDirection: "column",
        width: 1,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
            hotkey: "upArrow"
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            children: "\u2588"
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Spacer, {}),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
            hotkey: "downArrow"
          })
        ]
      })
    ]
  });
};

// ../../node_modules/.store/ink-text-input-virtual-4cdc070a1c/node_modules/ink-text-input/build/index.js
var import_react26 = __toESM(require_react(), 1);
function TextInput({ value: originalValue, placeholder = "", focus = true, mask: mask2, highlightPastedText = false, showCursor = true, onChange, onSubmit }) {
  const [state, setState] = (0, import_react26.useState)({
    cursorOffset: (originalValue || "").length,
    cursorWidth: 0
  });
  const { cursorOffset, cursorWidth } = state;
  (0, import_react26.useEffect)(() => {
    setState((previousState) => {
      if (!focus || !showCursor) {
        return previousState;
      }
      const newValue = originalValue || "";
      if (previousState.cursorOffset > newValue.length - 1) {
        return {
          cursorOffset: newValue.length,
          cursorWidth: 0
        };
      }
      return previousState;
    });
  }, [originalValue, focus, showCursor]);
  const cursorActualWidth = highlightPastedText ? cursorWidth : 0;
  const value = mask2 ? mask2.repeat(originalValue.length) : originalValue;
  let renderedValue = value;
  let renderedPlaceholder = placeholder ? source_default.grey(placeholder) : void 0;
  if (showCursor && focus) {
    renderedPlaceholder = placeholder.length > 0 ? source_default.inverse(placeholder[0]) + source_default.grey(placeholder.slice(1)) : source_default.inverse(" ");
    renderedValue = value.length > 0 ? "" : source_default.inverse(" ");
    let i2 = 0;
    for (const char of value) {
      renderedValue += i2 >= cursorOffset - cursorActualWidth && i2 <= cursorOffset ? source_default.inverse(char) : char;
      i2++;
    }
    if (value.length > 0 && cursorOffset === value.length) {
      renderedValue += source_default.inverse(" ");
    }
  }
  use_input_default((input, key2) => {
    if (key2.upArrow || key2.downArrow || key2.ctrl && input === "c" || key2.tab || key2.shift && key2.tab) {
      return;
    }
    if (key2.return) {
      if (onSubmit) {
        onSubmit(originalValue);
      }
      return;
    }
    let nextCursorOffset = cursorOffset;
    let nextValue = originalValue;
    let nextCursorWidth = 0;
    if (key2.leftArrow) {
      if (showCursor) {
        nextCursorOffset--;
      }
    } else if (key2.rightArrow) {
      if (showCursor) {
        nextCursorOffset++;
      }
    } else if (key2.backspace || key2.delete) {
      if (cursorOffset > 0) {
        nextValue = originalValue.slice(0, cursorOffset - 1) + originalValue.slice(cursorOffset, originalValue.length);
        nextCursorOffset--;
      }
    } else {
      nextValue = originalValue.slice(0, cursorOffset) + input + originalValue.slice(cursorOffset, originalValue.length);
      nextCursorOffset += input.length;
      if (input.length > 1) {
        nextCursorWidth = input.length;
      }
    }
    if (cursorOffset < 0) {
      nextCursorOffset = 0;
    }
    if (cursorOffset > originalValue.length) {
      nextCursorOffset = originalValue.length;
    }
    setState({
      cursorOffset: nextCursorOffset,
      cursorWidth: nextCursorWidth
    });
    if (nextValue !== originalValue) {
      onChange(nextValue);
    }
  }, { isActive: focus });
  return import_react26.default.createElement(Text, null, placeholder ? value.length > 0 ? renderedValue : renderedPlaceholder : renderedValue);
}
function UncontrolledTextInput({ initialValue = "", ...props }) {
  const [value, setValue2] = (0, import_react26.useState)(initialValue);
  return import_react26.default.createElement(TextInput, { ...props, value, onChange: setValue2 });
}

// src/components/Center.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var Center = (props) => {
  const { children, ...boxProps } = props;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
    ...boxProps,
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    flexGrow: 1,
    children
  });
};

// src/components/Modals.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ModalMessage = (props) => {
  use_input_default((input, key2) => {
    if (key2.return) {
      props.onSubmit();
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
      flexDirection: "column",
      borderColor: props.color ?? "white",
      borderStyle: "round",
      paddingY: 1,
      paddingX: 2,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: props.color,
          children: props.children
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          children: " "
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
          color: "gray",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
              bold: true,
              children: "ENTER"
            }),
            " to continue..."
          ]
        })
      ]
    })
  });
};
var ModalQuery = (props) => {
  use_input_default((input, key2) => {
    if (key2.escape && props.onCancel) {
      props.onCancel();
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
      flexDirection: "column",
      borderColor: props.color ?? "white",
      borderStyle: "round",
      minWidth: 40,
      paddingY: 1,
      paddingX: 2,
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: props.color,
          children: props.children
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
          borderStyle: "round",
          borderColor: "gray",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UncontrolledTextInput, {
            initialValue: props.initial,
            onSubmit: props.onSubmit
          })
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
          dimColor: true,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
              bold: true,
              children: "ENTER"
            }),
            " to confirm, ",
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
              bold: true,
              children: "ESCAPE"
            }),
            " ",
            "to cancel"
          ]
        })
      ]
    })
  });
};
var InlineQuery = (props) => {
  use_input_default((input, key2) => {
    if (key2.escape && props.onCancel) {
      props.onCancel();
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    paddingY: 0,
    paddingX: 1,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        color: props.color,
        children: [
          props.children,
          ": "
        ]
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
        borderStyle: "round",
        borderColor: "gray",
        flexGrow: 1,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UncontrolledTextInput, {
          initialValue: props.initial,
          onSubmit: props.onSubmit
        })
      })
    ]
  });
};

// src/components/setUSBPath.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var SetUSBPath = (props) => {
  use_input_default((input, key2) => {
    if (key2.escape)
      props.onCancel();
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    flexDirection: "column",
    alignSelf: "center",
    minWidth: 40,
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
        children: "Enter USB path:"
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
        borderStyle: "round",
        borderColor: "gray",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(UncontrolledTextInput, {
          initialValue: props.path,
          onSubmit: props.onSubmit
        })
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        dimColor: true,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            bold: true,
            children: "ENTER"
          }),
          " to confirm, ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            bold: true,
            children: "ESCAPE"
          }),
          " to cancel"
        ]
      })
    ]
  });
};

// src/hooks/useDialogs.ts
var import_react27 = __toESM(require_react(), 1);
var DialogsContext = import_react27.default.createContext({});
var useDialogs = () => import_react27.default.useContext(DialogsContext);

// src/hooks/useDriver.ts
var import_react28 = __toESM(require_react(), 1);
var DriverContext = import_react28.default.createContext({});
var useDriver = () => {
  const { driver, setDriver } = import_react28.default.useContext(DriverContext);
  const destroyDriver = import_react28.default.useCallback(async () => {
    if (!driver)
      return;
    await driver.destroy();
    setDriver(void 0);
  }, [driver]);
  return { driver, setDriver, destroyDriver };
};
function useControllerEvent(type2, listener) {
  const { driver } = import_react28.default.useContext(DriverContext);
  const controller = driver.controller;
  import_react28.default.useEffect(() => {
    controller.on(type2, listener);
    return () => void controller.off(type2, listener);
  }, [listener, type2]);
}

// src/hooks/useGlobals.ts
var import_react29 = __toESM(require_react(), 1);
var GlobalsContext = import_react29.default.createContext({});
var useGlobals = () => import_react29.default.useContext(GlobalsContext);

// src/hooks/useMenu.ts
var import_react30 = __toESM(require_react(), 1);
var MenuContext = import_react30.default.createContext({});
function hashItem(item) {
  if (!item)
    return "";
  return JSON.stringify({
    location: item.location,
    visible: item.visible ?? true
  });
}
function hashItems(items) {
  return items.map(hashItem).join(";");
}
function useMenu(items) {
  const itemsRef = import_react30.default.useRef(/* @__PURE__ */ new Map());
  const context = import_react30.default.useContext(MenuContext);
  const setMenuItems = import_react30.default.useCallback(
    (_items) => {
      const items2 = _items.filter((item) => !!item);
      const newItems = items2.filter(
        (item) => !itemsRef.current.has(item)
      );
      const removedItems = [...itemsRef.current.keys()].filter(
        (item) => !items2.includes(item)
      );
      const changedItems = items2.filter(
        (item) => itemsRef.current.has(item) && itemsRef.current.get(item) !== hashItem(item)
      );
      for (const item of removedItems) {
        itemsRef.current.delete(item);
      }
      for (const item of newItems) {
        itemsRef.current.set(item, hashItem(item));
      }
      for (const item of changedItems) {
        itemsRef.current.set(item, hashItem(item));
      }
      if (newItems.length || changedItems.length || removedItems.length) {
        context.updateItems(newItems, changedItems, removedItems);
      }
    },
    [context, itemsRef]
  );
  import_react30.default.useEffect(() => {
    setMenuItems(items);
    return () => {
      context.updateItems([], [], Array.from(itemsRef.current.keys()));
    };
  }, []);
  import_react30.default.useEffect(() => {
    setMenuItems(items);
  }, [hashItems(items)]);
  return () => setMenuItems(items);
}
var compareMenuItems = (a, b) => {
  if (a.compareTo) {
    return a.compareTo(b);
  } else if (b.compareTo) {
    return -b.compareTo(a);
  } else {
    return 0;
  }
};
var visibleItemsAsNodes = (items) => {
  return items.filter((i2) => i2.visible !== false).sort(compareMenuItems).map((i2) => i2.item).filter(Boolean);
};
var normalizeMenuItems = (items) => {
  const leftItems = items.filter((i2) => i2.location.endsWith("Left"));
  const centerItems = items.filter((i2) => i2.location.endsWith("Center"));
  const rightItems = items.filter((i2) => i2.location.endsWith("Right"));
  return {
    left: visibleItemsAsNodes(leftItems),
    center: visibleItemsAsNodes(centerItems),
    right: visibleItemsAsNodes(rightItems)
  };
};
function useMenuItemSlots(mergeWith) {
  const [menuItems, setMenuItems] = import_react30.default.useState(mergeWith);
  const updateMenuItems = import_react30.default.useCallback(
    (added, changed, removed) => {
      setMenuItems((current) => {
        const ret = [
          ...current.filter((i2) => !removed.includes(i2)),
          ...added
        ];
        return ret;
      });
    },
    [setMenuItems]
  );
  const slots = import_react30.default.useMemo(() => {
    const topItems = menuItems.filter((i2) => i2.location.startsWith("top"));
    const bottomItems = menuItems.filter(
      (i2) => i2.location.startsWith("bottom")
    );
    return {
      top: normalizeMenuItems(topItems),
      bottom: normalizeMenuItems(bottomItems)
    };
  }, [menuItems]);
  return [slots, updateMenuItems];
}

// src/hooks/useNavigation.ts
var import_react49 = __toESM(require_react(), 1);

// src/pages/BootstrappingNode.tsx
var import_core = __toESM(require_build2(), 1);
var import_shared = __toESM(require_build(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var BootstrappingNodePage = (props) => {
  const { navigate } = useNavigation();
  const { showWarning, showSuccess } = useDialogs();
  useControllerEvent("node added", (node, result) => {
    if (result.lowSecurity) {
      showWarning(
        `Node ${node.id} was added with lower than intended security!`
      );
    } else {
      let message = `Node ${node.id} was added!`;
      const secClass = node.getHighestSecurityClass();
      if (secClass && secClass > import_core.SecurityClass.None) {
        message += ` Security class: ${(0, import_shared.getEnumMemberName)(
          import_core.SecurityClass,
          secClass
        )}`;
      }
      showSuccess(message);
    }
    navigate(4 /* DeviceOverview */);
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "green",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
            type: "dots"
          })
        }),
        " ",
        "Found node ",
        props.nodeId,
        ", bootstrapping..."
      ]
    })
  });
};

// src/pages/ConfirmExit.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ConfirmExitPage = () => {
  const { exit: exit2 } = use_app_default();
  const { destroyDriver } = useDriver();
  const { back } = useNavigation();
  use_input_default(async (input, key2) => {
    if (key2.return) {
      await destroyDriver();
      exit2();
    } else if (key2.escape) {
      back();
    }
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Center, {
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
        color: "red",
        children: "Are you sure you want to exit?"
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        children: [
          "Press ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            bold: true,
            children: "RETURN"
          }),
          " to exit, or",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            bold: true,
            children: "ESCAPE"
          }),
          " to cancel."
        ]
      })
    ]
  });
};

// ../../node_modules/.store/ink-select-input-virtual-2d650deeac/node_modules/ink-select-input/build/Indicator.js
var import_react31 = __toESM(require_react(), 1);

// ../../node_modules/.store/figures-npm-5.0.0-cd5f512f9c/node_modules/figures/index.js
import process14 from "node:process";

// ../../node_modules/.store/is-unicode-supported-npm-1.3.0-9371ea1eda/node_modules/is-unicode-supported/index.js
import process13 from "node:process";
function isUnicodeSupported() {
  if (process13.platform !== "win32") {
    return process13.env.TERM !== "linux";
  }
  return Boolean(process13.env.CI) || Boolean(process13.env.WT_SESSION) || Boolean(process13.env.TERMINUS_SUBLIME) || process13.env.ConEmuTask === "{cmd::Cmder}" || process13.env.TERM_PROGRAM === "Terminus-Sublime" || process13.env.TERM_PROGRAM === "vscode" || process13.env.TERM === "xterm-256color" || process13.env.TERM === "alacritty" || process13.env.TERMINAL_EMULATOR === "JetBrains-JediTerm";
}

// ../../node_modules/.store/figures-npm-5.0.0-cd5f512f9c/node_modules/figures/index.js
var { platform } = process14;
var common = {
  square: "\u2588",
  squareDarkShade: "\u2593",
  squareMediumShade: "\u2592",
  squareLightShade: "\u2591",
  squareTop: "\u2580",
  squareBottom: "\u2584",
  squareLeft: "\u258C",
  squareRight: "\u2590",
  squareCenter: "\u25A0",
  bullet: "\u25CF",
  dot: "\u2024",
  ellipsis: "\u2026",
  pointerSmall: "\u203A",
  triangleUp: "\u25B2",
  triangleUpSmall: "\u25B4",
  triangleDown: "\u25BC",
  triangleDownSmall: "\u25BE",
  triangleLeftSmall: "\u25C2",
  triangleRightSmall: "\u25B8",
  home: "\u2302",
  heart: "\u2665",
  musicNote: "\u266A",
  musicNoteBeamed: "\u266B",
  arrowUp: "\u2191",
  arrowDown: "\u2193",
  arrowLeft: "\u2190",
  arrowRight: "\u2192",
  arrowLeftRight: "\u2194",
  arrowUpDown: "\u2195",
  almostEqual: "\u2248",
  notEqual: "\u2260",
  lessOrEqual: "\u2264",
  greaterOrEqual: "\u2265",
  identical: "\u2261",
  infinity: "\u221E",
  subscriptZero: "\u2080",
  subscriptOne: "\u2081",
  subscriptTwo: "\u2082",
  subscriptThree: "\u2083",
  subscriptFour: "\u2084",
  subscriptFive: "\u2085",
  subscriptSix: "\u2086",
  subscriptSeven: "\u2087",
  subscriptEight: "\u2088",
  subscriptNine: "\u2089",
  oneHalf: "\xBD",
  oneThird: "\u2153",
  oneQuarter: "\xBC",
  oneFifth: "\u2155",
  oneSixth: "\u2159",
  oneEighth: "\u215B",
  twoThirds: "\u2154",
  twoFifths: "\u2156",
  threeQuarters: "\xBE",
  threeFifths: "\u2157",
  threeEighths: "\u215C",
  fourFifths: "\u2158",
  fiveSixths: "\u215A",
  fiveEighths: "\u215D",
  sevenEighths: "\u215E",
  line: "\u2500",
  lineBold: "\u2501",
  lineDouble: "\u2550",
  lineDashed0: "\u2504",
  lineDashed1: "\u2505",
  lineDashed2: "\u2508",
  lineDashed3: "\u2509",
  lineDashed4: "\u254C",
  lineDashed5: "\u254D",
  lineDashed6: "\u2574",
  lineDashed7: "\u2576",
  lineDashed8: "\u2578",
  lineDashed9: "\u257A",
  lineDashed10: "\u257C",
  lineDashed11: "\u257E",
  lineDashed12: "\u2212",
  lineDashed13: "\u2013",
  lineDashed14: "\u2010",
  lineDashed15: "\u2043",
  lineVertical: "\u2502",
  lineVerticalBold: "\u2503",
  lineVerticalDouble: "\u2551",
  lineVerticalDashed0: "\u2506",
  lineVerticalDashed1: "\u2507",
  lineVerticalDashed2: "\u250A",
  lineVerticalDashed3: "\u250B",
  lineVerticalDashed4: "\u254E",
  lineVerticalDashed5: "\u254F",
  lineVerticalDashed6: "\u2575",
  lineVerticalDashed7: "\u2577",
  lineVerticalDashed8: "\u2579",
  lineVerticalDashed9: "\u257B",
  lineVerticalDashed10: "\u257D",
  lineVerticalDashed11: "\u257F",
  lineDownLeft: "\u2510",
  lineDownLeftArc: "\u256E",
  lineDownBoldLeftBold: "\u2513",
  lineDownBoldLeft: "\u2512",
  lineDownLeftBold: "\u2511",
  lineDownDoubleLeftDouble: "\u2557",
  lineDownDoubleLeft: "\u2556",
  lineDownLeftDouble: "\u2555",
  lineDownRight: "\u250C",
  lineDownRightArc: "\u256D",
  lineDownBoldRightBold: "\u250F",
  lineDownBoldRight: "\u250E",
  lineDownRightBold: "\u250D",
  lineDownDoubleRightDouble: "\u2554",
  lineDownDoubleRight: "\u2553",
  lineDownRightDouble: "\u2552",
  lineUpLeft: "\u2518",
  lineUpLeftArc: "\u256F",
  lineUpBoldLeftBold: "\u251B",
  lineUpBoldLeft: "\u251A",
  lineUpLeftBold: "\u2519",
  lineUpDoubleLeftDouble: "\u255D",
  lineUpDoubleLeft: "\u255C",
  lineUpLeftDouble: "\u255B",
  lineUpRight: "\u2514",
  lineUpRightArc: "\u2570",
  lineUpBoldRightBold: "\u2517",
  lineUpBoldRight: "\u2516",
  lineUpRightBold: "\u2515",
  lineUpDoubleRightDouble: "\u255A",
  lineUpDoubleRight: "\u2559",
  lineUpRightDouble: "\u2558",
  lineUpDownLeft: "\u2524",
  lineUpBoldDownBoldLeftBold: "\u252B",
  lineUpBoldDownBoldLeft: "\u2528",
  lineUpDownLeftBold: "\u2525",
  lineUpBoldDownLeftBold: "\u2529",
  lineUpDownBoldLeftBold: "\u252A",
  lineUpDownBoldLeft: "\u2527",
  lineUpBoldDownLeft: "\u2526",
  lineUpDoubleDownDoubleLeftDouble: "\u2563",
  lineUpDoubleDownDoubleLeft: "\u2562",
  lineUpDownLeftDouble: "\u2561",
  lineUpDownRight: "\u251C",
  lineUpBoldDownBoldRightBold: "\u2523",
  lineUpBoldDownBoldRight: "\u2520",
  lineUpDownRightBold: "\u251D",
  lineUpBoldDownRightBold: "\u2521",
  lineUpDownBoldRightBold: "\u2522",
  lineUpDownBoldRight: "\u251F",
  lineUpBoldDownRight: "\u251E",
  lineUpDoubleDownDoubleRightDouble: "\u2560",
  lineUpDoubleDownDoubleRight: "\u255F",
  lineUpDownRightDouble: "\u255E",
  lineDownLeftRight: "\u252C",
  lineDownBoldLeftBoldRightBold: "\u2533",
  lineDownLeftBoldRightBold: "\u252F",
  lineDownBoldLeftRight: "\u2530",
  lineDownBoldLeftBoldRight: "\u2531",
  lineDownBoldLeftRightBold: "\u2532",
  lineDownLeftRightBold: "\u252E",
  lineDownLeftBoldRight: "\u252D",
  lineDownDoubleLeftDoubleRightDouble: "\u2566",
  lineDownDoubleLeftRight: "\u2565",
  lineDownLeftDoubleRightDouble: "\u2564",
  lineUpLeftRight: "\u2534",
  lineUpBoldLeftBoldRightBold: "\u253B",
  lineUpLeftBoldRightBold: "\u2537",
  lineUpBoldLeftRight: "\u2538",
  lineUpBoldLeftBoldRight: "\u2539",
  lineUpBoldLeftRightBold: "\u253A",
  lineUpLeftRightBold: "\u2536",
  lineUpLeftBoldRight: "\u2535",
  lineUpDoubleLeftDoubleRightDouble: "\u2569",
  lineUpDoubleLeftRight: "\u2568",
  lineUpLeftDoubleRightDouble: "\u2567",
  lineUpDownLeftRight: "\u253C",
  lineUpBoldDownBoldLeftBoldRightBold: "\u254B",
  lineUpDownBoldLeftBoldRightBold: "\u2548",
  lineUpBoldDownLeftBoldRightBold: "\u2547",
  lineUpBoldDownBoldLeftRightBold: "\u254A",
  lineUpBoldDownBoldLeftBoldRight: "\u2549",
  lineUpBoldDownLeftRight: "\u2540",
  lineUpDownBoldLeftRight: "\u2541",
  lineUpDownLeftBoldRight: "\u253D",
  lineUpDownLeftRightBold: "\u253E",
  lineUpBoldDownBoldLeftRight: "\u2542",
  lineUpDownLeftBoldRightBold: "\u253F",
  lineUpBoldDownLeftBoldRight: "\u2543",
  lineUpBoldDownLeftRightBold: "\u2544",
  lineUpDownBoldLeftBoldRight: "\u2545",
  lineUpDownBoldLeftRightBold: "\u2546",
  lineUpDoubleDownDoubleLeftDoubleRightDouble: "\u256C",
  lineUpDoubleDownDoubleLeftRight: "\u256B",
  lineUpDownLeftDoubleRightDouble: "\u256A",
  lineCross: "\u2573",
  lineBackslash: "\u2572",
  lineSlash: "\u2571"
};
var mainSymbols = {
  ...common,
  ...platform === "linux" ? {
    circleQuestionMark: "?\u20DD",
    questionMarkPrefix: "?\u20DD"
  } : {
    circleQuestionMark: "?",
    questionMarkPrefix: "?"
  },
  tick: "\u2714",
  info: "\u2139",
  warning: "\u26A0",
  cross: "\u2718",
  squareSmall: "\u25FB",
  squareSmallFilled: "\u25FC",
  circle: "\u25EF",
  circleFilled: "\u25C9",
  circleDotted: "\u25CC",
  circleDouble: "\u25CE",
  circleCircle: "\u24DE",
  circleCross: "\u24E7",
  circlePipe: "\u24BE",
  radioOn: "\u25C9",
  radioOff: "\u25EF",
  checkboxOn: "\u2612",
  checkboxOff: "\u2610",
  checkboxCircleOn: "\u24E7",
  checkboxCircleOff: "\u24BE",
  pointer: "\u276F",
  triangleUpOutline: "\u25B3",
  triangleLeft: "\u25C0",
  triangleRight: "\u25B6",
  lozenge: "\u25C6",
  lozengeOutline: "\u25C7",
  hamburger: "\u2630",
  smiley: "\u32E1",
  mustache: "\u0DF4",
  star: "\u2605",
  play: "\u25B6",
  nodejs: "\u2B22",
  oneSeventh: "\u2150",
  oneNinth: "\u2151",
  oneTenth: "\u2152"
};
var fallbackSymbols = {
  ...common,
  tick: "\u221A",
  info: "i",
  warning: "\u203C",
  cross: "\xD7",
  squareSmall: "\u25A1",
  squareSmallFilled: "\u25A0",
  circle: "( )",
  circleFilled: "(*)",
  circleDotted: "( )",
  circleDouble: "( )",
  circleCircle: "(\u25CB)",
  circleCross: "(\xD7)",
  circlePipe: "(\u2502)",
  circleQuestionMark: "(?)",
  radioOn: "(*)",
  radioOff: "( )",
  checkboxOn: "[\xD7]",
  checkboxOff: "[ ]",
  checkboxCircleOn: "(\xD7)",
  checkboxCircleOff: "( )",
  questionMarkPrefix: "\uFF1F",
  pointer: ">",
  triangleUpOutline: "\u2206",
  triangleLeft: "\u25C4",
  triangleRight: "\u25BA",
  lozenge: "\u2666",
  lozengeOutline: "\u25CA",
  hamburger: "\u2261",
  smiley: "\u263A",
  mustache: "\u250C\u2500\u2510",
  star: "\u2736",
  play: "\u25BA",
  nodejs: "\u2666",
  oneSeventh: "1/7",
  oneNinth: "1/9",
  oneTenth: "1/10"
};
var shouldUseMain = isUnicodeSupported();
var figures = shouldUseMain ? mainSymbols : fallbackSymbols;
var figures_default = figures;

// ../../node_modules/.store/ink-select-input-virtual-2d650deeac/node_modules/ink-select-input/build/Indicator.js
function Indicator({ isSelected = false }) {
  return import_react31.default.createElement(Box_default, { marginRight: 1 }, isSelected ? import_react31.default.createElement(Text, { color: "blue" }, figures_default.pointer) : import_react31.default.createElement(Text, null, " "));
}
var Indicator_default = Indicator;

// ../../node_modules/.store/ink-select-input-virtual-2d650deeac/node_modules/ink-select-input/build/Item.js
var React18 = __toESM(require_react(), 1);
function Item({ isSelected = false, label }) {
  return React18.createElement(Text, { color: isSelected ? "blue" : void 0 }, label);
}
var Item_default = Item;

// ../../node_modules/.store/ink-select-input-virtual-2d650deeac/node_modules/ink-select-input/build/SelectInput.js
var import_react32 = __toESM(require_react(), 1);
var import_react33 = __toESM(require_react(), 1);
var import_lodash = __toESM(require_lodash(), 1);
var import_arr_rotate = __toESM(require_arr_rotate(), 1);
function SelectInput({ items = [], isFocused = true, initialIndex = 0, indicatorComponent = Indicator_default, itemComponent = Item_default, limit: customLimit, onSelect, onHighlight }) {
  const hasLimit = typeof customLimit === "number" && items.length > customLimit;
  const limit = hasLimit ? Math.min(customLimit, items.length) : items.length;
  const lastIndex = limit - 1;
  const [rotateIndex, setRotateIndex] = (0, import_react33.useState)(initialIndex > lastIndex ? lastIndex - initialIndex : 0);
  const [selectedIndex, setSelectedIndex] = (0, import_react33.useState)(initialIndex ? initialIndex > lastIndex ? lastIndex : initialIndex : 0);
  const previousItems = (0, import_react33.useRef)(items);
  (0, import_react33.useEffect)(() => {
    if (!(0, import_lodash.default)(previousItems.current.map((item) => item.value), items.map((item) => item.value))) {
      setRotateIndex(0);
      setSelectedIndex(0);
    }
    previousItems.current = items;
  }, [items]);
  use_input_default((0, import_react33.useCallback)((input, key2) => {
    if (input === "k" || key2.upArrow) {
      const lastIndex2 = (hasLimit ? limit : items.length) - 1;
      const atFirstIndex = selectedIndex === 0;
      const nextIndex = hasLimit ? selectedIndex : lastIndex2;
      const nextRotateIndex = atFirstIndex ? rotateIndex + 1 : rotateIndex;
      const nextSelectedIndex = atFirstIndex ? nextIndex : selectedIndex - 1;
      setRotateIndex(nextRotateIndex);
      setSelectedIndex(nextSelectedIndex);
      const slicedItems2 = hasLimit ? (0, import_arr_rotate.default)(items, nextRotateIndex).slice(0, limit) : items;
      if (typeof onHighlight === "function") {
        onHighlight(slicedItems2[nextSelectedIndex]);
      }
    }
    if (input === "j" || key2.downArrow) {
      const atLastIndex = selectedIndex === (hasLimit ? limit : items.length) - 1;
      const nextIndex = hasLimit ? selectedIndex : 0;
      const nextRotateIndex = atLastIndex ? rotateIndex - 1 : rotateIndex;
      const nextSelectedIndex = atLastIndex ? nextIndex : selectedIndex + 1;
      setRotateIndex(nextRotateIndex);
      setSelectedIndex(nextSelectedIndex);
      const slicedItems2 = hasLimit ? (0, import_arr_rotate.default)(items, nextRotateIndex).slice(0, limit) : items;
      if (typeof onHighlight === "function") {
        onHighlight(slicedItems2[nextSelectedIndex]);
      }
    }
    if (key2.return) {
      const slicedItems2 = hasLimit ? (0, import_arr_rotate.default)(items, rotateIndex).slice(0, limit) : items;
      if (typeof onSelect === "function") {
        onSelect(slicedItems2[selectedIndex]);
      }
    }
  }, [
    hasLimit,
    limit,
    rotateIndex,
    selectedIndex,
    items,
    onSelect,
    onHighlight
  ]), { isActive: isFocused });
  const slicedItems = hasLimit ? (0, import_arr_rotate.default)(items, rotateIndex).slice(0, limit) : items;
  return import_react32.default.createElement(Box_default, { flexDirection: "column" }, slicedItems.map((item, index) => {
    const isSelected = index === selectedIndex;
    return import_react32.default.createElement(
      Box_default,
      { key: item.key ?? item.value },
      import_react32.default.createElement(indicatorComponent, { isSelected }),
      import_react32.default.createElement(itemComponent, { ...item, isSelected })
    );
  }));
}
var SelectInput_default = SelectInput;

// src/pages/Controller/SetRegion.tsx
var import_react34 = __toESM(require_react(), 1);
import { getEnumMemberName as getEnumMemberName2, RFRegion } from "zwave-js";
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var regions = Object.entries(RFRegion).filter(
  ([_, value]) => typeof value === "number"
).map(([name, region]) => ({
  label: name,
  value: region
}));
var ControllerSetRegionPage = (props) => {
  const { driver } = useDriver();
  const [busy, setBusy] = (0, import_react34.useState)(false);
  const { showSuccess, showError } = useDialogs();
  const { back } = useNavigation();
  const currentRegion = driver.controller.rfRegion;
  const setRegion = (0, import_react34.useCallback)(
    async ({ value: region }) => {
      setBusy(true);
      const result = await driver.controller.setRFRegion(region);
      setBusy(false);
      if (result) {
        showSuccess(
          `RF region changed to ${getEnumMemberName2(
            RFRegion,
            region
          )}`
        );
      } else {
        showError(`Failed to change RF region.`);
      }
      back();
    },
    [driver.controller]
  );
  if (busy) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            color: "green",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
              type: "dots"
            })
          }),
          " ",
          "Setting RF region..."
        ]
      })
    });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    flexDirection: "column",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
        children: "Select RF region"
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectInput_default, {
        items: regions,
        onSelect: setRegion,
        initialIndex: regions.findIndex(
          (r) => r.value === currentRegion
        )
      })
    ]
  });
};

// src/pages/DestroyingDriver.tsx
var import_react35 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var DestroyingDriverPage = () => {
  const { destroyDriver } = useDriver();
  const { navigate } = useNavigation();
  (0, import_react35.useEffect)(() => {
    destroyDriver().then(() => {
      navigate(0 /* Prepare */);
    });
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "red",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
            type: "dots"
          })
        }),
        " ",
        "Destroying driver..."
      ]
    })
  });
};

// src/pages/DeviceDetails.tsx
var import_react41 = __toESM(require_react(), 1);

// src/components/DeviceDetailsController.tsx
var import_react39 = __toESM(require_react(), 1);

// src/hooks/useForceRerender.ts
var import_react36 = __toESM(require_react(), 1);
function useForceRerender() {
  const [value, setValue2] = (0, import_react36.useState)(0);
  return () => setValue2((value2) => value2 + 1);
}

// src/components/CommandPalette.tsx
var import_react37 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var CommandPalette = (props) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Frame, {
    topLabels: {
      left: [props.label ?? "Commands"]
    },
    flexDirection: "row",
    justifyContent: "flex-start",
    borderColor: "gray",
    children: props.commands.filter((c) => !!c).map((p, i2) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_react37.default.Fragment, {
      children: [
        i2 > 0 && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Line_default, {
          orientation: "vertical",
          borderStyle: "single",
          borderColor: "gray"
        }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
          paddingX: 2,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
            ...p
          })
        })
      ]
    }, i2))
  });
};

// ../../node_modules/.store/@alcalzone-ink-table-virtual-c893deb8bd/node_modules/@alcalzone/ink-table/dist/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react38 = __toESM(require_react(), 1);
var import_object_hash = __toESM(require_object_hash(), 1);
var Table = class extends import_react38.default.Component {
  constructor() {
    super(...arguments);
    this.header = row({
      cell: this.getConfig().skeleton,
      padding: this.getConfig().padding,
      skeleton: {
        component: this.getConfig().skeleton,
        line: "\u2500",
        left: "\u250C",
        right: "\u2510",
        cross: "\u252C"
      }
    });
    this.heading = row({
      cell: this.getConfig().header,
      padding: this.getConfig().padding,
      skeleton: {
        component: this.getConfig().skeleton,
        line: " ",
        left: "\u2502",
        right: "\u2502",
        cross: "\u2502"
      }
    });
    this.separator = row({
      cell: this.getConfig().skeleton,
      padding: this.getConfig().padding,
      skeleton: {
        component: this.getConfig().skeleton,
        line: "\u2500",
        left: "\u251C",
        right: "\u2524",
        cross: "\u253C"
      }
    });
    this.data = row({
      cell: this.getConfig().cell,
      padding: this.getConfig().padding,
      skeleton: {
        component: this.getConfig().skeleton,
        line: " ",
        left: "\u2502",
        right: "\u2502",
        cross: "\u2502"
      }
    });
    this.footer = row({
      cell: this.getConfig().skeleton,
      padding: this.getConfig().padding,
      skeleton: {
        component: this.getConfig().skeleton,
        line: "\u2500",
        left: "\u2514",
        right: "\u2518",
        cross: "\u2534"
      }
    });
  }
  getConfig() {
    return {
      data: this.props.data,
      columns: this.props.columns || this.getDataKeys(),
      padding: this.props.padding || 1,
      header: this.props.header || Header,
      cell: this.props.cell || Cell,
      skeleton: this.props.skeleton || Skeleton
    };
  }
  getDataKeys() {
    let keys = /* @__PURE__ */ new Set();
    for (const data of this.props.data) {
      for (const key2 in data) {
        keys.add(key2);
      }
    }
    return Array.from(keys);
  }
  getColumns() {
    const { columns, padding } = this.getConfig();
    const widths = columns.map((propsOrKey) => {
      const props = typeof propsOrKey === "object" ? propsOrKey : { key: propsOrKey, align: "left" };
      const key2 = props.key;
      const header = String(key2).length;
      const data = this.props.data.map((data2) => {
        const value = data2[key2];
        if (value == void 0 || value == null)
          return 0;
        return String(value).length;
      });
      const width = Math.max(...data, header) + padding * 2;
      return {
        column: key2,
        width,
        key: String(key2),
        align: props.align ?? "left"
      };
    });
    return widths;
  }
  getHeadings() {
    const columns = this.getConfig().columns.map((c) => typeof c === "object" ? c.key : c);
    const headings = columns.reduce((acc, column) => ({ ...acc, [column]: column }), {});
    return headings;
  }
  render() {
    const columns = this.getColumns();
    const headings = this.getHeadings();
    return (0, import_jsx_runtime.jsxs)(Box_default, { flexDirection: "column", children: [this.header({ key: "header", columns, data: {} }), this.heading({ key: "heading", columns, data: headings }), this.props.data.map((row2, index) => {
      const key2 = `row-${(0, import_object_hash.sha1)(row2)}-${index}`;
      return (0, import_jsx_runtime.jsxs)(Box_default, { flexDirection: "column", children: [this.separator({ key: `separator-${key2}`, columns, data: {} }), this.data({ key: `data-${key2}`, columns, data: row2 })] }, key2);
    }), this.footer({ key: "footer", columns, data: {} })] });
  }
};
function row(config) {
  const skeleton = config.skeleton;
  return (props) => (0, import_jsx_runtime.jsxs)(Box_default, { flexDirection: "row", children: [(0, import_jsx_runtime.jsx)(skeleton.component, { children: skeleton.left }), ...intersperse(
    (i2) => {
      const key2 = `${props.key}-hseparator-${i2}`;
      return (0, import_jsx_runtime.jsx)(skeleton.component, { children: skeleton.cross }, key2);
    },
    props.columns.map((column, colI) => {
      const value = props.data[column.column];
      if (value == void 0 || value == null) {
        const key2 = `${props.key}-empty-${column.key}`;
        return (0, import_jsx_runtime.jsx)(config.cell, { column: colI, children: skeleton.line.repeat(column.width) }, key2);
      } else {
        const key2 = `${props.key}-cell-${column.key}`;
        const spaces = column.width - String(value).length;
        let ml;
        let mr;
        if (column.align === "left") {
          ml = config.padding;
          mr = spaces - ml;
        } else if (column.align === "center") {
          ml = Math.floor(spaces / 2);
          mr = Math.ceil(spaces / 2);
        } else {
          mr = config.padding;
          ml = spaces - mr;
        }
        return (0, import_jsx_runtime.jsx)(config.cell, { column: colI, children: `${skeleton.line.repeat(ml)}${String(value)}${skeleton.line.repeat(mr)}` }, key2);
      }
    })
  ), (0, import_jsx_runtime.jsx)(skeleton.component, { children: skeleton.right })] });
}
function Header(props) {
  return (0, import_jsx_runtime.jsx)(Text, { bold: true, color: "blue", children: props.children });
}
function Cell(props) {
  return (0, import_jsx_runtime.jsx)(Text, { children: props.children });
}
function Skeleton(props) {
  return (0, import_jsx_runtime.jsx)(Text, { bold: true, children: props.children });
}
function intersperse(intersperser, elements) {
  let interspersed = elements.reduce((acc, element, index) => {
    if (acc.length === 0)
      return [element];
    return [...acc, intersperser(index), element];
  }, []);
  return interspersed;
}

// src/components/DeviceTable.tsx
var import_safe2 = __toESM(require_index_safe2(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
import { getEnumMemberName as getEnumMemberName3 } from "zwave-js";
function getDeviceType(cls) {
  if (!cls)
    return "unknown";
  const deviceType = cls.specific.zwavePlusDeviceType;
  if (deviceType)
    return deviceType;
  const hasSpecificDeviceClass = cls.specific.key !== 0;
  if (hasSpecificDeviceClass)
    return cls.specific.label;
  return cls.generic.label;
}
function getCustomName(node) {
  return [node.name, node.location && `(${node.location})`].filter((x) => !!x).join(" ");
}
function getModel(node) {
  var _a2, _b;
  const mfg = (_a2 = node.deviceConfig) == null ? void 0 : _a2.manufacturer;
  const model = node.label;
  const desc = (_b = node.deviceConfig) == null ? void 0 : _b.description;
  return [mfg, model, desc].filter((x) => !!x).join(" ");
}
var okText = "\u2713";
var nokText = "\u2717";
var statusTexts = {
  Unknown: ["?", "gray"],
  Alive: [okText, "greenBright"],
  Dead: [nokText, "red"],
  Awake: ["awake", "blueBright"],
  Asleep: ["asleep", "yellow"]
};
var interviewTexts = {
  None: ["\u2588\u2B1D\u2B1D\u2B1D", "gray"],
  ProtocolInfo: ["\u2588\u2588\u2B1D\u2B1D", "gray"],
  NodeInfo: ["\u2588\u2588\u2588\u2B1D", "gray"],
  CommandClasses: ["\u2588\u2588\u2588\u2588", "gray"],
  Complete: [okText, "green"]
};
var unknownText = "(unknown)";
var Cell2 = ({
  children,
  column
}) => {
  if (column === 1 && typeof children === "string" && children.trim() === unknownText) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
      color: "gray",
      children
    });
  } else if (column === 3 && typeof children === "string" && children.trim().length === 1) {
    const trimmed = children.trim();
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
      bold: true,
      color: trimmed === okText ? "green" : "red",
      children
    });
  } else if (column === 4 && typeof children === "string" && children.trim().length === 1) {
    const originalLength = children.length;
    const trimmed = children.trim();
    const status = statusTexts[import_safe2.NodeStatus[trimmed]];
    if (status) {
      const newLength = status[0].length;
      const padL = " ".repeat(
        Math.floor((originalLength - newLength) / 2)
      );
      const padR = " ".repeat(originalLength - newLength - padL.length);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        bold: true,
        color: status[1],
        children: [
          padL,
          status[0],
          padR
        ]
      });
    }
  } else if (column === 5 && typeof children === "string" && children.trim().length === 1) {
    const originalLength = children.length;
    const trimmed = children.trim();
    const stage = parseInt(trimmed);
    const text = interviewTexts[getEnumMemberName3(
      import_safe2.InterviewStage,
      stage
    )];
    if (text) {
      const newLength = text[0].length + (stage < import_safe2.InterviewStage.Complete ? 2 : 0);
      const padL = " ".repeat(
        Math.floor((originalLength - newLength) / 2)
      );
      const padR = " ".repeat(originalLength - newLength - padL.length);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            children: padL
          }),
          stage < import_safe2.InterviewStage.Complete && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            color: "greenBright",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
                type: "dots"
              }),
              " "
            ]
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            bold: stage === import_safe2.InterviewStage.Complete,
            color: text == null ? void 0 : text[1],
            children: [
              text == null ? void 0 : text[0],
              padR
            ]
          })
        ]
      });
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children
  });
};
var DeviceTable = (props) => {
  const columns = [
    { key: "#", align: "right" },
    { key: "Model" },
    { key: "Type", align: "center" },
    { key: "Ready", align: "center" },
    { key: "Status", align: "center" },
    { key: "Interview", align: "center" }
  ];
  const data = props.devices.map((node) => ({
    "#": node.id,
    Model: getCustomName(node) || getModel(node) || unknownText,
    Type: getDeviceType(node.deviceClass),
    Ready: node.ready ? "\u2713" : "\u2717",
    Status: node.status,
    Interview: node.interviewStage
  }));
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Table, {
    data,
    cell: Cell2,
    columns
  });
};

// src/components/DeviceDetailsController.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var DeviceDetailsController = ({ node }) => {
  const { showSuccess, showError } = useDialogs();
  const { navigate } = useNavigation();
  const forceRerender = useForceRerender();
  (0, import_react39.useEffect)(() => {
    const addNodeEventHandlers = (node2) => {
      node2.on("interview started", forceRerender).on("interview completed", forceRerender).on("ready", forceRerender).on("alive", forceRerender).on("dead", forceRerender).on("sleep", forceRerender).on("wake up", forceRerender).on("interview started", forceRerender).on("interview stage completed", forceRerender).on("interview completed", forceRerender);
    };
    const removeNodeEventHandlers = (node2) => {
      node2.off("interview started", forceRerender).off("interview completed", forceRerender).off("ready", forceRerender).off("alive", forceRerender).off("dead", forceRerender).off("sleep", forceRerender).off("wake up", forceRerender).off("interview started", forceRerender).off("interview stage completed", forceRerender).off("interview completed", forceRerender);
    };
    if (node)
      addNodeEventHandlers(node);
    return () => {
      if (node)
        removeNodeEventHandlers(node);
    };
  }, [node]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    flexDirection: "column",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CommandPalette, {
        label: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "blueBright",
          bold: true,
          children: "Actions"
        }),
        commands: [
          {
            label: "Change RF region",
            hotkey: "r",
            onPress: () => {
              navigate(11 /* ControllerSetRegion */);
            }
          }
        ]
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeviceTable, {
        devices: [node]
      })
    ]
  });
};

// src/components/DeviceDetailsEndNode.tsx
var import_react40 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var DeviceDetailsEndNode = ({
  node
}) => {
  const { showSuccess, showError } = useDialogs();
  const forceRerender = useForceRerender();
  (0, import_react40.useEffect)(() => {
    const addNodeEventHandlers = (node2) => {
      node2.on("interview started", forceRerender).on("interview completed", forceRerender).on("ready", forceRerender).on("alive", forceRerender).on("dead", forceRerender).on("sleep", forceRerender).on("wake up", forceRerender).on("interview started", forceRerender).on("interview stage completed", forceRerender).on("interview completed", forceRerender);
    };
    const removeNodeEventHandlers = (node2) => {
      node2.off("interview started", forceRerender).off("interview completed", forceRerender).off("ready", forceRerender).off("alive", forceRerender).off("dead", forceRerender).off("sleep", forceRerender).off("wake up", forceRerender).off("interview started", forceRerender).off("interview stage completed", forceRerender).off("interview completed", forceRerender);
    };
    if (node)
      addNodeEventHandlers(node);
    return () => {
      if (node)
        removeNodeEventHandlers(node);
    };
  }, [node]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    flexDirection: "column",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CommandPalette, {
        label: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "blueBright",
          bold: true,
          children: "Actions"
        }),
        commands: [
          {
            label: "Ping",
            hotkey: "p",
            onPress: async () => {
              const result = await node.ping();
              if (result) {
                showSuccess("Ping succeeded");
              } else {
                showError("Ping failed");
              }
            }
          },
          {
            label: "Re-Interview",
            hotkey: "i",
            onPress: () => {
              void node.refreshInfo().catch(() => {
              });
            }
          }
        ]
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeviceTable, {
        devices: [node]
      })
    ]
  });
};

// src/hooks/useZWaveNode.ts
function useZWaveNode(id) {
  const { driver } = useDriver();
  if (!driver.ready)
    return;
  return driver.controller.nodes.get(id);
}

// src/lib/menu.tsx
import { libVersion } from "zwave-js";

// src/components/USBPathInfo.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var USBPathInfo = () => {
  const { usbPath } = useGlobals();
  return usbPath ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    bold: false,
    dimColor: true,
    children: usbPath
  }) : null;
};

// src/lib/menu.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ToggleLogMenuItem = () => {
  const { logVisible, setLogVisible } = useGlobals();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
    hotkey: "l",
    label: logVisible ? "hide log" : "show log",
    color: logVisible ? "red" : "green",
    onPress: () => {
      setLogVisible((e) => !e);
    }
  });
};
var toggleLogMenuItem = {
  location: "bottomCenter",
  item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToggleLogMenuItem, {})
};
var ExitMenuItem = () => {
  const { navigate } = useNavigation();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
    hotkey: "x",
    modifiers: ["ctrl"],
    label: "exit",
    onPress: () => navigate(12 /* ConfirmExit */)
  });
};
var exitMenuItem = {
  location: "bottomRight",
  item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ExitMenuItem, {}),
  compareTo: () => 1
};
var DestroyDriverMenuItem = () => {
  const { navigate } = useNavigation();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
    hotkey: "y",
    label: "destroy driver",
    onPress: () => navigate(3 /* DestroyingDriver */)
  });
};
var destroyDriverMenuItem = {
  location: "bottomRight",
  item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DestroyDriverMenuItem, {})
};
var RunScriptMenuItem = (props) => {
  const { navigate } = useNavigation();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
    hotkey: "r",
    modifiers: ["ctrl"],
    label: "run script",
    onPress: props.onPress
  });
};
function createRunScriptMenuItem(onPress) {
  return {
    location: "topRight",
    item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RunScriptMenuItem, {
      onPress
    })
  };
}
var defaultMenuItems = [
  {
    location: "topLeft",
    item: "Z-Wave JS"
  },
  {
    location: "topLeft",
    item: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      bold: false,
      dimColor: true,
      children: [
        "v",
        libVersion
      ]
    })
  },
  {
    location: "topLeft",
    item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(USBPathInfo, {})
  }
];

// src/pages/DeviceDetails.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var DeviceDetailsPage = (props) => {
  const { navigate } = useNavigation();
  const deviceMenuItem = {
    location: "bottomLeft",
    item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
      hotkey: "escape",
      label: "Overview",
      onPress: () => navigate(4 /* DeviceOverview */)
    })
  };
  useMenu([
    deviceMenuItem,
    toggleLogMenuItem,
    destroyDriverMenuItem,
    exitMenuItem
  ]);
  const node = useZWaveNode(props.nodeId);
  (0, import_react41.useEffect)(() => {
    if (!node)
      navigate(4 /* DeviceOverview */);
  }, [node, navigate]);
  if (!node)
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
  if (node.isControllerNode)
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeviceDetailsController, {
      node
    });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeviceDetailsEndNode, {
    node
  });
};

// src/pages/DeviceOverview.tsx
var import_react42 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var DeviceOverviewPage = () => {
  const { driver } = useDriver();
  const forceRerender = useForceRerender();
  const { queryInput, showError } = useDialogs();
  const { navigate } = useNavigation();
  useMenu([toggleLogMenuItem, destroyDriverMenuItem, exitMenuItem]);
  const [maxRows, setMaxRows] = (0, import_react42.useState)(10);
  const [nodeIDs, setNodeIDs] = (0, import_react42.useState)([
    ...driver.controller.nodes.keys()
  ]);
  const nodes = nodeIDs.map((id) => driver.controller.nodes.get(id)).filter((x) => !!x);
  (0, import_react42.useEffect)(() => {
    const updateIDs = () => {
      setNodeIDs([...driver.controller.nodes.keys()]);
    };
    const addNodeEventHandlers = (node) => {
      node.on("interview started", forceRerender).on("interview completed", forceRerender).on("ready", forceRerender).on("alive", forceRerender).on("dead", forceRerender).on("sleep", forceRerender).on("wake up", forceRerender).on("interview started", forceRerender).on("interview stage completed", forceRerender).on("interview completed", forceRerender);
    };
    const removeNodeEventHandlers = (node) => {
      node.off("interview started", forceRerender).off("interview completed", forceRerender).off("ready", forceRerender).off("alive", forceRerender).off("dead", forceRerender).off("sleep", forceRerender).off("wake up", forceRerender).off("interview started", forceRerender).off("interview stage completed", forceRerender).off("interview completed", forceRerender);
    };
    const nodeAdded = (node) => {
      updateIDs();
      addNodeEventHandlers(node);
    };
    const nodeRemoved = (node) => {
      updateIDs();
      removeNodeEventHandlers(node);
    };
    driver.controller.on("node added", nodeAdded);
    driver.controller.on("node removed", nodeRemoved);
    for (const node of driver.controller.nodes.values()) {
      addNodeEventHandlers(node);
    }
    return () => {
      driver.controller.off("node added", nodeAdded);
      driver.controller.off("node removed", nodeRemoved);
      for (const node of driver.controller.nodes.values()) {
        removeNodeEventHandlers(node);
      }
    };
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    flexDirection: "column",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CommandPalette, {
        label: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "blueBright",
          bold: true,
          children: "Devices"
        }),
        commands: [
          {
            label: "Select",
            hotkey: "return",
            onPress: async () => {
              const nodeId = await queryInput(
                "Select \u2192 Node ID",
                { inline: true }
              );
              if (!nodeId)
                return;
              const nodeIdNum = parseInt(nodeId, 10);
              if (!Number.isNaN(nodeIdNum) && nodeIDs.includes(nodeIdNum)) {
                navigate(5 /* DeviceDetails */, {
                  nodeId: nodeIdNum
                });
              } else {
                showError("Node not found");
              }
            }
          },
          {
            label: "Include",
            hotkey: "+",
            onPress: () => {
              navigate(6 /* IncludeNode */);
            }
          },
          {
            label: "Exclude",
            hotkey: "-",
            onPress: () => {
              navigate(8 /* ExcludeNode */);
            }
          },
          {
            label: "Replace failed",
            hotkey: "r",
            onPress: async () => {
              const nodeId = await queryInput(
                "Replace failed \u2192 Node ID",
                { inline: true }
              );
              if (!nodeId)
                return;
              const nodeIdNum = parseInt(nodeId, 10);
              if (!Number.isNaN(nodeIdNum) && nodeIDs.includes(nodeIdNum)) {
                navigate(9 /* ReplaceFailedNode */, {
                  nodeId: nodeIdNum
                });
              } else {
                showError("Node not found");
              }
            }
          },
          {
            label: "Remove failed",
            hotkey: "f",
            onPress: async () => {
              const nodeId = await queryInput(
                "Remove failed \u2192 Node ID",
                { inline: true }
              );
              if (!nodeId)
                return;
              const nodeIdNum = parseInt(nodeId, 10);
              if (!Number.isNaN(nodeIdNum) && nodeIDs.includes(nodeIdNum)) {
                navigate(10 /* RemoveFailedNode */, {
                  nodeId: nodeIdNum
                });
              } else {
                showError("Node not found");
              }
            }
          }
        ]
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DeviceTable, {
        devices: nodes
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
        paddingLeft: 1,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            color: "gray",
            children: [
              "Total",
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                color: "white",
                bold: true,
                children: nodeIDs.length
              }),
              " ",
              "devices."
            ]
          }),
          nodeIDs.length > maxRows && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            color: "gray",
            children: [
              "Use ",
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
                hotkey: "downArrow"
              }),
              " and",
              " ",
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
                hotkey: "upArrow"
              }),
              " to scroll."
            ]
          })
        ]
      })
    ]
  });
};

// src/pages/ExcludeNode.tsx
var import_shared2 = __toESM(require_build(), 1);
var import_react43 = __toESM(require_react(), 1);
import { ExclusionStrategy } from "zwave-js";
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ExcludeNodePage = (props) => {
  const { driver } = useDriver();
  const { navigate } = useNavigation();
  const { showError, showSuccess } = useDialogs();
  const [message, setMessage] = (0, import_react43.useState)("Starting exclusion...");
  use_input_default(async (input, key2) => {
    if (key2.escape) {
      await driver.controller.stopExclusion();
      navigate(4 /* DeviceOverview */);
    }
  });
  (0, import_react43.useEffect)(() => {
    (async () => {
      try {
        const result = await driver.controller.beginExclusion({
          strategy: ExclusionStrategy.DisableProvisioningEntry
        });
        if (result) {
          setMessage(
            "Exclusion started, push the button on the device to exclude it."
          );
        } else {
          showError("Failed to start exclusion!");
          navigate(4 /* DeviceOverview */);
        }
      } catch (e) {
        showError(`Failed to start exclusion: ${(0, import_shared2.getErrorMessage)(e)}`);
        navigate(4 /* DeviceOverview */);
      }
    })();
  }, []);
  useControllerEvent("exclusion failed", () => {
    showError("Exclusion failed!");
    navigate(4 /* DeviceOverview */);
  });
  useControllerEvent("node removed", (node) => {
    showSuccess(`Node ${node.id} was removed!`);
    navigate(4 /* DeviceOverview */);
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Center, {
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            color: "red",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
              type: "dots"
            })
          }),
          " ",
          message
        ]
      }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        dimColor: true,
        children: [
          "Press ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            bold: true,
            children: "ESCAPE"
          }),
          " to cancel."
        ]
      })
    ]
  });
};

// src/pages/IncludeNode.tsx
var import_shared3 = __toESM(require_build(), 1);
var import_react44 = __toESM(require_react(), 1);
import { InclusionStrategy } from "zwave-js";
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var inclusionStrategies = [
  {
    label: "Default",
    value: InclusionStrategy.Default
  },
  {
    label: "Security S0 (legacy)",
    value: InclusionStrategy.Security_S0
  },
  {
    label: "No Encryption",
    value: InclusionStrategy.Insecure
  }
];
var IncludeNodePage = () => {
  const { driver } = useDriver();
  const { navigate } = useNavigation();
  const { showError, queryInput } = useDialogs();
  const [step, setStep] = (0, import_react44.useState)(0 /* SelectStrategy */);
  use_input_default(async (input, key2) => {
    if (key2.escape) {
      await driver.controller.stopInclusion();
      navigate(4 /* DeviceOverview */);
    }
  });
  useControllerEvent("inclusion failed", () => {
    showError("Inclusion failed!");
    navigate(4 /* DeviceOverview */);
  });
  useControllerEvent("node found", (node) => {
    navigate(7 /* BootstrappingNode */, { nodeId: node.id });
  });
  const selectStrategy = (0, import_react44.useCallback)(
    async (strategy) => {
      setStep(1 /* PushDaButton */);
      try {
        const result = await driver.controller.beginInclusion({
          strategy: strategy.value,
          userCallbacks: {
            async grantSecurityClasses(requested) {
              return requested;
            },
            async validateDSKAndEnterPIN(dsk) {
              const pin = await queryInput(
                `Please enter S2 PIN and verify DSK: _____${dsk}`
              );
              return pin || false;
            },
            async abort() {
              navigate(4 /* DeviceOverview */);
            }
          }
        });
        if (result) {
          setStep(1 /* PushDaButton */);
        } else {
          showError("Failed to start inclusion!");
          navigate(4 /* DeviceOverview */);
        }
      } catch (e) {
        showError(`Failed to start inclusion: ${(0, import_shared3.getErrorMessage)(e)}`);
        navigate(4 /* DeviceOverview */);
      }
    },
    [driver.controller]
  );
  switch (step) {
    case 0 /* SelectStrategy */:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
          flexDirection: "column",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
              children: "Select the inclusion strategy:"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectInput_default, {
              items: inclusionStrategies,
              onSelect: selectStrategy
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
              dimColor: true,
              children: [
                "Press ",
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                  bold: true,
                  children: "ESCAPE"
                }),
                " to cancel."
              ]
            })
          ]
        })
      });
    case 1 /* PushDaButton */:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Center, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                color: "green",
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
                  type: "dots"
                })
              }),
              " ",
              "Inclusion started, push the button on the device to include it."
            ]
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            dimColor: true,
            children: [
              "Press ",
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                bold: true,
                children: "ESCAPE"
              }),
              " to cancel."
            ]
          })
        ]
      });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: "We shouldn't be here!"
  });
};

// src/pages/Prepare.tsx
var import_react45 = __toESM(require_react(), 1);

// src/components/Logo.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var Logo = () => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    color: "greenBright",
    children: `
\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557        \u2588\u2588\u2557    \u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557          \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557
\u255A\u2550\u2550\u2588\u2588\u2588\u2554\u255D        \u2588\u2588\u2551    \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557 \u2588\u2588\u2551   \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D          \u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255D
  \u2588\u2588\u2588\u2554\u255D  \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551 \u2588\u2588\u2551   \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2557            \u2588\u2588\u2551 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557
 \u2588\u2588\u2588\u2554\u255D   \u255A\u2550\u2550\u2550\u2550\u255D \u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551 \u255A\u2588\u2588\u2557 \u2588\u2588\u2554\u255D \u2588\u2588\u2554\u2550\u2550\u255D       \u2588\u2588   \u2588\u2588\u2551 \u255A\u2550\u2550\u2550\u2550\u2588\u2588\u2551
\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557        \u255A\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255D \u2588\u2588\u2551  \u2588\u2588\u2551  \u255A\u2588\u2588\u2588\u2588\u2554\u255D  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557     \u255A\u2588\u2588\u2588\u2588\u2588\u2554\u255D \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551
\u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D         \u255A\u2550\u2550\u255D\u255A\u2550\u2550\u255D  \u255A\u2550\u255D  \u255A\u2550\u255D   \u255A\u2550\u2550\u2550\u255D   \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D      \u255A\u2550\u2550\u2550\u2550\u255D  \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u255D
`.trim()
  });
};

// src/pages/Prepare.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var PreparePage = (props) => {
  const { usbPath } = useGlobals();
  const { navigate } = useNavigation();
  const [visible, setVisible] = (0, import_react45.useState)(false);
  useMenu([
    toggleLogMenuItem,
    {
      location: "bottomRight",
      item: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
        hotkey: "o",
        label: "options",
        onPress: () => {
          navigate(1 /* SetUSBPath */);
        }
      })
    },
    exitMenuItem
  ]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
    alignSelf: "center",
    flexDirection: "column",
    alignItems: "center",
    children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Logo, {}),
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
        children: " "
      }),
      usbPath ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            dimColor: true,
            children: "Ready to "
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(HotkeyLabel, {
            hotkey: "s",
            label: "START",
            color: "green",
            onPress: () => {
              navigate(2 /* StartingDriver */);
            }
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
            dimColor: true,
            children: " the driver."
          })
        ]
      }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
        children: "Select a USB path in the options, then start the driver."
      })
    ]
  });
};

// src/pages/RemoveFailedNode.tsx
var import_react46 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var RemoveFailedNodePage = (props) => {
  const { driver } = useDriver();
  const { navigate } = useNavigation();
  const { showError, showSuccess } = useDialogs();
  (0, import_react46.useEffect)(() => {
    (async () => {
      try {
        await driver.controller.removeFailedNode(props.nodeId);
        showSuccess(`Node ${props.nodeId} removed!`);
      } catch (e) {
        showError(`Failed to remove node: ${e.message}`);
      } finally {
        navigate(4 /* DeviceOverview */);
      }
    })();
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "red",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
            type: "dots"
          })
        }),
        " ",
        "Removing failed node ",
        props.nodeId,
        "..."
      ]
    })
  });
};

// src/pages/ReplaceFailedNode.tsx
var import_shared4 = __toESM(require_build(), 1);
var import_react47 = __toESM(require_react(), 1);
import { InclusionStrategy as InclusionStrategy2 } from "zwave-js";
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var replaceStrategies = [
  {
    label: "Security S2",
    value: InclusionStrategy2.Security_S2
  },
  {
    label: "Security S0",
    value: InclusionStrategy2.Security_S0
  },
  {
    label: "No Encryption",
    value: InclusionStrategy2.Insecure
  }
];
var ReplaceFailedNodePage = (props) => {
  const { driver } = useDriver();
  const { navigate } = useNavigation();
  const { showError, queryInput } = useDialogs();
  const [step, setStep] = (0, import_react47.useState)(0 /* SelectStrategy */);
  use_input_default(async (input, key2) => {
    if (key2.escape) {
      if (step === 1 /* Replacing */) {
        return;
      }
      if (step === 2 /* PushDaButton */) {
        await driver.controller.stopInclusion();
      }
      navigate(4 /* DeviceOverview */);
    }
  });
  useControllerEvent("inclusion failed", () => {
    showError("Inclusion failed!");
    navigate(4 /* DeviceOverview */);
  });
  useControllerEvent("node found", (node) => {
    navigate(7 /* BootstrappingNode */, { nodeId: node.id });
  });
  const selectStrategy = (0, import_react47.useCallback)(
    async (strategy) => {
      setStep(1 /* Replacing */);
      try {
        const result = await driver.controller.replaceFailedNode(
          props.nodeId,
          {
            strategy: strategy.value,
            userCallbacks: {
              async grantSecurityClasses(requested) {
                return requested;
              },
              async validateDSKAndEnterPIN(dsk) {
                const pin = await queryInput(
                  `Please enter S2 PIN and verify DSK: _____${dsk}`
                );
                return pin || false;
              },
              async abort() {
                navigate(4 /* DeviceOverview */);
              }
            }
          }
        );
        if (result) {
          setStep(2 /* PushDaButton */);
        } else {
          showError(
            "Could not replace node - the controller is busy!"
          );
          navigate(4 /* DeviceOverview */);
        }
      } catch (e) {
        showError(
          `Failed to replace node ${props.nodeId}: ${(0, import_shared4.getErrorMessage)(
            e
          )}`
        );
        navigate(4 /* DeviceOverview */);
      }
    },
    [driver.controller]
  );
  switch (step) {
    case 0 /* SelectStrategy */:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
          flexDirection: "column",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
              children: "Select how to include the replacement node:"
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SelectInput_default, {
              items: replaceStrategies,
              onSelect: selectStrategy
            }),
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
              dimColor: true,
              children: [
                "Press ",
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                  bold: true,
                  children: "ESCAPE"
                }),
                " to cancel."
              ]
            })
          ]
        })
      });
    case 1 /* Replacing */:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
              color: "red",
              children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
                type: "dots"
              })
            }),
            " ",
            "The node is being replaced, please wait..."
          ]
        })
      });
    case 2 /* PushDaButton */:
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Center, {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                color: "green",
                children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
                  type: "dots"
                })
              }),
              " ",
              "Ready to include the new device, push the button on the device to include it."
            ]
          }),
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            dimColor: true,
            children: [
              "Press ",
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
                bold: true,
                children: "ESCAPE"
              }),
              " to cancel."
            ]
          })
        ]
      });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
    children: "We shouldn't be here!"
  });
};

// src/pages/StartingDriver.tsx
var import_react48 = __toESM(require_react(), 1);

// src/lib/driver.ts
import path from "path";
import { Driver } from "zwave-js";
async function startDriver(port, options) {
  const driver = new Driver(port, {
    logConfig: {
      enabled: true,
      logToFile: true,
      transports: [options.logTransport]
    },
    securityKeys: {
      S0_Legacy: Buffer.from("0102030405060708090a0b0c0d0e0f10", "hex"),
      S2_Unauthenticated: Buffer.from(
        "5369389EFA18EE2A4894C7FB48347FEA",
        "hex"
      ),
      S2_Authenticated: Buffer.from(
        "656EF5C0F020F3C14238C04A1748B7E1",
        "hex"
      ),
      S2_AccessControl: Buffer.from(
        "31132050077310B6F7032F91C79C2EB8",
        "hex"
      )
    },
    storage: {
      cacheDir: path.join(process.cwd(), "test/cache"),
      lockDir: path.join(process.cwd(), "test/cache/locks")
    },
    allowBootloaderOnly: true
  });
  driver.on("error", options.onError).once("driver ready", () => options.onDriverReady(driver)).once("bootloader ready", () => options.onBootloaderReady(driver));
  await driver.start();
  return driver;
}

// src/pages/StartingDriver.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var StartingDriverPage = () => {
  useMenu([toggleLogMenuItem, exitMenuItem]);
  const { usbPath, logTransport: logTransport2, clearLog: clearLog2 } = useGlobals();
  const { driver, setDriver } = useDriver();
  const { navigate } = useNavigation();
  const { showError } = useDialogs();
  const [message, setMessage] = (0, import_react48.useState)("starting driver");
  const onError = (0, import_react48.useCallback)(
    (e) => {
      showError(e.message);
    },
    [showError]
  );
  const onDriverReady = (0, import_react48.useCallback)((driver2) => {
    navigate(4 /* DeviceOverview */);
  }, []);
  const onBootloaderReady = (0, import_react48.useCallback)((driver2) => {
    setMessage("driver stuck in bootloader mode");
  }, []);
  (0, import_react48.useEffect)(() => {
    if (driver) {
      navigate(4 /* DeviceOverview */);
      return;
    } else if (!usbPath) {
      navigate(0 /* Prepare */);
      return;
    }
    (async () => {
      try {
        clearLog2();
        const driver2 = await startDriver(usbPath, {
          logTransport: logTransport2,
          onError,
          onDriverReady,
          onBootloaderReady
        });
        setDriver(driver2);
        setMessage("initializing");
      } catch (e) {
        navigate(0 /* Prepare */);
        showError(e.message);
      }
    })();
  }, []);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Center, {
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Text, {
          color: "green",
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(build_default, {
            type: "dots"
          })
        }),
        " ",
        message
      ]
    })
  });
};

// src/hooks/useNavigation.ts
var NavigationContext = import_react49.default.createContext(
  {}
);
var useNavigation = () => import_react49.default.useContext(NavigationContext);
function getPageComponent(cliPage) {
  switch (cliPage) {
    case 0 /* Prepare */:
      return PreparePage;
    case 1 /* SetUSBPath */:
      return SetUSBPath;
    case 2 /* StartingDriver */:
      return StartingDriverPage;
    case 3 /* DestroyingDriver */:
      return DestroyingDriverPage;
    case 4 /* DeviceOverview */:
      return DeviceOverviewPage;
    case 5 /* DeviceDetails */:
      return DeviceDetailsPage;
    case 6 /* IncludeNode */:
      return IncludeNodePage;
    case 7 /* BootstrappingNode */:
      return BootstrappingNodePage;
    case 8 /* ExcludeNode */:
      return ExcludeNodePage;
    case 9 /* ReplaceFailedNode */:
      return ReplaceFailedNodePage;
    case 10 /* RemoveFailedNode */:
      return RemoveFailedNodePage;
    case 11 /* ControllerSetRegion */:
      return ControllerSetRegionPage;
    case 12 /* ConfirmExit */:
      return ConfirmExitPage;
  }
  return void 0;
}

// src/hooks/useStdoutDimensions.ts
var import_react50 = __toESM(require_react(), 1);
function useStdoutDimensions() {
  const { stdout } = use_stdout_default();
  const [dimensions, setDimensions] = (0, import_react50.useState)([
    stdout.columns,
    stdout.rows
  ]);
  (0, import_react50.useEffect)(() => {
    const handler = () => setDimensions([stdout.columns, stdout.rows]);
    stdout.on("resize", handler);
    return () => {
      stdout.off("resize", handler);
    };
  }, [stdout]);
  return dimensions;
}

// src/lib/debounce.ts
function debounce(fn, delay) {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(fn, delay, ...args);
  };
}

// src/lib/logging.ts
var import_core2 = __toESM(require_build2(), 1);
var import_shared5 = __toESM(require_build(), 1);
var import_winston = __toESM(require_winston(), 1);
import { Writable } from "stream";
function createLogTransport(stream) {
  return new import_winston.default.transports.Stream({
    stream,
    format: (0, import_core2.createDefaultTransportFormat)(true, true)
  });
}
var LinesBuffer = class extends import_shared5.TypedEventEmitter {
  constructor(maxSize) {
    super();
    this.maxSize = maxSize;
    const _lines = [];
    let incomplete = "";
    const that = this;
    this._stream = new Writable({
      write(chunk, encoding, callback) {
        const newLines = (chunk.toString() + incomplete).split("\n");
        incomplete = newLines.pop();
        _lines.push(...newLines);
        if (_lines.length > maxSize) {
          _lines.splice(0, _lines.length - maxSize);
        }
        that.emit("change");
        callback();
      }
    });
    this._lines = _lines;
  }
  get stream() {
    return this._stream;
  }
  get size() {
    return this._lines.length;
  }
  getView(start, end) {
    return this._lines.slice(start, end);
  }
  clear() {
    this._lines.splice(0, this._lines.length);
    this.emit("change");
  }
};

// src/cli.tsx
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
process.on("unhandledRejection", (err2) => {
  throw err2;
});
process.stdin.setMaxListeners(100);
var MIN_ROWS = 30;
var logBuffer = new LinesBuffer(1e4);
var logTransport = createLogTransport(logBuffer.stream);
var clearLog = () => logBuffer.clear();
var autostart = process.argv.includes("--start");
var CLI = () => {
  const [columns, rows] = useStdoutDimensions();
  const [layout, setLayout] = (0, import_react51.useState)(
    columns >= 180 ? "horizontal" : "vertical"
  );
  (0, import_react51.useEffect)(() => {
    setLayout(columns >= 180 ? "horizontal" : "vertical");
  }, [columns, setLayout]);
  const [usbPath, setUSBPath] = (0, import_react51.useState)("/dev/ttyUSB0");
  const driver = (0, import_react51.useRef)();
  const setDriver = (0, import_react51.useCallback)((d) => {
    driver.current = d;
  }, []);
  const [logVisible, setLogVisible] = (0, import_react51.useState)(false);
  const setLogVisibleDebounced = (0, import_react51.useCallback)(debounce(setLogVisible, 50), [
    setLogVisible
  ]);
  const [cliPage, setCLIPage] = (0, import_react51.useState)({
    page: usbPath && autostart ? 2 /* StartingDriver */ : 0 /* Prepare */,
    props: {}
  });
  const [prevCliPage, setPrevCLIPage] = (0, import_react51.useState)();
  const navigate = (0, import_react51.useCallback)(
    (to, pageProps) => {
      setPrevCLIPage(cliPage);
      setCLIPage({ page: to, props: pageProps });
    },
    [cliPage, setCLIPage, setPrevCLIPage]
  );
  const back = (0, import_react51.useCallback)(() => {
    if (prevCliPage) {
      setCLIPage(prevCliPage);
      setPrevCLIPage(void 0);
      return true;
    }
    return false;
  }, [prevCliPage, setCLIPage, setPrevCLIPage]);
  const [modalState, setModalState] = (0, import_react51.useState)();
  const showMessage = (0, import_react51.useCallback)(
    (message, color) => {
      return new Promise((resolve) => {
        setModalState({
          type: "message",
          message,
          color,
          onSubmit: () => {
            setModalState(void 0);
            resolve();
          }
        });
      });
    },
    [setModalState]
  );
  const showError = (0, import_react51.useCallback)(
    (message) => showMessage(message, "red"),
    [showMessage]
  );
  const showWarning = (0, import_react51.useCallback)(
    (message) => showMessage(message, "yellow"),
    [showMessage]
  );
  const showSuccess = (0, import_react51.useCallback)(
    (message) => showMessage(message, "green"),
    [showMessage]
  );
  const queryInput = (0, import_react51.useCallback)(
    (message, options = {}) => {
      const { initial, inline = false } = options;
      return new Promise((resolve) => {
        setModalState({
          type: inline ? "queryInline" : "query",
          message,
          initial,
          onSubmit: (value) => {
            setModalState(void 0);
            resolve(value);
          },
          onCancel: () => {
            setModalState(void 0);
            resolve(void 0);
          }
        });
      });
    },
    [setModalState]
  );
  const runScript = async () => {
    const path2 = await queryInput("Script path");
    if (!path2)
      return;
    let script;
    try {
      script = await import(`${path2}?t=${Date.now()}`);
    } catch {
      showError(`Could not load script ${path2}`);
      return;
    }
    if (typeof script.default !== "function") {
      showError(
        `Script ${path2} must export a function using "export default"`
      );
      return;
    }
    try {
      await script.default({
        driver: driver.current,
        showSuccess,
        showWarning,
        showError
      });
      showSuccess("Script executed successfully!");
    } catch (e) {
      showError(
        `Error during script execution: ${(0, import_shared6.getErrorMessage)(e, false)}`
      );
      return;
    }
  };
  const [menuItemSlots, updateMenuItems] = useMenuItemSlots([
    ...defaultMenuItems,
    createRunScriptMenuItem(runScript)
  ]);
  const menuVisible = !modalState || modalState.type === "queryInline";
  use_input_default(() => {
  });
  if (rows < MIN_ROWS) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Box_default, {
      height: rows,
      justifyContent: "center",
      alignItems: "center",
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
        children: [
          "Terminal is too small",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            bold: true,
            color: "red",
            children: [
              columns,
              "\xD7",
              rows
            ]
          }),
          ". Please resize it to at least",
          " ",
          /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Text, {
            bold: true,
            color: "green",
            children: [
              columns,
              "\xD7",
              MIN_ROWS
            ]
          }),
          "."
        ]
      })
    });
  }
  const PageComponent = getPageComponent(cliPage.page);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MenuContext.Provider, {
    value: { updateItems: updateMenuItems },
    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(GlobalsContext.Provider, {
      value: {
        usbPath,
        logTransport,
        logVisible,
        setLogVisible: setLogVisibleDebounced,
        clearLog
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(NavigationContext.Provider, {
        value: {
          currentPage: cliPage.page,
          previousPage: prevCliPage == null ? void 0 : prevCliPage.page,
          navigate,
          back
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DriverContext.Provider, {
          value: {
            driver: driver.current,
            setDriver
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DialogsContext.Provider, {
            value: {
              showError,
              showWarning,
              showSuccess,
              queryInput
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Frame, {
              topLabels: menuVisible && menuItemSlots.top,
              bottomLabels: menuVisible && menuItemSlots.bottom,
              height: rows - (process.env.NODE_ENV === "development" ? layout === "horizontal" ? 4 : 10 : 0),
              width: columns,
              paddingY: 1,
              flexDirection: layout === "horizontal" ? "row" : "column",
              alignItems: "stretch",
              justifyContent: "space-between",
              children: [
                (!modalState || modalState.type === "queryInline") && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
                      flexDirection: "column",
                      flexGrow: 1,
                      alignItems: "stretch",
                      children: [
                        cliPage.page === 1 /* SetUSBPath */ && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(SetUSBPath, {
                          path: usbPath,
                          onCancel: () => setCLIPage({
                            page: 0 /* Prepare */
                          }),
                          onSubmit: (path2) => {
                            setUSBPath(path2);
                            setCLIPage({
                              page: 0 /* Prepare */
                            });
                          }
                        }),
                        PageComponent && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(PageComponent, {
                          ...cliPage.props
                        }),
                        (modalState == null ? void 0 : modalState.type) === "queryInline" && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
                          children: [
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Spacer, {}),
                            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(InlineQuery, {
                              onSubmit: modalState.onSubmit,
                              onCancel: modalState.onCancel,
                              initial: modalState.initial,
                              color: modalState.color,
                              children: modalState.message
                            })
                          ]
                        })
                      ]
                    }),
                    logVisible && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(Box_default, {
                      flexDirection: layout === "horizontal" ? "row" : "column",
                      height: layout === "horizontal" ? void 0 : Math.min(
                        Math.floor(
                          rows / 2
                        ),
                        30
                      ),
                      children: [
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Line_default, {
                          orientation: layout === "horizontal" ? "vertical" : "horizontal",
                          borderColor: "gray",
                          borderStyle: "single"
                        }),
                        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Log, {
                          buffer: logBuffer
                        })
                      ]
                    })
                  ]
                }),
                modalState && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
                  children: [
                    modalState.type === "message" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ModalMessage, {
                      onSubmit: modalState.onSubmit,
                      color: modalState.color,
                      children: modalState.message
                    }),
                    modalState.type === "query" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ModalQuery, {
                      onSubmit: modalState.onSubmit,
                      onCancel: modalState.onCancel,
                      initial: modalState.initial,
                      color: modalState.color,
                      children: modalState.message
                    })
                  ]
                })
              ]
            })
          })
        })
      })
    })
  });
};
render_default(/* @__PURE__ */ (0, import_jsx_runtime.jsx)(CLI, {}));
/*!
 * FileStreamRotator
 * Copyright(c) 2012-2017 Holiday Extras.
 * Copyright(c) 2017 Roger C.
 * MIT Licensed
 */
/*!
 * ctr-drbg.js - ctr-drbg implementation for bcrypto
 * Copyright (c) 2019, Christopher Jeffrey (MIT License).
 * https://github.com/bcoin-org/bcrypto
 *
 * Parts of this software are based on google/boringssl:
 *   https://github.com/google/boringssl
 *
 * Resources:
 *   https://csrc.nist.gov/publications/detail/sp/800-90a/archive/2012-01-23
 *   https://github.com/google/boringssl/blob/master/crypto/fipsmodule/rand/ctrdrbg.c
 *   https://github.com/google/boringssl/blob/master/crypto/fipsmodule/rand/internal.h
 *   https://github.com/openssl/openssl/blob/master/crypto/rand/drbg_lib.c
 *   https://github.com/cryptocoinjs/drbg.js/blob/master/ctr.js
 *   https://github.com/netroby/jdk9-dev/blob/master/jdk/src/java.base/share/classes/sun/security/provider/CtrDrbg.java
 */
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.29.4
//# sourceMappingURL=cli.js.map
